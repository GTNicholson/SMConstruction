<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VectorDraw.Generics</name>
    </assembly>
    <members>
        <member name="T:VectorDraw.Generics.BaseObject">
            <summary>
            This is the Base object for the VectorDraw.Generics dll.
            </summary>
        </member>
        <member name="M:VectorDraw.Generics.BaseObject.#ctor">
            <summary>
            Initializes the base object.
            </summary>
        </member>
        <member name="T:VectorDraw.Generics.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:VectorDraw.Generics.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:VectorDraw.Generics.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:VectorDraw.Generics.vdCollectionEditor">
            <summary>
            Internally used to display the form of the default UItype editor for the collections.
            </summary>
        </member>
        <member name="F:VectorDraw.Generics.vdCollectionEditor.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Generics.vdCollectionEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Generics.vdCollectionEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:VectorDraw.Generics.vdCollectionEditor.#ctor(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Initializes the object
            </summary>
            <param name="collection"></param>
            <param name="sorted"></param>
        </member>
        <member name="M:VectorDraw.Generics.vdCollectionEditor.#ctor(VectorDraw.Generics.IvdValueTypeCollection,System.Boolean)">
            <summary>
            Initializes the object.
            </summary>
            <param name="collection"></param>
            <param name="sorted"></param>
        </member>
        <member name="T:VectorDraw.Generics.vdCollectionDialogEditor">
            <summary>
            Internally used to display the default UItype editor for the collections.
            </summary>
        </member>
        <member name="M:VectorDraw.Generics.vdCollectionDialogEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Generics.vdCollectionDialogEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Generics.vdCollectionDialogEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:VectorDraw.Generics.vdCollectionDialogEditor.Sorted">
            <summary>
            Defines if the items in list box will be sorted.Default value is true.
            </summary>
        </member>
        <member name="T:VectorDraw.Generics.vdCollectionDialogEditorNOSorted">
            <summary>
            Internally used to display the default UItype editor for the collections.
            </summary>
        </member>
        <member name="P:VectorDraw.Generics.vdCollectionDialogEditorNOSorted.Sorted">
            <summary>
            Defines if the items in list box will be sorted.Default value is true.
            </summary>
        </member>
        <member name="T:VectorDraw.Generics.IvdValueTypeCollection">
            <summary>
            Interface for some collections.Used internally for communication with UItype editor.
            </summary>
        </member>
        <member name="M:VectorDraw.Generics.IvdValueTypeCollection.SetValue(System.Int32,System.Object)">
            <summary>
            Set the value to the specified index.
            </summary>
            <param name="Index"></param>
            <param name="item"></param>
        </member>
        <member name="T:VectorDraw.Generics.IItemTypeCollection">
            <summary>
            Implements methods for generic collections of specific type.
            </summary>
        </member>
        <member name="P:VectorDraw.Generics.IItemTypeCollection.ItemType">
            <summary>
            Returns the Type of Items in the collection
            </summary>
        </member>
        <member name="T:VectorDraw.Generics.IvdArray">
            <summary>
            The default interface of the vdArray collection object.
            </summary>
        </member>
        <member name="T:VectorDraw.Generics.IListPosition">
            <summary>
            Implements a way to enamurate the items in a collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Generics.IListPosition.SetCurrentIndex(System.Int32)">
            <summary>
            Set the current idex of the collection.
            </summary>
            <param name="index">An integer value representing the zero based index of the collection(less than the collection's size).</param>
        </member>
        <member name="M:VectorDraw.Generics.IListPosition.Start">
            <summary>
            Get the first object in the collection and changes the current index to 0.
            </summary>
            <returns>The first object of the collection.</returns>
        </member>
        <member name="M:VectorDraw.Generics.IListPosition.Last">
            <summary>
            Get the last object in the collection and changes the current index equal to the size-1 of the collection.
            </summary>
            <returns>The last object of the collection.</returns>
        </member>
        <member name="M:VectorDraw.Generics.IListPosition.Next">
            <summary>
            Get the next object of the collection and also increases the current index of the collection.
            </summary>
            <returns>The next object of the collection.</returns>
        </member>
        <member name="M:VectorDraw.Generics.IListPosition.Previous">
            <summary>
            Get the previous object of the collection and also decreases the current index of the collection.
            </summary>
            <returns>The previous object of the collection.</returns>
            <remarks>If the collection reaches the end returns null.</remarks>
        </member>
        <member name="M:VectorDraw.Generics.IListPosition.SetPosition(System.Object)">
            <summary>
            Change the current position of the collection to the index of a given object.
            </summary>
            <param name="entity">An existing object in the collection.</param>
            <returns>True if the object was found and the index was changed.</returns>
            <remarks>If the collection reaches the start returns null.</remarks>
        </member>
        <member name="P:VectorDraw.Generics.IListPosition.Current">
            <summary>
            Get the current object in the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Generics.IListPosition.CurrentIndex">
            <summary>
            Get the current index of the collection.
            </summary>
        </member>
        <member name="T:VectorDraw.Generics.vdArray`1">
            <summary>
            This is the basic template collection.
            </summary>
            <typeparam name="T">The type of the objects that the collection will have.</typeparam>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.#ctor(`0[])">
            <summary>
            Initializes the vdArray object by adding the passed array items.
            </summary>
            <param name="items">Items to be added in the collection</param>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.#ctor">
            <summary>
            The default constractor which initializes the default capacity of the collection to 16.
            </summary>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.#ctor(System.Int32)">
            <summary>
            Initializes the vdArray object with a given capacity.
            </summary>
            <param name="capacity">An integer representing the preallocated memory size of the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"> If the capacity is less than 0.</exception>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.EnsureCapacity(System.Int32)">
            <summary>
            Changes the capacity of the collection to the given value if the existing capacity is less than this value.
            </summary>
            <param name="min">A value representing the new capacity of the collection.</param>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.Resize(System.Int32,System.Boolean,`0)">
            <summary>
            change the size of array.
            </summary>
            <param name="size">New size of collection</param>
            <param name="initialize">If it is true all items in the collection are initialized to their default value.</param>
            <param name="defaultValue">The default value set to new added elements is initialize is true</param>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.Resize(System.Int32,System.Boolean)">
            <summary>
            change the size of array.
            </summary>
            <param name="size">New size of collection</param>
            <param name="initialize">If it is true all items in the collection are initialized to their default value.</param>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.Start">
            <summary>
            Get the first object in the collection and changes the current index to 0.
            </summary>
            <returns>The first object of the collection.</returns>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.Last">
            <summary>
            Get the last object in the collection and changes the current index equal to the size-1 of the collection.
            </summary>
            <returns>The last object of the collection.</returns>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.Next">
            <summary>
            Get the next object of the collection and also increases the current index of the collection.
            </summary>
            <returns>The next object of the collection.</returns>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.Previous">
            <summary>
            Get the previous object of the collection and also decreases the current index of the collection.
            </summary>
            <returns>The previous object of the collection.</returns>
            <remarks>If the collection reaches the end returns null.</remarks>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.SetPosition(System.Object)">
            <summary>
            Change the current position of the collection to the index of a given object.
            </summary>
            <param name="entity">An existing object in the collection.</param>
            <returns>True if the object was found and the index was changed.</returns>
            <remarks>If the collection reaches the start returns null.</remarks>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.SetCurrentIndex(System.Int32)">
            <summary>
            Set the current idex of the collection.
            </summary>
            <param name="index">An integer value representing the zero based index of the collection(less than the collection's size).</param>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.Reverse">
            <summary>
            Changes the order of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the sequence of the elements in a range of the ellements starting from a given index.
            </summary>
            <param name="index">The starting index of the reverse operation.</param>
            <param name="count">The number of items to be reversed.</param>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.RemoveLast">
            <summary>
            Removes the last object of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.last">
            <summary>
            Get the last object of the collection.
            </summary>
            <returns>The last object of the collection.</returns>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.BeforeLast">
            <summary>
            Get the object before the last object of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.IsValidIndex(System.Int32)">
            <summary>
            Checks if the given index is in the range of the collection.
            </summary>
            <param name="index">An integer representing an index of the collection to be checked if it is valid.</param>
            <returns>True if the index is a valid collection index.</returns>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.IsValidInsertIndex(System.Int32)">
            <summary>
            Checks if the given index can be used with <see cref="M:VectorDraw.Generics.vdArray`1.InsertAt(System.Int32,`0)"/> method.
            </summary>
            <param name="index">An integer representing an index of the collection to be checked if it is valid.</param>
            <returns>True if the index is a valid and can be used with <see cref="M:VectorDraw.Generics.vdArray`1.InsertAt(System.Int32,`0)"/> method.</returns>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.IsValidRemoveIndex(System.Int32)">
            <summary>
            Checks if the given index is in the range of the collection.
            </summary>
            <param name="index">An integer representing an index of the collection to be checked if it is valid.</param>
            <returns>True if the index is a valid collection index.</returns>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.RemoveAt(System.Int32)">
            <summary>
            Removes an object from a specified index of the collection.
            </summary>
            <param name="index">The index of the object to be removed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the index is less than 0 or bigger or equal to <see cref="P:VectorDraw.Generics.vdArray`1.Count"/> property. </exception>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.InsertAt(System.Int32,`0)">
            <summary>
            Insert an object at a specified index.
            </summary>
            <param name="index">The index where the object will be inserted.</param>
            <param name="Object">The object to be inserted.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the index is less than 0 or bigger or equal to <see cref="P:VectorDraw.Generics.vdArray`1.Count"/> property.</exception>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.RemoveItem(`0)">
            <summary>
            Removes a specified object from the list.
            </summary>
            <param name="Object">The object to be removed from the collection.</param>
            <returns>True if the object was removed and false if the object was not found.</returns>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.GetObjectRealPosition(`0)">
            <summary>
            Find the index where a specified object is located in the list.
            </summary>
            <param name="Object">The object to find.</param>
            <returns>Returns the index where the object is or -1 if the object is not in the list.</returns>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.MakeIndexDictionary">
            <summary>
            Internally used to speed up Swap method when multiple swap operations must be performed (more than 100). ClearIndexDictionary() method must be called at the end of the swap operations.
            </summary>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.ClearIndexDictionary">
            <summary>
            Internally used to speed up Swap method.
            </summary>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.Swap(`0,`0)">
            <summary>
            Swaps the position of two specified object in the list.
            </summary>
            <param name="Object1">First object required.</param>
            <param name="Object2">Second object required.</param>
            <returns>True if the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.ChangeOrder(`0,System.Boolean)">
            <summary>
            Places an existing object of the collection to the beginning or the end of the list.
            </summary>
            <param name="Object">The object to be placed.</param>
            <param name="ToBack">If this value is true then the object will be placed to the beginning of the list else it will be placed to the end.</param>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.AddRange(VectorDraw.Generics.vdArray{`0})">
            <summary>
            Adds the objects of one list to the end of this list.
            </summary>
            <param name="c">A vdArray collection to be added to this list.</param>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.InsertRange(System.Int32,VectorDraw.Generics.vdArray{`0})">
            <summary>
            Inserts the object of a specified collection to a specified index of this list.
            </summary>
            <param name="index">An index representing the position where the objects will be inserted.</param>
            <param name="c">A vdArray collection to be inserted in this list.</param>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.AddItem(`0)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
            <param name="value">An object to be added to the collection.</param>
            <returns>True if the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.ToString">
            <summary>
            Gets a System.String that represents the element count of vdArray object.
            </summary>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.CopyFrom(System.Object)">
            <summary>
            Copies all objects from a given array to the collection.
            </summary>
            <param name="_array">An array object to retrieve it's objects.</param>
            <exception cref="T:System.Exception">If the _array is not type of <see cref="T:System.Array"/>.</exception>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.CopyTo(System.Array,System.Int32)">
             <summary>
             Copies the collection's object to a specified array starting from a specified index.
             </summary>
             <param name="array">The array where the collection's objects will be copied. The array size must be at list equals to this <see cref="P:VectorDraw.Generics.vdArray`1.Count"/> + index </param>
             <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than the lower bound of array.</exception>
            <exception cref="T:System.ArgumentException">
                 array is multidimensional.  -or- index is equal to or greater than the length
                 of array and this collection has a length greater than 0.  -or- The
                 number of elements in this collection is greater than the available
                 space from index to the end of the destination array.
            </exception>
            <exception cref="T:System.ArrayTypeMismatchException">   
                 The type of items in this collection cannot be cast automatically to the type
                 of the destination array.
            </exception>
            <exception cref="T:System.RankException"> The source System.Array is multidimensional.</exception>
            <exception cref="T:System.InvalidCastException">   
                  At least one element in this collection cannot be cast to the type
                  of destination array.
            </exception>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdArray object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdArray object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.Sort">
             <summary>
             Sorts the elements in an entire collection using the <see cref="T:System.IComparable`1"/>
                 generic interface implementation of each element of the System.Array.
             </summary>
             <exception cref="T:System.InvalidOperationException">One or more elements in array does not implement the <see cref="T:System.IComparable`1"/>  generic interface.</exception>
             <example>
             <para>sort items in a collection of doubles</para>
            <code>
                            vdArray&lt;double&gt; collectionOfDoubles = new vdArray&lt;double&gt;();
                            collectionOfDoubles.AddItem(5);
                            collectionOfDoubles.AddItem(15);
                            collectionOfDoubles.AddItem(2);
                            collectionOfDoubles.AddItem(8);
                            collectionOfDoubles.AddItem(3);
            
                            //sort the items from smaller value to bigger
                            collectionOfDoubles.Sort();
                            //the values will be take the following order
                            //2 ,3, 5, 8, 15
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.Sort(System.Collections.Generic.IComparer{`0})">
             <summary>
              Sorts the elements in a range of elements in an entire collection using the specified
                 <see cref="T:System.Collections.Generic.IComparer`1"/> generic interface.
             </summary>
             <param name="comparer">
             The <see cref="T:System.Collections.Generic.IComparer`1"/> generic interface implementation
                 to use when comparing elements, or null to use the <see cref="T:System.IComparable`1"/>
                 generic interface implementation of each element.
             </param>
             <exception cref="T:System.ArgumentException">
             The implementation of comparer caused an error during the sort. 
             For example, comparer might not return 0 when comparing an item with itself.
             </exception>
             <exception cref="T:System.InvalidOperationException">
             comparer is null, and one or more elements in array does not implement the <see cref="T:System.IComparable`1"/>  generic interface
             </exception>
             <example>
             <para>sort items in a collection of gPoints depend of their distance from an origin point.</para>
            <code>
                             private class OriginComparer : System.Collections.Generic.IComparer&lt;gPoint&gt;
                             {
                                gPoint mOrigin;
                                public OriginComparer(gPoint Origin)
                                {
                                    mOrigin = Origin;
                                }
                                public int Compare(gPoint x, gPoint y)
                                {
                                    if (object.ReferenceEquals(x, y)) return 0;
                                    double dif = x.Distance3D(mOrigin) - y.Distance3D(mOrigin);
                                    if (dif == 0.0d) return 0;
                                    if (dif &gt; 0.0d) return 1;
                                    else return -1;
                                }
                             }
                     
                            vdArray&lt;gPoint&gt; collectionOfPoints = new vdArray&lt;gPoint&gt;();
                            collectionOfPoints.AddItem(new gPoint(5,0,0));
                            collectionOfPoints.AddItem(new gPoint(15, 0, 0));
                            collectionOfPoints.AddItem(new gPoint(2, 0, 0));
                            collectionOfPoints.AddItem(new gPoint(8, 0, 0));
                            collectionOfPoints.AddItem(new gPoint(3, 0, 0));
            
                            //sort the items from smaller to bigger depend of their distance from point(0,0,0)
                            collectionOfPoints.Sort(new OriginComparer(new gPoint(0, 0, 0)));
                            //the values will be take the following order
                            //(2,0,0) ,(3,0,0), (5,0,0), (8,0,0), (15,0,0)
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.SortByKeys(System.Array)">
            <summary>
            Sorts a range of elements of the collection based
                on the keys using the specified System.Collections.IComparer implementation of each key.
            </summary>
            <param name="keys">The one-dimensional System.Array that contains the keys to sort.</param>
        </member>
        <member name="M:VectorDraw.Generics.vdArray`1.SimpleSort">
            <summary>
            Not used 
            </summary>
        </member>
        <member name="P:VectorDraw.Generics.vdArray`1.ArrayItems">
            <summary>
            Get the items of the collection in a returned array.
            </summary>
        </member>
        <member name="P:VectorDraw.Generics.vdArray`1.Count">
            <summary>
            Get the number of items in the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Generics.vdArray`1.Current">
            <summary>
            Get the current object in the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Generics.vdArray`1.CurrentIndex">
            <summary>
            Get the current index of the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Generics.vdArray`1.Item(System.Int32)">
            <summary>
            Get/Set the object at a specified index of the collection.
            </summary>
            <param name="index">The index of the object.</param>
            <returns>The object at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the index is less than 0 or bigger or equal to <see cref="P:VectorDraw.Generics.vdArray`1.Count"/> property.</exception>
        </member>
    </members>
</doc>
