<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VectorDraw.Professional</name>
    </assembly>
    <members>
        <member name="T:VectorDraw.Professional.vdObjects.DocumentRenderGlobalProperties">
            <summary>
            Provides a list of properties used in a vdRender object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.DocumentRenderGlobalProperties.#ctor(System.Boolean)">
            <summary>
            Initialises the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.DocumentRenderGlobalProperties.ResetOpenGLContext">
            <summary>
            Internally used only.
            Release selected OpenGL context in order to be recreated with new  <see cref="P:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.DefaultWindowPixelFormat"/> 
            Must be called just before VectorDraw control is disposed.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.DocumentRenderGlobalProperties.GetEvTxt">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.vdXProperties">
            <summary>
            Implements all functionality for the vdXProperties collection object.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdBaseObject">
            <summary>
            This is the Base object that the most Vectordraw.Profesional objects are inherited from.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.IvdBaseObject">
            <summary>
            This is the Base object that the most Vectordraw.Profesional objects are inherited from.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.IvdBaseObject.Id">
            <summary>
            A unique id used in collection dictionaries for quick searching and removing.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdBaseObject.#ctor">
            <summary>
            The constructor of the vdBase object where the default initialization is commited.
            </summary>
            <remarks>
            This object cannot be directly created but it is used as base for other objects.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdBaseObject.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdBaseObject.Register">
            <summary>
            Register the object handle in to its <see cref="P:VectorDraw.Professional.vdObjects.vdBaseObject.Document"/> handle table.
            </summary>
            <returns>True if the object was succefully registered.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdBaseObject.GetTableDependecies(VectorDraw.Professional.vdCollections.vdLayers,VectorDraw.Professional.vdCollections.vdBlocks,VectorDraw.Professional.vdCollections.vdDimstyles,VectorDraw.Professional.vdCollections.vdLineTypes,VectorDraw.Professional.vdCollections.vdTextstyles,VectorDraw.Professional.vdCollections.vdImages,VectorDraw.Professional.vdCollections.vdHatchPatterns,System.Object,System.Boolean@)">
            <summary>
            Fill the passed collections with all the dependecies of this object.
            </summary>
            <param name="layers">Fill the passed collection with all vdLayer objects that this object depends on.</param>
            <param name="blocks">Fill the passed collection with all vdBlock objects that this object depends on.</param>
            <param name="dimstyles">Fill the passed collection with all vdDimstyle objects that this object depends on.</param>
            <param name="linetypes">Fill the passed collection with all vdLineType objects that this object depends on.</param>
            <param name="textstyles">Fill the passed collection with all vdTextStyle objects that this object depends on.</param>
            <param name="images">Fill the passed collection with all vdImageDef objects that this object depends on.</param>
            <param name="hatchpatterns">Fill the passed collection with all vdHatchPattern objects that this object depends on.</param>
            <param name="breakOnObject">if this object depends on this parameter then the breakObjectFound is set to true.</param>
            <param name="breakObjectFound">This parameter is used in order to break searching methods if the required is found.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdBaseObject.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.
            User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
            <example>
            Implement GetTableDependecies for a custom object derived from a vdFigure and reference a vdTextStyle table 
            <code>
                        public class CustomFigureWithTextStyleRef : vdFigure
                        {
                            private vdTextstyle mTextStyle = null;
                            public vdTextstyle TextStyle
                            {
                                get
                                {
                                    return mTextStyle;
                                }
                                set
                                {
                                    mTextStyle = value;
                                }
                            }
                            ////......................................
                            public override void GetTableDependecies(vdTableDependeciesArgs args)
                            {
                                base.GetTableDependecies(args);
                                if (args.IsObjectFound) return;
                                if (Deleted) return;
                                args.AddItem(TextStyle);
                                if (TextStyle != null) TextStyle.GetTableDependecies(args);
                            }
                            ////............Other method overrides..........................
                        }         
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdBaseObject.ToString">
            <summary>
            Returns a System.String that represents the type of the vdBaseObject.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdBaseObject.SetUnRegisterDocument(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>   
            Select the vdDocument that the object belongs to.The object is marked as DocumentUnregistered.
            </summary>
            <seealso cref="P:VectorDraw.Professional.vdObjects.vdBaseObject.IsDocumentRegister"/>
            <remarks> 
            Use this for temporary objects that will not be writen in the undo-redo list and will not have Handle.
            If the object is added in a collection then they will be marked as Document Register.
            </remarks>
            <param name="document">The vdDocument object that the object belongs to.</param>
            <returns>Returns False if the object already has a document or if the document parameter is null.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdBaseObject.OnDocumentSelected(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            This method is called when the object is inserted in a Document for the first time.
            </summary>
            <param name="document">The document where the object is inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdBaseObject.OnOwnerChanged">
            <summary>
            This method is called when the object's owner is changed.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdBaseObject.RaiseOnAfterModify(System.String)">
            <summary>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"></see> Event of vdDocument object.
            </summary>
            <param name="propertyname">The name of the changed property. </param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdBaseObject.RaiseOnBeforeModify(System.String,System.Object)">
            <summary>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"></see> Event of vdDocument object.
            </summary>
            <param name="propertyname">The name of the changed property.</param>
            <param name="newvalue"> The new value of the property.</param>
            <returns>Returns if the value can be set to the object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdBaseObject.AddHistory(System.String,System.Object)">
            <summary>
            Adds To the Undo History a new Record.
            </summary>
            <param name="propertyName">The name of the property that will be added to the Undo list.</param>
            <param name="Value">The new value of the property.</param>
            <remarks>
            This should be called just before a property of an object is changed.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdBaseObject.AddHistoryEx(System.String,System.Object)">
            <summary>
            Adds To the Undo History a new Record.
            </summary>
            <param name="propertyName">The name of the property that will be added to the Undo list.</param>
            <param name="Value">The old value of the property.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdBaseObject.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdBaseObject.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdBaseObject object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdBaseObject.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            This is the Base object that the most Vectordraw.Profesional objects are inherited from.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdBaseObject.IsDocumentRegister">
            <summary>
            Represents if the object is Registered in a Document.
            </summary>
            <remarks>
            A non registered(value False) object hasn't a handle id and cannot be added in the undo-redo list.
            Default value is False and changes to true when an object is added in a Document.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdBaseObject._TypeName">
            <summary>
            Gets a unique string that represents the type of the object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdBaseObject.Document">
            <summary>
            Gets the vdDocument that the object belongs.
            </summary>
            <seealso cref="M:VectorDraw.Professional.vdObjects.vdBaseObject.SetUnRegisterDocument(VectorDraw.Professional.vdObjects.vdDocument)"/>
            <remarks>
            The object gets a vdDocument when is added in any collection of it.
            Once an Object gets a Document this cannot be changed.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdBaseObject.Owner">
            <summary>
            Gets the object that belongs to.
            </summary>
            <remarks >
            e.g. If an object belongs to a collection this value returns the collection.
            if it is added in more than one collections then returns the first 
            collection that the object was added.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdBaseObject.lunits">
            <summary>
            Get/Set the Linear Units of the object.
            </summary>
            <remarks>
            If the Document of the object is not null returns the Document's units.
            </remarks>
            <seealso cref="T:VectorDraw.Geometry.LUnits"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdBaseObject.aunits">
            <summary>
            Get/Set the Angular Units of the object.
            </summary>
            <remarks>
            If the Document of the object is not null returns the Document's units.
            </remarks>
            <seealso cref="T:VectorDraw.Geometry.AUnits"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdBaseObject.UndoHistory">
            <summary>
            Gets the Undo History object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdBaseObject.SupportUndoWrite">
            <summary>
            Returns true if object can write to Undo.If it is return false object properties are save to UndoHistory.By default return true.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.IvdObjectCollection">
            <summary>
            Provides basic functionality for collection objects.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.IvdObjectCollectionAddItem">
            <summary>
            Provides basic functionality for collection objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.IvdObjectCollectionAddItem.AddItem(System.Object)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="value">The object to be added.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.IvdObjectCollection.RemoveItem(System.Object)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The item to be removed.</param>
            <returns>Returns true if the item was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.IvdObjectCollection.FindItem(System.Object)">
            <summary>
            Searches the collection for a specified object.
            </summary>
            <param name="item">The object to search for into the collection.</param>
            <returns>Returns true if the item exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.IvdObjectCollection.RemoveAll">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.IvdObjectCollection.Item(System.Int32)">
            <summary>
            Retreave a specific item placed at a specified index from the collection.
            </summary>
            <param name="Index">The index where the object is.</param>
            <returns>Returns the object at the specified index.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.IvdObjectCollection.GetObjectRealPosition(System.Object)">
            <summary>
            Find the index where a specified object is located in the list.
            </summary>
            <param name="item">The object to find.</param>
            <returns>Returns the index where the object is or -1 if the object is not in the list.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.IvdObjectCollection.InsertAt(System.Int32,System.Object)">
            <summary>
            Insert an object at a specified index.
            </summary>
            <param name="index">The index where the object will be inserted.</param>
            <param name="item">The object to be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.IvdObjectCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an object from a specified index of the collection.
            </summary>
            <param name="index">The index of the object to be removed.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.IvdObjectCollection.MakeIndexDictionary">
            <summary>
            Creates an Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must be followed by a <see cref="M:VectorDraw.Professional.vdCollections.IvdObjectCollection.ClearIndexDictionary"/> call when the search or swap is finished. </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.IvdObjectCollection.ClearIndexDictionary">
            <summary>
            Clears the Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must follow a <see cref="M:VectorDraw.Professional.vdCollections.IvdObjectCollection.MakeIndexDictionary"/> call when the search or swap is finished. </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.IvdObjectCollection.Count">
            <summary>
            Get the count of items in the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.
            User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.getUniqueTableName(System.String)">
            <summary>
            Creates a unique string for use as name to a vdXProperty object.
            </summary>
            <param name="prefix">A prefix string that will be present to the unique name.</param>
            <returns>Returns a unique string.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.GetNotDeletedItems">
            <summary>
            Get all non deleted objects of the collection.
            </summary>
            <returns>
            Returns a new created collection of vdDimstyle objects 
            that are not set as <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.Deleted"/>.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.ToString">
            <summary>
            Gets a System.String that represents the count of the vdXProperties collection Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.#ctor">
            <summary>
            Initializes the vdXProperties collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.FindItem(VectorDraw.Professional.vdObjects.vdXProperty)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">A vdXProperty object to be checked if it exists in the collection</param>
            <returns>True if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.AddItem(VectorDraw.Professional.vdObjects.vdXProperty)">
            <summary>
            Adds a vdXProperty object to the collection.
            </summary>
            <param name="value">The vdXProperty object to be added to the collection.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAddItem"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterAddItem"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.AddItem(System.String,System.String)">
            <summary>
            Create and add a new vdXproperty with the given parameters.
            </summary>
            <param name="Name">The name of the xproperty.</param>
            <param name="value">It's string value.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.RemoveItem(VectorDraw.Professional.vdObjects.vdXProperty)">
            <summary>
            Removes a specific vdXProperty object from the collection.
            </summary>
            <param name="Object">The vdXProperty object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.RemoveAt(System.Int32)">
            <summary>
            Removes an object from the specified index of the collection.
            </summary>
            <param name="Index">The zero based index.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.InsertAt(System.Int32,VectorDraw.Professional.vdObjects.vdXProperty)">
            <summary>
            Insert a vdXProperty object to a specified index of the collection.
            </summary>
            <param name="Index">The zero based index of the collection where the object will be inserted.</param>
            <param name="Object">The vdXProperty object which will be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.ChangeOrder(VectorDraw.Professional.vdObjects.vdXProperty,System.Boolean)">
            <summary>
            Changes the position of a vdXProperty object to the front or the end of the collection.
            </summary>
            <param name="Object">The vdXProperty object.</param>
            <param name="ToBack">If true moves the object to the beginning of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.MakeIndexDictionary">
            <summary>
            Creates an Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must be followed by a <see cref="M:VectorDraw.Professional.vdCollections.vdXProperties.ClearIndexDictionary"/> call when the search or swap is finished. </remarks>
            <example> For a code example please check topic <see cref="M:VectorDraw.Professional.vdCollections.vdXProperties.swap(VectorDraw.Professional.vdObjects.vdXProperty,VectorDraw.Professional.vdObjects.vdXProperty)"/> Method. </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.ClearIndexDictionary">
            <summary>
            Clears the Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must follow a <see cref="M:VectorDraw.Professional.vdCollections.vdXProperties.MakeIndexDictionary"/> call when the search or swap is finished. </remarks>
            <example> For a code example please check topic <see cref="M:VectorDraw.Professional.vdCollections.vdXProperties.swap(VectorDraw.Professional.vdObjects.vdXProperty,VectorDraw.Professional.vdObjects.vdXProperty)"/> Method. </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.swap(VectorDraw.Professional.vdObjects.vdXProperty,VectorDraw.Professional.vdObjects.vdXProperty)">
            <summary>
            Swaps the position between two different vdXProperty objects existing in the collection.
            </summary>
            <param name="Object1">first object needed.</param>
            <param name="Object2">second object needed.</param>
            <returns>True if the swap operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
            <seealso cref="T:VectorDraw.Professional.vdObjects.vdXProperty.TransformationType"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.Add(System.String)">
            <summary>
            Creates and adds a vdXProperty object to the collection with the specified name.
            </summary>
            <param name="Name">The name of the inserted vdXProperty object.</param>
            <returns>Returns the added vdXProperty object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.FindName(System.String)">
            <summary>
            Search the collection for a vdXProperty with a specified name.
            </summary>
            <param name="Name">The name of the vdXProperty object.</param>
            <returns>Returns the first vdXProperty found with the specified name, null if none found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.FindNameObjects(System.String)">
            <summary>
            Search the collection for a vdXProperty with a specified name.
            </summary>
            <param name="Name">The name of the vdXProperty object.</param>
            <returns>Returns the first vdXProperty found with the specified name, null if none found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.GetSortedXproperties">
            <summary>
            Returns a new vdXpropertis collection containing all the xproperties of this collection with sorted names usefull when exporting to DXF format.
            </summary>
            <returns>Returns a new vdXpropertis collection containing all the xproperties of this collection with sorted names.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.GetFilterData(System.String)">
            <summary>
            Search the collection for vdXProperty objects with a specified name.
            </summary>
            <param name="Name">The name of the vdXProperty object.</param>
            <returns>
            Returns a vdXProperties collection of vdXproperty objects with the specified name.
            or null if none found.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.GetNames">
            <summary>
            Gets all the names of the vdXProperty objects of the collection.
            </summary>
            <returns>Returns an array of strings with the names of all vdXProperty objects of the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdXProperties object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdXproperties object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.RemoveItem(System.Object)">
            <summary>
            Removes an object from the collection.
            </summary>
            <param name="item">The object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.AddItem(System.Object)">
            <summary>
            Adds an object to the collection.
            </summary>
            <param name="value">The object to be added.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.FindItem(System.Object)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">The object required for the search.</param>
            <returns>true if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.VectorDraw#Professional#vdCollections#IvdObjectCollection#Item(System.Int32)">
            <summary>
            Retreave a specific item placed at a specified index from the collection.
            </summary>
            <param name="Index">The index where the object is.</param>
            <returns>Returns the object at the specified index.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.GetObjectRealPosition(System.Object)">
            <summary>
            Find the index where a specified object is located in the list.
            </summary>
            <param name="item">The object to find.</param>
            <returns>Returns the index where the object is or -1 if the object is not in the list.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.InsertAt(System.Int32,System.Object)">
            <summary>
            Insert an object at a specified index.
            </summary>
            <param name="index">The index where the object will be inserted.</param>
            <param name="item">The object to be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdXProperties.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements all functionality for the vdXProperties collection object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdXProperties.ItemType">
            <summary>
            Returns the Type of Items in the collection
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdXProperties.ListPosition">
            <summary>
            Gets the <see cref="T:VectorDraw.Generics.IListPosition"/> interface object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdXProperties.Item(System.Int32)">
            <summary>
            Get a vdXProperty object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The vdXProperty object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdXProperties.Last">
            <summary>
            Returns the last item in the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdXProperties.Item(System.String)">
            <summary>
            Get/Set the <see cref="P:VectorDraw.Professional.vdObjects.vdXProperty.PropValue"/> of the first ocurrence vdXProperty with specific name.
            </summary>
            <param name="name">A name of a vdXproperty to search for in the collection.</param>
            <returns>The <see cref="P:VectorDraw.Professional.vdObjects.vdXProperty.PropValue"/> of the first ocurrence vdXProperty with specific name, or null if the vdXproperty does not exist.</returns>
            <remarks>
            When setting a value then if a vdXProperty with specific name does not exist then a new one is added in the collection.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdXProperties.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.vdEntities">
            <summary>
            Implements the vdEntities collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.GetNotDeletedItems">
            <summary>
            Get all non deleted objects of the collection.
            </summary>
            <returns>Returns a new created collection of vdFigure objects that are not set as <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.Deleted"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.UpdateBounds">
            <summary>
            Mark the Bounding rectangle to be recalcalated during a <see cref="M:VectorDraw.Professional.vdCollections.vdEntities.GetBoundingBox(System.Boolean,System.Boolean)"/> method call.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.Update(System.Boolean)">
            <summary>
            Updates all items in collection.
            </summary>
            <param name="updateBounds">Set it to true in order to force the Bounding rectangle of object to be recalculate.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.ModifyExtents(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Change the extents of the object in WCS.
            </summary>
            <param name="extMin">Minimum extent in WCS</param>
            <param name="extMax">Maximum extent in WCS</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.AddBoxToExtents(VectorDraw.Geometry.Box)">
             <summary>
             Add the parameter box to this Entities Bounding Box.
             </summary>
             <param name="box">The box to be added in World Coordinate System.</param>
            <remarks>If the Entities Bounding Box is Empty then the parameter box is not added.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.InternalGetBoundingBox">
            <summary>
            Internally used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.GetBoundingBox(System.Boolean,System.Boolean)">
            <summary>
            Gets the Bounding Box of all vdFigure objects of the collection.
            </summary>
            <param name="onlyVisible">If is true, only the objects that can be drawn are evaluated</param>
            <param name="recalculate">If is false, returns the the last calculated bounding.</param>
            <returns>A box as a result of adding all Bounding Boxes of all entities of the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.GetBoundingBox(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the Bounding Box of all vdFigure objects of the collection.
            </summary>
            <param name="onlyVisible">If is true, only the objects that can be drawn are evaluated</param>
            <param name="recalculate">If is false, returns the the last calculated bounding.</param>
            <param name="FireMeterProgress">If true then progress meter events are fired.</param>
            <returns>A box as a result of adding all Bounding Boxes of all entities of the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.#ctor">
            <summary>
            Initializes the vdEntities collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.#ctor(VectorDraw.Professional.vdPrimaries.vdFigure[])">
            <summary>
            Initializes a new instance of the object and adds the passed items to this collection.
            </summary>
            <param name="items">An array of <see cref="T:VectorDraw.Professional.vdPrimaries.vdFigure"/> objects.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.EnsureCapacity(System.Int32)">
            <summary>
            Changes the capacity of the collection to the given value if the existing capacity is less than this value.
            </summary>
            <param name="capacity">A value representing the new capacity of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.ToString">
            <summary>
            Gets a System.String that represents the count of the vdEntities collection Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.FindFromId(System.Int32)">
            <summary>
            Gets an object that belongs to collection passing through its ID number.
            </summary>
            <param name="id">A unique id for the object.</param>
            <returns>
            An object that belongs to collection with specified id property.
            Null if the object id does not belong to the collection.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.FindItem(VectorDraw.Professional.vdPrimaries.vdFigure)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">A vdFigure object to be checked if it exists in the collection</param>
            <returns>True if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.AddItems(VectorDraw.Professional.vdPrimaries.vdFigure[])">
            <summary>
            Adds each item in the passed collection to this collection using <see cref="M:VectorDraw.Professional.vdCollections.vdEntities.AddItem(VectorDraw.Professional.vdPrimaries.vdFigure)"/>
            </summary>
            <param name="items">A array of <see cref="T:VectorDraw.Professional.vdPrimaries.vdFigure"/> items to be added in this collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.AddItem(VectorDraw.Professional.vdPrimaries.vdFigure)">
            <summary>
            Adds a vdFigure object to the collection.
            </summary>
            <param name="value">The vdFigure object to be added to the collection.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAddItem"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterAddItem"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.AddItemClone(VectorDraw.Professional.vdPrimaries.vdFigure,System.Boolean)">
            <summary>
            Internally used only.
            Adds the clone of passed object using the same handle.If passed object exists in the handle table, remove it.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.EraseAll">
            <summary>
            Sets the <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.Deleted"/> property to true to all vdFigure objects of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
            <remarks>It clears the dictionary and also sets all handles to 0. The owner is also set to null. This is not written to UNDO/REDO lists.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.RemoveItem(VectorDraw.Professional.vdPrimaries.vdFigure)">
            <summary>
            Removes a specific vdFigure object from the collection.
            </summary>
            <param name="Object">The vdFigure object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.RemoveLast">
            <summary>
            Removes the last object of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.RemoveAt(System.Int32)">
            <summary>
            Removes an object from the specified index of the collection.
            </summary>
            <param name="Index">The zero based index.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.InsertAt(System.Int32,VectorDraw.Professional.vdPrimaries.vdFigure)">
            <summary>
            Insert a vdFigure object to a specified index of the collection.
            </summary>
            <param name="Index">The zero based index of the collection where the object will be inserted.</param>
            <param name="Object">The vdFigure object which will be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.ChangeOrder(VectorDraw.Professional.vdPrimaries.vdFigure,System.Boolean)">
            <summary>
            Changes the position of a vdFigure object to the front or the end of the collection.
            </summary>
            <param name="Object">The vdFigure object.</param>
            <param name="ToBack">If true moves the object to the beginning of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.MakeIndexDictionary">
            <summary>
            Creates an Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must be followed by a <see cref="M:VectorDraw.Professional.vdCollections.vdEntities.ClearIndexDictionary"/> call when the search or swap is finished. </remarks>
            <example> For a code example please check topic <see cref="M:VectorDraw.Professional.vdCollections.vdEntities.swap(VectorDraw.Professional.vdPrimaries.vdFigure,VectorDraw.Professional.vdPrimaries.vdFigure)"/> Method. </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.ClearIndexDictionary">
            <summary>
            Clears the Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must follow a <see cref="M:VectorDraw.Professional.vdCollections.vdEntities.MakeIndexDictionary"/> call when the search or swap is finished. </remarks>
            <example> For a code example please check topic <see cref="M:VectorDraw.Professional.vdCollections.vdEntities.swap(VectorDraw.Professional.vdPrimaries.vdFigure,VectorDraw.Professional.vdPrimaries.vdFigure)"/> Method. </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.swap(VectorDraw.Professional.vdPrimaries.vdFigure,VectorDraw.Professional.vdPrimaries.vdFigure)">
            <summary>
            Swaps the position between two different vdFigure objects existing in the collection.
            </summary>
            <param name="Object1">first <see cref="T:VectorDraw.Professional.vdPrimaries.vdFigure"/> object needed.</param>
            <param name="Object2">second <see cref="T:VectorDraw.Professional.vdPrimaries.vdFigure"/> object needed.</param>
            <returns>True if the swap operation was succesfull.</returns>
            <remarks> This action is not written in the UNDO/REDO list. </remarks>
            <example>In 2D views (not render), the order that the objects are drawn is defined like : The last object added (in the entities list, not in the layer's list) is drawn on top of the previous object
            <para>So, in 2D you have to change the order of these entities. You can use InsertAt/RemoveAt and ChangeOrder methods or Swap Method to swap the position of two objects in the collection.</para>
            In case that you have a lot of layers and entities to check, instead of using ChangeOrder or Swap then you can try a code like : <code>
                    private void ShortByLayer_Demo()
                    {
                            vdArray&lt;vdLayer&gt; layers = new vdArray&lt;vdLayer&gt;();
                            layers.AddItem(doc.Layers.FindName("1")); // here you add the layers with the order you want
                            layers.AddItem(doc.Layers.FindName("DIMS"));  // the order of the layers here is significant
                            layers.AddItem(doc.Layers.FindName("TEXTS"));  // and defines the order that the entities will have and drawn in 2D
                            // if the drawing has the layers 0, 1, 2, 3, TEXTS, 4, DIMS, 5 then then entities draw order in 2D after 
                            // this code will be [entities in any layers 0,2,3,4,5][entities in Layer 1][entities in layer DIMS][entities in Layer TEXTS]
                            layers.MakeIndexDictionary(); // speeds up swaping and search 
                            doc.Model.Entities.MakeIndexDictionary(); // speeds up swaping and search
                            int pos1 = 0;
                            int pos2 = 0;
                            for (int i = 0; i &lt; doc.Model.Entities.Count; i++)
                            {
                                vdFigure fig1 = doc.Model.Entities[i];
                                pos1 = layers.GetObjectRealPosition(fig1.Layer);
                                for (int k = i + 1; k &lt; doc.Model.Entities.Count; k++)
                                {
                                    vdFigure fig2 = doc.Model.Entities[k];
                                    pos2 = layers.GetObjectRealPosition(fig2.Layer);
                                    
                                    if (pos1 &gt; pos2) 
                                    {
                                        doc.Model.Entities.swap(fig1, fig2);
                                    }
                                }
                            }
                            doc.Model.Entities.ClearIndexDictionary(); // must follow a doc.Model.Entities.MakeIndexDictionary
                            layers.ClearIndexDictionary(); // must follow a layers.MakeIndexDictionary
                    }
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.Sort(System.Collections.Generic.IComparer{VectorDraw.Professional.vdPrimaries.vdFigure})">
             <summary>
              Sorts the elements in a range of elements in the entire collection using the specified
                 <see cref="T:System.Collections.Generic.IComparer`1"/> generic interface.
             </summary>
             <param name="comparer">
             The <see cref="T:System.Collections.Generic.IComparer`1"/> generic interface implementation
                 to use when comparing elements, or null to use the <see cref="T:System.IComparable`1"/>
                 generic interface implementation of each element.
             </param>
             <exception cref="T:System.ArgumentException">
             The implementation of comparer caused an error during the sort. 
             For example, comparer might not return 0 when comparing an item with itself.
             </exception>
             <exception cref="T:System.InvalidOperationException">
             comparer is null, and one or more elements in array does not implement the <see cref="T:System.IComparable`1"/>  generic interface
             </exception>
             <example>
             <para>sort items in vdEntities collection depend on their Layer name.</para>
            <code>
                              //a class object that used to compare to vdFigure depend of the Layer Name
                              private class FigureLayerComparer : System.Collections.Generic.IComparer&lt;vdFigure&gt;
                              {
                                public FigureLayerComparer()
                                {
                                }
                                public int Compare(vdFigure fig1, vdFigure fig2)
                                {
                                    return System.StringComparer.InvariantCultureIgnoreCase.Compare(fig1.Layer.ToString(), fig2.Layer.ToString());
                                }
                              }
                            //Create 4 layers and add them into the Layers collection of a vdDocument object
                            vdLayer lay1 = doc.Layers.Add("1");
                            vdLayer lay2 = doc.Layers.Add("2");
                            vdLayer lay3 = doc.Layers.Add("3");
                            vdLayer lay4 = doc.Layers.Add("4");
            
                            //create a new vdLine object that belong to Layer with name "3"
                            vdLine l1 = new vdLine();
                            l1.SetUnRegisterDocument(doc);
                            l1.setDocumentDefaults();
                            l1.Layer = lay3;
            
                           //create a new vdLine object that belong to Layer with name "1"
                            vdLine l2 = new vdLine();
                            l2.SetUnRegisterDocument(doc);
                            l2.setDocumentDefaults();
                            l2.Layer = lay1;
            
                            //create a new vdLine object that belong to Layer with name "4"
                            vdLine l3 = new vdLine();
                            l3.SetUnRegisterDocument(doc);
                            l3.setDocumentDefaults();
                            l3.Layer = lay4;
            
                            //create a new vdLine object that belong to Layer with name "2"
                            vdLine l4 = new vdLine();
                            l4.SetUnRegisterDocument(doc);
                            l4.setDocumentDefaults();
                            l4.Layer = lay2;
            
                            //add the new vdlines to vdDocument Model Entities collection
                            doc.Model.Entities.AddItem(l1);
                            doc.Model.Entities.AddItem(l2);
                            doc.Model.Entities.AddItem(l3);
                            doc.Model.Entities.AddItem(l4);
            
                            //change the order of items in the collection so the items of layer "1" to be first in the collection folow by items in layer "2" , "3" and "4" at the end of the collection
                            doc.Model.Entities.Sort(new FigureLayerComparer());
            
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.SortByKeys(VectorDraw.Geometry.Int32Array)">
            <summary>
            Sorts the elements of the collection based on the keys using the integer compare implementation of each key.
            </summary>
            <param name="keys">The collection of integer that contains the integer keys to sort.</param>
            <remarks>The keys mast contain the same items count as the collection .Each item represents the key value for the item in the same posistion of the collection</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.SortByKeys(VectorDraw.Professional.vdCollections.StringArray)">
            <summary>
            Sorts the elements of the collection based on the keys using the StringComparer implementation of each key.
            </summary>
            <param name="keys">The collection of strings that contains the string keys to sort.</param>
            <remarks>The keys mast contain the same items count as the collection .Each item represents the key value for the item in the same posistion of the collection</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdEntities object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdEntities object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.RemoveItem(System.Object)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The item to be removed.</param>
            <returns>Returns true if the item was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.AddItem(System.Object)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="value">The object to be added.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.FindItem(System.Object)">
            <summary>
            Searches the collection for a specified object.
            </summary>
            <param name="item">The object to search for into the collection.</param>
            <returns>Returns true if the item exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.VectorDraw#Professional#vdCollections#IvdObjectCollection#Item(System.Int32)">
            <summary>
            Retreave a specific item placed at a specified index from the collection.
            </summary>
            <param name="Index">The index where the object is.</param>
            <returns>Returns the object at the specified index.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.GetObjectRealPosition(System.Object)">
            <summary>
            Find the index where a specified object is located in the list.
            </summary>
            <param name="item">The object to find.</param>
            <returns>Returns the index where the object is or -1 if the object is not in the list.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.InsertAt(System.Int32,System.Object)">
            <summary>
            Insert an object at a specified index.
            </summary>
            <param name="index">The index where the object will be inserted.</param>
            <param name="item">The object to be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)">
            <summary>
            Check if the table object is depend on this figure
            </summary>
            <param name="table">A Table object to be searched.</param>
            <returns>Returns true is this object is not deleted and have a property reference equal with table object.</returns>
            <remarks>Called when <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ExtendedDeletedCheck"/> is False.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.
            User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.getSortedZorder(VectorDraw.Render.vdRender,VectorDraw.Generics.vdArray{VectorDraw.Professional.vdPrimaries.vdFigure})">
            <summary>
            Sort input transparentlists collection depend of their Bounding Box in render view, from nearest to farest 
            </summary>
            <remarks>If <see cref="P:VectorDraw.Render.vdRenderGlobalProperties.SortedTransparentLists"/> is false the return collection is not sorted.</remarks>
            <param name="render">Render from which the <see cref="P:VectorDraw.Render.vdRender.CurrentMatrix"/> is used.</param>
            <param name="transparentlists">A collection of <see cref="T:VectorDraw.Professional.vdPrimaries.vdFigure"/> object to be sorted.</param>
            <returns>A collection sorted from nearest to farest in render view.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.Draw(VectorDraw.Render.vdRender,VectorDraw.Professional.vdCollections.vdSectionClips,VectorDraw.Professional.vdCollections.vdLights,System.Boolean)">
            <summary>
            Draw all visible items of this collection to the passed render drawing context.
            </summary>
            <param name="render">A <see cref="T:VectorDraw.Render.vdRender"/> object.Must not be null.</param>
            <param name="sections">Sections to be applied to rendering context.Set it to null for no section clipping.</param>
            <param name="lights">Lights to be applied to rendering context.Set it to null for no light support.</param>
            <param name="FireMeterProgress">Set it to true in order progress meter events to be fire and display on default VectorDraw progress control.</param>
            <returns><see cref="F:VectorDraw.Render.vdRender.DrawStatus.Successed"/> if all items was drawn without problems.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the entities in the collection with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdEntities.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements the vdEntities collection object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdEntities.ItemType">
            <summary>
            Returns the Type of Items in the collection
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdEntities.ListPosition">
            <summary>
            Gets the <see cref="T:VectorDraw.Generics.IListPosition"/> interface object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdEntities.Item(System.Int32)">
            <summary>
            Get an  object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The vdFigure object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdEntities.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdEntities.Last">
            <summary>
            Returns the last item in the collection.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.vdHandleList">
            <summary>
            A collection of objects that implement IVDHandle interface
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHandleList.#ctor">
            <summary>
            Initializes the vdHandleList collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHandleList.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHandleList.ToString">
            <summary>
            Gets a System.String that represents the count of the collection Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHandleList.Contains(VectorDraw.Serialize.IVDHandle)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">A IVDHandle type object to be checked if it exists in the collection</param>
            <returns>True if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHandleList.AddItem(VectorDraw.Serialize.IVDHandle)">
            <summary>
            Adds a IVDHandle object to the collection.
            </summary>
            <param name="value">The IVDHandle object to be added to the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHandleList.AddSelection(VectorDraw.Professional.vdCollections.vdSelection)">
            <summary>
            Add the items of a <see cref="T:VectorDraw.Professional.vdCollections.vdSelection"/> to the collection
            </summary>
            <param name="set"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHandleList.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHandleList.RemoveItem(VectorDraw.Serialize.IVDHandle)">
            <summary>
            Removes a specific object from the collection.
            </summary>
            <param name="Object">The object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHandleList.RemoveAt(System.Int32)">
            <summary>
            Removes an object from the specified index of the collection.
            </summary>
            <param name="Index">The zero based index.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHandleList.InsertAt(System.Int32,VectorDraw.Serialize.IVDHandle)">
            <summary>
            Insert a vdFigure object to a specified index of the collection.
            </summary>
            <param name="Index">The zero based index of the collection where the object will be inserted.</param>
            <param name="Object">The object which will be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHandleList.ChangeOrder(VectorDraw.Serialize.IVDHandle,System.Boolean)">
            <summary>
            Changes the position of an object to the front or the end of the collection.
            </summary>
            <param name="Object">The object to change its position.</param>
            <param name="ToBack">If true moves the object to the beginning of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHandleList.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHandleList.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdEntities object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHandleList.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdEntities object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHandleList.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            A collection of objects that implement IVDHandle interface
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdHandleList.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdHandleList.Item(System.Int32)">
            <summary>
            Get an  object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The object at the specified index.</returns>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.IvdObject">
            <summary>
            Provides the functionality for the vdObject object.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.IvdHatchFigure">
            <summary>
            Provides the functionality for the vdHatchProperties object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.IvdHatchFigure.HatchProperties">
            <summary>
            Get/Set the Hatching properties of an object.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.vdMultilineStyles">
            <summary>
            Implements the vdMultilineStyles collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdMultilineStyles.#ctor">
            <summary>
            Initializes the vdMultilineStyles collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdMultilineStyles.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdMultilineStyles.AddItem(VectorDraw.Professional.vdPrimaries.vdMultilineStyle)">
            <summary>
            Adds a vdMultilineStyle object to the collection.
            </summary>
            <param name="value">The vdMultilineStyle object to be added to the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdMultilineStyles.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdMultilineStyles.AddItem(System.Object)">
            <summary>
            Adds an object to the collection.
            </summary>
            <param name="value">The object to be added.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdMultilineStyles.Add(System.String)">
            <summary>
            Creates and adds a vdMultilineStyle object to the collection with the specified name.
            </summary>
            <param name="Name">The name of the inserted vdMultilineStyle object.</param>
            <returns>Returns the added vdMultilineStyle object.</returns>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAddItem"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterAddItem"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdMultilineStyles.FindName(System.String)">
            <summary>
            Finds a vdMultilineStyle object with the specified name in the collection.
            </summary>
            <param name="Name">The name to search in the collection.</param>
            <returns>The found object else returns null if a vdMultilineStyle does not exist with this name.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdMultilineStyles.FindItem(VectorDraw.Professional.vdPrimaries.vdMultilineStyle)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">A vdMultilineStyle object to be checked if it exists in the collection</param>
            <returns>True if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdMultilineStyles.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdMultilineStyles.RemoveItem(VectorDraw.Professional.vdPrimaries.vdMultilineStyle)">
            <summary>
            Removes a specific vdMultilineStyle object from the collection.
            </summary>
            <param name="Object">The vdMultilineStyle object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdMultilineStyles.getUniqueTableName(System.String)">
            <summary>
            Creates a unique string for use as name to a vdMultilineStyle object.
            </summary>
            <param name="prefix">A prefix string that will be present to the unique name.</param>
            <returns>Returns a unique string.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdMultilineStyles.InsertCopyOf(VectorDraw.Professional.vdPrimaries.vdMultilineStyle)">
            <summary>
            Adds a clone of the obj in the collection if it is not exist.
            </summary>
            <param name="obj">The object to be added.</param>
            <returns>The new added item.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdMultilineStyles.ToString">
            <summary>
            Gets a System.String that represents the count of the vdMultilineStyles collection Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdMultilineStyles.GetNotDeletedItemsAndVisibleOnForms">
            <summary>
            Get all non deleted objects of the collection.
            </summary>
            <returns>
            Returns a new created collection of vdMultilineStyle objects that are not set as <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.Deleted"/> and also <see cref="P:VectorDraw.Professional.vdPrimaries.vdMultilineStyle.VisibleOnForms"/> is true.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdMultilineStyles.GetNotDeletedItems">
            <summary>
            Get all non deleted objects of the collection.
            </summary>
            <returns>
            Returns a new created collection of vdMultilineStyle objects 
            that are not set as <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.Deleted"/>.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdMultilineStyles.ChangeOrder(VectorDraw.Professional.vdPrimaries.vdMultilineStyle,System.Boolean)">
            <summary>
            Changes the position of a vdMultilineStyle object to the front or the end of the collection.
            </summary>
            <param name="Object">The vdMultilineStyle object.</param>
            <param name="ToBack">If true moves the object to the beginning of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdMultilineStyles.swap(VectorDraw.Professional.vdPrimaries.vdMultilineStyle,VectorDraw.Professional.vdPrimaries.vdMultilineStyle)">
            <summary>
            Swaps the position between two different vdMultilineStyle objects existing in the collection.
            </summary>
            <param name="Object1">first object needed.</param>
            <param name="Object2">second object needed.</param>
            <returns>True if the swap operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdMultilineStyles.IsDefault(VectorDraw.Professional.vdObjects.vdPrimary)">
            <summary>
            Checks if the parameter passed is the standard vdMultilineStyle object.
            </summary>
            <param name="obj">A vdPrimary object to be checked if it is equal referenced to the standard vdMultilineStyle object.</param>
            <returns>True if the passed object is equal referenced with the standard vdMultilineStyle object of the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdMultilineStyles.EnsureDefaults">
            <summary>
            Ensures the default values to the properties of the standard vdMultilineStyle object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdMultilineStyles.InitDefaults(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Ensures the existance of the standard vdMultilineStyle object and also sets the document parameter
            to be the document of the collection.
            </summary>
            <param name="document">The Document object of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdMultilineStyles.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdMultilineStyles object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdMultilineStyles.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdMultilineStyles object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdMultilineStyles.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdMultilineStyles.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements the vdMultilineStyles collection object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdMultilineStyles.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdMultilineStyles.ListPosition">
            <summary>
            Gets the <see cref="T:VectorDraw.Generics.IListPosition"/> interface object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdMultilineStyles.Item(System.Int32)">
            <summary>
            Get a vdMultilineStyle object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The vdMultilineStyle object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdMultilineStyles.Standard">
            <summary>
            Get the standard vdMultilineStyle object existing to the collection with name "Standard".
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.HSLColor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.HSLColor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.HSLColor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Actions.ActionEntity">
            <summary>
            Implements the ActionEntity object.This is a base object for generating actions 
            between the component and the user.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Actions.ActionEntity.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="reference">A reference point used for the actions.</param>
            <param name="layout">The vdLayout object where the action will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.Actions.ActionEntity.Dispose">
            <summary>
            Dispose of the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Actions.ActionEntity.OnFinishAction">
            <summary>
            Called when the action is finished.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Actions.ActionEntity.OnMyPositionChanged(VectorDraw.Geometry.gPoint)">
            <summary>
            Called when the mouse position changes.
            </summary>
            <param name="newPosition">A gPoint representing the new mouse position in User Coordinate System.</param>
        </member>
        <member name="M:VectorDraw.Professional.Actions.ActionEntity.OnPositionChanged(VectorDraw.Geometry.gPoint)">
            <summary>
            Called when the mouse position changes.
            </summary>
            <param name="newPosition">A gPoint representing the new mouse position in World Coordinate System.</param>
        </member>
        <member name="M:VectorDraw.Professional.Actions.ActionEntity.OnBeforeDrawEntity">
            <summary>
            Called before drawning <see cref="P:VectorDraw.Professional.Actions.ActionEntity.Entity"/> property object using <see cref="N:VectorDraw.Render"/> rendering graphics engine.
            Default implementation do nothing.
            </summary>
            <returns> <see cref="T:VectorDraw.Render.vdRender.DrawStatus"/> </returns>
        </member>
        <member name="M:VectorDraw.Professional.Actions.ActionEntity.OnAfterDrawEntity">
            <summary>
            Called after drawning <see cref="P:VectorDraw.Professional.Actions.ActionEntity.Entity"/> property object using <see cref="N:VectorDraw.Render"/> rendering graphics engine.
            Default implementation do nothing.
            </summary>
            <returns> <see cref="T:VectorDraw.Render.vdRender.DrawStatus"/> </returns>
        </member>
        <member name="M:VectorDraw.Professional.Actions.ActionEntity.DrawEntity">
            <summary>
            Called from PureDraw method when the action entity is to be drawn or hide to the screen.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Actions.ActionEntity.PureDraw">
            <summary>
            Called when the action entity is to be drawn or hide to the screen.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Actions.ActionEntity.Layout">
            <summary>
            Get the vdLayout object where the action will take place.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Actions.ActionEntity.ValuePointCS">
            <summary>
            Get a value that represents the coordinate system of the <see cref="P:VectorDraw.Actions.BaseAction.Value"/> property.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Actions.ActionEntity.IsEntityInUserCS">
            <summary>
            Default value is true which means that the entity is in UserCS and during draw the User2WorldMatrix is pushed to the Render.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Actions.ActionEntity.Entity">
            <summary>
            The entity which is currently selected for this action.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Actions.ActionEntity.HideRubberLine">
            <summary>
            Get a value that represents if the rubber line is drawn or not.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Actions.ActionEntity.needUpdate">
            <summary>
            Get a value that represents if the entity should be updated after each position change.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionSectionClip">
            <summary>
            Implements the ActionSectionClip object which is used when adding a Section Clip.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionSectionClip.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdPrimaries.vdLayout,VectorDraw.Professional.vdFigures.vdInsert)">
            <summary>
            Initializes the action with the given parameters.
            </summary>
            <param name="reference">A gPoint to be used as reference (start) point.</param>
            <param name="layout">The layout where the action takes place.</param>
            <param name="Ins">null or a vdInsert object created form this action as reference for the state 2 of the action to select a visible side.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionSectionClip.OnMyPositionChanged(VectorDraw.Geometry.gPoint)">
            <summary>
            Called when the mouse position changes.Changes the end point of the created multiline entity in order to be drawn each time the mouse moves.
            </summary>
            <param name="newPosition">A gPoint representing the new mouse position in User Coordinate System.</param>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionSectionClip.HideRubberLine">
            <summary>
            Returns true in order to hide the rubber line.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionSectionClip.Entity">
            <summary>
            Returns a vdInsert object that is created from the action.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionSectionClip.needUpdate">
            <summary>
            Returns true because an update is required for the Insert object that is being drawn from the action.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Serialize.vdfReader">
            <summary>
            Internally used only to convert VDF files.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdfReader.GetStructAddMemSize(System.Int32,System.Int32@)">
            <summary>
            Internally used only to convert VDF files.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdfReader.SetEncoding(System.Int16)">
            <summary>
            Internally used only to convert VDF files.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdfReader.ConvertString(System.String)">
            <summary>
            Convertes a string with special characters into a regular string.
            </summary>
            <param name="str">The given string</param>
            <remarks >
            special characters are : 
            \\U+xxxx where xxxx is an hex two byte value specifying the unicode position in the character map.
            \\M+nxxxx where xxxx is the same as previous and n represents tyhe local specifycation 0 - 5.
            %%xxx where xxx is an integer value 0-255.
            also converts the following characters:("%%d", "°"),("%%p", "±"),("%%c", "ø"),("%%D", "°"),("%%P", "±"),("%%C", "ø"),("%%%", "%").
            </remarks>
            <returns>The converted string.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdfReader.#ctor(System.IO.Stream)">
            <summary>
            Internally used only to convert VDF files.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdfReader.ReadInt32Array">
            <summary>
            Internally used only to convert VDF files.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdfReader.ReadByteArray">
            <summary>
            Internally used only to convert VDF files.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdfReader.ReadDoubleArray(System.Int32)">
            <summary>
            Internally used only to convert VDF files.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdfReader.ReadPointsInt32">
            <summary>
            Internally used only to convert VDF files.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdfReader.ReadPoint">
            <summary>
            Internally used only to convert VDF files.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdfReader.ReadVector">
            <summary>
            Internally used only to convert VDF files.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdfReader.ReadVertex">
            <summary>
            Internally used only to convert VDF files.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdfReader.ReadVertexesSHORT">
            <summary>
            Internally used only to convert VDF files.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdfReader.ReadASCIIChars(System.Int32)">
            <summary>
            Internally used only to convert VDF files.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdfReader.ReadVDFString">
            <summary>
            Internally used only to convert VDF files.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Serialize.vdfReader.Document">
            <summary>
            Internally used only to convert VDF files.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdPrimary">
            <summary>
            This is a Base object that all Table objects(like vdLayer...) and also vdFigure objects inherit from.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdObject">
            <summary>
            This is a Base object that the Vectordraw.Profesional.Primaries objects are inherited from.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdObject.mHandle">
            <summary>
            Internally used for the object's handle.It is recommended to use the <see cref="P:VectorDraw.Professional.vdObjects.vdObject.Handle"/> property instead.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdObject.#ctor">
            <summary>
            The constructor of the vdObject object where the default initialization is commited.
            </summary>
            <remarks>
            This object cannot be directly created but it is used as base for other objects.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdObject.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdObject.InitializeProperties">
            <summary>
            Resets the properties of the object to the Default values.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdObject.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdObject.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdObject object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdObject.ModifyHandle(VectorDraw.Professional.vdObjects.vdHandle,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Register the object handle in the document handle table.
            </summary>
            <param name="handle">A new handle for the object</param>
            <param name="document">A vdDocument object in which the object handle will be register</param>
            <remarks>If handle is invalid then it changed into the new valid handle value.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdObject.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            This is a Base object that the Vectordraw.Profesional.Primaries objects are inherited from.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdObject.Handle">
            <summary>
            Gets a unique object for the Document that represents the handle of the object.
            </summary>
            <remarks>Default value is 0 and when the object becames DocumentRegistered generates a new unique value. </remarks>
            <seealso cref="T:VectorDraw.Professional.vdObjects.vdHandle"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdObject.HandleId">
            <summary>
            Gets an unsigned 64 bit value of the handle.
            </summary>
            <seealso cref="T:VectorDraw.Professional.vdObjects.vdHandle"/>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdPrimary.mXProperties">
            <summary>
            Internally used for the vdXProperties collection of the object.It is recommended to use the <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.XProperties"/> property instead.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrimary.#ctor">
            <summary>
            The constructor of the vdPrimary object where the default initialization is commited.
            </summary>
            <remarks>
            This object cannot be directly created but it is used as base for other objects.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrimary.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)">
            <summary>
            Check if the table object is depend on this figure
            </summary>
            <param name="table">A Table object to be searched.</param>
            <returns>Returns true is this object is not deleted and have a property reference equal with table object.</returns>
            <remarks>Called when <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ExtendedDeletedCheck"/> is False.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrimary.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.
            User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrimary.RaiseOnEraseObject">
            <summary>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnEraseObject"></see> Event of vdDocument object.
            </summary>
            <remarks>
            This event is raised before the Deleted Property changes to true.
            </remarks>
            <returns>Returns true if the object can be Deleted</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrimary.Clone(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Creates a clone of this object.
            </summary>
            <param name="thisdocument">The vdDocument object where the cloned new object will be referenced.</param>
            <returns>The new created object</returns>
            <remarks>
            If thisdocument is passed null then the Document of this object is used as reference for the new object.
            The new created object is DocumentUnregistered.
            </remarks>
            <seealso cref="M:VectorDraw.Professional.vdObjects.vdBaseObject.SetUnRegisterDocument(VectorDraw.Professional.vdObjects.vdDocument)"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrimary.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrimary.setDocumentDefaults">
            <summary>
            Sets the default values at the properties of the object that depend from the Document Active Properties.
            </summary>
            <remarks>All changes are not written in the Undo history list.</remarks>
            <returns>Returns false if the object is not Document registered.</returns>
            <example><para>See the following topics for a code sample:</para>
            <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.AltTTFFont"/>, 
            <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLineType"/>, 
            <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayer"/>, 
            <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveDimStyle"/>, 
            <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveTextStyle"/>, 
            <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActivePenColor"/>, 
            <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLineWeight"/>, 
            <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActivePenWidth"/>, 
            <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveThickness"/>, 
            <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveHatchProperties"/>, 
            <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveTextHorJustify"/>, 
            <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveTextVerJustify"/>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrimary.UpdateActionControl(System.Windows.Forms.Control)">
            <summary>
            Called by the Container in order to determine the Control Window 
            which is used to capture windows messages.
            </summary>
            <param name="control">The Control Window where the Actions take place.</param>
            <remarks >
            This is used in the vdLayout,vdViewport objects to enable the user Actions.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrimary.InitializeProperties">
            <summary>
            Resets the properties of the vdPrimary object to the Default values.
            </summary>
            <remarks>
            Default values:Label = "", Remove all XProperties.
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrimary.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrimary.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdPrimary object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrimary.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdPrimary object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrimary.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            This is a Base object that all Table objects(like vdLayer...) and also vdFigure objects inherit from.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPrimary.PrimaryFlag">
            <summary>
            Returns a generic flag that provides temporary information about the object.
            </summary>
            <remarks>
            Usually it gets a value other than 0 if the object is temporarely used.
            0 : no temporary values
            1 : it is a Temporary object created to visualize the Move Grip point action
            2 : it is a Temporary object created to calculate an ObjectSnap
            3 : it is a Temporary object created to visualize a Mirror user Action
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPrimary.Deleted">
            <summary>
            Get/Set a property that marks the object as Deleted or not.
            </summary>
            <remarks>
            Deleted objects are not parsed by the Serializer so are not saved.
            An object can be deleted only if it is not referenced by other objects.
            Default value false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnEraseObject"/> event in case  the value of the property is set to true.
            </remarks>
            <exception cref="T:VectorDraw.Professional.Exceptions.CannotDeleteException">Thrown when the object is referenced and cannot be deleted.</exception>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPrimary.Label">
            <summary>
            Get/Set a label string for the object
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPrimary.XProperties">
            <summary>
            Gets the Collection of vdXproperties of the object.
            </summary>
            <remarks>If no XProperties exist then a new empty collection is attached to the object.</remarks>
            <seealso cref="T:VectorDraw.Professional.vdCollections.vdXProperties"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPrimary.XPropertiesRef">
            <summary>
            Returns a reference to XProperties of the object.
            </summary>
            <remarks>If no XProperties exist returns nul reference.</remarks>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.FrmImageDefs">
            <summary>
            Implements the Images Definition dialog.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageDefs.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.FrmImageDefs.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.FrmImageDefs.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageDefs.listView1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageDefs.buttonAttach">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageDefs.imageList1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageDefs.buttonDetach">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageDefs.textBoxPath">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageDefs.buttonBrowse">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageDefs.panelColor">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageDefs.buttonColor">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageDefs.label1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageDefs.buttonOK">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageDefs.buttonCancel">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageDefs.groupBox1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageDefs.butEdit">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageDefs.checkBind">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageDefs.lblCurrentPage">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageDefs.numericUpDownActivePage">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageDefs.comboIterpolMd">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageDefs.label3">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageDefs.label2">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageDefs.formToolTip">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageDefs.mDocument">
            <summary>
            This is made public so it can be used while override the 
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.FrmImageDefs.#ctor">
            <summary>
            Initializes the dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.FrmImageDefs.InitializeExtra(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes the dialog.
            </summary>
            <param name="Document">The Document where the Images definitions are.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.FrmImageDefs.Show(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Used to show the dialog.
            </summary>
            <param name="doc">The Document object of the drawing.</param>
            <returns>A DialogResult showing the user's action.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.FrmImageDefs.RemoveImage(System.String,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            This method is called when the user presses the Detach Button.
            </summary>
            <param name="imageName">The name of the Image that is being removed.</param>
            <param name="doc">The Document of the form.</param>
            <returns>True if the Image was succesfully removed and should be removed also from the listview. False if the Image was not removed.</returns>
            <remarks>This method can be ovveriden to the vdFormsRes in order to control the Detach button.</remarks>
            <example>See different ways of calling cmdCircle
            <code>
                    public override bool RemoveImage(string imageName, VectorDraw.Professional.vdObjects.vdDocument doc)
                    {
                        foreach (VectorDraw.Professional.vdPrimaries.vdFigure item in doc.ActiveLayOut.Entities)
                        {
                            VectorDraw.Professional.vdFigures.vdImage img = item as VectorDraw.Professional.vdFigures.vdImage;
                            if (img.ImageDefinition.Name == imageName)
                            {
                                item.Deleted = true;
                                item.Update();
                                item.Invalidate();
                                doc.Redraw(true);
                            }
                        }
                        return base.RemoveImage(imageName, doc);
                    }
            </code>
            </example>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.FrmImageDefs.vdFormSize">
            <summary>
            Get/Set the size of the form used when loading the form. This value is stored when the form is closed in order to be used the next time the form is loaded. 
            </summary>
            <remarks>The default value is -1,-1.</remarks>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.GetLineWeightDialog">
            <summary>
            Implements the LineWeight dialog.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.GetLineWeightDialog.finalSelected">
            <summary>
            This is used in order to get the selected LineWeight after the dialog is closed.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.GetLineWeightDialog.InitializeExtra(VectorDraw.Professional.vdObjects.vdDocument,System.Windows.Forms.Control,VectorDraw.Professional.Constants.VdConstLineWeight,System.Boolean)">
            <summary>
            Set necessary objects used to show-use the dialog.Call the ShowDialog method after setting
            these values to show the dialog.
            </summary>
            <param name="Document">The Document where the selected mode will be implemented.</param>
            <param name="parent">The parent Control of the Document.</param>
            <param name="Selected">The default Linetype which will be selected when the dialog will be displayed.</param>
            <param name="showBylayer">This boolean value is used to set if the ByLayer button will be shown.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.GetLineWeightDialog.#ctor">
            <summary>
            Initializes the LineWeight dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.GetLineWeightDialog.Show(VectorDraw.Professional.vdObjects.vdDocument,System.Windows.Forms.Control,VectorDraw.Professional.Constants.VdConstLineWeight,System.Boolean)">
            <summary>
            Used to display the dialog.
            </summary>
            <param name="Document">The Document object of the drawing.</param>
            <param name="parent">The parent control where the dialog is going to be displayed.</param>
            <param name="Selected">The default Linetype which will be selected when the dialog will be displayed.</param>
            <param name="showBylayer">This boolean value is used to set if the ByLayer button will be shown.</param>
            <returns>A GetLineWeightDialog object to obtain any necessary information.</returns>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.GetLineWeightDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.GetLineWeightDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.GetLineWeightDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.GetLineWeightDialog.bCancel">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.GetLineWeightDialog.bOK">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.GetLineWeightDialog.lvLineWeights">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.GetLineWeightDialog.label1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.GetLineWeightDialog.label2">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.GetLineWeightDialog.lnWght">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.GetLineWeightDialog.formToolTip">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.GetLineWeightDialog.vdFormSize">
            <summary>
            Get/Set the size of the form used when loading the form. This value is stored when the form is closed in order to be used the next time the form is loaded. 
            </summary>
            <remarks>The default value is -1,-1.</remarks>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.vdAttribs">
            <summary>
            Implements all functionality for the vdAttribs collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdAttribs.GetNotDeletedItems">
            <summary>
            Returns an array containing all items that do not have their property Deleted set to true.
            </summary>
            <returns>The array containing all non deleted objects.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdAttribs.ToString">
            <summary>
            Gets a System.String that represents the count of the vdAttribs collection Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdAttribs.#ctor">
            <summary>
            Initializes the vdAttrib collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdAttribs.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdAttribs.FindTagName(System.String)">
            <summary>
            Searches the collection for an vdAttrib object that has a specific TegString.
            </summary>
            <param name="tag">A string that represents the <see cref="P:VectorDraw.Professional.vdFigures.vdAttrib.TagString"/> of the object to be found.</param>
            <returns>the vdAttrib object that has the given TagString.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdAttribs.FindItem(VectorDraw.Professional.vdFigures.vdAttrib)">
            <summary>
            Searches the collection for a specific vdAttrib object.
            </summary>
            <param name="item">The object to be found.</param>
            <returns>True if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdAttribs.AddItem(VectorDraw.Professional.vdFigures.vdAttrib)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="value">The vd Attrib object to be added to the collection.</param>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAddItem"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterAddItem"/> event.
            </remarks>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">An instance of the object already exist in the collection.</exception>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdAttribs.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdAttribs.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdAttribs.RemoveAll">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdAttribs.RemoveItem(VectorDraw.Professional.vdFigures.vdAttrib)">
            <summary>
            Removes a specific item from the collection.
            </summary>
            <param name="Object">The object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdAttribs.RemoveAt(System.Int32)">
            <summary>
            Removes an object from a specified index position from the collection 
            </summary>
            <param name="Index">The zero based index where the object to be removed is.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdAttribs.InsertAt(System.Int32,VectorDraw.Professional.vdFigures.vdAttrib)">
            <summary>
            Insert an object to a specific index position.
            </summary>
            <param name="Index">Where the object will be inserted.</param>
            <param name="Object">The object that will be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdAttribs.ChangeOrder(VectorDraw.Professional.vdFigures.vdAttrib,System.Boolean)">
            <summary>
            Changes the position of an object to the front or the end of the collection.
            </summary>
            <param name="Object">The vdAttrib object that will be moved.</param>
            <param name="ToBack">If true moves the object to the beginning of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdAttribs.MakeIndexDictionary">
            <summary>
            Creates an Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must be followed by a <see cref="M:VectorDraw.Professional.vdCollections.vdAttribs.ClearIndexDictionary"/> call when the search or swap is finished. </remarks>
            <example> For a code example please check topic <see cref="M:VectorDraw.Professional.vdCollections.vdAttribs.swap(VectorDraw.Professional.vdFigures.vdAttrib,VectorDraw.Professional.vdFigures.vdAttrib)"/> Method. </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdAttribs.ClearIndexDictionary">
            <summary>
            Clears the Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must follow a <see cref="M:VectorDraw.Professional.vdCollections.vdAttribs.MakeIndexDictionary"/> call when the search or swap is finished. </remarks>
            <example> For a code example please check topic <see cref="M:VectorDraw.Professional.vdCollections.vdAttribs.swap(VectorDraw.Professional.vdFigures.vdAttrib,VectorDraw.Professional.vdFigures.vdAttrib)"/> Method. </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdAttribs.swap(VectorDraw.Professional.vdFigures.vdAttrib,VectorDraw.Professional.vdFigures.vdAttrib)">
            <summary>
            Swaps the position between two different objects existing in the collection.
            </summary>
            <param name="Object1">first object needed.</param>
            <param name="Object2">second object needed.</param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdAttribs.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdAttrib object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdAttribs.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdAttribs object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdAttribs.RemoveItem(System.Object)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The item to be removed.</param>
            <returns>Returns true if the item was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdAttribs.AddItem(System.Object)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="value">The object to be added.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdAttribs.FindItem(System.Object)">
            <summary>
            Searches the collection for a specified object.
            </summary>
            <param name="item">The object to search for into the collection.</param>
            <returns>Returns true if the item exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdAttribs.VectorDraw#Professional#vdCollections#IvdObjectCollection#Item(System.Int32)">
            <summary>
            Retreave a specific item placed at a specified index from the collection.
            </summary>
            <param name="Index">The index where the object is.</param>
            <returns>Returns the object at the specified index.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdAttribs.GetObjectRealPosition(System.Object)">
            <summary>
            Find the index where a specified object is located in the list.
            </summary>
            <param name="item">The object to find.</param>
            <returns>Returns the index where the object is or -1 if the object is not in the list.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdAttribs.InsertAt(System.Int32,System.Object)">
            <summary>
            Insert an object at a specified index.
            </summary>
            <param name="index">The index where the object will be inserted.</param>
            <param name="item">The object to be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdAttribs.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements all functionality for the vdAttribs collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdAttribs.ItemType">
            <summary>
            Returns the Type of Items in the collection
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdAttribs.ListPosition">
            <summary>
            Gets the <see cref="T:VectorDraw.Generics.IListPosition"/> interface object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdAttribs.Item(System.Int32)">
            <summary>
            Get an object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdAttribs.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.MultiLineTypeConverterNoExpand">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.MultiLineTypeConverterNoExpand.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.MultiLineTypeConverterNoExpand.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.MultiLineTypeConverterNoExpand.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.MultiLineTypeConverterNoExpand.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.MultiLineTypeConverter">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.MultiLineTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.MultiLineTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.MultiLineTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.MultiLineTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdMultilineStyle">
            <summary>
            Implements all functionality of the vdLayer object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyle.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes a new instance of the vdMultilineStyle object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) method after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyle.#ctor(VectorDraw.Professional.vdObjects.vdDocument,System.String)">
            <summary>
            Initializes a new instance of the vdMultilineStyle object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <param name="name">The name of the group object.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) method after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyle.#ctor">
            <summary>
            Initializes the vdMultilineStyle collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyle.#ctor(System.String)">
            <summary>
            Initializes the vdMultilineStyle collection object with the specified name.
            </summary>
            <param name="name">The name of the created vdMultilineStyle object.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyle.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.
            User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyle.ToString">
            <summary>
            Gets a System.String that represents the name of the vdMultilineStyle Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyle.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyle.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdMultilineStyle object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyle.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdMultilineStyle object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyle.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements all functionality of the vdLayer object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdMultilineStyle.Name">
            <summary>
            Get/Set the name of the vdMultilineStyle object
            </summary>
            <remarks>
            Default value : "Unonymus".
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <exception cref="T:VectorDraw.Professional.Exceptions.InvalidTableNameException"></exception>
            <exception cref="T:VectorDraw.Professional.Exceptions.CannotRenameException">Thrown when cannot rename an object.</exception>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdMultilineStyle.Description">
            <summary>
            Get/Set a Description string for the object
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdMultilineStyle.StartAngle">
            <summary>
            Get/Set the Start Angle for the Multiline elements in radians.
            </summary>
            <remarks>
            Default value 90 degrees in radians.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            This is the start angle used when drawing the extra lines of the Multiline.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdMultilineStyle.EndAngle">
            <summary>
            Get/Set the End Angle for the Multiline elements in radians.
            </summary>
            <remarks>
            Default value 90 degrees in radians.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            This is the end angle used when drawing the extra lines of the Multiline.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdMultilineStyle.Flags">
            <summary>
            Get/Set the flags that determine the start and end draw of the Multiline.
            </summary>
            <remarks>
            Default value 0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            <seealso cref="T:VectorDraw.Professional.Constants.VdMultilineFlags"/>
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdMultilineStyle.Elements">
            <summary>
            Get/Set the elements collection that define the extra lines of the Multiline Style.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdMultilineStyle.FillColor">
            <summary>
            Get/Set the Multiline's fill color of the style.
            </summary>
            <remarks>
            Default value a color ByBlock.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdMultilineStyle.VisibleOnForms">
            <summary>
            Get/Set a boolean value representing if the vdMultilineStyle will be viewed in Vectordraw forms.
            </summary>
            <remarks>
            Default value is true.
            The ToString value of the vdMultilineStyles also takes consideration this value and if it is false then the count returned does not contain these items.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdMultilineStyle.Deleted">
             <summary>
             Get/Set a property that marks the object as Deleted or not.
             </summary>
            <exception cref="T:VectorDraw.Professional.Exceptions.CannotDeleteException">Thrown when an object cannot be deleted.</exception>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElements">
            <summary>
            Implements the vdMultilineStyleElements collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElements.#ctor">
            <summary>
            Initializes the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElements.#ctor(System.Int32)">
            <summary>
            Initializes the collection with a given capacity.
            </summary>
            <param name="capacity">An integer representing the preallocated memory size of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElements.ToString">
            <summary>
            Gets a System.String that represents the count of the gPoints Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElements.Add(VectorDraw.Professional.vdPrimaries.vdMultilineStyleElement)">
            <summary>
            Add a vdMultilineStyleElement to the end of the collection.
            </summary>
            <param name="value">The object to add.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElements.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElements.AddRange(VectorDraw.Professional.vdPrimaries.vdMultilineStyleElements)">
            <summary>
            Adds the objects of one collection to the end of this collection.
            </summary>
            <param name="c">A gPoints collection to be added to this collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElements.InsertAt(System.Int32,VectorDraw.Professional.vdPrimaries.vdMultilineStyleElement)">
            <summary>
            Insert an object at a specified index.
            </summary>
            <param name="index">The index where the object will be inserted.</param>
            <param name="Object">The object to be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElements.RemoveAt(System.Int32)">
            <summary>
            Removes an object from a specified index of the collection.
            </summary>
            <param name="index">The index of the object to be removed.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElements.RemoveItem(VectorDraw.Professional.vdPrimaries.vdMultilineStyleElement)">
            <summary>
            Removes a specified object from the list.
            </summary>
            <param name="Object">The object to be removed from the collection..</param>
            <returns>True if the object was removed and false if the object was not found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElements.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElements.EnsureCapacity(System.Int32)">
            <summary>
            Changes the capacity of the collection to the given value if the existing capacity is less than this value.
            </summary>
            <param name="min">A value representing the new capacity of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElements.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElements.RemoveLast">
            <summary>
            Removes the last object of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElements.Clone">
            <summary>
            Create a new gPoints collection having a copy of all items of this collection.
            </summary>
            <returns>A new created gPoints collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElements.Last">
            <summary>
            Get the last object of the collection.
            </summary>
            <returns>A reference to the Last item in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElements.FindOffset(System.Double)">
            <summary>
            Searches the collection for the specified offset.
            </summary>
            <param name="offset">The offset to search for , double value.</param>
            <returns>The element found or null if not found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElements.FindIndexofOffsetElement(System.Double)">
            <summary>
            Find the index of the Element with the specified offset in the Elements array.
            </summary>
            <param name="offset">The offset to search for.</param>
            <returns>The index position of the element in the array.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElements.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdMultilineStyleElements object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElements.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdMultilineStyleElements object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElements.Count">
            <summary>
            Get the number of elements of the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElements.Item(System.Int32)">
            <summary>
            Get/Set the object at a specified index of the collection.
            </summary>
            <param name="index">The index of the object.</param>
            <returns>The object at the specified index.</returns>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElement">
            <summary>
            Implements the vdMultilineStyleElement object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElement.#ctor">
            <summary>
            Initializes the vdMultilineStyleElement collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElement.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElement.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.
            User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElement.Clone">
            <summary>
            Returns a new created vdMultilineStyleElement object as clone to this one.
            </summary>
            <returns>A new created vdMultilineStyleElement object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElement.CopyFrom(VectorDraw.Professional.vdPrimaries.vdMultilineStyleElement)">
            <summary>
            Copies the values from the passed object to this vdMultilineStyleElement object.
            </summary>
            <param name="p1">A vdMultilineStyleElement object from which the values are going to be copied from.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElement.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdMultilineStyleElement object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElement.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdMultilineStyleElement object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElement.Offset">
            <summary>
            Get/Set a value that represents the offset of the Element from the previous line.
            </summary>
            <remarks>
            Default value 0.5.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElement.ElementColor">
            <summary>
            Get/Set the color of the Element Line.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElement.ElementLineType">
            <summary>
            Get/Set the Linetype of the Element Line.
            </summary>
            <remarks>
            Default value Solid.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdMultilineStyleElement.ElementLineWeight">
            <summary>
            Get/Set the line weight of the Element Line.
            </summary>
            <remarks>
            Default value LW_DOCUMENTDEFAULT.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="T:VectorDraw.Professional.Serialize.vdfWriter">
            <summary>
            Internally used only to convert VDF 5.x files.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Serialize.vdfWriter.ExplodeDimensions">
            <summary>
            Internally used only to convert VDF 5.x files.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdfWriter.SetEncoding(System.Int16)">
            <summary>
            Internally used only to convert VDF 5.x files.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdfWriter.#ctor(System.IO.Stream)">
            <summary>
            Internally used only to convert VDF 5.x files.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdfWriter.WriteZeroBytes(System.Int32)">
            <summary>
            Internally used only to convert VDF 5.x files.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdfWriter.Write(VectorDraw.Geometry.Int32Array)">
            <summary>
            Internally used only to convert VDF 5.x files.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdfWriter.Write(VectorDraw.Geometry.ByteArray)">
            <summary>
            Internally used only to convert VDF 5.x files.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdfWriter.Write(VectorDraw.Geometry.DoubleArray)">
            <summary>
            Internally used only to convert VDF 5.x files.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdfWriter.Write(VectorDraw.Geometry.gPoints)">
            <summary>
            Internally used only to convert VDF 5.x files.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdfWriter.Write(VectorDraw.Geometry.gPoint)">
            <summary>
            Internally used only to convert VDF 5.x files.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdfWriter.Write(VectorDraw.Geometry.Vector)">
            <summary>
            Internally used only to convert VDF 5.x files.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdfWriter.Write(VectorDraw.Geometry.Vertex)">
            <summary>
            Internally used only to convert VDF 5.x files.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdfWriter.Write(VectorDraw.Geometry.Vertexes)">
            <summary>
            Internally used only to convert VDF 5.x files.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdfWriter.StringToANSIByteArray(System.String)">
            <summary>
            Internally used only to convert VDF 5.x files.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdfWriter.Write(VectorDraw.Geometry.DoubleArray,System.Int32)">
            <summary>
            Internally used only to convert VDF 5.x files.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdfWriter.Write(VectorDraw.Geometry.ByteArray,System.Int32)">
            <summary>
            Internally used only to convert VDF 5.x files.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdfWriter.WriteAnsiString(System.String,System.Int32)">
            <summary>
            Internally used only to convert VDF 5.x files.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdfWriter.WriteUNICODEString(System.String)">
            <summary>
            Internally used only to convert VDF 5.x files.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Serialize.vdfWriter.Document">
            <summary>
            Internally used only to convert VDF 5.x files.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.ActionUtilities.IvdCommandAction">
            <summary>
            Provides the functionality for the vdCommandAction object.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.ActionUtilities.vdCommandAction">
            <summary>
            Implements the vdCommantionAction object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.Prompt(System.String)">
            <summary>
            Adds a prompt string to the prompt stack of the Document. Note that the string must be added to the globalization list.
            </summary>
            <param name="str">The string to be added to the Document's stack.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.Cancel1">
            <summary>
            Cancels the last command/action of the Document.
            </summary>
            <remarks>It cancels the latest command/action that is running and not all commands/actions running. See <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.Cancel"/> method for this.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.Cancel">
            <summary>
            Cancels all active commands/actions of the Document.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CircleEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Starts a command so the user can draw a circle.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdCircle(System.Object,System.Object)"/> method passing null parameters.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.Circle3pEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Starts a command so the user can draw a circle with 3 points.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdCircle(System.Object,System.Object)"/> method passing 3p,null parameters.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.Circle2pEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Starts a command so the user can draw a circle defining it's diameter.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdCircle(System.Object,System.Object)"/> method passing 2p, null parameters.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdCircle(System.Object,System.Object)">
            <summary>
            Starts a command so the user can draw a circle. This is a user-command where the user can choose using graphical interface the position and/or size of the circle.
            </summary>
            <param name="CenterPoint">The center of the circle in User Coordinate System (UCS) as <see cref="T:VectorDraw.Geometry.gPoint"/> or "USER" so the user can click this point to the screen or "2p","3p" if you want the command to work with 2,3 points.</param>
            <param name="Radius">The radius of the circle or "USER" so the user can pick the radius to the screen. If  CenterPoint is "2p" or "3p" then here you can pass a <see cref="T:VectorDraw.Geometry.gPoints"/> object with 2 or 3 <see cref="T:VectorDraw.Geometry.gPoint"/> objects respectively.</param>
            <returns>Returns true if the command was successful and <see cref="T:VectorDraw.Professional.vdFigures.vdCircle"/> is added to the document.</returns>
            <remarks>Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdCircle" action string.</remarks>
            <example>See different ways of calling cmdCircle<code>
                    private void cmdCircle_Demo()
                    {
                        //Some simple code segments on how to use the cmdCircle
                        VectorDraw.Professional.vdObjects.vdDocument doc = vdFramedControl1.BaseControl.ActiveDocument;
            
                        ////User will select both center and radious
                        bool circle_created = doc.CommandAction.CmdCircle("USER", "USER");
                                                 //"user" or null as parameter is the same
                        if (circle_created) Console.WriteLine("Circle created");
            
                        //Center of the circle will be point 3,3 (in User CS) and user will select the radius length
                        doc.CommandAction.CmdCircle(new VectorDraw.Geometry.gPoint(3, 3), "user");
            
                        //User will select with mouse the center point o the circle. The radius will be 3 drawing units
                        doc.CommandAction.CmdCircle(null, (double)3);
            
                        //Create a circle that passes from 2 points that user choose
                        doc.CommandAction.CmdCircle("2p", null);
            
                        //Create a circle that passes from 3 points
                        VectorDraw.Geometry.gPoints pts3 = new VectorDraw.Geometry.gPoints(3);
                        pts3.Add(new VectorDraw.Geometry.gPoint(-1, 1));
                        pts3.Add(0, 0, 0);
                        pts3.Add(1, 1, 0);
                        doc.CommandAction.CmdCircle("3p", pts3);
                    }
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CircleTanTanRad(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initiates a command that will draw a circle tangent to two vdCurves (lines, arcs or circles).
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <returns>True if the operation is successfuly completed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.Circle3Tan(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initiates a command that will draw a circle tangent to three vdCurves (lines, arcs or circles).
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <returns>True if the operation is successfuly completed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CircleDiameter(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initiates a command that will draw a circle.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <returns>True if the operation is successfuly completed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdCircleTanTanRad(System.Object,System.Object,System.Object)">
            <summary>
            Creates a new circle, tangent to the two vdCurve objects passed as parameters.
            </summary>
            <param name="curve1">The first vdCurve object the circle will be tangent to.</param>
            <param name="curve2">The second vdCurve object the circle will be tangent to. This cannot be the same as the first parameter.</param>
            <param name="radius">The circles radius.</param>
            <returns>Returns true if the command was successful and <see cref="T:VectorDraw.Professional.vdFigures.vdCircle"/> is added to the document.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdCircle3Tan(System.Object,System.Object,System.Object)">
            <summary>
            Creates a new circle, tangent to the three vdCurve objects passed as parameters.
            </summary>
            <param name="curve1">The first vdCurve object the circle will be tangent to.</param>
            <param name="curve2">The second vdCurve object the circle will be tangent to.</param>
            <param name="curve3">The third vdCurve object the circle will be tangent to.</param>
            <returns>&gt;Returns true if the command was successful and <see cref="T:VectorDraw.Professional.vdFigures.vdCircle"/> is added to the document.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdCircleDiameter(System.Object,System.Object)">
            <summary>
            Starts a command so the user can draw a circle. This is a user-command where the user can choose using graphical interface the position and/or size of the circle.
            </summary>
            <param name="CenterPoint">The center of the circle in User Coordinate System (UCS) as <see cref="T:VectorDraw.Geometry.gPoint"/> or "USER" so the user can click this point to the screen.</param>
            <param name="Diameter">The diameter of the circle or "USER" so the user can pick the diameter on screen.</param>
            <returns>Returns true if the command was successful and <see cref="T:VectorDraw.Professional.vdFigures.vdCircle"/> is added to the document.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.ZoomE_Ex(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs a zoom extend to the active layout of the passed vdDocument.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the action will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.ZoomA_Ex(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs a zoom all to the active layout of the passed Document.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the action will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.ZoomS_Ex(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs a zoom scaled to the active layout of the passed Document.The user will be asked
            for a double value.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the action will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.ZoomP_Ex(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs the previous zoom to the active layout of the passed Document.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the action will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.ZoomW_Ex(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs a zoom window to the active layout of the passed Document.The user will be asked 
            to specify a two points window to perform the command.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the action will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.ZoomIn_Ex(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs a zoom in to the active layout of the passed Document. Zoom in is performed as
            zoom scale with scale 1.2
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object  where the action will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.ZoomOut_Ex(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs a zoom out to the active layout of the passed Document. Zoom out is performed as
            zoom scale with scale 0.8
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the action will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.ZoomEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            A general zoom command asking the user which type
            of zoom to perform (Extend, All, Scale, Previous, Window)
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the action will take place.</param>
            <remarks>Accepted string values are "E"/"e", "A"/"a", "S"/"s", "P"/"p", "W"/"w" and Default value is "E"</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.ZoomToObject_Ex(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs a zoom to selection , the user is asked to select figures in order to zoom to.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the action will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.ZoomToSelection_Ex(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs a zoom to object , the user is asked to select a figure in order to zoom to.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the action will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.Zoom(System.Object,System.Object,System.Object)">
            <summary>
            Performs all types of zoom depending the parameters.
            </summary>
            <param name="Type">The type of zoom can be one of the following 
            strings: (e)xtend, (a)ll, (s)cale, (p)revious, (w)indow, (o)bject , (sel)ection </param>
            <param name="FirstCorner">First corner for (W)indow zoom or "USER" or null so the user will pick this corner to the screen or a <see cref="T:VectorDraw.Geometry.gPoint"/> object in User Coordinate System (UCS).If type is "o" this can be a vdFigure object.If type is "sel" this can be a vdSelection object.</param>
            <param name="OtherCorner">Second corner for (W)indow zoom or "USER" or null so the user will pick this corner to the screen, or a <see cref="T:VectorDraw.Geometry.gPoint"/> object in User Coordinate System (UCS).</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.RegenEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Recalculates and redraws all objects of the Document.
            </summary>
            <param name="doc">The document where the command will take place.</param>
            <remarks>It is the same as <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.RegenAll"/> method. Calls the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Update"/> and <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Redraw(System.Boolean)"/> methods.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.RedrawEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Redraws all objects of the Document.
            </summary>
            <param name="doc">The document where the command will take place.</param>
            <remarks>It is the same as <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Redraw(System.Boolean)"/> method passing True to doitNow parameter. Calls the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Invalidate"/> and <see cref="M:System.Windows.Forms.Control.Update"/> methods.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.RegenAll">
            <summary>
            Recalculates and redraws all objects of the this object's document.
            </summary>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Update"/> and <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Redraw(System.Boolean)"/> methods.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.LineEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs a command to draw lines to the document.
            </summary>
            <param name="doc">The  <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdLine(System.Object)"/> method with null parameter.</remarks> 
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.AddAttributeEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Shows the Add Attribute dialog in order to add an attribute to the given Document.
            </summary>
            <param name="doc">The document where the command will take place.</param>
            <remarks> Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.AddAttribute"/> method.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.AddAttribute">
            <summary>
            Shows the Add Attribute dialog in order to add an attribute to the <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object.
            </summary>
            <returns>True if the operation was successful.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.XLineEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs a command to draw an Xline (construction line) to the document.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdXLine(System.Object)"/> method passing null parameter.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.RayEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs a command to draw a ray line to the document.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdRay(System.Object)"/> method passing null parameter.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdXLine(System.Object,System.Object)">
            <summary>
            Performs a command to draw an Xline Infinity line to the document.
            </summary>
            <param name="BasePoint">A gPoint object that represents the BasePoint of the object or null , "USER" so the user picks this point.</param>
            <param name="Direction">A gPoint object that represents the Direction of the object or null , "USER" so the user picks this point.</param>
            <returns>True if the command was successful.</returns>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdXLine" action string.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdXLine(System.Object)">
            <summary>
            Performs a command to draw an Xline Infinity line to the document.
            </summary>
            <param name="ParamList">Can be either "USER" (or null) so the user is asked to select points on the screen
            or a 2 points collection of gPoints in User Coordinate System (UCS) containing A basepoint and another point for the direction.</param>
            <returns>True if the command was successful.</returns>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdXLine" action string.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdRay(System.Object,System.Object)">
            <summary>
            Performs a command to draw an Ray Infinity line to the document.
            </summary>
            <param name="BasePoint">A gPoint object that represents the BasePoint of the object or null , "USER" so the user picks this point.</param>
            <param name="Direction">A gPoint object that represents the Direction of the object or null , "USER" so the user picks this point.</param>
            <returns>True if the command was successful.</returns>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdRay" actionName.
            </remarks> 
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdRay(System.Object)">
            <summary>
            Performs a command to draw an Ray Infinity line to the document.
            </summary>
            <param name="ParamList">Can be either "USER" (or null) so the user is asked to select points on the screen
            or a 2 points collection of gPoints in User Coordinate System (UCS) containing A basepoint and another point for the direction.</param>
            <returns>True if the command was successful.</returns>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdRay" actionName.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.LeaderEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs a command to draw a Leader to the document.
            </summary>
            <param name="doc">The  <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdLeader(System.Object,System.Object)"/> method passing null parameters.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdLeader(System.Object,System.Object)">
            <summary>
            A command that asks the user to add a leader.
            </summary>
            <param name="ParamVertexlist">A Vertexes array in User Coordinate System (UCS) with two or more points of the Leader object or "USER"/null so the user picks the points.</param>
            /// <param name="Text">The text for the leader's Mtext object or null so the user is asked to enter the text.</param>
            <returns>True if the object was successfully added.</returns>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdLeader" action name.
            </remarks>
             <example>This code will create a <see cref="T:VectorDraw.Professional.vdFigures.vdLeader"/> object using CmdLeader method, passing 4 vertexes (as <see cref="T:VectorDraw.Geometry.Vertexes"/> object) in UCS.<code>
                    private void cmdLeader_Demo()
                    {
                        VectorDraw.Professional.vdObjects.vdDocument vdDoc = vdFramedControl1.BaseControl.ActiveDocument;
                        VectorDraw.Geometry.Vertexes verts = new VectorDraw.Geometry.Vertexes();
                        verts.Add(1, 1, 0, 0);
                        verts.Add(3, 3, 0, 0);
                        verts.Add(3, 5, 0, -0.5);
                        verts.Add(8, 6, 0,0);
                        vdDoc.CommandAction.CmdLeader(verts, "My Leader");
                    } 
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdLine(System.Object)">
            <summary>
            Performs a command to draw lines to the document.
            </summary>
            <param name="ParamList">Can be either "USER"/null so the user is asked to select points on the screen
            or a collection of gPoint objects as <see cref="T:VectorDraw.Geometry.gPoints"/> in User Coordinate System (UCS) containing all the necessary points for the lines.</param>
            <returns>True if the command was successful.</returns>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdLine" action name.
            </remarks>
            <example>This code will create 3 <see cref="T:VectorDraw.Professional.vdFigures.vdLine"/> objects using CmdLine method, passing 4 gPoints (as <see cref="T:VectorDraw.Geometry.gPoints"/> object) in UCS.<code>
                    private void Create3Lines_Demo()
                    {
                        VectorDraw.Professional.vdObjects.vdDocument vdDoc = vdFramedControl1.BaseControl.ActiveDocument;
                        VectorDraw.Geometry.gPoints pts = new VectorDraw.Geometry.gPoints();
                        pts.Add(1, 1, 0);
                        pts.Add(2, 2, 0);
                        pts.Add(3, 1, 0);
                        pts.Add(4, 2, 0);
                        vdDoc.CommandAction.CmdLine(pts); // this code will create 3 vdLine objects
                    } 
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.ArcEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs a command to draw an arc to the passed document.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdArc(System.Object,System.Object,System.Object,System.Object)"/> method passing null parameters.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdArc(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Performs a command to draw an arc to the passed document.
            </summary>
            <param name="CenterPoint">The center of the <see cref="T:VectorDraw.Professional.vdFigures.vdArc"/> object in User Coordinate system (UCS)as <see cref="T:VectorDraw.Geometry.gPoint"/> object or "USER"/null so the user can pick the point to the screen or "3p"/"E3p" if you want the command to work with 3 points.</param>
            <param name="Radius">The radius of the arc as double or "USER"/null so the user can pick the distance to the screen.</param>
            <param name="StartAngle">The start angle of the arc in radians as double or "USER"/null so the user is asked to pick the start angle to the screen.</param>
            <param name="EndAngle">The end angle of the arc in radians as double or "USER"/null so the user can pick the end angle to the screen.</param>
            <returns>True if the command was successful.</returns>  
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdArc" action name.
            <para>
            If CenterPoint is 3P or E3p then Radius, StartAngle and EndAngle should be points (gPoints if passed by code) or "user"/null for user input.
            </para>
            </remarks>
             <example>This code will create <see cref="T:VectorDraw.Professional.vdFigures.vdArc"/> objecta using CmdArc method.<code>
                    private void cdmArc_Demo()
                    {
                        VectorDraw.Professional.vdObjects.vdDocument vdDoc = vdFramedControl1.BaseControl.ActiveDocument;
                        
                        //Ask the user to give the start and end angles of an arc with center point 2,2 (UCS) and radius 3 D.U. 
                        VectorDraw.Geometry.gPoint cen = new VectorDraw.Geometry.gPoint(2, 2);
                        vdDoc.CommandAction.CmdArc(cen,(double)3.0d,"user","user");
            
                        //Ask the user to give the radius of an arc that has start angle 30 degrees and end angle 120 degrees. 
                        double sa = VectorDraw.Geometry.Globals.DegreesToRadians(30);
                        double ea = VectorDraw.Geometry.Globals.DegreesToRadians(120);
                        vdDoc.CommandAction.CmdArc(cen, null , sa, ea); //sa and ea must be in radians not in degrees
                    } 
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.RotateEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Rotates a selection of objects that the user selects and rotates them around a selected base point.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdRotate(System.Object,System.Object,System.Object,System.Object)"/> method passing null parameters.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdRotate(System.Object,System.Object,System.Object)">
            <summary>
            Rotates objects around a base point.
            </summary>
            <param name="SelSet">A selection of vdFigures (see <see cref="T:VectorDraw.Professional.vdCollections.vdSelection"/> object) or "USER"/null so the user can select the entities.</param>
            <param name="BasePoint">A base point <see cref="T:VectorDraw.Geometry.gPoint"/> object in User Coordinate system (UCS) or "USER"/null so the user picks the point.</param>
            <param name="Rotation">The rotation in radians as double or "USER"/null so the user rotates the objects to the screen.</param>
            <returns>True if the command was successful.</returns>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdRotate" action name.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdRotate(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Rotates objects around a base point.
            </summary>
            <param name="SelSet">A selection of vdFigures (see <see cref="T:VectorDraw.Professional.vdCollections.vdSelection"/> object) or "USER"/null so the user can select the entities.</param>
            <param name="BasePoint">A base point <see cref="T:VectorDraw.Geometry.gPoint"/> object in User Coordinate system (UCS) or "USER"/null so the user picks the point.</param>
            <param name="RefAngle">The reference angle in radians as double or "USER"/null so the user choose the reference angle on screen.</param>
            <param name="Rotation">The rotation in radians as double or "USER"/null so the user rotates the objects to the screen.</param>
            <returns>True if the command was successful.</returns>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdRotate" action name.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CopyEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs a copy of user selected objects from one point to another.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdCopy(System.Object,System.Object,System.Object)"/> method passing null parameters.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdCopy(System.Object,System.Object,System.Object)">
            <summary>
            Copies a selection of objects from one point to another.
            </summary>
            <param name="SelSet">A selection of vdFigures (see <see cref="T:VectorDraw.Professional.vdCollections.vdSelection"/> object) or "USER"/null so the user can pick entities from the screen.</param>
            <param name="FromPoint">A base point  <see cref="T:VectorDraw.Geometry.gPoint"/> object needed to copy the entities in User Coord. System (UCS) or "USER"/null so ther user can pick this point on screen.</param>
            <param name="ToPoint">The point  <see cref="T:VectorDraw.Geometry.gPoint"/> object where the entities will be copied to in User Coord. System (UCS) or "USER"/null so the user can pick this point on screen.</param>
            <returns>True if the command was succesfully performed.</returns>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdCopy" action name.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdCopy(System.Object,System.Object,System.Object,System.Boolean)">
            <summary>
            Copies a selection of objects from one point to another.
            </summary>
            <param name="SelSet">A selection of vdFigures (see <see cref="T:VectorDraw.Professional.vdCollections.vdSelection"/> object) or "USER"/null so the user can pick entities from the screen.</param>
            <param name="FromPoint">A base point  <see cref="T:VectorDraw.Geometry.gPoint"/> object needed to copy the entities in User Coord. System (UCS) or "USER"/null so ther user can pick this point on screen.</param>
            <param name="ToPoint">The point  <see cref="T:VectorDraw.Geometry.gPoint"/> object where the entities will be copied to in User Coord. System (UCS) or a gPoints collection or "USER"/null so the user can pick this point on screen.</param>
            <param name="Multicopy">A bool value that represents if the command will continue copying the selected entities until right click finishes the action.</param>
            <returns>True if the command was succesfully performed.</returns>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdCopy" action name.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.EraseEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Erases a selection of entities selected by the user.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param> 
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdErase(System.Object)"/> method passing null parameter.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdErase(System.Object)">
            <summary>
            Erases a selection of objects.
            </summary>
            <param name="SelSet">A selection of vdFigures (see <see cref="T:VectorDraw.Professional.vdCollections.vdSelection"/> object) or "USER"/null so the user can pick entities from the screen.</param>
            <returns>True if the command was successful.</returns>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdErase" action name.
            <para>The vdFigures that are deleted are not destroyed, they remain in the document with <see cref="P:VectorDraw.Professional.vdPrimaries.vdFigure.Deleted"/> property = True. </para>
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.ScaleEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Scales a selection of objects.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdScale(System.Object,System.Object,System.Object)"/> method passing null parameters.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdScale(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Scales a selection of objects.
            </summary>
            <param name="SelSet">A selection of vdFigures (see <see cref="T:VectorDraw.Professional.vdCollections.vdSelection"/> object) or "USER"/null so the user can pick the objects on screen.</param>
            <param name="BasePoint">A basepoint <see cref="T:VectorDraw.Geometry.gPoint"/> object needed in User Coord. System (UCS) or "USER"/null so the user can pick this point on screen.</param>
            <param name="ScaleFactor">A double value representing the scale or "USER"/null so the user tranforms the objects on screen.</param>
            <param name="ScaleZDirection">A boolean value that represents if the commend will scale the selection set in z direction or "USER"/null so the user is prompted to select Yes/No if he wants to scale in Z direction.</param>
            <returns>True if the command was successful</returns>
            <remarks>Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdScale" action name.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdScale(System.Object,System.Object,System.Object)">
            <summary>
            Scales a selection of objects.
            </summary>
            <param name="SelSet">A selection of vdFigures (see <see cref="T:VectorDraw.Professional.vdCollections.vdSelection"/> object) or "USER"/null so the user can pick the objects on screen.</param>
            <param name="BasePoint">A basepoint <see cref="T:VectorDraw.Geometry.gPoint"/> object needed in User Coord. System (UCS) or "USER"/null so the user can pick this point on screen.</param>
            <param name="ScaleFactor">A double value representing the scale or "USER"/null so the user tranforms the objects on screen.</param>
            <returns>True if the command was successful</returns>
            <remarks>Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdScale" action name.This method scales only in x and y direction. If you want also scale to z direction use the other override of CmdScale.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.MoveEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Moves a selection of objects from one point to another.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdMove(System.Object,System.Object,System.Object)"/> method passing null parameters.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdMove(System.Object,System.Object,System.Object)">
            <summary>
            Moves a vdSelection of figures from one point to another.
            </summary>
            <param name="SelSet">A <see cref="T:VectorDraw.Professional.vdCollections.vdSelection"/> of vdFigures or "USER"/null so the user picks the objects to the screen.</param>
            <param name="FromPoint">The base point as <see cref="T:VectorDraw.Geometry.gPoint"/>  in User Coord. System (UCS) or "USER"/null so the user can pick this point to the screen.</param>
            <param name="ToPoint">Another point as <see cref="T:VectorDraw.Geometry.gPoint"/> representing where the objects will be placed in User Coord. System (UCS) or "USER"/null so the user picks this point to the screen.</param>
            <returns>True if the command was successful.</returns>
            <remarks>Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdMove" action name.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdMove(System.Object,System.Object,System.Object,VectorDraw.Professional.CommandActions.FollowMode,System.Object)">
            <summary>
            Moves a vdSelection of figures from one point to another.
            </summary>
            <param name="SelSet">A <see cref="T:VectorDraw.Professional.vdCollections.vdSelection"/> of vdFigures or "USER"/null so the user picks the objects to the screen.</param>
            <param name="FromPoint">The base point as <see cref="T:VectorDraw.Geometry.gPoint"/> in User Coord. System (UCS) or "USER"/null so the user can pick this point to the screen.</param>
            <param name="ToPoint">Another point as <see cref="T:VectorDraw.Geometry.gPoint"/> representing where the objects will be placed in User Coord. System (UCS) or "USER"/null so the user picks this point to the screen.</param>
            <param name="followMode">Represents a value, see <see cref="T:VectorDraw.Professional.CommandActions.FollowMode"/>, that used to lock or not the user entities movement.</param>
            <param name="FollowTarget">Represents a region to lock the movement. If it is  "USER"/null then the user is asked to select one on the screen. It can be also an array of gPoints or Vertexes or a predifined vdCurve object.</param>
            <returns>True if the command was successful.</returns>
            <remarks>Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdMove" action name.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.SelectEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Used to select objects in the document.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the selection will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdSelect(System.Object)"/> method passing null parameter.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdSelect(System.Object)">
            <summary>
            Used for selecting objects.
            </summary>
            <param name="SelectMode">This parameter can be one of the following:
            A <see cref="T:VectorDraw.Professional.vdCollections.vdSelection"/> object containing a number of vdFigure objects to be selected
            One <see cref="T:VectorDraw.Professional.vdPrimaries.vdFigure"/> object.
            "ALL" so all objects of the active layout of the document will be selected.
            "PREV" so the previously selected objects (in "VDRAW_PREVIOUS_SELSET") will be selected.
            "USER"/null so the user selects objects from the screen.
            If it is "USER" then also the following accepted values can be parsed:
            "all", "prev", "last" as before.
            "fp": fence polygon. The user picks a polyline and all entities that cross this polyline are selected.
            "wp": window polygon. The user picks a closed polygon and all entities completely inside this polygon are selected.
            "cp": crossing polygon. The user picks a closed polygon and all entities that cross this polygon are selected.
            </param>
            <returns>True if the command was successful. The selected entities are inserted in a selection of the document named "VDRAW_PREVIOUS_SELSET".</returns>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdSelect" action name.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.WriteBlockEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Creates a file from a selection of entities.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdWriteBlock(System.Object,System.Object,System.Object,System.Object)"/> method passing null parameters.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdWriteBlock(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Creates a file from a selection of entities.
            </summary>
            <param name="SelSetOrBlockName">You can pass a <see cref="T:VectorDraw.Professional.vdCollections.vdSelection"/> of vdFigures, a string containing the name of one <seealso cref="T:VectorDraw.Professional.vdPrimaries.vdBlock"/>vdBlock of the document from where the entities will be taken or "USER"/null so the user can pick the entities from the screen.</param>
            <param name="OriginPoint">You can pass a <see cref="T:VectorDraw.Geometry.gPoint"/> as origin in User Coordinate System (UCS) or "USER"/null so the user can pick this point on screen.</param>
            <param name="FileName">The filename of the created file where the entities will be written.</param>
            <param name="Version">The version of the file to be created. If this is null or "user" then the <seealso cref="P:VectorDraw.Professional.vdObjects.vdDocument.Version"/> will be used. This apply to formats that have versioning like VDF or DXF and not for versionless formats like VDML.</param>
            <returns>True if the command was successful.</returns>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdWriteBlock" action name.
            </remarks>
            <example>This sample code below will create and save to a new file a drawing that contains only the selected entities
            <code>  
                    private void SaveSelection_Demo()
                    {
                        //The following example saves a portion of a drawing in a new file.
                        VectorDraw.Professional.vdObjects.vdDocument doc = vdFramedControl1.BaseControl.ActiveDocument;
            
                        //Add a new layer object into the layers colection with name "1"
                        VectorDraw.Professional.vdPrimaries.vdLayer layer1 = doc.Layers.Add("1");
                        //Set default color used by the entities that belong to this layer and have PenColor property ByLayer.
                        layer1.PenColor = new VectorDraw.Professional.vdObjects.vdColor(Color.Red);
            
                        //Add a new layer object into the layers colection with name "2"
                        VectorDraw.Professional.vdPrimaries.vdLayer layer2 = doc.Layers.Add("2");
                        //Set default color used by the entities that belong to this layer and have PenColor property ByLayer.
                        layer2.PenColor = new VectorDraw.Professional.vdObjects.vdColor(Color.Green);
            
                        //Create a vdLine object assign to layer1
                        VectorDraw.Professional.vdFigures.vdLine l1 = new VectorDraw.Professional.vdFigures.vdLine();
                        l1.SetUnRegisterDocument(doc);
                        l1.setDocumentDefaults();
                        l1.StartPoint = new VectorDraw.Geometry.gPoint(0, 0);
                        l1.EndPoint = new VectorDraw.Geometry.gPoint(2, 0);
                        l1.Layer = layer1;
                        doc.ActiveLayOut.Entities.AddItem(l1);
            
                        //Create a vdLine object assign to layer2
                        VectorDraw.Professional.vdFigures.vdLine l2 = new VectorDraw.Professional.vdFigures.vdLine();
                        l2.SetUnRegisterDocument(doc);
                        l2.setDocumentDefaults();
                        l2.StartPoint = new VectorDraw.Geometry.gPoint(1, -1);
                        l2.EndPoint = new VectorDraw.Geometry.gPoint(1, 1);
                        l2.Layer = layer2;
                        doc.ActiveLayOut.Entities.AddItem(l2);
            
                        //Create a new selection and fills it with all entities of Active Layout that are in layer1
                        VectorDraw.Professional.vdObjects.vdFilterObject filter = new VectorDraw.Professional.vdObjects.vdFilterObject();
                        filter.Layers.AddItem(layer1.Name);
                        VectorDraw.Professional.vdCollections.vdSelection set = doc.Selections.Add("test");
                        set.Select(VectorDraw.Render.RenderSelect.SelectingMode.All, null);
                        set.ApplyFilter(filter);
            
                        //saves the selection in a new file.
                        bool success = doc.CommandAction.CmdWriteBlock(set, new VectorDraw.Geometry.gPoint(), 
                            Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + @"\cmdwriteblock.vdml", null);
                    }
            </code></example>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdWriteBlock(System.Object,System.Object,System.Object)">
            <summary>
            Creates a file from a selection of entities.
            </summary>
            <param name="SelSetOrBlockName">You can pass a <see cref="T:VectorDraw.Professional.vdCollections.vdSelection"/> of vdFigures, a string containing the name of one <seealso cref="T:VectorDraw.Professional.vdPrimaries.vdBlock"/>vdBlock of the document from where the entities will be taken or "USER"/null so the user can pick the entities from the screen.</param>
            <param name="OriginPoint">You can pass a <see cref="T:VectorDraw.Geometry.gPoint"/> as origin in User Coordinate System (UCS) or "USER"/null so the user can pick this point on screen.</param>
            <param name="FileName">The filename of the created file where the entities will be written.</param>
            <returns>True if the command was successful.</returns>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdWriteBlock" action name. See also <seealso cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdWriteBlock(System.Object,System.Object,System.Object,System.Object)"/> for a code sample.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.InsertEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Opens a dialog for selecting and inserting a block in the document.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> where the command will take place.</param>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdInsertBlockDialog"/> method.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdInsert(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Inserts a block to the active layout.
            </summary>
            <param name="BlockName">The name of the block or the filename (including path) to be inserted or "USER"/null so the user types the name.</param>
            <param name="InsertionPoint">The insertion point in User Coord. system (UCS) or "USER"/null so the user picks this point on the screen.</param>
            <param name="ScaleX">The x Scale as Double for the insert or "USER"/null so the user selectes the scale on screen.</param>
            <param name="ScaleY">The y Scale as Double for the insert or "USER",null so the user selectes the scale on screen.</param>
            <param name="angle">Rotation angle in Radians as Double for the insert or "USER"/null so the user selectes the angle on screen.</param>
            <returns>True if the command was succesfull.</returns>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdInsert" action name.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdInsert(System.Object,System.Object,VectorDraw.Professional.CommandActions.FollowMode,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Inserts a block to the active layout.
            </summary>
            <param name="BlockName">The name of the block or the filename (including path) to be inserted or "USER"/null so the user types the name.</param>
            <param name="InsertionPoint">The insertion point in User Coord. system (UCS) or "USER"/null so the user picks this point on the screen.</param>
            <param name="followMode">Represents a value that used to lock or not the user entities movement.</param>
            <param name="FollowTarget">Represents a region to lock the movement. If this is "USER"/null then the user is asked to select one on the screen. It can be also an array of gPoints or Vertexes or a predifined vdCurve object.</param>
            <param name="ScaleX">The x Scale as Double for the insert or "USER"/null so the user selectes the scale on screen.</param>
            <param name="ScaleY">The y Scale as Double for the insert or "USER"/null so the user selectes the scale on screen.</param>
            <param name="ScaleZ">The z Scale as Double for the insert or "USER"/null so the user selectes the scale on screen.</param>
            <param name="angle">Rotation angle in Radians as Double for the insert or "USER"/null so the user selectes the angle on screen.</param>
            <returns>True if the command was succesfull.</returns>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdInsert" action name.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.ClipCopyEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Copies a selection of objects to the clipboard.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/>  where the command takes place.</param>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdClipCopy(System.Object)"/> method, passing null.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdClipCopy(System.Object,System.Int32)">
            <summary>
            Copies a selection of objects to the clipboard.
            </summary>
            <param name="SelectionSet">A <see cref="T:VectorDraw.Professional.vdCollections.vdSelection"/> of vdFigures or "USER"/null, so the user picks the entities on the screen.</param>
            <param name="BasePoint">The basepoint is an integer value that represents the basepoint of the created block.Valid values are from 1 to 9. 
            1 for lower left, 
            2 for lower middle, 
            3 for lower right, 
            4 for middle left, 
            5 for middle middle, 
            6 for middle right, 
            7 for upper left, 
            8 for upper middle and 
            9 for middle right.</param>
            <returns>True if the command was succesfull.</returns>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdClipCopy" action name.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdClipCopy(System.Object,System.Object)">
            <summary>
            Copies a selection of objects to the clipboard.
            </summary>
            <param name="SelectionSet">A <see cref="T:VectorDraw.Professional.vdCollections.vdSelection"/> of vdFigures or "USER"/null, so the user picks the entities on the screen.</param>
            <param name="BasePoint">The basepoint is a gPoint in User Coordinate System (UCS) as <see cref="T:VectorDraw.Geometry.gPoint"/> or "USER"/null so the user picks the point on screen. </param>
            <returns>True if the command was succesfull.</returns>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdClipCopy" action name.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdClipCopy(System.Object)">
            <summary>
            Copies a selection of objects to the clipboard.
            </summary>
            <param name="SelectionSet">A <see cref="T:VectorDraw.Professional.vdCollections.vdSelection"/> of vdFigures or "USER"/null, so the user picks the entities on the screen.</param>
            <returns>True if the command was succesfull.</returns>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdClipCopy" action name.</remarks>
            <remarks>The base point use in this method is the middle point. If you want to control the basepoint please use the apropriate method.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.ClipCutEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Copies a selection of objects to the clipboard and also removes them from the document (clipcut).
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/>  where the command takes place.</param>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdClipCut(System.Object)"/> method, passing null.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdClipCut(System.Object,System.Int32)">
            <summary>
            Copies a selection of objects to the clipboard and removes them from the document (clipcut).
            </summary>
            <param name="SelectionSet">A <see cref="T:VectorDraw.Professional.vdCollections.vdSelection"/> of vdFigures or "USER"/null, so the user picks the entities on the screen.</param>
            <param name="BasePoint">The basepoint is an integer value that represents the basepoint of the created block.Valid values are from 1 to 9. 
            1 for lower left
            2 for lower middle
            3 for lower right
            4 for middle left
            5 for middle middle
            6 for middle right
            7 for upper left
            8 for upper middle
            9 for middle right.</param>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdClipCut(System.Object,System.Object)">
            <summary>
            Copies a selection of objects to the clipboard and removes them from the document (clipcut).
            </summary>
            <param name="SelectionSet">A <see cref="T:VectorDraw.Professional.vdCollections.vdSelection"/> of vdFigures or "USER"/null, so the user picks the entities on the screen.</param>
            <param name="BasePoint">The basepoint is a gPoint in User Coordinate System (UCS) as <see cref="T:VectorDraw.Geometry.gPoint"/> or "USER"/null so the user picks the point on screen. </param>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdClipCut(System.Object)">
            <summary>
            Copies a selection of objects to the clipboard and removes them from the document (clipcut).
            </summary>
            <param name="SelectionSet">A <see cref="T:VectorDraw.Professional.vdCollections.vdSelection"/> of vdFigures or "USER"/null, so the user picks the entities on the screen.</param>
            <returns>True if the command was succesfull.</returns>
             <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdClipCut" action name.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.ClipPasteEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Copies a selection of objects from the clipboard to the active layout of the document.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/>  where the command takes place.</param>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdClipPaste(System.Object)"/> method, passing null.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdClipPaste(System.Object)">
            <summary>
            Copies a selection of VectorDraw objects from the clipboard.
            </summary>
            <param name="InsertionPoint">The insertion point as <see cref="T:VectorDraw.Geometry.gPoint"/> in User Coordinate system (UCS) or "USER"/null so the user picks this point to the screen.</param>
            <returns>True if the command was succesfull.</returns>
             <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdClipPaste" action name.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdText(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Adds a text to a specified point on the screen.
            </summary>
            <param name="TextString">The string of the text or ""/null so the user writes the string to the commandline/screen.</param>
            <param name="InsertionPoint">The insertion point as <see cref="T:VectorDraw.Geometry.gPoint"/> of the text in User Coordinate system (UCS) or "USER"/null so the user picks this point to the screen.</param>
            <param name="Height">The Height of the text as double or "USER"/null so the user picks this point to the screen or 0.0 so this is overpassed.</param>
            <param name="RotationAngle">The rotation of the text as double or "USER"/null so the user chooses the rotation of the text to the screen.</param>
            <returns>True if the command was succesfull.</returns>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdText" action name.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.TextEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Adds a text to the document.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/>  where the command takes place.</param>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdText(System.Object,System.Object,System.Object,System.Object)"/> method, passing null.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdText(System.Object,System.Object,System.Object)">
            <summary>
            Adds a text to a specified point on the screen.
            </summary>
            <param name="TextString">The string of the text or "USER"/null so the user writes the string to the commandline/screen.</param>
            <param name="InsertionPoint">The insertion point as <see cref="T:VectorDraw.Geometry.gPoint"/> of the text in User Coordinate system (UCS) or "USER"/null so the user picks this point to the screen.</param>
            <param name="RotationAngle">The rotation of the text or "USER"/null so the user chooses the rotation of the text to the screen.</param>
            <returns>True if the command was succesfull.</returns>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdText" action name.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.MTextEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Adds an Mtext to the document.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/>  where the command takes place.</param>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdMText(System.Object,System.Object,System.Object)"/> method, passing nulls.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdMText(System.Object,System.Object,System.Object)">
            <summary>
            Adds an vdMText to a specified point on the screen.
            </summary>
            <param name="TextString">The string of the mtext or "USER",null so the user writes the string to the commandline.</param>
            <param name="RotationAngle">A double representing the Mtext rotation angle in radians or "USER"/null so the user writes the string to the commandline.</param>
            <param name="InsertionPoint">The insertion point as <see cref="T:VectorDraw.Geometry.gPoint"/> of the mtext in  User Coordinate system (UCS) or "USER"/null so the user picks this point to the screen.</param>
            <returns>True if the command was succesfull.</returns>
            <remarks>The command ends with Esc or right click.</remarks>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdMText" action name.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdMText(System.Object,System.Object,System.Object,System.Int32,System.Int32)">
            <summary>
            Adds an vdMText to a specified point on the screen.
            </summary>
            <param name="TextString">The string of the vdMText or "USER"/null so the user writes the string to the commandline.</param>
            <param name="RotationAngle">A double representing the MText's rotation angle in radians or "USER"/null so the user writes the string to the commandline.</param>
            <param name="InsertionPoint">The insertion point as <see cref="T:VectorDraw.Geometry.gPoint"/> of the MText in User Coordinate system (UCS) or "USER"/null so the user picks this point to the screen.</param>
            <param name="maxlinelength">The maximum number of characters per line as integer. Set this to 0 for unlimited characters.</param>
            <param name="maxlegth">The maximum number of characters as integer for the whole length of the mtext string value. Set this to 0 for unlimited characters.</param>
            <returns>True if the command was succesfull.</returns>
            <remarks>The command ends with mouse right click or with ESC key which cancels the whole command.</remarks>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdMText" action name.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdMText(System.Object,System.Object,System.Object,System.Object,System.Int32,System.Int32)">
            <summary>
            Adds an vdMText to a specified point on the screen.
            </summary>
            <param name="TextString">The string of the vdMText or "USER"/null so the user writes the string to the commandline.</param>
            <param name="RotationAngle">A double representing the MText's rotation angle in radians or "USER"/null so the user writes the string to the commandline.</param>
            <param name="InsertionPoint">The insertion point as <see cref="T:VectorDraw.Geometry.gPoint"/> of the MText in User Coordinate system (UCS) or "USER"/null so the user picks this point to the screen.</param>
            <param name="Height">The Height of the text or "USER"/null so the user picks this point to the screen or 0.0 so this is overpassed.</param>
            <param name="maxlinelength">The maximum number of characters per line as integer. Set this to 0 for unlimited characters.</param>
            <param name="maxlegth">The maximum number of characters as integer for the whole length of the mtext string value. Set this to 0 for unlimited characters.</param>
            <returns>True if the command was succesfull.</returns>
            <remarks>The command ends with mouse right click or with ESC key which cancels the whole command.</remarks>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdMText" action name.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdMtextEditEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Edits an vdMText of the document.
            </summary>
            <param name="doc">&gt;The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/>  where the command takes place.</param>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdMtextEdit(System.Object)"/> method, passing null.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdMtextEdit(System.Object)">
            <summary>
            Edits a vdMtext object.
            </summary>
            <param name="Mtext">A gPoint on the Mtext, or a vdMText object or "USER"/null so the user picks the point/vdMtext object on screen.</param>
            <remarks>The command ends with Esc key or with mouse right click.</remarks>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdEditMText" action name.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdMtextEdit(System.Object,System.Int32,System.Int32)">
            <summary>
            Edits a vdMText object.
            </summary>
            <param name="Mtext">A gPoint where the vdMText is, an vdMText object or "USER"/null so the user picks the point to the screen.</param>
            <param name="maxlinelegth">The maximum number as integer of characters per line. Set this to 0 for unlimited characters.</param>
            <param name="maxlength">The maximum number of characters for the whole length of the vdMText string value as integer.Set this to 0 for unlimited characters.</param>
            <remarks>The command ends with ESC key or with mouse right click.</remarks>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdEditMText" action name.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdTextEdit(System.Object)">
            <summary>
            Edits a vdText object.
            </summary>
            <param name="Text">A gPoint where the vdText is, an vdText object or "USER"/null so the user picks the point to the screen.</param>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdTextEdit(System.Object,System.Int32)"/> method, passing the Text object and 0 (unlimited).</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdTextEdit(System.Object,System.Int32)">
            <summary>
            Edits a vdText object.
            </summary>
            <param name="Text">A gPoint where the vdText is, an vdText object or "USER"/null so the user picks the point to the screen.</param>
            <param name="maxlength">The maximum number of characters for the length of the vdText string value as integer. Set this to 0 for unlimited characters.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdTextEditEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs a Text Edit command.The user is prompted to select a text to edit.
            </summary>
            <param name="doc">The  <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> where the command will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdEditTxTEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs a Text Edit command.The user is prompted to select a text to edit. The selected text can be either vdText or vdMtext.
            </summary>
            <param name="doc">The  <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> where the command will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdEditTxT(System.Object)">
            <summary>
            Performs a Text Edit command.The user is prompted to select a text to edit. The selected text can be either vdText or vdMtext.
            </summary>
            <param name="Text">This parameter can be either a vdText or vdMtext object or "USER" , null so the user picks this text object to the screen.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdEditTxT(System.Object,VectorDraw.Geometry.gPoint,System.Boolean)">
            <summary>
            Performs a Text Edit command.The user is prompted to select a text to edit. The selected text can be either vdText or vdMtext.
            </summary>
            <param name="Text">This parameter can be either a vdText or vdMtext object or "USER" , null so the user picks this text object to the screen.</param>
            <param name="Point">The Point Where the passed Text is OR null.</param>
            <param name="raiseEvents">True in order <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> , <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/> , <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> to be fire.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.UndoEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs an undo of the last action taken to the document.
            </summary>
            <param name="doc">The  <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> where the command will take place.</param>
             <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.Undo(System.String)"/> method, passing empty string.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.Undo(System.String)">
            <summary>
            Undo the last command performed to the document.
            </summary>
            <param name="Option">Can be either an empty string "" to undo the last command or it can be "begin" or "end" to begin or end an undo group respectivelly.</param>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.RedoEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs a redo of the last command that was undone. 
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> where the command will take place.</param>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.Redo"/> method.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.Redo">
            <summary>
            Performs a redo of the last command that was undone.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.ExplodeEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Explodes a selection of objects(selected by the user) to subentities.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> where the command will take place.</param> 
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdExplode(System.Object)"/> method, passing null.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdExplode(System.Object)">
            <summary>
            Explodes a selection of objects into subentities if possible and add these entities to the Document.
            </summary>
            <param name="SelSet">A <see cref="T:VectorDraw.Professional.vdCollections.vdSelection"/> of <see cref="T:VectorDraw.Professional.vdPrimaries.vdFigure"/> objects or "USER"/null so the user picks the objects to the screen.</param>
            <returns>True if the command was succesfull.</returns>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdExplode" action name.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.PanEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
             Starts the pan action.
            </summary>
            <param name="doc">The Document where the command takes place.</param>
            <remarks>Pan Action finishes with right-click or ESC button</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.Pan">
            <summary>
            Starts the pan action.
            </summary>
            <remarks>Pan Action finishes with right-click or ESC button</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.DimRotatedHor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Adds a horizontal dimension to the document. The user picks the necessary points.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> where the command will take place.</param>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdDim(VectorDraw.Professional.Constants.VdConstDimType,System.Object,System.Object,System.Double)"/> method, passing <see cref="T:VectorDraw.Professional.Constants.VdConstDimType"/> dim_Rotated and null parameters with angle 0.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.DimRotatedVer(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Adds a vertical dimension to the document. The user picks the necessary points.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> where the command will take place.</param>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdDim(VectorDraw.Professional.Constants.VdConstDimType,System.Object,System.Object,System.Double)"/> method, passing <see cref="T:VectorDraw.Professional.Constants.VdConstDimType"/> dim_Rotated and null parameters with angle PI/2.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.DimAligned(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Adds an aligned dimension to the document. The user picks the necessary points.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> where the command will take place.</param>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdDim(VectorDraw.Professional.Constants.VdConstDimType,System.Object,System.Object,System.Double)"/> method, passing <see cref="T:VectorDraw.Professional.Constants.VdConstDimType"/> dim_Aligned and null parameters.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.DimAngular(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Adds an angular dimension to the document.The user picks the necessary points.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> where the command will take place.</param>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdDim(VectorDraw.Professional.Constants.VdConstDimType,System.Object,System.Object,System.Double)"/> method, passing <see cref="T:VectorDraw.Professional.Constants.VdConstDimType"/> dim_Angular and null parameters.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.DimDiameter(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Adds a diameter dimension to the document.The user picks the necessary points.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> where the command will take place.</param>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdDim(VectorDraw.Professional.Constants.VdConstDimType,System.Object,System.Object,System.Double)"/> method, passing <see cref="T:VectorDraw.Professional.Constants.VdConstDimType"/> dim_Diameter and null parameters.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.DimRadial(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Adds a radial dimension to the document.The user picks the necessary points.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> where the command will take place.</param>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdDim(VectorDraw.Professional.Constants.VdConstDimType,System.Object,System.Object,System.Double)"/> method, passing <see cref="T:VectorDraw.Professional.Constants.VdConstDimType"/> dim_Radial and null parameters.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.DimRotatedAuto(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Adds a horizontal or vertical dimension to the document. The user picks the necessary points.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> where the command will take place.</param>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdDimAR(System.Object)"/> method, passing null parameter.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdDim(VectorDraw.Professional.Constants.VdConstDimType,System.Object,System.Object,System.Double)">
            <summary>
            Adds a dimension to the document.
            </summary>
            <param name="Type">The  <see cref="T:VectorDraw.Professional.Constants.VdConstDimType"/> of the dimension to be added.</param>
            <param name="DefPoints">
             A <see cref="T:VectorDraw.Geometry.gPoints"/> object collection needed for the dimension or 
            an object array containing a <see cref="T:VectorDraw.Professional.vdPrimaries.vdFigure"/>  or
            "USER"/null so the user picks these points to the screen.
            </param>
            <param name="Position">The position of the dimension as <see cref="T:VectorDraw.Geometry.gPoint"/> or "USER"/null so the user picks this point on the screen.</param>
            <param name="Rotation">The rotation (double value) of the dimension in radians. Set it to 0.0 for horizontal rotated dimension and <see cref="F:VectorDraw.Geometry.Globals.HALF_PI"/> for vertical rotated dimension.</param>
            <returns>True if the command was succesfull.</returns>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdDim" action name.</remarks>
            <remarks>When the type of the Dimension is dim_Angular then the Rotation can determine the type of the Angular Dimension (Angle or Length). Rotation = 1.0 is length else it is angle.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdDimAR(System.Object)">
            <summary>
            Adds a rotated dimension (0 or 90 degrees rotation) to the document.
            </summary>
            <param name="DefPoints">A <see cref="T:VectorDraw.Geometry.gPoints"/> object collection needed for the dimension or an object array containing a <see cref="T:VectorDraw.Professional.vdPrimaries.vdFigure"/>  or "USER"/null so the user picks these points to the screen.
            </param>
            <returns>True if the command was succesfull.</returns>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdDim" action name.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdDimPolylineEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs a <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdDimPolyline(System.Object,System.Object)"/> to the passed Document.
            </summary>
            <param name="doc">The Document where the command takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdDimPolyline(System.Object,System.Object)">
            <summary>
            This command will add a Dimension to a section of a polyline.
            </summary>
            <param name="DefPoints">A vdPolyline OR "USER" , null so the user picks the polyline to the screen.</param>
            <param name="Position">The position of the dimension as <see cref="T:VectorDraw.Geometry.gPoint"/> or "USER"/null so the user picks this point on the screen.</param>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdDimArcEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs a <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdDimArcEx(VectorDraw.Professional.vdObjects.vdDocument)"/> with null parameters.
            </summary>
            <param name="doc">The Document where the command takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdDimArc(System.Object,System.Object,System.Object)">
            <summary>
            Adds a Dimension to an arc and connects the two entities.
            </summary>
            <param name="DefPoints">A vdArc object or null , "USER" so the user picks the arc.</param>
            <param name="type">null , "USER" so the user chooses or an integer value 0,1 that represents , Angle , Length accordinly.</param>
            <param name="Position">The position of the dimension as <see cref="T:VectorDraw.Geometry.gPoint"/> or "USER"/null so the user picks this point on the screen.</param>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdDimLineEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs a CmdDimLine command to the passe dDocument.
            </summary>
            <param name="doc">The Document where the command takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdDimLine(System.Object,System.Object,System.Object)">
            <summary>
            Creates an associative Dimension to a vdLine object.
            </summary>
            <param name="DefPoints">A vdLine object or null , "USER" so the user picks the line</param>
            <param name="type">null , "USER" so the user chooses or an integer value 0,1,2 that represents , Aligned , Horizontal , Vertical accordinly.</param>
            <param name="Position">The position of the dimension as <see cref="T:VectorDraw.Geometry.gPoint"/> or "USER"/null so the user picks this point on the screen.</param>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdDim(VectorDraw.Professional.Constants.VdConstDimType,System.Object,System.Object,System.Double,System.Boolean)">
            <summary>
            Adds a dimension to the document.
            </summary>
            <param name="Type">The  <see cref="T:VectorDraw.Professional.Constants.VdConstDimType"/> of the dimension to be added.</param>
            <param name="DefPoints">
            A <see cref="T:VectorDraw.Geometry.gPoints"/> object collection needed for the dimension or 
            an object array containing a <see cref="T:VectorDraw.Professional.vdPrimaries.vdFigure"/>  or
            "USER"/null so the user picks these points to the screen.
            </param>
            <param name="Position">The position of the dimension as <see cref="T:VectorDraw.Geometry.gPoint"/> or "USER"/null so the user picks this point on the screen.</param>
            <param name="Rotation">The rotation (double value) of the dimension in radians. Set it to 0.0 for horizontal rotated dimension and <see cref="F:VectorDraw.Geometry.Globals.HALF_PI"/> for vertical rotated dimension.</param>
            <param name="AutoRotated">If is true then "Rotation" passed is ignored and the dimension's rotation is calculated  to 0 or 90 degrees (half PI).</param>
            <returns>True if the command was succesfull.</returns>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdDim" action name.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.PointEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Adds a <see cref="T:VectorDraw.Professional.vdFigures.vdPoint"/> point to the document. The user picks the point on screen.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdPoint(System.Object)"/> method passing null parameters.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdPoint(System.Object)">
            <summary>
            Adds a <see cref="T:VectorDraw.Professional.vdFigures.vdPoint"/> to the document.
            </summary>
            <param name="point">A point in User Coordinate System (UCS) as <see cref="T:VectorDraw.Geometry.gPoint"/> or "USER"/null so the user picks the point on screen.</param>
            <returns>True if the command was succesfull.</returns>
            <remarks>Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdPoint" action string.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D_Render(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Changes the render mode of the document to "RENDER".
            </summary>
            <param name="doc">The  <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/>  where the command will take place.</param>
            <seealso cref="T:VectorDraw.Render.vdRender.Mode"/>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D(System.Object)"/> method, passing "RENDER".</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D_Shade(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Changes the render mode of the document to "SHADE".
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <seealso cref="T:VectorDraw.Render.vdRender.Mode"/>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D(System.Object)"/> method passing "SHADE" as parameter.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D_ShadeOn(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Changes the render mode of the document to "SHADEON".
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <seealso cref="T:VectorDraw.Render.vdRender.Mode"/>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D(System.Object)"/> method passing "SHADEON" as parameter.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D_Hide(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Changes the render mode of the document to "HIDE".
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <seealso cref="T:VectorDraw.Render.vdRender.Mode"/>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D(System.Object)"/> method passing "HIDE" as parameter.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D_Wire(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Changes the render mode of the document to "WIRE".
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <seealso cref="T:VectorDraw.Render.vdRender.Mode"/>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D(System.Object)"/> method passing "WIRE" as parameter.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D_Wire2d(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Changes the render mode of the document to "WIRE2D".
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <seealso cref="T:VectorDraw.Render.vdRender.Mode"/>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D(System.Object)"/> method passing "WIRE2D" as parameter.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D_Vrot(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Begins a 3D rotation of the document.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D(System.Object)"/> method passing "VROT" as parameter.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D_VCrot(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Begins a 3D rotation of the document. 
            After release the mouse button the objects continue their orbit in the direction that the user last specified.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D(System.Object)"/> method passing "VCROT" as parameter.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D_VWorld(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Sets the view point to World system (XY plane).
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D(System.Object)"/> method passing "VWORLD" as parameter.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D_VBottom(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Sets the view point to bottom.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D(System.Object)"/> method passing "VBOTTOM" as parameter.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D_VTop(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Sets the view point to top.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D(System.Object)"/> method passing "VTOP" as parameter.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D_VBack(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Sets the view point to back.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D(System.Object)"/> method passing "VBACK" as parameter.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D_VFront(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Sets the view point to front.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D(System.Object)"/> method passing "VFRONT" as parameter.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D_VLeft(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Sets the view point to left.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D(System.Object)"/> method passing "VLEFT" as parameter.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D_VRight(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Sets the view point to right.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D(System.Object)"/> method passing "VRIGHT" as parameter.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D_VINE(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Sets the view point to northeast isometric.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D(System.Object)"/> method passing "VINE" as parameter.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D_VINW(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Sets the view point to northwest isometric.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D(System.Object)"/> method passing "VINW" as parameter.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D_VISE(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Sets the view point to southeast isometric.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D(System.Object)"/> method passing "VISE" as parameter.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D_VISW(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Sets the view point to southwest isometric.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D(System.Object)"/> method passing "VISW" as parameter.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.View3D(System.Object)">
            <summary>
            Sets the view point of the <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> or changes the render mode depending the arguments.
            </summary>
            <param name="Arguments">a string representing the action to be performed.</param>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.UCSEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Changes the Axis3DRotations and TargetPoint properties of document.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> where the command will take place.</param>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.UCS(System.Object,System.Object,System.Object)"/> passing nulls.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.UCSW(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Changes the Axis3DRotations and TargetPoint properties of document to WORLD.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> where the command will take place.</param>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.UCS(System.Object,System.Object,System.Object)"/> passing "WORLD" and nulls.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.UCSV(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Changes the Axis3DRotations and TargetPoint properties of document to VIEW.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> where the command will take place.</param>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.UCS(System.Object,System.Object,System.Object)"/> passing "VIEW" and nulls.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.NamedUCSEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Command to handle namedUCSs.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> where the action takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.NamedUCS">
            <summary>
            Command to handle namedUCSs.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.UCS(System.Object,System.Object,System.Object)">
            <summary>
            Changes the Axis3DRotations and TargetPoint properties of document as WORLD.
            </summary>
            <param name="org">The origin point of the document as gPoint or "USER"/null or string "VIEW", "WORLD", "PREV" or "OBJECT" to set a default view.</param>
            <param name="px">A Point defines the positive X axis or "USER"/null so the user picks this point on the screen.</param>
            <param name="py">A Point defines the positive Y axis or "USER"/null so the user picks this point on the screen.</param>
            <returns>True if the command was succesfull.</returns>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "UCS" action name.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.UCSWorld">
            <summary>
            Changes the Axis3DRotations and TargetPoint properties of document to WORLD.
            </summary>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.UCS(System.Object,System.Object,System.Object)"/> passing "WORLD" and nulls.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.SaveCurrentViewEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            A command that will ask the user to set a name and save a vdView object in the Document's collection with the current view.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> where the action takes place.</param>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.SaveCurrentView(System.Object)"/> method, passing null.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.SaveCurrentView(System.Object)">
            <summary>
            A command that will ask the user to set a name and save a vdView object in the Document's collection with the current view.
            </summary>
            <param name="name">A string representing a name or "USER"/NULL so the user is asked to input a name. </param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.Rotate3dEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Rotates a selection of objects in 3D.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> where the command will take place.</param>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdRotate3d(System.Object,System.Object,System.Object,System.Object)"/> method, passing nulls.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdRotate3d(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Rotates a selection of objects in 3D.
            </summary>
            <param name="RotAxis">Can be one of the following: "X", "Y", "Z", "2P" as String or "USER"/null representing the rotation axis.</param>
            <param name="SelSet">A vdSelection of vdFigures to be rotated or "USER"/null so the user picks the objects to the screen.</param>
            <param name="AxisPoints">The base point as a gPoint in UCS when RotAxis is "X", "Y" or "Z" or a gPoints that contains two gPoint objects in UCS if RotAxis is "2P" needed for the rotation or "USER"/null so the user picks these points to the screen.</param>
            <param name="RotationAngle">The rotation angle as Double in Degrees or "USER"/null so the user selects the rotation.</param>
            <returns>True if the command was succesfull.</returns>
             <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdRotate3d" action name.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.MirrorEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Creates a mirror image copy of selected objects.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> where the command will take place.</param>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdMirror(System.Object,System.Object,System.Object,System.Object)"/> method, passing nulls.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdMirror(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Creates a mirror image copy of objects.
            </summary>
            <param name="SelSet">A vdSelection of vdFigures  or a single vdFigure  or "USER"/null so the user selects the objects to the screen.</param>
            <param name="MirrorLinePoint1">First point of the mirror line needed for the command or "USER",null so the user picks this point.</param>
            <param name="MirrorLinePoint2">Second point of the mirror line needed for the command or "USER",null so the user picks this point.</param>
            <param name="keepSourceObjects">A string value "yes" instructs that original objects will be kept or with any other string value will transform them to the new position in the document or "USER"/null so the user is asked for this value.</param>
            <returns>True if the command was succesfull.</returns>
             <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdMirror" action name.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.ArrayRectangularEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Creates an array defined by a number of rows and columns of copies of the selected objects.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> where the command will take place.</param>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdArrayRectangular(System.Object,System.Object,System.Object,System.Object,System.Object)"/> method, passing nulls.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdArrayRectangular(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Creates an array defined by a number of rows and columns of copies of the selected objects.
            </summary>
            <param name="SelSet">A vdSelection of vdFigures or "USER"/null so the user picks the objects to the screen.</param>
            <param name="NumberofRows">The number of rows as int or "USER"/null so the user will be asked for this number.</param>
            <param name="NumberofColumns">The number of columns as int or "USER"/null so the user will be asked for this number.</param>
            <param name="RowsDist">The distance between the rows as double or "USER"/null so the user will be asked for this number.</param>
            <param name="ColumnsDist">The distance between the columns  as double or "USER"/null so the user will be asked for this number.</param>
            <returns>True if the command was succesfull.</returns>
             <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdArrayRectangular" action name.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.ArrayPolarEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Creates an array of vdFigure objects defined by specifying a center point about which the objects are replicated.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> where the command will take place.</param>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdArrayPolar(System.Object,System.Object,System.Object,System.Object,System.Object)"/> method, passing nulls.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdArrayPolar(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Creates an array defined by specifying a center point about which the objects are replicated.
            </summary>
            <param name="SelSet">A vdSelection of vdFigures or "USER"/null so the user selects the object on the screen.</param>
            <param name="CenterPoint">A <see cref="T:VectorDraw.Geometry.gPoint"/> as center in  User Coord. System (UCS) or "USER"/null so the user picks the point on the screen.</param>
            <param name="NumOfItems">An integer representing the number of copies to make or "USER"/null so the user is asked for this number.</param>
            <param name="FillAngle">This is a value representing the angle as double (in radians) to fill, starting from angle 0.0 or "USER"/null so the user is asked for this value in degrees.</param>
            <param name="RotateObjects">A string with value "no" or "yes" representing if the objects will be rotated along the circle or "USER"/null so the user is asked for this value(y or n).</param>
            <returns>True if the command was succesfull.</returns>
            <remarks>Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdArrayPolar" action name.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.Box3dEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performes a command where the user draws a 3d box object.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/>  where the command will take place.</param>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdBox3d(System.Object,System.Object,System.Object,System.Object,System.Object)"/> method, passing nulls.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdBox3d(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Creates a 3D box to the document.
            </summary>
            <param name="InsertionPoint">Bottom left point of the box in User Coord. System (UCS) or "USER"/null so the user can pick this point to the screen.</param>
            <param name="Length">The length of the box as double or "USER"/null so the user can pick this distance to the screen.</param>
            <param name="Width">The width of the box as double or "USER"/null so the user can pick this distance to the screen.</param>
            <param name="Height">The height of the box as double or "USER"/null so the user can pick this distance to the screen.</param>
            <param name="RotationAngle">The rotation of the box as double or "USER"/null so the user can pick this distance to the screen.</param>
            <returns>True if the command was succesfull.</returns>
            <remarks>Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdBox3d" action name.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.Mesh3dEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs a command where the user can draw a 3D Mesh.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> where the command takes place.</param>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.Cmd3DMesh(System.Object,System.Object,System.Object)"/> method, passing nulls.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.Cmd3DMesh(System.Object,System.Object,System.Object)">
            <summary>
            Creates a 3D Mesh.
            </summary>
            <param name="Msize">A short value representing how many horizontal points has the Mesh or "USER"/null so the user is asked for this value.</param>
            <param name="Nsize">A short value representing how many vertical points has the Mesh or "USER"/null so the user is asked for this value.</param>
            <param name="VertexList">A collection of Msize x Nsixe points (type of <see cref="T:VectorDraw.Geometry.gPoints"/>) or "USER/null so the user picks these points to the screen.</param>
            <returns>True if the command was succesfull.</returns>
            <remarks>Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "Cmd3DMesh" action name.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.PlineToMeshEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Converts a vdPolyline object to a Mesh (vdPolyface object).
            </summary>
            <param name="doc">The  <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> where the command will take place.</param>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdPlineToMesh(System.Object,System.Object,System.Object)"/> method, passing nulls.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdPlineToMesh(System.Object,System.Object,System.Object)">
            <summary>
            Converts a vdPolyline object to a Mesh (vdPolyface object).
            </summary>
            <param name="PlineEntity">A vdPolyline object or "USER"/null so the user picks the polyline to the screen.</param>
            <param name="Thickness">A double value representing the thichness or "USER"/null so the user is asked for this value. </param>
            <param name="EdgeVisibility">A "y" or "n" string value representing if the edges of the mesh will be visible or "USER"/null so the user is asked for this value.</param>
            <returns>True if the command was succesfull.</returns>
            <remarks>Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdPlineToMesh" action name.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.Face3dEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs a command where the user draws a vd3DFace object.
            </summary>
            <param name="doc">The  <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> where the command will take place.</param>
            <remarks> It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.Cmd3dFace(System.Object)"/> method, passing null.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.Cmd3dFace(System.Object)">
            <summary>
            Creates a vd3DFace object.
            </summary>
            <param name="VertexArray">A collection of points as <see cref="T:VectorDraw.Geometry.gPoints"/> in Current User Coordinate System (UCS) consisting the <see cref="T:VectorDraw.Professional.vdFigures.vd3DFace"/> object or "USER"/null so the user picks the points to the screen.</param>
            <returns>True if the command was succesfull./</returns>
            <remarks>Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "Cmd3dFace" action name.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.EllipseEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Creates an ellipse, <see cref="T:VectorDraw.Professional.vdFigures.vdEllipse"/> object.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> where the command will take place</param>
            <remarks> It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdEllipse(System.Object,System.Object,System.Object)"/> method, passing nulls.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdEllipse(System.Object,System.Object,System.Object)">
            <summary>
            Creates an ellipse, <see cref="T:VectorDraw.Professional.vdFigures.vdEllipse"/> object.
            </summary>
            <param name="CenterPoint">The center of the ellipse as gPoint in Current User Coordinate System (UCS) or "USER"/null so the user picks this point on the screen.</param>
            <param name="Axis1Pos">First Axis point as gPoint in Current User Coordinate System (UCS) or "USER"/null so the user picks this point to the screen.</param>
            <param name="Axis2Len">Second Axis size as double or "USER"/null so the user picks this length to the screen.</param>
            <returns>True if the command was succesfull.</returns>
            <remarks>Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdEllipse" action name.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.RectEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Creates a rectangle. 
            </summary>
            <param name="doc">The document where the command will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdRect(System.Object,System.Object)">
            <summary>
            Creates a rectangle.
            </summary>
            <param name="Point1">Bottom left point (gPoint) in Current User Coordinate System (UCS) of the rectangle or "USER",null so the user picks this point on the screen.</param>
            <param name="Point2">Top right point (gPoint) in Current User Coordinate System (UCS) of the rectangle or "USER",null so the user picks this point on the screen.</param>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.BreakEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Breaks on line of an object by cutting the section between two points.
            </summary>
            <param name="doc">The document where the command will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdBreak(System.Object,System.Object,System.Object)">
            <summary>
            Breaks on line of an object by cutting the section between two points.
            </summary>
            <param name="entity">The vdFigure object or "USER",null so the user picks this entity on the screen.</param>
            <param name="FirstPoint">First point needed(gPoint) in Current User Coordinate System (UCS) or "USER", null so the user can pick this point on the screen.</param>
            <param name="SecondPoint">Second point needed(gPoint) in Current User Coordinate System (UCS) or "USER", null so the user can pick this point on the screen.You can also pass the string "same" so a one point will occur.</param>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.LookAt(System.Object,System.Object)">
            <summary>
            Change the view of the active layout of one document.
            </summary>
            <param name="cameraPosition">A (gPoint) point in Current User Coordinate System (UCS) representing the position of the camera or "USER",null so the user picks this point to the screen.</param>
            <param name="targetPosition">A (gPoint) point in Current User Coordinate System (UCS) representing the target point or "USER",null so the user picks this point on the screen.</param>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.LookAt(System.Object,System.Object,System.Object)">
            <summary>
            Change the view of the active layout of one document.
            </summary>
            <param name="cameraPosition">A (gPoint) point in Current User Coordinate System (UCS) representing the position of the camera or "USER",null so the user picks this point to the screen.</param>
            <param name="targetPosition">A (gPoint) point in Current User Coordinate System (UCS) representing the target point or "USER",null so the user picks this point on the screen.</param>
            <param name="twistAngle">The angle of twist in radians.</param>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.DoDragDrop(System.Object,VectorDraw.Professional.vdCollections.vdSelection.DragDropEffects,System.Object,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs a DragDrop operation.
            </summary>
            <param name="SelSet">A vdSelection of vdFigures or "USER",null so the user selects these entities to the screen.</param>
            <param name="DropEffect">A value representing the drop effect.</param>
            <param name="BasePoint">A (gPoint) point in Current User Coordinate System (UCS) as base point or "USER",null so the user picks this point to the screen.</param>
            <param name="ImageWidth">The width of the image shown while draging.</param>
            <param name="ImageHeight">The height of the image shown while draging.</param>
            <param name="Flag">This int flag can be:
            (0) The data are convertet to vdml memory stream format,
            (1) The data are converted to VDML stream (flag = 0) and also to the bitmap of the passed selection,
            (2) The data are converted to VDML stream (flag = 0) and also a temporary drop Vdml file. 
            (3) All the above.</param>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.OffsetEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Creates a new object at a specified distance from an existing object.
            </summary>
            <param name="doc">The document where the command will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdOffsetEx(System.Object,System.Object,System.Object,System.Int32,System.Double)">
            <summary>
            Creates a new object at a specified distance from an existing object. The difference between Offset and OffsetEx is that in polylines with bulges the created entity will not preserve these bulges but a new polyline will be created with line segments.
            </summary>
            <param name="entity">The vdFigure object that will be the base of the offset command or "USER",null so the user picks this entity to the screen.</param>
            <param name="dist">The distance(double) or "USER",null so the user picks this distance to the screen.</param>
            <param name="side">A (gPoint) point in Current User Coordinate System (UCS) representing the side where the new object will be created or "USER",null so the user picks this point to the screen.</param>
            <param name="CurveResolution">Curve resolution used to break the arc segments into small lines .Valid values (1-20000).</param>
            <param name="Equality">Equality to be used to compare points and lengths during geometry calculation of the offset.</param>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.DivideToCurvesEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Creates and adds to the document a series of vdCurves that are produced by calling the Break method of the object.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> where the command will take place.</param>
            <remarks>
            <list type="bullet">
            <item> 
            <description>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdDivideToCurves(System.Object,System.Object)"/> method passing null parameters.</description> 
            </item> 
            <item> 
            <description>If the object is a <see cref="T:VectorDraw.Professional.vdFigures.vdPolyline"/> then no extra objects are added to the document but new vertexes are added to the vertex list of the vdPolyline where the divisions are.</description> 
            </item> 
            </list> 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdDivideToCurves(System.Object,System.Object)">
            <summary>
            Creates a new vdCurves objects with segments from a vdCurve object after it is divided
            </summary>
            <param name="entity">The vdFigure object that will be the base of the cmdDivideToCurves command or "USER",null so the user picks this entity to the screen.</param>
            <param name="numSegments">The number of segments that this curve will divide or "USER",null so the user picks the number of segments.</param>
            <returns>True if the command was succesfull also the original vdCurve object is replaced by the first vdCurve object, and the other produced vdCurves are added to the document.</returns>
            <remarks>
            <list type="bullet">
            <item> 
            <description>Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdDivideToCurves" action name.</description> 
            </item> 
            <item> 
            <description>If the object is a <see cref="T:VectorDraw.Professional.vdFigures.vdPolyline"/> then no extra objects are added to the document but new vertexes are added to the vertex list of the vdPolyline where the divisions are.</description> 
            </item> 
            <item> 
            <description>Note that <see cref="T:VectorDraw.Professional.vdFigures.vdCircle"/> become <see cref="T:VectorDraw.Professional.vdFigures.vdArc"/>, and <see cref="T:VectorDraw.Professional.vdFigures.vdRect"/> become <see cref="T:VectorDraw.Professional.vdFigures.vdPolyline"/></description> 
            </item> 
            </list> 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.DivideEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Creates a new vdPolyline object with line segments from a vdCurve object after it is divided 
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> where the command will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdDivide(System.Object,System.Object)"/> method passing null parameters.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdDivide(System.Object,System.Object)">
            <summary>
            Creates a new vdPolyline object with line segments from a vdCurve object after it is divided
            </summary>
            <param name="entity">The vdFigure object that will be the base of the cmdDivide command or "USER",null so the user picks this entity to the screen.</param>
            <param name="numSegments">The number of line segments that this curve will deivide or "USER",null so the user picks this distance to the screen.</param>
            <returns>True if the command was succesfull also the original vdCurve object is deleted while a new polyline is added to the document.</returns>
            <remarks>Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdDivide" action name.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdOffset(System.Object,System.Object,System.Object)">
            <summary>
            Creates a new object at a specified distance from an existing object
            </summary>
            <param name="entity">The vdFigure object that will be the base of the offset command or "USER",null so the user picks this entity to the screen.</param>
            <param name="dist">The distance(double) or "USER",null so the user picks this distance to the screen.</param>
            <param name="side">A (gPoint) point in Current User Coordinate System (UCS) representing the side where the new object will be created or "USER",null so the user picks this point to the screen.</param>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.PolylineEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Creates a polyline.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> where the command will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdPolyLine(System.Object)"/> method passing null parameter.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.getUserPolyline">
            <summary>
            Gets a vdPolyline object from the user in World Coordinate System.
            </summary>
            <returns>An Unregister Document vdPolyline object if success or null if an error occur.</returns>
            <remarks>The vdPolyline object is not added in Layout Entities collection.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.getUserPolyline(System.Boolean)">
            <summary>
            Gets a vdPolyline object from the user in World Coordinate System.
            </summary>
            <param name="addToEntitiesCollection">If it is true the the return polyline is added in the active layout entities collection.</param>
            <returns>An Unregister Document vdPolyline object if success or null if an error occur.</returns>
            <remarks>The vdPolyline object is not added in Layout Entities collection.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdPolyLine(System.Object)">
            <summary>
            Creates a polyline.
            </summary>
            <param name="ParamList">A collection of points <see cref="T:VectorDraw.Geometry.gPoints"/> object in User Coordinate System (UCS) or "USER"/null so the user picks the points to the screen.</param>
            <returns>True if the command was successful and adds a <see cref="T:VectorDraw.Professional.vdFigures.vdPolyline"/> object to the active layout.</returns>
            <remarks>Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdPolyLine" action string.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.SplineFittingEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Starts the fitting Spline command. The user is prompted to select the fitting spline's points.
            </summary>
            <param name="doc">The Document where the command takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.SplineQuadraticEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Starts the Quadratic Spline command. The user is prompted to select the Quadratic spline's points.
            </summary>
            <param name="doc">The Document where the command takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.SplineControlPointsEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Starts the ControlPoints Spline command. The user is prompted to select the ControlPoints spline's points.
            </summary>
            <param name="doc">The Document where the command takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.SplineEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Starts the Spline command. The user is prompted to select the type of the spline and then the spline's points.
            </summary>
            <param name="doc">The Document where the command takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdSpline(System.Object,VectorDraw.Professional.Constants.VdConstSplineFlag)">
            <summary>
            Creates an SPline polyline.
            </summary>
            <param name="ParamList">A collection of Vertexes <see cref="T:VectorDraw.Geometry.Vertexes"/> object in User Coordinate System (UCS) or "USER"/null so the user picks the points to the screen.</param>
            <param name="flag">The type of the spline polyline.</param>
            <returns>True if the command was succesfull.</returns>
            <remarks>
            If the flag parameter is STANDARD then the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdPolyLine(System.Object)"/> command is called.</remarks>
            <remarks>If the type is Fitting then after the selection of the points the user is asked for the Start and end Tangent. If the polyline is closed fitting then only one Tangent is required.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdSpline(System.Object)">
            <summary>
            Creates an Spline polyline. The user is prompted to select the type of the spline first (fitting , quadratic or controlpoints).
            </summary>
            <param name="ParamList">A collection of Vertexes <see cref="T:VectorDraw.Geometry.Vertexes"/> object in User Coordinate System (UCS) or "USER"/null so the user picks the points to the screen.</param>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.InitUserGetString(VectorDraw.Render.grTextStyle.VdConstCodePage,System.String,System.String)">
            <summary>
            Provides support for localized keywords like Yes/No, when prompting the user to type a string.
            </summary>
            <param name="codepage">The codepage.</param>
            <param name="localeString">Set this to "" to erase previous locale strings.</param>
            <param name="acceptedString">Set this to "" to erase any previous accepted strings.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.ExtendEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Extend a selected entity to the intersection of another.
            </summary>
            <param name="doc">The document where the command will take place.</param>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdExtend(System.Object,System.Object,System.Boolean)"/> passing null, null and EdgeExtend = <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.EdgeExtendTrim"/> values.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdExtend(System.Object,System.Object)">
            <summary>
            Extend a selected entity to the intersection of another.
            </summary>
            <param name="BoundEntities">A collection (vdSelection) of entities or "USER",null so the user picks the entities needed for the command to the screen.</param>
            <param name="ObjectToExtend">An array of objects(object[]) containing one object or "USER",null so the user picks the entity to be extended to the screen.</param>
            <returns>True if the command was succesfull.</returns>
            <remarks>This command is kept for backward compatibility. It ignores the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.EdgeExtendTrim"/> property. It is better to use the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdExtend(System.Object,System.Object,System.Boolean)"/> command.</remarks>
            <example>See how to call the CmdExtend passing specific objects, with no user interaction<code>
                    private void CmdExtend_Demo()
                    {
                        vdDocument doc = vdFramedControl1.BaseControl.ActiveDocument;
                        vdLine lin_2_Ext = new vdLine(doc, new gPoint(7.5, 5), new VectorDraw.Geometry.gPoint(3, 5));
                        doc.Model.Entities.AddItem(lin_2_Ext); // this line will be extended
            
                        //Console.WriteLine("line to be extended handle is: " + lin_2_Ext.Handle.ToString());
                        vdSelection set_bound_ext = new vdSelection();
                        set_bound_ext.SetUnRegisterDocument(doc);
                        set_bound_ext.Name = "Extend";
                        set_bound_ext.RemoveAll();
                        doc.Selections.AddItem(set_bound_ext);
            
                        vdLine bound_line = new vdLine(doc, new gPoint(10, 10), new VectorDraw.Geometry.gPoint(10, 0));
                        doc.Model.Entities.AddItem(bound_line);
                        set_bound_ext.AddItem(bound_line, true, vdSelection.AddItemCheck.Nochecking);
                        bound_line = new vdLine(doc, new gPoint(1, 10), new VectorDraw.Geometry.gPoint(1, 0));
                        doc.Model.Entities.AddItem(bound_line);// add two lines that will be used to extend the lin_2_Ext
                        set_bound_ext.AddItem(bound_line, true, vdSelection.AddItemCheck.Nochecking);
            
                        //use the two lines in set_bound_ext and extend the lin_2_Ext in the part that point 7,5 is
                        doc.CommandAction.CmdExtend(set_bound_ext, new object[] { lin_2_Ext, new gPoint(7, 5) });
                        //and again, use the two lines in set_bound_ext and extend the lin_2_Ext in the part that point 6,5 is
                        doc.CommandAction.CmdExtend(set_bound_ext, new object[] { lin_2_Ext, new gPoint(4, 5) });
                    }
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.TrimEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Trims objects at a cutting edge defined by other objects.
            </summary>
            <param name="doc">The document where the command will take place.</param>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdTrim(System.Object,System.Object,System.Boolean)"/>  passing null, null and EdgeTrim = <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.EdgeExtendTrim"/> value.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdTrim(System.Object,System.Object)">
            <summary>
            Trims objects at a cutting edge defined by other objects
            </summary>
            <param name="BoundEntities">A (vdSelection) collection of vdFigures or "USER",null so the user picks the objects to the screen.</param>
            <param name="ObjectToTrim">An array of 2 objects(object[]) containing one vdFigure and a gPoint that determines the trim side OR "USER",null so the user picks the object to the screen.</param>
            <returns>True if the command was succesfull.</returns>
            <remarks>This command is kept for backward compatibility. It ignores the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.EdgeExtendTrim"/> property. It is better to use the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdTrim(System.Object,System.Object,System.Boolean)"/> command.</remarks>
            <example>See how to call the CmdTrim passing specific objects, no user interaction<code>
                    private void CmdTrim_Demo()
                    {
                        vdDocument doc = vdFramedControl1.BaseControl.ActiveDocument;
            			vdLine lin_t = new vdLine(doc, new gPoint(12, 5), new VectorDraw.Geometry.gPoint(-5, 5));
            			doc.Model.Entities.AddItem(lin_t); // this line will be trimed
             
            			//Console.WriteLine("line to be trimed handle is: " + lin_t.Handle.ToString());
            			vdSelection set_cut = new vdSelection();
            			set_cut.SetUnRegisterDocument(doc);
            			set_cut.Name = "CUT";
            			set_cut.RemoveAll();
            			doc.Selections.AddItem(set_cut);
             
            			vdLine lin_cut = new vdLine(doc, new gPoint(10, 10), new VectorDraw.Geometry.gPoint(10, 0)); 
            			doc.Model.Entities.AddItem(lin_cut); 
            			set_cut.AddItem(lin_cut,true,vdSelection.AddItemCheck.Nochecking);
            			lin_cut = new vdLine(doc, new gPoint(5, 10), new VectorDraw.Geometry.gPoint(5, 0));
            			doc.Model.Entities.AddItem(lin_cut);// add two lines that will be used to trim the lin_t
            			set_cut.AddItem(lin_cut, true, vdSelection.AddItemCheck.Nochecking);
             
            			//use the two lines in set_cut and trim the lin_t where in the part that point 7,5 is
            			doc.CommandAction.CmdTrim(set_cut, new object[] {lin_t, new gPoint(7,5)} );
                    }
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.FilletEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Fillets the edges between arcs and lines.
            </summary>
            <param name="doc">The document where the command will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.FilletRadiusEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Fillets the edges between arcs and lines with an arc that is tangent to the edges and has a specified radius.
            </summary>
            <param name="doc">The document where the command will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdFilletRadius(System.Object,System.Object,System.Object)">
            <summary>
            Fillets the edges between arcs and lines with an arc that is tangent to the edges and has a specified radius.
            </summary>
            <param name="EntityObject1">An array of objects(object[]) containing one vdFigure and one point of this figure to specify the side to fillet or "USER",null so the user picks the object to the screen.</param>
            <param name="EntityObject2">An array of objects(object[]) containing one vdFigure and one point of this figure to specify the side to fillet or "USER",null so the user picks the object to the screen.</param>
            <param name="Radius">The radius of the arc that connects filleted objects.</param>
            <returns>True if the command was succesfull.</returns>
            <example>See a code example of calling CmdFilletRadius<code>
                    private void cmdFilletRadious_Demo()
                    {
                        vdDocument CurrentDoc = vdFramedControl1.BaseControl.ActiveDocument;
            
                        vdLine line1 = new vdLine(); // create two lines crossing each other and add them to the document
                        line1.SetUnRegisterDocument(CurrentDoc); 
                        line1.setDocumentDefaults();
                        line1.StartPoint = new gPoint(-50, 0);
                        line1.EndPoint = new gPoint(30, 0);
                        CurrentDoc.ActiveLayOut.Entities.AddItem(line1);
            
                        vdLine line2 = new vdLine();
                        line2.SetUnRegisterDocument(CurrentDoc);
                        line2.setDocumentDefaults();
                        line2.StartPoint = new gPoint(0, -20);
                        line2.EndPoint = new gPoint(0, 30);
                        CurrentDoc.ActiveLayOut.Entities.AddItem(line2);
            
                        // fillet these two lines keeping the "endpoint-segment" of line1 and the "startpoint-segment" of line2 and adding an arc with radious 3 D.U.
                        CurrentDoc.CommandAction.CmdFilletRadius(new object[] { line1, new gPoint(line1.EndPoint) }, new object[] { line2, new gPoint(line2.StartPoint) }, 3.0d); 
                    }
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdFillet(System.Object,System.Object)">
            <summary>
            Fillets the edges between arcs and lines.
            </summary>
            <param name="EntityObject1">An array of objects (object[]) containing one vdFigure and one point of this figure to specify the side to fillet or "USER",null so the user picks the object to the screen.</param>
            <param name="EntityObject2">An array of objects (object[]) containing one vdFigure and one point of this figure to specify the side to fillet or "USER",null so the user picks the object to the screen.</param>
            <returns>True if the command was succesfull.</returns>
            <example>See a code example of calling cmdFillet<code>
                    private void cmdFillet_Demo()
                    {
                        vdDocument CurrentDoc = vdFramedControl1.BaseControl.ActiveDocument;
            
                        vdLine line1 = new vdLine(); // create two lines crossing each other and add them to the document
                        line1.SetUnRegisterDocument(CurrentDoc); 
                        line1.setDocumentDefaults();
                        line1.StartPoint = new gPoint(-50, 0);
                        line1.EndPoint = new gPoint(30, 0);
                        CurrentDoc.ActiveLayOut.Entities.AddItem(line1);
            
                        vdLine line2 = new vdLine();
                        line2.SetUnRegisterDocument(CurrentDoc);
                        line2.setDocumentDefaults();
                        line2.StartPoint = new gPoint(0, -20);
                        line2.EndPoint = new gPoint(0, 30);
                        CurrentDoc.ActiveLayOut.Entities.AddItem(line2);
            
                        // fillet these two lines keeping the "endpoint-segment" of line1 and the "startpoint-segment" of line2 
                        CurrentDoc.CommandAction.CmdFillet(new object[] { line1, new gPoint(line1.EndPoint) }, new object[] { line2, new gPoint(line2.StartPoint) }); 
                    }
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.StretchEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Stretch moves the grip points of entities of a Selection set that lie inside the window.
            </summary>
            <param name="doc">The document where the command will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdStretch(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            STRETCH moves the grip points of entities of a Selection set that lie inside the window.
            </summary>
            <param name="SelSet">A vdSelection of vdFigures or "USER",null so the user picks the objects to the screen.</param>
            <param name="WindowPoint1">First point (gPoint) of the window in Current User Coordinate System (UCS)  or "USER",null so the user picks this point to the screen.</param>
            <param name="WindowPoint2">Second point (gPoint) of the window in Current User Coordinate System (UCS) or "USER",null so the user picks this point to the screen.</param>
            <param name="FromPoint">A base point (gPoint) in Current User Coordinate System (UCS) or "USER",null so the user picks this point to the screen.</param>
            <param name="ToPoint">A target point (gPoint) in Current User Coordinate System (UCS) or "USER",null so the user picks this point to the screen.</param>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdStretch(System.Object,System.Object,System.Object,System.Object)">
            <summary>
             STRETCH moves the grip points of entities of a Selection set that lie inside the selected area by the user.
            </summary>
            <param name="SelSet">A vdSelection of vdFigures to be stretched or "USER"/null so the user picks the objects to the screen.</param>
            <param name="Polygons">A vdArray of polygons that define the grips to be moved or "USER",null so the user picks this point to the screen.</param>
            <param name="FromPoint">A base point (gPoint) in Current User Coordinate System (UCS) or "USER",null so the user picks this point to the screen.</param>
            <param name="ToPoint">A target point (gPoint) in Current User Coordinate System (UCS) or "USER",null so the user picks this point to the screen.</param>
            <returns>True if the command was succesfull.</returns>        
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.EditAttribEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Opens a dialog for editing attributes of an insert object.
            </summary>
            <param name="doc">The document where the command will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.EditAttrib(System.Object)">
            <summary>
            Opens a dialog for editing attributes of an insert object.
            </summary>
            <param name="EntityObject">A vdInsert object or "USER",null so the user picks this entity to the screen.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.PrintEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Begins the Print manager dialog with print extends and print to fit initial properties.
            </summary>
            <param name="doc">The document where the command will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdPrintDialog(System.Object,System.Object)">
            <summary>
            Prints a document.
            </summary>
            <param name="WindowPoints">A 4 items VectorDraw.Geometry.DoubleArray containing 2 points (in Current View Coordinate System) for printing a window of the drawing or "e" for print extends.</param>
            <param name="Scale">The print scale in a 2 items DoubleArray of "f" for ScaleToFit.</param>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdLayoutSplitDialogEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Opens a dialog for editing Split Layout style.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdPointDialogEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Opens a dialog for editing the Document's point style.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdLayerDialogEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Opens the layer manager for editing the document's layers.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdPointStyleDlg">
            <summary>
            Opens a dialog for editing the Document's point style.
            </summary>
            <returns>True if the command ends without errors.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.LayerControl">
            <summary>
            Opens the layer manager for editing the document's layers.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdInsertBlockDialog(System.String,System.Boolean,System.Object,System.Object,System.Object)">
            <summary>
            Opens a dialog for selecting and inserting a block in the document used to initialize the insert dialog with the passed parameters.
            </summary>
            <param name="mblockname">a filename if it is an xref or a blockname or "user" so the dialog is not initialised.</param>
            <param name="isxref">A boolean value if the passed filename is an xref or not.</param>
            <param name="mInsertionpoint">A double[] with 3 doubles representing the insertion point OR "user" so the dialog is not initialised.</param>
            <param name="mscales">A double[] with 3 doubles representing the scales OR "user" so the dialog is not initialised.</param>
            <param name="mrotation">A double value representing the rotation OR "user" so the dialog is not initialised.</param>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdInsertBlockDialog">
            <summary>
            Opens a dialog for selecting and inserting a block in the document.
            </summary>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.ConeEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Creates a 3d cone.
            </summary>
            <param name="doc">The document where the command will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdCone(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Creates a 3d cone.
            </summary>
            <param name="CenterPoint">The center(gPoint) in Current User Coordinate System (UCS) of the base circle of the cone or "USER",null so the user picks this point on the screen.</param>
            <param name="BaseRadius">The radius of the base(double) or "USER",null so the user picks this distance to the screen.</param>
            <param name="TopRadius">The radius of the top(double) or "USER",null so the user picks this distance on the screen.</param>
            <param name="Height">The height of the cone(double) or "USER",null so the user picks this distanmce to the screen.</param>
            <param name="NumSegments">An integer representing the number of segmentsw that will fill the cone or "USER",null so the user is asked for this value.</param>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.SphereEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Creates a 3d sphere.
            </summary>
            <param name="doc">The document where the command will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdSphere(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Creates a 3d sphere.
            </summary>
            <param name="Center">The center(gPoint) in Current User Coordinate System (UCS) of the sphere or "USER",null so the user picks this point to the screen.</param>
            <param name="Radius">The radius(double) of the sphere or "USER",null so the user can pick this distance to the screen.</param>
            <param name="longitudinalsegs">Segment number(int) controling how smooth the sphere will be or "USER",null so the user is asked for this value.</param>
            <param name="latitudinalsegs">Segment number(int) controling how smooth the sphere will be or "USER",null so the user is asked for this value.</param>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdXrefEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Opens the text style manager for editing the textstyles of the document.
            </summary>
            <param name="doc">The active document with which the command will be performed.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdXref(System.String,System.String,System.Object,System.Object,System.Object,System.Int16)">
            <summary>
            External reference manager.
            </summary>
            <param name="CommandOption">Can be one of the following: "A" for attach, "R" for reload, "D" for detach, "B" for bind, "U" for unload.</param>
            <param name="XrefName">The filename of the external reference.</param>
            <param name="InsertionPoint">The insertion point(gPoint) in Current User Coordinate System (UCS) or "USER",null so the user picks this point to the screen.</param>
            <param name="Scales">A double array of two values representing the x,y scale of the external reference.</param>
            <param name="RotationAngle">A double representing the rotation in radians or "USER",null so the user picks this rotation to the screen.</param>
            <param name="ToBack">If this value is 0 then the external reference is moved to the beginning of the entities of the document.</param>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.ImageEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Inserts an image to the document.
            </summary>
            <param name="doc">The document where the command will take place</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdImage(VectorDraw.Professional.vdFigures.vdImage,System.Object)">
            <summary>
            Inserts an image to the document.
            </summary>
            <param name="image">A vdImage Object that is not added to the Document and has already precreated the vdImageDef object and added to the Images collection.</param>
            <param name="InsertionPoint">The insertion point(gPoint) in Current User Coordinate System (UCS) or "USER",null so the user picks this point to the screen.</param>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdImage(System.String,System.Object)">
            <summary>
            Inserts an image to the document.
            </summary>
            <param name="FileName">The filename(string) of the image.</param>
            <param name="InsertionPoint">The insertion point(gPoint) in Current User Coordinate System (UCS) or "USER",null so the user picks this point to the screen.</param>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdTextStyleDialogEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Opens the text style manager for editing the textstyles of the document.
            </summary>
            <param name="doc">The active document with which the command will be performed.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdTextStyle(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Adds a textstyle with the given properties or opens the textstyle manager for editing.
            </summary>
            <param name="StyleName">A style name or "USER",null so the textstyle dialog opens for editing.</param>
            <param name="FontFileName">The fontfile name.</param>
            <param name="Height">The text height of the textstyle.</param>
            <param name="Width">The width property of the textstyle.</param>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdDimStyleDialogEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Opens the dimstyle manager for editing the dimstyles of the document.
            </summary>
            <param name="doc">The active document with which the command will be performed.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdDimStyleDialog">
            <summary>
            Opens the dimstyle manager for editing the dimstyles of the document.
            </summary>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.MakeBlockEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Creates a block.
            </summary>
            <param name="doc">The document where the command will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdMakeBlock(System.Object,System.Object,System.Object)">
            <summary>
            Creates a block.
            </summary>
            <param name="BlockName">The block's name(string) or "USER",null so the user is asked for the name. </param>
            <param name="InsertionPoint">The insertion point of the block(gPoint) in Current User Coordinate System (UCS) or "USER",null so the user picks this point to the screen.</param>
            <param name="SelectionSet">A vdSelection of vdFigures or "USER",null so the user picks this objects to the screen.</param>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.OpenEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Opens the open file dialog for opening one drawing file.
            </summary>
            <param name="doc">The document where the command will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.SaveAsEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Opens the Save As dialog in order to save the document's drawing.
            </summary>
            <param name="doc">The document where the command will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.SaveEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Saves the document's drawing to a file with filename the value of the document's filename property.
            </summary>
            <param name="doc">The document where the command will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.NewEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes a new drawing to the document.
            </summary>
            <param name="doc">The document where the command will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.bhatchEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Opens a dialog for hatching objects.
            </summary>
            <param name="doc">The document where the command will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.bHatch">
            <summary>
            Opens a dialog for hatching objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.GetDistanceEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Asks the user for two points and shows a messagebox with the distance between these two points.
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.cmdDistance">
            <summary>
            Asks the user for two points and shows a messagebox with the distance between these two points.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdArea(System.Object,System.Object,System.Double@,System.Double@)">
            <summary>
            Calculates the Area and the length of Curves or polyhatch objects.
            </summary>
            <param name="type"></param>
            Could be "USER" or null so the user is prompted to select P(for Points) or E(for Entity), or could be "E" or "P" for preselected area type.
            If type is Entity then returns the area of the Entity.
            If the type is Points then the user is prompted to select points and is returned the area of these points.
            <param name="fig">A vdCurve or vdPolyhatch or "USER",null so the user selects the entity.</param>
            <param name="area">A double value where the area is going to be returned.</param>
            <param name="length">A double value where the length is going to be returned.</param>
            <returns>A boolean value indicating if the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.SliceEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Prompt the user to select a polyface and then parameters in order to slice that polyface.
            </summary>
            <param name="doc">The Document where the action takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdSlice(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Changes the given polyface so it is sliced from a plane provided by the origin point and the direction.
            </summary>
            <param name="polyface">A vdPolyface object or NULL,"USER" so the user picks the polyface.</param>
            <param name="origin">A gPoint object in Current User Coordinate System (UCS) or NULL,"USER" so the user picks the origin point to the screen.</param>
            <param name="direction">A Vector object or NULL,"USER" so the user is prompted to select the direction.</param>
            <param name="CoverFaces">A boolean value or NULL,"USER" so the user is prompted to choose yes or no in order to cover the sliced faces.</param>
            <returns>True if the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.TorusEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            A command to create a Torus.
            </summary>
            <param name="doc">The document where the command will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdTorus(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A command to create a Torus.
            </summary>
            <param name="center">A gPoint object in Current User Coordinate System (UCS) that represents the center of the Torus or "USER",null so the user picks this point to the screen.</param>
            <param name="MainRad">A double value representing the Main radius of the Torus or "USER",null so the user picks the radius to the screen.</param>
            <param name="TorusRad">A double value representing the secondary radius of the torus or "USER",null so the user picks this distance to the screen.</param>
            <param name="NumOfSegments">The Main circle resolution.</param>
            <param name="SecondaryResolution">The Torus Resolution.</param>
            <returns>True if the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.SketchEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Starts a Sketch command.
            </summary>
            <param name="doc">The document where the command will take place.The Default Color Red is used as rubberLine.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdSketch(System.Object,System.Drawing.Color)">
            <summary>
            Starts a Sketch command.
            </summary>
            <param name="Distance">A double value representing the Sketch Record Increment distance or "USER",null so the user picks this distance to the screen.</param>
            <param name="RubberLineColor">The Color that will be used as rubberLine.</param>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdSelectClipImageObjectEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Starts a CmdSelectClipImageObject command. The user is prompted to select an Image and then to draw a clip polyline in order to clip the selected Image.
            </summary>
            <param name="doc">The document where the command will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdSelectClipImageObject(System.Object,System.Object)">
            <summary>
            Clips an Image object using a curve. The curve can be either a vdCircle , vdArc , vdPolyline , vdEllipse.
            </summary>
            <param name="Image">A vdImage object or "USER" , null so the user picks a vdImage object.</param>
            <param name="clipObjectCurve">A vdCurve object or "USER",null so the user chooses to either select a curve (presses C) or presses P in order to draw a polyline in order to specify the clipping area.</param>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdCutPolyfaceEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Starts the Cut Command.
            </summary>
            <param name="doc">The document where the command will take place. By Default CoverFaces is used with True value.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdCutPolyface(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Changes the passed polyface so it is cut with the passed curve. A point is also asked to determine which part of the polyface will be kept.
            </summary>
            <param name="polyface">The polyface object to cut OR null , "USER" so the user picks the polyface.</param>
            <param name="curve">A vdCurve object OR null,"USER" so the user picks the curve.</param>
            <param name="sideToKeep">A gPoint object or null,"USER" so the user picks a point on the screen. This point represents the side of the polyface that is going to be kept.</param>
            <param name="CoverFaces">A boolean value OR null,"USER" so the user is prompted for a Yes/No answer. This boolean value represents if cover faces are going to be created where the polyface is going to be cutted.</param>
            <returns>True if the command was succesfull.</returns>
            <remarks>This command is very usefull in order to slice a polyface with a curve and create various 3D objects. You can also use closed curves like circle,rects etc.. to create holes to a polyface.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdCutPolyface(System.Object,System.Object,System.Object,System.Object,System.Object,System.Boolean)">
            <summary>
            Changes the passed polyface so it is cut with the passed curve. A point is also asked to determine which part of the polyface will be kept.
            </summary>
            <param name="polyface">The polyface object to cut OR null , "USER" so the user picks the polyface.</param>
            <param name="curve">A vdCurve object OR null,"USER" so the user picks the curve.</param>
            <param name="sideToKeep">A gPoint object or null,"USER" so the user picks a point on the screen. This point represents the side of the polyface that is going to be kept.</param>
            <param name="CoverFaces">A boolean value OR null,"USER" so the user is prompted for a Yes/No answer. This boolean value represents if cover faces are going to be created where the polyface is going to be cutted.</param>
            <param name="KeepFacesVisibility">A boolean value OR null , "USER" so the user is prompted for a Yes/No answer. This boolean value represents the visibility of the resulted triangles. True to keep the polyface as the original.</param>
            <param name="CoverFacesEdgesVisibility">A boolean value that represents the edges visibility of the created cover faces triangles.</param>
            <returns>True if the command was succesfull.</returns>
            <remarks>This command is very usefull in order to slice a polyface with a curve and create various 3D objects. You can also use closed curves like circle,rects etc.. to create holes to a polyface.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdMultiLineEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Starts the CmdMultiLine Command.
            </summary>
            <param name="doc">The document where the command will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdMultiLine(System.Object)">
            <summary>
            Starts the CmdMultiLine Command.
            </summary>
            <param name="ParamList">A gPoints object for the Multiline OR null , "USER" so the user picks the points.</param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdAddSectionClipEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Starts the CmdAddSectionClip Command.
            </summary>
            <param name="doc">The document where the command will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdAddSectionClip(System.Object,System.Object,System.Object)">
            <summary>
            A command to add a section clip to the active layout.
            </summary>
            <param name="Name">The name of the Section Clip or null , "user" so the user is asked for a name.</param>
            <param name="Origin">A gPoint representing the Origin of the section in User Coordinate System (UCS) or "USER",null so the user picks this point.</param>
            <param name="Direction">A Vector that represents the direction of the section clip in User Coordinate System (UCS) or "USER",null so the user picks the direction.</param>
            <returns>True if a section clip was added to the Sections collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CloudEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Starts the CmdCloud Command.
            </summary>
            <param name="doc">The document where the command will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdCloud(System.Object,System.Object)">
            <summary>
            A command to Add a revision cloud.
            </summary>
            <param name="ArcDistance">A double value representing the arc distance OR null , "USER" so the user is asked for this value.</param>
            <param name="figure">A vdCurve vdFigure or null , "USER" so the user is either asked to point a curve or start the commend and move the cursor to design the revision cloud.</param>
            <returns>True if the command was succesfull.</returns>
            <remarks>
            The vdCurve that is passed as parameter or selected by the user can be vdArc , vdPolyline , vdRect , vdEllipse , vdCircle.</remarks>
            <remarks>If the user instead of choosing to select an entity (E) chooses to click to a point the command starts and arcs start to draw and to design the revision cloud. The command will end with either a right click (cancel) or a left click that will add the already designed revision cloud to the Document or if the user passes from the startpoint of the revision cloud in which case the command will exit.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.ChamferEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Starts the Chamfer Command.
            </summary>
            <param name="doc">The document where the command will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdChamfer(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Boolean)">
            <summary>
            Chamfers the edges of two lines or a polyline using the passed parameters.
            </summary>
            <param name="selset">A vdSelection containing two vdLines OR one polyline , OR null,"USER" so the user selects the entities to be chamfered. </param>
            <param name="Distance1">A double value that represents the first distance used when method is Distance, as a default value OR null,"USER" so the Document's static value is used.</param>
            <param name="Distance2">A double value that represents the second distance used when method is Distance, as a default value OR null,"USER" so the Document's static value is used.</param>
            <param name="DistanceForAngle">A double value that represents the first distance used when method is Angle, as a default value OR null,"USER" so the Document's static value is used.</param>
            <param name="Angle">A double value that represents the angle in degrees used when method is Angle, as a default value OR null,"USER" so the Document's static value is used.</param>
            <param name="Method">An integer value that represents the method used as default (0 for Distance , 1 for Angle) or null,"USER" so the Document's static value is used.</param>
            <param name="Trim">A boolean value that represents if trim mode is on or off or null,"USER" so the Document's static value is used.</param>
            <param name="runonce">A boolean value that represents if the command will end after one chamfer. If this value is true then multiple chamfer actions can be made by the user.</param>
            <returns>True if the command was succesfull.</returns>
            <remarks>See Chamfer command in our website's articles for more information.</remarks>
            <seealso cref="T:VectorDraw.Professional.vdObjects.vdDocument.ChamferMethodEnum"/>
            <seealso cref="P:VectorDraw.Professional.vdObjects.vdDocument.ChamferSettings"/>
            <example>See a code example of calling cmdChamfer with two lines at the first parameter<code>
                      vdSelection selset = new vdSelection("test");
                      selset.AddItem(vdFramedControl.BaseControl.ActiveDocument.ActiveLayOut.Entities[0], false, vdSelection.AddItemCheck.Nochecking);
                      selset.AddItem(vdFramedControl.BaseControl.ActiveDocument.ActiveLayOut.Entities[1], false, vdSelection.AddItemCheck.Nochecking);
                      vdFramedControl.BaseControl.ActiveDocument.CommandAction.cmdChamfer(selset, 1.0, 2.0, 0.0, 0.0, 0, true);
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdThicknessEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Asks the user to select a curve(polyline , line, circle , arc , ellipse , rect) or a vdpolyhatch and prompts for it's thickness.
            After selecting thickness there is the option to either have the curve with thickness or replace it with a polyface with covers.
            </summary>
            <param name="doc">The Document where the command takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdThickness(System.Object,System.Object,System.Object)">
            <summary>
            Asks the user to select a curve(polyline , line, circle , arc , ellipse , rect) or a vdpolyhatch and prompts for it's thickness.
            </summary>
            <param name="curve">A vdFigure object or "USER" , null so the user selects the curve.</param>
            <param name="Thickness">A double value representing the thickness to be applied or "USER",null so the user picks thickness to the screen.</param>
            <param name="ConvertToPolyfaceWithCovers">A boolean value that represents if the figure is going to be deleted and replaced with a covered polyface or "USER", null so the user is asked for a Yes/No answer.</param>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdHidePolyfaceEdgesEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Prompts the user to select a polyface to edit and then click on ecges of the polyface to hide them altering it's facelist.
            </summary>
            <param name="doc">The Document object where the action takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdHidePolyfaceEdges(System.Object,System.Object)">
            <summary>
            A command to hide edges of a polyface by them altering it's facelist.
            </summary>
            <param name="Polyface">A vdPolyface object or "USER" , null so the user picks the polyface to the screen.</param>
            <param name="Edges">An Vectordraw.Geometry.Int32Array of Integers or "USER",null so the user picks the edges to the screen. The indexes of the selected or provided will be altered to the facelist of the polyface to a negative value which makes them invisible.</param>
            <returns>True if the command was succesfull.</returns>
            <remarks>Deselecting with Shift pressed can be used. The closest to the screen edge is selected.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdRemovePolyfaceFacesEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            A command to remove faces from a polyface.
            </summary>
            <param name="doc">The Document where the command takes place.</param>
            <remarks>This command runs the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdRemovePolyfaceFaces(System.Object,System.Object,System.Boolean)"/> with parameters null,null,true.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdRemovePolyfaceFaces(System.Object,System.Object,System.Boolean)">
            <summary>
            A command to remove faces from a polyface.
            </summary>
            <param name="Polyface">A vdPolyface object or "USER" , null so the user picks the polyface.</param>
            <param name="Faces">An Int32Array of faces to be removed or "USER" , null so the user picks the faces from the screen.</param>
            <param name="ClearUnusedVerticies">A boolean value that represents if at the end of the command unused vertexes should be removed from the polyface's vertexlist.</param>
            <returns>True if the operation was succesfull.</returns>
            <remarks>Deselecting with Shift pressed can be used. The closest to the screen face is selected.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.SearchTextEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Opens a dialog for searching and replacing texts inside the Document.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> where the command will take place.</param>
            <remarks>It calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdSearchText"/> method.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdSearchText">
            <summary>
            Opens a dialog for searching and replacing texts inside the Document.
            </summary>
            <returns>True if the command ends without errors.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdCurvePushPullEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Implements the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdCurvePushPull(System.Object,System.Object)"/> command.
            </summary>
            <param name="doc">The Document where the command takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdCurvePushPull(System.Object,System.Object)">
            <summary>
            This is a command where the user can draw a curve (circle , ellipse , polyline , rect) to a polyface's face and then pull or push it in order to have the combination of these two objects as a result.
            </summary>
            <param name="Polyface">A vdPolyface object or "USER" , null so the user picks the object from the screen.</param>
            <param name="Faces">A vdArray of int or "USER", null so the user picks the faces from the screen.</param>
            <returns>True if the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdTrim(System.Object,System.Object,System.Boolean)">
            <summary>
            Trims objects at a cutting edge defined by other objects
            </summary>
            <param name="BoundEntities">A (vdSelection) collection of vdFigures or "USER",null so the user picks the objects to the screen.</param>
            <param name="ObjectToTrim">An array of 2 objects(object[]) containing one vdFigure and a gPoint that determines the trim side OR "USER",null so the user picks the object to the screen.</param>
            <param name="EdgeTrim">A boolean representing if the extension of the bound entities is going to be used to calculate the object's trim.</param>
            <returns>True if the command was succesfull.</returns>
            <remarks>The EdgeExtend parameter or the user's Edge change during command alters the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.EdgeExtendTrim"/> property</remarks>
            <example>See how to call the CmdTrim passing specific objects, no user interaction<code>
                    private void CmdTrim_Demo()
                    {
                        vdDocument doc = vdFramedControl1.BaseControl.ActiveDocument;
            			vdLine lin_t = new vdLine(doc, new gPoint(12, 5), new VectorDraw.Geometry.gPoint(-5, 5));
            			doc.Model.Entities.AddItem(lin_t); // this line will be trimed
             
            			//Console.WriteLine("line to be trimed handle is: " + lin_t.Handle.ToString());
            			vdSelection set_cut = new vdSelection();
            			set_cut.SetUnRegisterDocument(doc);
            			set_cut.Name = "CUT";
            			set_cut.RemoveAll();
            			doc.Selections.AddItem(set_cut);
             
            			vdLine lin_cut = new vdLine(doc, new gPoint(10, 10), new VectorDraw.Geometry.gPoint(10, 0)); 
            			doc.Model.Entities.AddItem(lin_cut); 
            			set_cut.AddItem(lin_cut,true,vdSelection.AddItemCheck.Nochecking);
            			lin_cut = new vdLine(doc, new gPoint(5, 10), new VectorDraw.Geometry.gPoint(5, 0));
            			doc.Model.Entities.AddItem(lin_cut);// add two lines that will be used to trim the lin_t
            			set_cut.AddItem(lin_cut, true, vdSelection.AddItemCheck.Nochecking);
             
            			//use the two lines in set_cut and trim the lin_t where in the part that point 7,5 is
            			doc.CommandAction.CmdTrim(set_cut, new object[] {lin_t, new gPoint(7,5)}, doc.EdgeExtendTrim);
                    }
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdExtend(System.Object,System.Object,System.Boolean)">
            <summary>
            Extend a selected entity to the intersection of another.
            </summary>
            <param name="BoundEntities">A collection (vdSelection) of entities or "USER",null so the user picks the entities needed for the command to the screen.</param>
            <param name="ObjectToExtend">An array of objects(object[]) containing one object or "USER",null so the user picks the entity to be extended to the screen.</param>
            <param name="EdgeExtend">A boolean representing if the extension of the bound entities is going to be used to calculate the object's extend.</param>
            <returns>True if the command was succesfull.</returns>
            <remarks>The EdgeExtend parameter or the user's Edge change during command alters the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.EdgeExtendTrim"/> property</remarks>
            <example>See how to call the CmdExtend passing specific objects, with no user interaction<code>
                    private void CmdExtend_Demo()
                    {
                        vdDocument doc = vdFramedControl1.BaseControl.ActiveDocument;
                        vdLine lin_2_Ext = new vdLine(doc, new gPoint(7.5, 5), new VectorDraw.Geometry.gPoint(3, 5));
                        doc.Model.Entities.AddItem(lin_2_Ext); // this line will be extended
            
                        //Console.WriteLine("line to be extended handle is: " + lin_2_Ext.Handle.ToString());
                        vdSelection set_bound_ext = new vdSelection();
                        set_bound_ext.SetUnRegisterDocument(doc);
                        set_bound_ext.Name = "Extend";
                        set_bound_ext.RemoveAll();
                        doc.Selections.AddItem(set_bound_ext);
            
                        vdLine bound_line = new vdLine(doc, new gPoint(10, 10), new VectorDraw.Geometry.gPoint(10, 0));
                        doc.Model.Entities.AddItem(bound_line);
                        set_bound_ext.AddItem(bound_line, true, vdSelection.AddItemCheck.Nochecking);
                        bound_line = new vdLine(doc, new gPoint(1, 10), new VectorDraw.Geometry.gPoint(1, 0));
                        doc.Model.Entities.AddItem(bound_line);// add two lines that will be used to extend the lin_2_Ext
                        set_bound_ext.AddItem(bound_line, true, vdSelection.AddItemCheck.Nochecking);
            
                        //use the two lines in set_bound_ext and extend the lin_2_Ext in the part that point 7,5 is
                        doc.CommandAction.CmdExtend(set_bound_ext, new object[] { lin_2_Ext, new gPoint(7, 5) }, doc.EdgeExtendTrim);
                        //and again, use the two lines in set_bound_ext and extend the lin_2_Ext in the part that point 6,5 is
                        doc.CommandAction.CmdExtend(set_bound_ext, new object[] { lin_2_Ext, new gPoint(4, 5) }, doc.EdgeExtendTrim);
                    }
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.TrimWithPath(VectorDraw.Professional.vdCollections.vdSelection,VectorDraw.Geometry.gPoints,System.Boolean)">
            <summary>
            Trims the figures crossing the TrimPath (fence) using the entities inside BoundEntities 
            </summary>
            <param name="BoundEntities">A collection (vdSelection) of entities.</param>
            <param name="TrimPath">A <see cref="T:VectorDraw.Geometry.gPoints"/> which will cross the vdCurves to trim in World Coordinates</param>
            <param name="ExtendBoundEntities">Defines if the BoundEntities can be extended.</param>
            <returns>True if at least one vdCurve is trimmed</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.ExtendWithPath(VectorDraw.Professional.vdCollections.vdSelection,VectorDraw.Geometry.gPoints,System.Boolean)">
            <summary>
            Extends the figures crossing the ExtendPath (fence) using the entities inside BoundEntities 
            </summary>
            <param name="BoundEntities">A collection (vdSelection) of entities.</param>
            <param name="ExtendPath">A <see cref="T:VectorDraw.Geometry.gPoints"/> which will cross the vdCurves to trim in World Coordinates</param>
            <param name="ExtendBoundEntities">Defines if the BoundEntities can be extended.</param>
            <returns>True if at least one vdCurve is extended</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.XClipEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs a CmdXClip command with user all the parameters.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdXClip(System.Object,System.Object)"/> method passing null parameters.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdXClip(System.Object,System.Object)">
            <summary>
            Using this command you can clip an xref or insert object.
            </summary>
            <param name="Insert">A vdInsert object OR null , "user" so the user will pick the insert on the screen.</param>
            <param name="clipobjCurve">A vdCurve object OR null , "user" so the user will pick or Draw the curve on the screen.</param>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdArcAlignedTextEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs a CmdArcAlignedText command with user all the parameters.
            </summary>
            <param name="doc">The <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object where the command will take place.</param>
            <remarks>Calls the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdXClip(System.Object,System.Object)"/> method passing null parameters.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdArcAlignedText(System.Object,System.String)">
            <summary>
            Adds an arcalignedtext to an arc with default values. 
            </summary>
            <param name="vdArc">A vdArc object or "USER",null so the user picks the arc from the screen.</param>
            <param name="text">A string object representing the text of the ArcAlignedText or "USER", null so the user is asked for the text.</param>
            <returns>True if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdCombinePolyfacesIntersection(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs a Intersection combine operation between two polyfaces.
            </summary>
            <param name="doc">The Document where the operation takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdCombinePolyfacesReverseSubsctraction(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs a ReverseSubsctraction combine operation between two polyfaces.
            </summary>
            <param name="doc">The Document where the operation takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdCombinePolyfacesSubstraction(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs a Substraction combine operation between two polyfaces.
            </summary>
            <param name="doc">The Document where the operation takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdCombinePolyfacesUnion(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs a Union combine operation between two polyfaces.
            </summary>
            <param name="doc">The Document where the operation takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdCombinePolyfaces(System.Object,System.Object,VectorDraw.Professional.vdFigures.BooleanOperation,System.Boolean,System.Boolean)">
            <summary>
            Combines two polyfaces using the passed operation
            </summary>
            <param name="PolyfaceA">A polyface object or null , "USER" so the user picks the polyface to the screen.</param>
            <param name="PolyfaceB">A polyface object or null , "USER" so the user picks the polyface to the screen.</param>
            <param name="operation">Can be Union , Substraction , ReverseSubsctraction or Intersection. <see cref="T:VectorDraw.Professional.vdFigures.BooleanOperation"/></param>
            <param name="DeleteSourceObjs">A boolean value that represents if the source polyfaces will be deleted after the operation or not.</param>
            <param name="MoveResultObj">A boolean value that represents if a cmdMove command is going to run after the combine operation.</param>
            <returns>True if the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdCombinePolyfaces(System.Object,System.Object,VectorDraw.Professional.vdFigures.BooleanOperation)">
            <summary>
            Combines two polyfaces using the passed operation
            </summary>
            <param name="PolyfaceA">A polyface object or null , "USER" so the user picks the polyface to the screen.</param>
            <param name="PolyfaceB">A polyface object or null , "USER" so the user picks the polyface to the screen.</param>
            <param name="operation">Can be Union , Substraction , ReverseSubsctraction or Intersection. <see cref="T:VectorDraw.Professional.vdFigures.BooleanOperation"/></param>
            <returns>True if the operation was succesfull.</returns>
            <remarks>After the combination the source objects are not deleted and a cmdMove command starts in order to move the result polyface.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.STLoutEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs the STLOut export with null parameters.
            </summary>
            <param name="doc">The Document where the action takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.STLout(System.Object,System.Object)">
            <summary>
            Exports specified entities into stl format
            </summary>
            <param name="selection">A vdSelection of vdPolyfaces or "USER" , null so the user picks the entities from the screen.</param>
            <param name="filename">A string with an stl filename or "USER", null so the user picks the filename from a dialog.</param>
            <returns>True of the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdVolumeEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs the cmdVolume export with null parameters.
            </summary>
            <param name="doc">The Document where the action takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdVolume(System.Object,VectorDraw.Geometry.gPoint@)">
            <summary>
            Calculates the Volume of a closed polyface.
            </summary>
            <param name="polyface">A vdPolyface object or "USER", null so the user picks the polyface on the screen.</param>
            <param name="center">A gPoint parameter to return the center of mass of the object.</param>
            <returns>The Volume of the object.If the volume is negative then the command was not succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdJoinEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Performs the CmdJoin method, with null parameters.
            </summary>
            <param name="doc">The active document with which the command will be performed.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdJoin(System.Object)">
            <summary>
            Joins the different entities passed in a vdSelection object as parameter. The supported entities are vdArcs, vdLines and vdPolylines.
            If parameter is null, the user will be prompted to select the objects on screen.
            </summary>
            <param name="SelSet">A vdSelection object containing the entities to be joined or null/"USER".</param>
            <returns>True if the command was successful, or false.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdHelixEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Starts the CmdHelix Command with null parameters.
            </summary>
            <param name="doc">The document where the command will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdHelix(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Creates a vdHelix object.
            </summary>
            <param name="BaseCenter">A gPoint object for the center of the Helix OR null,"user" so the user picks this point to the screen.</param>
            <param name="BaseRadius">A double value that represents the base radius of the helix OR null,"user" so the user picks the radius to the screen.</param>
            <param name="TopRadius">A double value that represents the top radius of the helix OR null,"user" so the user picks the radius to the screen.</param>
            <param name="Height">A double value that represents the height of the helix OR null,"user" so the user picks the height to the screen.</param>
            <returns>True if the operation was succesfull and the helix was added to the Active Layout.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdAlignEx(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Starts the CmdAlign Command with null parameters.
            </summary>
            <param name="doc">The document where the command will take place.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdAlign(System.Object,System.Object,System.Object)">
            <summary>
            Translates the selected entities according to the align points provided.
            </summary>
            <param name="SelSet">A selection of entities(vdSelection) or "user" , null so the user picks the entities.</param>
            <param name="Points">A collection of align points(gpoints) 2-6 or "user", null so the user picks the points to the screen.</param>
            <param name="Scale">A boolean value or "user" , null so the user is asked (only when points are 4 2D align) if a scale is applied or not.</param>
            <returns>True if the operation was succesfull.</returns>
            <remarks>Check our online article about CmdAlign for more information.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdExportLayoutToModel(System.Object,System.Object)">
            <summary>
            Exports the current Active Layout to an individual new file as a Model Space 
            </summary>
            <param name="FileName">The filename of the created file where the entities will be written.</param>
            <param name="Version">The version of the file to be created. If this is null or "user" then the <seealso cref="P:VectorDraw.Professional.vdObjects.vdDocument.Version"/> will be used. This apply to formats that have versioning like VDF or DXF and not for versionless formats like VDML.</param>
            <returns>True if the command was successful.</returns>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> and/or <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> events with "CmdExportLayoutToModel" action name.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.ActionUtilities.vdCommandAction.OpenLoops">
            <summary>
            Get the number of open/active commands of the Document. 0 means that there isn't any active command running.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.vdLayouts">
            <summary>
            Represents a collection of <see cref="T:VectorDraw.Professional.vdPrimaries.vdLayout"/> objects
            </summary>
            <remarks>
            Each item in the collection represent a paper space and are generally used for laying out your drawing for printing.
            Each <see cref="T:VectorDraw.Professional.vdPrimaries.vdLayout"/> item can contain deferent views of the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.Model"/> default layout  object.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayouts.getUniqueTableName(System.String)">
            <summary>
            Creates a unique string for use as name to a vdLayout object.
            </summary>
            <param name="prefix">A prefix string that will be present to the unique name.</param>
            <returns>Returns a unique string.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayouts.GetNotDeletedItems">
            <summary>
            Get all non deleted objects of the collection.
            </summary>
            <returns>
            Returns a new created collection of vdLayout objects 
            that are not set as <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.Deleted"/>.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayouts.ToString">
            <summary>
            Gets a System.String that represents the count of the vdLayouts collection Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayouts.#ctor">
            <summary>
            Initializes the vdLayouts collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayouts.FindItem(VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">A vdLayout object to be checked if it exists in the collection</param>
            <returns>True if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayouts.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayouts.AddItem(VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Adds a vdLayout object to the collection.
            </summary>
            <param name="value">The vdLayout object to be added to the collection.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAddItem"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterAddItem"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayouts.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayouts.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
            <remarks>
            All vdLayout objects are removed from the collection.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayouts.RemoveItem(VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Removes a specific vdLayout object from the collection.
            </summary>
            <param name="Object">The vdLayout object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayouts.RemoveAt(System.Int32)">
            <summary>
            Removes an object from the specified index of the collection.
            </summary>
            <param name="Index">The zero based index.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayouts.ChangeOrder(VectorDraw.Professional.vdPrimaries.vdLayout,System.Boolean)">
            <summary>
            Changes the position of a vdLayout object to the front or the end of the collection.
            </summary>
            <param name="Object">The vdLayout object.</param>
            <param name="ToBack">If true moves the object to the beginning of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayouts.MakeIndexDictionary">
            <summary>
            Creates an Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must be followed by a <see cref="M:VectorDraw.Professional.vdCollections.vdLayouts.ClearIndexDictionary"/> call when the search or swap is finished. </remarks>
            <example> For a code example please check topic <see cref="M:VectorDraw.Professional.vdCollections.vdLayouts.swap(VectorDraw.Professional.vdPrimaries.vdLayout,VectorDraw.Professional.vdPrimaries.vdLayout)"/> Method. </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayouts.ClearIndexDictionary">
            <summary>
            Clears the Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must follow a <see cref="M:VectorDraw.Professional.vdCollections.vdLayouts.MakeIndexDictionary"/> call when the search or swap is finished. </remarks>
            <example> For a code example please check topic <see cref="M:VectorDraw.Professional.vdCollections.vdLayouts.swap(VectorDraw.Professional.vdPrimaries.vdLayout,VectorDraw.Professional.vdPrimaries.vdLayout)"/> Method. </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayouts.swap(VectorDraw.Professional.vdPrimaries.vdLayout,VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Swaps the position between two different vdLayout objects existing in the collection.
            </summary>
            <param name="Object1">first object needed.</param>
            <param name="Object2">second object needed.</param>
            <returns>True if the swap operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayouts.InsertAt(System.Int32,VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Insert a vdLayout object to a specified index of the collection.
            </summary>
            <param name="Index">The zero based index of the collection where the object will be inserted.</param>
            <param name="Object">The vdLayout object which will be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayouts.Add(System.String)">
            <summary>
            Creates and adds a vdLAyout object to the collection with the specified name.
            </summary>
            <param name="Name">The name of the inserted vdDimstyle object.</param>
            <returns>Returns the added vdLayout object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayouts.FindName(System.String)">
            <summary>
            Finds a vdLayout object with the specified name in the collection.
            </summary>
            <param name="Name">The name to search in the collection.</param>
            <returns>The found object else returns null if a vdLayout does not exist with this name.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayouts.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdLayouts object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayouts.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdLayouts object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayouts.RemoveItem(System.Object)">
            <summary>
            Removes an object from the collection.
            </summary>
            <param name="item">The object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayouts.AddItem(System.Object)">
            <summary>
            Adds an object to the collection.
            </summary>
            <param name="value">The object to be added.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayouts.FindItem(System.Object)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">The object required for the search.</param>
            <returns>true if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayouts.VectorDraw#Professional#vdCollections#IvdObjectCollection#Item(System.Int32)">
            <summary>
            Retreave a specific item placed at a specified index from the collection.
            </summary>
            <param name="Index">The index where the object is.</param>
            <returns>Returns the object at the specified index.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayouts.GetObjectRealPosition(System.Object)">
            <summary>
            Find the index where a specified object is located in the list.
            </summary>
            <param name="item">The object to find.</param>
            <returns>Returns the index where the object is or -1 if the object is not in the list.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayouts.InsertAt(System.Int32,System.Object)">
            <summary>
            Insert an object at a specified index.
            </summary>
            <param name="index">The index where the object will be inserted.</param>
            <param name="item">The object to be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayouts.Dispose">
            <summary>
            Performs tasks associated with freeing, releasing, or resetting the necessary memory objects.
            After calling this method the vdDocument object is not available.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayouts.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Represents a collection of <see cref="T:VectorDraw.Professional.vdPrimaries.vdLayout"/> objects
            </summary>
            <remarks>
            Each item in the collection represent a paper space and are generally used for laying out your drawing for printing.
            Each <see cref="T:VectorDraw.Professional.vdPrimaries.vdLayout"/> item can contain deferent views of the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.Model"/> default layout  object.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLayouts.ItemType">
            <summary>
            Returns the Type of Items in the collection
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLayouts.ListPosition">
            <summary>
            Gets the <see cref="T:VectorDraw.Generics.IListPosition"/> interface object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLayouts.Item(System.Int32)">
            <summary>
            Get a vdLayout object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The vdLayout object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLayouts.Last">
            <summary>
            Returns the last item in the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLayouts.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdColorExpandableConverter">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColorExpandableConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColorExpandableConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdColor">
            <summary>
            Implements the vdColor object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.#ctor">
            <summary>
            Initializes the vdColor object.
            </summary>
            <remarks>
            the color is initialized with Color type:foreground.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.#ctor(System.Drawing.Color)">
            <summary>
            Initializes the vdColor object from a System.Drawing.Color object.
            </summary>
            <param name="color">The true color(RGB) value of the object.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.#ctor(System.Drawing.Color,System.Byte)">
            <summary>
            Initializes the vdColor object from a System.Drawing.Color object.
            </summary>
            <param name="color">The true color(RGB) value of the object.</param>
            <param name="alphaBlend">The amount of filtered transparency of a surface.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.#ctor(VectorDraw.Professional.vdObjects.vdColor.ColorType)">
            <summary>
            Initializes the vdColor object from a vdColor.ColorType .
            </summary>
            <param name="colortype"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.Transformby(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.Vector)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
            <param name="normal">The normal vector of the object before the transformation with passed matrix.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.FromString(System.String)">
            <summary>
            Sets the <see cref="T:VectorDraw.Professional.vdObjects.vdColor.ColorType"/> of the vdColor object with a string value.
            </summary>
            <param name="color">A valid string value representing the color.</param>
            <remarks>
            valid values:"bylayer","byblock","background","forground","5","(125,132,148)".
            </remarks>
            <exception cref="T:System.Exception">When the passed string is not in a valid format.</exception>
            <exception cref="T:VectorDraw.Professional.Exceptions.InvalidPropertyValueException">When can not change a property of this object.</exception>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.CopyToPenStyle(VectorDraw.Render.vdGdiPenStyle)">
            <summary>
            Set the properties of input <see cref="T:VectorDraw.Render.vdGdiPenStyle"/> pen object equal to the corresponding properties of this object.
            </summary>
            <param name="pen"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)">
            <summary>
            Check if the table object is depend on this figure
            </summary>
            <param name="table">A Table object to be searched.</param>
            <returns>Returns true is this object is not deleted and have a property reference equal with table object.</returns>
            <remarks>Called when <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ExtendedDeletedCheck"/> is False.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.</remarks>
            <remarks>User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.SetMaterialScale(System.Double)">
            <summary>
            Sets the Material Matrix of this object in order to scale the material by a double value.
            </summary>
            <param name="scale">A double value representing the scale that will transform the material.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.GetMaterialScale">
            <summary>
            Get the scale that is tranformed by the material of this object.
            </summary>
            <returns>A double value representing the scale of the material.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.Clone">
            <summary>
            Creates and returns a new vdColor object as copy from this one.
            </summary>
            <returns>A new created object as copy of this vdColor object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. System.Object.GetHashCode()
            is suitable for use in hashing algorithms and data structures like a hash
            table.
            </summary>
            <returns>
            Returns the unique <see cref="P:VectorDraw.Serialize.BaseObject.Id"></see> of the object.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.ToString">
            <summary>
            Gets a System.String that represents the vdColor Object.
            </summary>
            <remarks >
            The return value can be one of the following:"ByBlock","ByLayer",ColorIndex value
            or (Red,Green,Blue) values.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.Equals(System.Object)">
            <summary>
            Checks if this vdColor object is equal to an object.
            </summary>
            <param name="obj">An object that should be a vdColor object</param>
            <returns>True if the objects are equal.</returns>
            <remarks>
            Equal means that their string representation is equal and also they have the same AlphaBlending, material matrix and material.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.Equals(VectorDraw.Professional.vdObjects.vdColor)">
            <summary>
            Checks if this vdColor object is equal to a vdColor object.
            </summary>
            <param name="p">A vdColor object toi be checked if it is equal to this object.</param>
            <returns>True if the objects are equal.</returns>
            <remarks>
            Equal means that their string representation is equal and also they have the same AlphaBlending, material matrix and material.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.Equals(System.Drawing.Color)">
            <summary>
            Checks the Red, Green, Blue and Alpha values if they are equal.
            </summary>
            <param name="p">A color to check.</param>
            <returns>True if 4 values of the color equals to this color's values.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.op_Equality(VectorDraw.Professional.vdObjects.vdColor,VectorDraw.Professional.vdObjects.vdColor)">
            <summary>
            Implements the == operator for vdColor objects. 
            </summary>
            <param name="a">Left object of the == operator.</param>
            <param name="b">Right object of the == operator.</param>
            <returns>True if the objects are equal.</returns>
            <remarks>
            Equal means that the objects are referenced equal or their string representation is equal and also they have the same AlphaBlending, material matrix and material.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.op_Inequality(VectorDraw.Professional.vdObjects.vdColor,VectorDraw.Professional.vdObjects.vdColor)">
            <summary>
            Implements the != operator for vdColor objects. 
            </summary>
            <param name="obj1">Left object of the != operator.</param>
            <param name="obj2">Right object of the != operator.</param>
            <returns>True if the objects are not equal.</returns>
            <remarks>
            Equal means that the objects are referenced equal or their string representation is equal and also they have the same AlphaBlending, materialmatrix and material.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.CopyFrom(VectorDraw.Professional.vdObjects.vdColor)">
            <summary>
            Copies all properties from a vdColor object to this object.
            </summary>
            <param name="obj">The vdColor object from which the properties will be taken.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.FromRGB(System.Int32)">
            <summary>
             Creates a System.Drawing.Color structure from a 32-bit RGB value.
            </summary>
            <param name="rgb">A value specifying the 32-bit RGB value.</param>
            <returns>The System.Drawing.Color structure that this method creates.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.RGBFromSystem(System.Drawing.Color)">
            <summary>
            Gets the 32-bit RGB value of this System.Drawing.Color structure.
            </summary>
            <param name="color">a System.Drawing.Color with ARGB color</param>
            <returns>The 32-bit RGB value of this System.Drawing.Color.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.IsMaterialValid">
            <summary>
            Checks the existance of the material of the object.
            </summary>
            <returns>True if the material object of the vdColor object is not null.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.AsSystemColor">
            <summary>
            Returns a system Color that represents this vdColor object.
            </summary>
            <returns>Returns a system ARGB Color.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.FromRGB(System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the <see cref="P:VectorDraw.Professional.vdObjects.vdColor.TrueColor"/> property from three byte values representing the Red,Green,Blue values of the true color.
            </summary>
            <param name="red">Red value.</param>
            <param name="green">Green value.</param>
            <param name="blue">Blue value.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.FromSystemColor(System.Drawing.Color)">
            <summary>
            Sets the <see cref="P:VectorDraw.Professional.vdObjects.vdColor.TrueColor"/> property from a System color.
            </summary>
            <param name="syscol">A system ARGB Color object.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.ToInt32">
            <summary>
            Calculates an Int32 that represents the color value of the vdColor object.
            </summary>
            <returns>A Int32 value representing the color value of the vdColor object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.FromInt32(System.Int32)">
            <summary>
            Sets the color from an Int32 value.
            </summary>
            <param name="rgbm">A Int32 value representing a color.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.Update">
            <summary>
            Update the owner of the vdColor object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.Invalidate">
            <summary>
            Invalidate the owner of the vdColor object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdColor object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdColor object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColor.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements the vdColor object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdColor.IsColorIndexOrTrueColor">
            <summary>
            Get if the vdColor object is by index or true color (<see cref="T:VectorDraw.Professional.vdObjects.vdColor.ColorType"/>).
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdColor.IsBackGround">
            <summary>
            Get/Set the vdColor object to be a Background color(<see cref="T:VectorDraw.Professional.vdObjects.vdColor.ColorType"/>).
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <exception cref="T:VectorDraw.Professional.Exceptions.InvalidPropertyValueException">If setting to true and this object is member of a <see cref="T:VectorDraw.Professional.vdObjects.vdPalette"/> collection.</exception>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdColor.IsForGround">
            <summary>
            Get/Set the vdColor object to be a Foreground color(<see cref="T:VectorDraw.Professional.vdObjects.vdColor.ColorType"/>).
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdColor.ByBlock">
            <summary>
            Setting the Color to BYBLOCK means that an object assumes the foreground color until 
            it is grouped into a block. Whenever the block is inserted, all objects inherit the 
            block's color.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <exception cref="T:VectorDraw.Professional.Exceptions.InvalidPropertyValueException">If setting to true and this object is member of a <see cref="T:VectorDraw.Professional.vdObjects.vdPalette"/> collection.</exception>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdColor.ByLayer">
            <summary>
            Setting the vdColor to BYLAYER means that an object assumes the Color that is assigned
            to the object's layer.
            If the object that has the color, belongs to a block and the block is inserted in <see cref="P:VectorDraw.Professional.vdCollections.vdLayers.Standard"/>
            (Layer 0), then the object inherit the block's color. 
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <exception cref="T:VectorDraw.Professional.Exceptions.InvalidPropertyValueException">If setting to true and this object is member of a <see cref="T:VectorDraw.Professional.vdObjects.vdPalette"/> collection.</exception>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdColor.ByColorIndex">
            <summary>
            Get/Set the vdColor object to be by index color(<see cref="T:VectorDraw.Professional.vdObjects.vdColor.ColorType"/>).
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdColor.ColorIndex">
            <summary>
            Get/Set the index of the vdColor object to the palette.
            </summary>
            <remarks>
            If the color is by index then the index to the palette is returned else if the color is a true color then the nearest index is returned.</remarks>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <exception cref="T:VectorDraw.Professional.Exceptions.InvalidPropertyValueException">When changing the value and this object is member of a <see cref="T:VectorDraw.Professional.vdObjects.vdPalette"/> collection.</exception>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdColor.SystemColor">
            <summary>
            Get/Set the vdColor object to get it's value from a system color.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdColor.TrueColor">
            <summary>
            Get/Set the true color(RGB) value of the vdColor object.
            </summary>
            <remarks>
            If the color is not a true color(<see cref="T:VectorDraw.Professional.vdObjects.vdColor.ColorType"/>) then the true color representation of the index color is returned.</remarks>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdColor.ColorFlag">
            <summary>
            Get/Set the <see cref="T:VectorDraw.Professional.vdObjects.vdColor.ColorType"/> of the vdColor object.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <exception cref="T:VectorDraw.Professional.Exceptions.InvalidPropertyValueException">When changing the value and this object is member of a <see cref="T:VectorDraw.Professional.vdObjects.vdPalette"/> collection.</exception>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdColor.Palette">
            <summary>
            Get/Set the Palette of the vdColor object.If the vdColor object is in a Document
            then the Document's palette is returned.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <exception cref="T:VectorDraw.Professional.Exceptions.InvalidPropertyValueException">When changing the value and this object is member of a <see cref="T:VectorDraw.Professional.vdObjects.vdPalette"/> collection.</exception>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdColor.Red">
            <summary>
            Get/Set the Red value fro the true color of the object.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdColor.Green">
            <summary>
            Get/Set the Green value fro the true color of the object.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdColor.Blue">
            <summary>
            Get/Set the Blue value fro the true color of the object.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdColor.MaterialImage">
            <summary>
            Get/Set a <see cref="T:VectorDraw.Professional.vdPrimaries.vdImageDef"/> object(image) to be applied as material for this vdColor object.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdColor.AlphaBlending">
            <summary>
            Specifies the amount of filtered transparency of a surface. 
            </summary>
            <remarks>
            Some real-world examples of transparency are stained glass windows or tinted cellophane. Valid range 0 to 255.</remarks>
            <remarks>Default values is <see cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Transparency"/>.</remarks>
            <remarks>A value of 255 means no transparency.</remarks>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdColor.MaterialMatrix">
            <summary>
            Get/Set a Matrix used for transformations for the material(image) of the vdColor object.
            </summary>
            <remarks>
            Apply transformations in the following order: </remarks>
            <remarks>1. scale (X and Y scales defines the width and height of image in drawing units)</remarks>
            <remarks>2. rotate (in counterclockwise direction)</remarks>
            <remarks>3. offset </remarks>
            <remarks>4. invert the result matrix.</remarks>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdColor.PredefinedType">
            <summary>
            Get/Set predefined material types.
            </summary>
            <remarks>Currently for INTERNAL use only.</remarks>
            <seealso cref="T:VectorDraw.Professional.vdObjects.vdColor.MaterialType"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdColor.Transmit">
            <summary>
            Specifies the amount of non-filtered light that is transmitted through a surface. <see cref="P:VectorDraw.Professional.vdObjects.vdColor.AlphaBlending"/>
            </summary>
            <remarks>
            Currently for INTERNAL use only.</remarks>
            <remarks>Some real-world examples of non-filtered transparency are thin see-through cloth, fine mesh netting and dust on a surface. Valid range 0 to 1.0.</remarks>
            <remarks>Default values is <see cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Transmit"/>.</remarks>
            <remarks>The color of the object and the color transmitted through the object together contribute 100% of the final color. </remarks>
            <remarks>So if transmit is set to 0.6 (60 percent), the transmitted color contributes 60% and the <see cref="P:VectorDraw.Professional.vdObjects.vdColor.SystemColor"/> of the object contributes only 10%.</remarks>
            <remarks>A value of 1.0 means no Transmit and the full <see cref="T:System.Drawing.Color"/> value is filtered transparency.</remarks>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <seealso cref="P:VectorDraw.Professional.vdObjects.vdColor.SystemColor"/>
            <seealso cref="P:VectorDraw.Professional.vdObjects.vdColor.AlphaBlending"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdColor.Ambient">
            <summary>
            Simulate the amount of the light that is scattered around the scene that does not come directly from a light source on a surface
            </summary>
            <remarks>
            Currently for INTERNAL use only.  Valid range 0 to 1.0. 
            Default values is <see cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Ambient"/>.</remarks>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdColor.Diffuse">
            <summary>
            Diffuse determines how much of the light that is seen comes directly from a light source on a surface.
            </summary>
            <remarks>
            Currently for INTERNAL use only. Valid range 0 to 1.0.</remarks>
            <remarks>Default value is <see cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Diffuse"/>.</remarks>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdColor.Specular">
            <summary>
            Specifies the saturation to the light source's color around the brightest area (center) of the highlight
            </summary>
            <remarks>
            Currently for INTERNAL use only.  Valid range 0 to 1.0.</remarks>
            <remarks>Default values is <see cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Specular"/>.</remarks>
            <remarks>A value of 1.0 causes complete saturation to the light source's color at the brightest area (center) of the highlight.</remarks>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdColor.Roughness">
            <summary>
            Specifies the amount of a spot light highlighting on a surface.
            </summary>
            <remarks>
            Currently for INTERNAL use only. Valid range 0.0 to 1.0.</remarks>
            <remarks>Default values is <see cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Roughness"/>.</remarks>
            <remarks>If specular is not specified Roughness has no effect</remarks>
            <remarks>A value of 1.0 means (very rough - large highlight)</remarks>
            <remarks>A value of 0.01 means  (very smooth - small highlight) like  (plastic). </remarks>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            <seealso cref="P:VectorDraw.Professional.vdObjects.vdColor.Specular"/>
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdColor.Reflection">
            <summary>
            Specifies the amount of mirrored finish for a surface.
            </summary>
            <remarks>
            Currently for INTERNAL use only. Valid range 0 to 1.</remarks>
            <remarks>Default values is <see cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Reflection"/>.</remarks>
            <remarks>A value of 1 means a perfect mirror.</remarks>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdColor.Refraction">
            <summary>
            Specifies the blending of the ray of light passing throw a transparency surface.
            </summary>
            <remarks>
            Currently for INTERNAL use only. Valid range 1 to INFINITY.</remarks>
            <remarks>Default values is <see cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Refraction"/>.</remarks>
            <remarks>The index of refraction for air is 1.0, water is 1.33, glass is 1.5 and diamond is 2.4</remarks>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdColor.Metallic">
            <summary>
            Specifies the amount of metallic finish for a surface.
            </summary>
            <remarks>
            Currently for INTERNAL use only. Valid range 0 to 1.</remarks>
            <remarks>Default values is <see cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Metallic"/>.</remarks>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdColor.OldColorIndex">
            <summary>
            This is used for compatibility with colors of version 5.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdColor.ColorType">
            <summary>
            Represents the color type of the vdColor object.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdColor.ColorType.ByLayer">
            <summary>
            The color is by layer.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdColor.ColorType.ByBlock">
            <summary>
            The color is by block.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdColor.ColorType.ByColor">
            <summary>
            The color is a true color.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdColor.ColorType.ByColorIndex">
            <summary>
            The color is by color index(0 - count of the palette).
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdColor.ColorType.Background">
            <summary>
            The vdColor is background.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdColor.ColorType.Foreground">
            <summary>
            The color is foreground(index 6).
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdColor.ColorType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdColor.MaterialType">
            <summary>
            Represents some Predefined material types.
            </summary>
            <remarks>Currently for INTERNAL use only.</remarks>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdColor.MaterialType.Custom">
            <summary>
            Use this setting in order to set the various properties manually.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdColor.MaterialType.Default">
            <summary>
            This type uses the default values for all properties.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdColor.MaterialType.Matte">
            <summary>
            A Matte material setting.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdColor.MaterialType.Plastic">
            <summary>
            A plastic material setting
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdColor.MaterialType.Metal">
            <summary>
            A metal material setting
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdColor.MaterialType.Glass">
            <summary>
            A glass material setting
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdColor.MaterialType.Water">
            <summary>
            A water material setting
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdColor.MaterialType.Diamond">
            <summary>
            A diamond material setting
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdColor.MaterialType.Mirror">
            <summary>
            A mirror material setting
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdPolyhatch">
            <summary>
            Implements all functionality of the vdPolyhatch object.
            </summary>
            <remarks>
            Note that all vdcurves consisting the vdPolyhatch object must be in the same plane.
            </remarks>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdFigure">
            <summary>
            This is a Base object that all Drawable objects(like vdLine...) objects inherit from.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.RaiseOnDraw(VectorDraw.Render.vdRender)">
            <summary>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnDrawFigure"></see> Event of vdDocument object.
            </summary>
            <param name="render">The vdRender object where the vdFigure will be drawn.</param>
            <returns>Returns true if the object can be drawn.</returns>
            <remarks>
            It is called before this vdFigure is drawn.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.RaiseOnDrawAfter(VectorDraw.Render.vdRender)">
            <summary>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnDrawAfterFigure"></see> Event of vdDocument object.
            </summary>
            <param name="render">The vdRender object where the vdFigure will be drawn.</param>
            <remarks>
            It is called after this vdFigure is drawn.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.RaiseOnGetGripPoints(VectorDraw.Geometry.gPoints)">
            <summary>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetGripPoints"></see> Event of vdDocument object.
            </summary>
            <param name="grippoints">A <see cref="T:VectorDraw.Geometry.gPoints"></see> array where the grip points will be added.</param>
            <returns>If the return value is true the default grip points are not added to the collection.</returns>
            <remarks>
            Raises before the <see cfer="vdFigure.GetGripPoints"></see> default implementation.
            If the user wants different grip points than the default he should override the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetGripPoints"></see> Event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.RaiseOnMoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)">
            <summary>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnMoveGripPointsAt"></see> Event of vdDocument object.
            </summary>
            <param name="Indexes">Represents a zero based array of the grip indexes that will be moved.</param>
            <param name="dx">The dx distance that the grip is moved.</param>
            <param name="dy">The dy distance that the grip is moved.</param>
            <param name="dz">The dz distance that the grip is moved.</param>
            <returns>Returns true if the default implementstion should not be done.</returns>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdFigure.mBoundBox">
            <summary>
            This field is used to store the Bounding Box of the object.
            </summary>
            <remarks>
            The value must be finally stored in the <see cref="P:VectorDraw.Professional.vdPrimaries.vdFigure.BoundingBox"></see> property.
            The update method automatically sets this value to null so the BoundingBox will be recalculated.
            </remarks>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdFigure.mEcsMatrix">
            <summary>
            This field is used to store the ECSMatrix of the object.
            </summary>
            <remarks>
            The value must be finally stored in the <see cref="P:VectorDraw.Professional.vdPrimaries.vdFigure.ECSMatrix"></see> property.
            The update method automatically sets this value to null so the ECSMatrix will be recalculated.
            </remarks>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdFigure.mLayer">
            <summary>
            This field is used to store the Layer of the object.
            </summary>
            <remarks>
            The value must be finally stored in the <see cref="P:VectorDraw.Professional.vdPrimaries.vdFigure.Layer"></see> property.
            </remarks>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdFigure.mPenColor">
            <summary>
            This field is used to store the PenColor of the object.
            </summary>
            <remarks>
            The value must be finally stored in the <see cref="P:VectorDraw.Professional.vdPrimaries.vdFigure.PenColor"></see> property.
            </remarks>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdFigure.mGipPoints">
            <summary>
            This field is used to store the calculated grip points of the object.
            </summary>
            <remarks>The update method automatically sets this value to null so the grip points will be recalculated.</remarks>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdFigure.mLineType">
            <summary>
            Internally used for the object's linetype.It is recommended to use the <see cref="P:VectorDraw.Professional.vdPrimaries.vdFigure.LineType"/> property instead.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.#ctor">
            <summary>
            The constructor of the vdFigure object where the default initialization is commited.
            </summary>
            <remarks>
            This object cannot be directly created but it is used as base for other objects.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.getOsnapNearest(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.OsnapMode)">
            <summary>
             Get The closest osnap point to the givenPoint.
            </summary>
            <param name="givenPoint">A point in World Coordinate System(WCS).</param>
            <param name="omode">The <see cref="T:VectorDraw.Geometry.OsnapMode"/> used to get the onap points that will combine their distance from the givenPoint.</param>
            <returns>Returns null or a point in WCS belonging to the curve.</returns>
            <remarks>This method returns null if this object is <see cref="T:VectorDraw.Professional.vdFigures.vdPolyface"/> or <see cref="T:VectorDraw.Professional.vdFigures.vdGroundSurface"/></remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.getClosestPointTo(VectorDraw.Geometry.gPoint)">
            <summary>
            Get The closest point belonging to the curve.
            </summary>
            <param name="givenPoint">A point in World Coordinate System(WCS).</param>
            <returns>Returns null or a point in WCS belonging to the curve.</returns>
            <remarks>This method returns null if this object is <see cref="T:VectorDraw.Professional.vdFigures.vdPolyface"/> or <see cref="T:VectorDraw.Professional.vdFigures.vdGroundSurface"/></remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.getUserPointNearest(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Geometry.gPoint)">
            <summary>
            Returns the nearest point of the entity from a point in Curent User Coordinate System usually return by a user get action.
            </summary>
            <param name="Document">The vdDocument were the entitity belong.</param>
            <param name="givenPoint">A gPoint In Current User Coordinate System usually return by a user get action.</param>
            <returns>A gPoint in Current User Coordinate System which belongs on this entity .</returns>
            <remarks>This method returns null if this object is <see cref="T:VectorDraw.Professional.vdFigures.vdPolyface"/> or <see cref="T:VectorDraw.Professional.vdFigures.vdGroundSurface"/></remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.Explode">
            <summary>
            Explode an entity in sub entities.
            </summary>
            <returns> Returns a collection of the sub entities of the object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.IntersectWith(VectorDraw.Professional.vdPrimaries.vdFigure,VectorDraw.Professional.Constants.VdConstInters,VectorDraw.Geometry.gPoints)">
            <summary>
            Finds the intersection points of an object with another object.
            </summary>
            <param name="pEntity">The entity with which the intersection of the object will be done.</param>
            <param name="intersectOption"><see cref="T:VectorDraw.Professional.Constants.VdConstInters"/> constant</param>
            <param name="intPoints">A precreated gPoints collection in which the instersection points will be added</param>
            <returns>True if at least one intersection point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)">
            <summary>
            Calculates the Object's snap points in a specific position of the cursor.
            </summary>
            <param name="object2viewcs">A Matrix used for transformations from the Object coordinate system(OCS)
            to the active User coordinate system(UCS) when the function is called.</param>
            <param name="mode"><see cref="T:VectorDraw.Geometry.OsnapMode"/></param>
            <param name="pickPoi">A point representing the cursor position in current View coordinate system (VCS)</param>
            <param name="LastPoi">
            A point representing the reference point of the current User Action in View coordinate system (VCS)
            If the current user action has no reference this parameter is null. This point is used when mode is Perpedicular or Tangent.
            </param>
            <param name="SegCount">A zero based subsegment of the object.Tis parameter is usefull for objects with segments like vdPolyline and vdPolyface.</param>
            <param name="osnaps">A precreated OsnapPoints collection in which the osnap points will be added.</param>
            <returns>True if at least one osnap point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)">
            <summary>
            This function is intended to be called during a grip edit of the object. 
            </summary>
            <param name="Indexes">Represents a zero based array of the grip indexes that will be moved.</param>
            <param name="dx">The dx distance that the grip is moved.</param>
            <param name="dy">The dy distance that the grip is moved.</param>
            <param name="dz">The dz distance that the grip is moved.</param>
            <seealso cref="M:VectorDraw.Professional.vdPrimaries.vdFigure.GetGripPoints"/>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnMoveGripPointsAt"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.GetGripPoints">
            <summary>
            A function returning the grip points of the object.
            </summary>
            <returns>Returns a new instance of gpoints object containing the grip points of the object.</returns>
            <remarks>
            The returning points are in World coordinate system(WCS).
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetGripPoints"/> event.
            When implementing this method the <see cref="M:VectorDraw.Professional.vdPrimaries.vdFigure.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)"/> must be also override according to the new selected grip points.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Called in order to draw the object in a specified vdRender object.
            </summary>
            <param name="render">The vdRender object in which the object will be drawn.</param>
            <returns><see cref="T:VectorDraw.Render.vdRender.DrawStatus"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.Is3dSectionVisible(VectorDraw.Geometry.Matrix)">
            <summary>
            Indicates if at least a segment of the object is visible after applying the SectionClips in 3dRender mode.
            </summary>
            <param name="object2World">Represents the object to world coordinate system matrix.</param>
            <returns>True if the object is visible after applying the sections</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.VisibleOnScreen">
            <summary>
            Specifies if the drawing object is visible on screen
            </summary>
            <remarks>
            This method returns true if :
             the object's <see cref="M:VectorDraw.Professional.vdPrimaries.vdFigure.IsVisible"/> return true and
             object's bounding box is inside or intersecting screen's bounding box and
             object is not hidden by a 3d section clip.
             Otherwise returns false.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.IsVisible">
            <summary>
            Indicates if the object can be drawn.
            </summary>
            <returns>True if the object can be drawn.</returns>
            <remarks> An object is invisible when is Deleted,has Layer null,Layer is frozen,
            <see cref="F:VectorDraw.Professional.vdPrimaries.vdFigure.VisibilityEnum.Invisible"/>,object's Bounding Box is empty.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.Invalidate">
            <summary>
            Invalidates the object's Bounding Box and causes the control to be redrawn in this region.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.
            User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.OnDocumentSelected(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            This method is called when the object is inserted in a Document for the first time.
            </summary>
            <param name="document">The document where the object is inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.InitializeProperties">
            <summary>
            Resets the properties of the vdFigure object to the Default values.
            </summary>
            <remarks>
            Default Values:PenColor = ByLayer,Visibility = true,PenWidth = 0,URL= ToolTip = "", LineTypeScale = 1,LineWeight = ByLayer.
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.OnOwnerChanged">
            <summary>
            This method is called when the object's owner is changed.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.ToString">
            <summary>
            Gets a System.String that represents the type of the vdFigure Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.DrawGrips(VectorDraw.Render.vdRender)">
            <summary>
            Draws the grips of the object in the specified vdRender object.
            </summary>
            <param name="render">The vdRender object in which the object will be drawn.</param>
            <remarks>If <see cref="P:VectorDraw.Professional.vdPrimaries.vdFigure.ShowGrips"/> is false then no grips are drawn.
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnFigureDrawGrips"/> event.
            The grips are drawn as rectangle using the size of <see cref="P:VectorDraw.Render.vdRenderGlobalProperties.GripSize"/>
            and the color of <see cref="P:VectorDraw.Render.vdRenderGlobalProperties.GripColor"/>of render parameter.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.DrawGrip(System.Int32,VectorDraw.Geometry.Box,VectorDraw.Render.vdRender)">
            <summary>
            Called by <see cref="M:VectorDraw.Professional.vdPrimaries.vdFigure.DrawGrips(VectorDraw.Render.vdRender)"/> method.Draws the specified index grip as the passed GripBox to the passed vdRender object.
            </summary>
            <param name="index">The index of the grip.</param>
            <param name="GripBox">The Box to be drawn in current view Co-ordinate system.</param>
            <param name="render">The vdRender object where the box will be drawn.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.PureDrawGrip(System.Int32,VectorDraw.Geometry.gPoint,VectorDraw.Render.vdRender)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="ptInView">In current view Co-ordinate system.</param>
            <param name="render"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.SelectPenWidth(VectorDraw.Render.vdGdiPenStyle,VectorDraw.Render.vdRender,VectorDraw.Professional.vdPrimaries.vdFigure)">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.AfterDraw(VectorDraw.Render.vdRender)">
            <summary>
            Should be only overriden in Custom objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.ListStart(VectorDraw.Render.vdRender)">
            <summary>
            This method should be called in customobjects at the beginning of the Draw method. Check our samples with custom objects to see proper use.
            </summary>
            <param name="render">The render where the object is drawn.</param>
            <returns>Returns true if the object is drawn using the internal precalculated list.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.ListEnd(VectorDraw.Render.vdRender)">
            <summary>
            This method should be called in customobjects at the end of the Draw method. Check our samples with custom objects to see proper use.
            </summary>
            <param name="render">The render where the object is drawn.</param>
            <returns>True if the list closed succesfully.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.SupportOpenGLPrimitives(VectorDraw.Render.IvdOpenGLRender)">
            <summary>
            A boolean value that represents if the user will use the <see cref="M:VectorDraw.Professional.vdPrimaries.vdFigure.OnDrawOpenGLPrimitives(VectorDraw.Render.IvdOpenGLRender)"/> event to draw the object using his own Opengl commands.
            </summary>
            <param name="openglrender">The render where the objects are being drawn.</param>
            <returns>Return true if you want to implement the OpenGL draw of the object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.OnDrawOpenGLPrimitives(VectorDraw.Render.IvdOpenGLRender)">
            <summary>
            Represents the event fired in order to draw the object using OpenGL list commands.
            </summary>
            <param name="openglrender">The render where the objects are being drawn.</param>
            <example>OpenGL code to draw an object<code>
                    public virtual bool SupportOpenGLPrimitives(IvdOpenGLRender openglrender)
                    {
                        return true;
                    }
                    public virtual void OnDrawOpenGLPrimitives(IvdOpenGLRender openglrender)
                    {
                        gPoints pts = this.BoundingBox.TogPoints();
                        openglrender.SetColor(System.Drawing.Color.FromArgb(100, 255, 0, 0));
                        openglrender.DrawPrimitiveBegin(VectorDraw.Render.OpenGL.OpenGLImports.Primitives.GL_POLYGON);
                        foreach (gPoint item in pts)
                        {
                            openglrender.Vertex3d(item.x, item.y, this.BoundingBox.Min.z);
                        }
                        openglrender.DrawPrimitiveEnd();
                        openglrender.DrawPrimitiveBegin(VectorDraw.Render.OpenGL.OpenGLImports.Primitives.GL_POLYGON);
                        foreach (gPoint item in pts)
                        {
                            openglrender.Vertex3d(item.x, item.y, this.BoundingBox.Max.z);
                        }
                        openglrender.DrawPrimitiveEnd();
                    }
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.GetRenderPenStyle(VectorDraw.Render.vdRender)">
            <summary>
            Returns the <see cref="T:VectorDraw.Render.vdGdiPenStyle"/> of this entity in connection with passed render 
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.GetRenderColor(VectorDraw.Render.vdRender)">
            <summary>
            Returns the System.Drawing.Color of this entity in connection with passed render 
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.PrepareBeforeDraw(VectorDraw.Render.vdRender)">
            <summary>
            Prepare the render penstyle and raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnDrawFigure"/> event. 
            </summary>
            <param name="render"></param>
            <returns><see cref="T:VectorDraw.Render.vdRender.DrawStatus"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdFigure object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdFigure object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.InGroup">
            <summary>
            Get a boolean value that represents if a figure belongs to a vdGroup or not
            </summary>
            <returns>True if this figure belongs to a group.</returns>
            <seealso cref="M:VectorDraw.Professional.vdCollections.vdGroups.FindFigure(VectorDraw.Professional.vdPrimaries.vdFigure)"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.MatchGroupObjects(VectorDraw.Professional.vdPrimaries.vdFigure)">
            <summary>
            Adds the passed vdFigure object to the Groups of this object.
            </summary>
            <param name="fig">The vdFigure object to be added to all the groups that this object belongs.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.FixCollectionForreferenceobjs(VectorDraw.Professional.vdCollections.vdSelection)">
            <summary>
            This method is used in CmdCopy , CmdMakeBlock , CmdExplode , MergeSelection , AddFromDocument , Explode of vdInsert in order to prepare the selection for the references objects.
            </summary>
            <param name="selset">The selection to be modified accordinly.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.FixCollectionForreferenceobjs(VectorDraw.Professional.vdCollections.vdEntities)">
            <summary>
            This method is used in CmdCopy , CmdMakeBlock , CmdExplode , MergeSelection , AddFromDocument , Explode of vdInsert in order to prepare the selection for the references objects.
            </summary>
            <param name="selset">The selection to be modified accordinly.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            This is a Base object that all Drawable objects(like vdLine...) objects inherit from.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.HighLight">
            <summary>
            Get/Set the value indicating if the lines of the object will be drawn as dashed.
            </summary>
            <remarks>
            Usually it is used when user selects the object.
            This property is not serialized when saved.
            Default value false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.BoundingBox">
            <summary>
            Gets the Bounding Box of the object in WorldCoordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.ECSMatrix">
            <summary>
            Gets the matrix which is used to transform vectors or points from the object's object coordinate system (OCS) to the World Coordinate System (WCS).
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.Deleted">
            <summary>
            Get/Set a property that marks the object as Deleted or not.
            </summary>
            <remarks> <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.Deleted"/></remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.DrawingList">
            <summary>
            Internally used to store the List's pointer of the object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.FadeEffect">
            <summary>
            Get/Set the color Fading effect percentage close to the background color of output rendering.
            </summary>
            <remarks>
            Valid range between 0 and 90. Value is limited to 90 percent in order to avoid making entities invisible.
            Default value is 0 for no fading.
            If the value is 0 and the figure is inside a vdBlock and the insert (vdInsert object) that reference 
            this block has FadeEffect bigger than 0 then the figure is faded as the vdInsert. In other case (the figure has FadeEffect
            greater than 0 then the vdInsert's FadeEffect is ignored for this object.
            If the object Layer is Locked then the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.LockLayerFadeEffect"/> is used.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.Layer">
            <summary>
            Get/Set the vdLayer object of the vdFigure.
            </summary>
            <remarks>
            This object must be a valid existing vdlayer object in the vdLayers collection of the Document of the vdFigure.
            When setting a value, the property's value is referenced to the object's Layer.
            Default value null.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.visibility">
            <summary>
            Get/Set the <see cref="P:VectorDraw.Professional.vdPrimaries.vdFigure.visibility"></see> of the object.
            </summary>
            <remarks>
            Default value <see cref="F:VectorDraw.Professional.vdPrimaries.vdFigure.VisibilityEnum.Visible"></see>.
            Invisible objects are not drawn but are saved.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.PenColor">
            <summary>
            Get/Set the vdColor object that the vdFigure will be drawn with.
            </summary>
            <remarks>
            When setting a value, the property's value is copied (no reference) to the object's PenColor.<see cref="T:VectorDraw.Professional.vdObjects.vdColor"/>
            Default value null.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.LineType">
            <summary>
            Get/Set the vdLinetype object that the vdFigure will be drawn with.
            </summary>
            <remarks>
            This object must be a valid existing vdLinetype object in the <see cref="T:VectorDraw.Professional.vdCollections.vdLineTypes"/> collection of the figure's Document.
            When setting a value, the property's value is referenced to the object's Linetype.
            Default value null. 
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.PenWidth">
            <summary>
            Get/Set the PenWidth in Drawing Units of the object.
            </summary>
            <remarks>
            Default value is 0.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.URL">
            <summary>
            Get/Set a string representing the URL of the object.
            </summary>
            <remarks>
            When an object is clicked then by default the URL opens in the default browser.
            Note that <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.EnableUrls"></see> must be set true.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.ToolTip">
            <summary>
            Get/Set a string representing the Tooltip of the object.
            </summary>
            <remarks>
            When the mouse pointer is over an object then by default the tooltip string is shown.
            Note that <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.EnableToolTips"></see> must be set true.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.LineTypeScale">
            <summary>
            Get/Set The Linetype scale of the object.
            </summary>
            <remarks>
            Default value 1.0 and this value must be greater than 0.
            The Object's Linetype scale is multiplied by the Document's Default <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.LineTypeScale"/>
            in order to draw the object.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.LineWeight">
            <summary>
            Get/Set The LineWeight of the object.
            </summary>
            <remarks>
            If object's PenWidth is greater than 0 then LineWeight is ignored.
            if <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.LineWeightDisplay"/> is set to false then Lineweight is ignored.
            Default value <see cref="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_BYLAYER"/>.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <seealso cref="T:VectorDraw.Professional.Constants.VdConstLineWeight"/>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.Draw3DFlag">
            <summary>
            Get/Set a property value used when drawing an object in 3d.
            </summary>
            <remarks>
            Set it to <see cref="F:VectorDraw.Render.Draw3DFlagEnum.ExcludeFromList"/> in order not to include the object in rendering 3d display lists,
            when the vdDocument.GlobalRenderProperties.CustomRenderTypeName = "VectorDraw.Render.opengllist#VectorDraw.Professional.dll"
            Default value is <see cref="F:VectorDraw.Render.Draw3DFlagEnum.Default"/> and the object is included in rendering 3d display lists.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.ShowGrips">
            <summary>
            Get/Set a boolean value indicating that when the object is drawn if the object's grips will be drawn too.
            </summary>
            <remarks> Default value false.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.TransparencyMethod">
            <summary>
            Get/Set a value that represents from where the transparency of the object will be taken.
            </summary>
            <remarks>
            <seealso cref="T:VectorDraw.Professional.vdPrimaries.vdFigure.TransparencyMethodEnum"/>.
            Default value is vdFigure.TrnsdparencyMethodEnum.Default.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.PixelIDFlag">
            <summary>
            Returns an integer flag that used when an object is pixelized on the screen
            Currently valid range is between 0 to 255.
            It can be used by <see cref="M:VectorDraw.Render.vdRender.GetIdAtPixel(System.Int32,System.Int32)"/> method
            The default flag currently used is the Lock property of the Layer that this object is belong to. 1 if the Layer is Lock and 0 if not.
            You can override this property and return additional application specific bit values (ex.compination of : 2 , 4, 8, 16 ,32, 64 ,128)
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdFigure.VisibilityEnum">
            <summary>
            Represents the visibility of the object.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdFigure.VisibilityEnum.Visible">
            <summary>
            The object is visible on screen.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdFigure.VisibilityEnum.Invisible">
            <summary>
            The object is invisible on screen.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdFigure.TransparencyMethodEnum">
            <summary>
            Represents the way that the transparency of the object will be used.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdFigure.TransparencyMethodEnum.ByLayer">
            <summary>
            The object takes the Transparency (AlphaBlending value) of the color of it's layer.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdFigure.TransparencyMethodEnum.ByBlock">
            <summary>
            The object takes the owner's color transparency (AlphaBlending value).
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdFigure.TransparencyMethodEnum.Default">
            <summary>
            The object takes it's own transparency value if it is True Color , If the pencolor is by index then the palette's color transparency value is used.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdFigure.TransparencyMethodEnum.KeepOwn">
            <summary>
            The object always takes it's own transparency (AlphaBlending value).
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdFigure.IFigureMouseEventArgs">
            <summary>
            This interface is used for the tntieis Mouse events.Please check our samples for a detailed sample on entity events.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.IFigureMouseEventArgs.Cancel">
            <summary>
            This is a return value so the user can direct VectorDraw how to react.
            </summary>
            <remarks>
            Set to true when the MouseAction is MouseEnter in order to stop the entity to accept mouse events.
            Set to true when the MouseAction is MouseOverDraw not to draw the default entity highlight implementaion , so the user can highlight the entities by himself.
            Please check our samples for a sample that explains these events.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.IFigureMouseEventArgs.MouseAction">
            <summary>
            Determines the Mouse Action that took place over the entity..
            </summary>
            <remarks>Please check our samples for a detailed sample on entity events.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.IFigureMouseEventArgs.MouseButtons">
            <summary>
            Determines the mouse buttons pressed over the entity.
            </summary>
            <remarks>Please check our samples for a detailed sample on entity events.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.IFigureMouseEventArgs.ActionRender">
            <summary>
            The render where the entity is being drawn.
            </summary>
            <remarks>Please check our samples for a detailed sample on entity events.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.IFigureMouseEventArgs.X">
            <summary>
            The x coordinate of the mouse position in pixels.
            </summary>
            <remarks>Please check our samples for a detailed sample on entity events.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.IFigureMouseEventArgs.Y">
            <summary>
            The y coordinate of the mouse position in pixels.
            </summary>
            <remarks>Please check our samples for a detailed sample on entity events.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.IFigureMouseEventArgs.Entity">
            <summary>
            The entity for which the event is fired.
            </summary>
            <remarks>Please check our samples for a detailed sample on entity events.</remarks>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdFigure.FigureMouseEventArgs">
            <summary>
            Event Arguments for Mouse over an entity events.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdFigure.FigureMouseEventArgs.GetInnerEntityMatrix">
            <summary>
            The the Matrix used to Transform the <see cref="P:VectorDraw.Professional.vdPrimaries.vdFigure.FigureMouseEventArgs.InnerEntity"/> Figure.
            </summary>
            <returns>The Matrix of the Inner Entity.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.FigureMouseEventArgs.Cancel">
            <summary>
            This is a return value so the user can direct VectorDraw how to react.
            </summary>
            <remarks>
            Set to true when the MouseAction is MouseEnter in order to stop the entity to accept mouse events.
            Set to true when the MouseAction is MouseOverDraw not to draw the default entity highlight implementaion , so the user can highlight the entities by himself.
            Please check our samples for a sample that explains these events.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.FigureMouseEventArgs.MouseAction">
            <summary>
            Determines the Mouse Action that took place over the entity.
            </summary>
            <remarks>Please check our samples for a detailed sample on entity events.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.FigureMouseEventArgs.MouseButtons">
            <summary>
            Determines the mouse buttons pressed over the entity.
            </summary>
            <remarks>Please check our samples for a detailed sample on entity events.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.FigureMouseEventArgs.ActionRender">
            <summary>
            The render object where the entity is drawn (as highlighted).
            </summary>
            <remarks>Please check our samples for a detailed sample on entity events.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.FigureMouseEventArgs.X">
            <summary>
            The x coordinate of the mouse position in pixels.
            </summary>
            <remarks>Please check our samples for a detailed sample on entity events.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.FigureMouseEventArgs.Y">
            <summary>
            The y coordinate of the mouse position in pixels.
            </summary>
            <remarks>Please check our samples for a detailed sample on entity events.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.FigureMouseEventArgs.Entity">
            <summary>
            The entity for which the event is fired.
            </summary>
            <remarks>Please check our samples for a detailed sample on entity events.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdFigure.FigureMouseEventArgs.InnerEntity">
            <summary>
            This property can be used to get the Inner entity that the user has the mouse over. It is very usefull to get an entity that is inside a block when the mouse is over a vdInsert object.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdFigure.FigureMouseEventArgs.FigureMouseButtons">
            <summary>
            This enum is used in the Entity events and determines the buttons of the mouse pressed.
            </summary>
            <remarks>Please check our samples for a detailed sample on entity events.</remarks>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdFigure.FigureMouseEventArgs.FigureMouseButtons.None">
            <summary>
               No mouse button was pressed.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdFigure.FigureMouseEventArgs.FigureMouseButtons.Left">
            <summary>
               The left mouse button was pressed.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdFigure.FigureMouseEventArgs.FigureMouseButtons.Right">
            <summary>
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdFigure.FigureMouseEventArgs.FigureMouseButtons.Middle">
            <summary>
               The middle mouse button was pressed.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdFigure.FigureMouseEventArgs.FigureMouseButtons.XButton1">
            <summary>
               The first XButton was pressed.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdFigure.FigureMouseEventArgs.FigureMouseButtons.XButton2">
            <summary>
               The second XButton was pressed.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdFigure.FigureMouseEventArgs.FigureMouseAction">
            <summary>
            Used in Figure Draw events to determine Mouse situation.
            </summary>
            <remarks>Please check our samples for a detailed sample on entity events.</remarks>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdFigure.FigureMouseEventArgs.FigureMouseAction.MouseEnter">
            <summary>
            The Mouse Entered the Figure.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdFigure.FigureMouseEventArgs.FigureMouseAction.MouseLeave">
            <summary>
            The Mouse left the figure.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdFigure.FigureMouseEventArgs.FigureMouseAction.MouseMove">
            <summary>
            Mouse Moves over the figure.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdFigure.FigureMouseEventArgs.FigureMouseAction.MouseDown">
            <summary>
            Mouse Down over the figure.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdFigure.FigureMouseEventArgs.FigureMouseAction.MouseUp">
            <summary>
            Mouse Up over the figure.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdFigure.FigureMouseEventArgs.FigureMouseAction.MouseOverDraw">
            <summary>
            The mouse is over the figure and is about to be drawn (as highlighted).
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdFigure.FigureMouseEventArgs.FigureMouseAction.MouseDoubleClick">
            <summary>
            Mouse DoubleClick over the figure.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyhatch.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes a new instance of the vdPolyhatch object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyhatch.#ctor">
            <summary>
            Initializes the vdPolyhatch object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyhatch.#ctor(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Professional.vdCollections.vdPolyCurves,VectorDraw.Professional.vdObjects.vdColor,System.Boolean)">
            <summary>
            Initializes a new instance of the vdPolyhatch object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <param name="polycurves">A collection of vdCurves consisting the vdPolyface object.</param>
            <param name="SolidFillColor">Fill color of the hatch.</param>
            <param name="DrawBoundary">A boolean value representing if the boundary of the hatch will be drawn.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyhatch.IntersectWith(VectorDraw.Professional.vdPrimaries.vdFigure,VectorDraw.Professional.Constants.VdConstInters,VectorDraw.Geometry.gPoints)">
            <summary>
            Finds the intersection points of an vdPolyhatch object with another object.
            </summary>
            <param name="pEntity">The entity with which the intersection of the object will be done.</param>
            <param name="intersectOption"><see cref="T:VectorDraw.Professional.Constants.VdConstInters"/> constant</param>
            <param name="intPoints">A precreated gPoints collection in which the instersection points will be added.The points are returned in WCS.</param>
            <returns>True if at least one intersection point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyhatch.Explode">
            <summary>
            Explodes each vdCurve object.
            </summary>
            <returns>A collection containing the vdfigures objects created from the explode method.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyhatch.InitializeProperties">
            <summary>
            Resets the properties of the vdPolyhatch object to the Default values.
            </summary>
            <remarks>
            Default values:Remove All PolyCurves,Thickness = 0.0, HatchProperties = null,ExtrusionVector 
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyhatch.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)">
            <summary>
            This function is intended to be called during a grip edit of the object. 
            </summary>
            <param name="Indexes">Represents a zero based array of the grip indexes that will be moved.</param>
            <param name="dx">The dx distance that the grip is moved.</param>
            <param name="dy">The dy distance that the grip is moved.</param>
            <param name="dz">The dz distance that the grip is moved.</param>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdPolyhatch.GetGripPoints"/>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnMoveGripPointsAt"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyhatch.GetGripPoints">
            <summary>
            A function returning the grip points of the object.
            </summary>
            <returns>Returns a new instance of gpoints object containing the grip points of the object.</returns>
            <remarks>
            The returning points are in World coordinate system(WCS).
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetGripPoints"/> event.
            When implementing this method the <see cref="M:VectorDraw.Professional.vdFigures.vdPolyhatch.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)"/> must be also override according to the new selected grip points.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyhatch.ToString">
            <summary>
            Gets a System.String that represents the type of the vdPolyHatch Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyhatch.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyhatch.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyhatch.CreateHatchedPolyline(VectorDraw.Geometry.Vertexes)">
            <summary>
            Create a vdPolyhatch object having one vdPolyline object created from the given points.
            </summary>
            <param name="vertexList">A collection of points that the polyline will have.</param>
            <returns>Returns a vdPolyhatch object contaning one polyline.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyhatch.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyhatch.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Called in order to draw the object in a specified vdRender object.
            </summary>
            <param name="render">The vdRender object in which the object will be drawn.</param>
            <returns><see cref="T:VectorDraw.Render.vdRender.DrawStatus"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyhatch.ToMesh(System.Int32)">
            <summary>
            Converts the vdPolyface into a <see cref="T:VectorDraw.Professional.vdFigures.vdPolyface"/> object.
            </summary>
            <param name="CurveResolution">Determines the number of the segments that the rect will be devided.</param>
            <returns>The created vdPolyface object which is not being added to the Document.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyhatch.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdPolyhatch object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyhatch.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdPolyhatch object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyhatch.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements all functionality of the vdPolyhatch object.
            </summary>
            <remarks>
            Note that all vdcurves consisting the vdPolyhatch object must be in the same plane.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdPolyhatch.BoundingBox">
            <summary>
            Gets the Bounding Box of the vdPolyface object in WorldCoordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdPolyhatch.Thickness">
             <summary>
             Get/Set the object's thickness in Drawing Units.
             </summary>
             <remarks>
             The thickness is always in the direction of entity's Extrusion Vector.
             Default Value 0.0.
             This change is also committed to the Thickness of the subentities of the hatch.
             Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
             Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <seealso cref="T:VectorDraw.Geometry.Vector"/>
            <seealso cref="P:VectorDraw.Professional.vdFigures.vdPolyhatch.ExtrusionVector"/>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdPolyhatch.ExtrusionVector">
            <summary>
            Get/Set the 3D vector extrusion direction for the object.
            </summary>
            <remarks> 
            Default value is (0,0,1) and the object is drawn in the XY plane.
            Is a one-unit length vector relative to World Coordinate System(WCS).
            This change is also committed to the ExtrusionVector of the subentities of the hatch.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <seealso cref="P:VectorDraw.Professional.vdFigures.vdPolyhatch.Thickness"/>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdPolyhatch.HatchProperties">
            <summary>
            Get/Set the hatch properties of the vdPolyhatch object.
            </summary>
            <remarks>
            Default value null.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdPolyhatch.PolyCurves">
            <summary>
            Get the collection of vdCurves consisting the vdPolyface object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdPolyhatch.ECSMatrix">
            <summary>
            Gets the matrix which is used to transform vectors or points from the 
            object's object coordinate system (OCS) to the World Coordinate System (WCS).
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.vdHatchPatterns">
            <summary>
            Implements the vdHatchPatterns collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.AddResolveProperty(System.Object,System.String,System.String)">
            <summary>
            Adds the parameters to the resolve list of the collection.
            </summary>
            <param name="_ObjectOfProperty">The object with the property to set(for example a vdDimension object).</param>
            <param name="_PropertyName">A string representing the property name of the object(for example "Style")</param>
            <param name="_TableName">A string representing the table name.(for example "mystyle1").</param>
            <remarks>The resolve list of the collections is used to set to an object a property that is equal to 
            an item of the list which may not be added yet to the collection. This is usually used when opening a 
            format and you want to add a layer to a vdFigure and it is not certain that the layer is already added 
            to the document.Use resolve list at the end of an open procedure of a format to resolve these properties.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.ResolveProperties">
            <summary>
            Resolves all the properties added with the <see cref="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.AddResolveProperty(System.Object,System.String,System.String)"/> function.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.getUniqueTableName(System.String)">
            <summary>
            Creates a unique string for use as name to a vdHatchPattern object.
            </summary>
            <param name="prefix">A prefix string that will be present to the unique name.</param>
            <returns>Returns a unique string.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.GetNotDeletedItemsAndVisibleOnForms">
            <summary>
            Get all non deleted objects of the collection.
            </summary>
            <returns>
            Returns a new created collection of vdHatchPattern objects that are not set as <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.Deleted"/>and also <see cref="P:VectorDraw.Professional.vdPrimaries.vdHatchPattern.VisibleOnForms"/> is true..
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.GetNotDeletedItems">
            <summary>
            Get all non deleted objects of the collection.
            </summary>
            <returns>Returns a new created collection of vdHatchPattern objects that are not set as <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.Deleted"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.IsDefault(VectorDraw.Professional.vdObjects.vdPrimary)">
            <summary>
            Checks if the parameter passed is the one of the standard hatch patterns.
            </summary>
            <param name="obj">A vdPrimary object to be checked if it is equal referenced to the standard hatch patterns.</param>
            <returns>
            True if the passed object is equal referenced with the standard hatch patterns.
            Standard hatch patterns:solid,single,double,horizontal,cross,Bdiagonal,Fdiagonal,Vertical,DiagCross.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.ToString">
            <summary>
            Gets a System.String that represents the count of the vdHatchPatterns collection Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.#ctor">
            <summary>
            Initializes the vdHatchPatterns collections and adds the standard hatch patterns.
            </summary>
            <remarks> Standard hatch patterns:solid,single,double,horizontal,cross,Bdiagonal,Fdiagonal,Vertical,DiagCross.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.Purge">
            <summary>
            Sets as Deleted all vdHatchPatterns that are not being used in the Collection's Document.
            </summary>
            <returns>Returns the number of unused vdHatchPattern objects that where set as Deleted.</returns>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnEraseObject"/> event for each deleted item.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.FindItem(VectorDraw.Professional.vdPrimaries.vdHatchPattern)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">A vdHatchPattern object to be checked if it exists in the collection</param>
            <returns>True if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.AddItem(VectorDraw.Professional.vdPrimaries.vdHatchPattern)">
            <summary>
            Adds a vdHatchPattern object to the collection.
            </summary>
            <param name="value">The vdHatchPattern object to be added to the collection.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAddItem"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterAddItem"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
            <remarks>
            All vdHatchPattern objects are removed even the standard ones.Call <see cref="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.AddStandards"/> in
            order to add the standard hatch patterns again.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.RemoveItem(VectorDraw.Professional.vdPrimaries.vdHatchPattern)">
            <summary>
            Removes a specific vdHatchPattern object from the collection.
            </summary>
            <param name="Object">The vdHatchPattern object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.RemoveAt(System.Int32)">
            <summary>
            Removes an object from the specified index of the collection.
            </summary>
            <param name="Index">The zero based index.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.InsertAt(System.Int32,VectorDraw.Professional.vdPrimaries.vdHatchPattern)">
            <summary>
            Insert a vdHatchPattern object to a specified index of the collection.
            </summary>
            <param name="Index">The zero based index of the collection where the object will be inserted.</param>
            <param name="Object">The vdHatchPattern object which will be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.ChangeOrder(VectorDraw.Professional.vdPrimaries.vdHatchPattern,System.Boolean)">
            <summary>
            Changes the position of a vdHatchPattern object to the front or the end of the collection.
            </summary>
            <param name="Object">The vdHatchPattern object.</param>
            <param name="ToBack">If true moves the object to the beginning of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.MakeIndexDictionary">
            <summary>
            Creates an Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must be followed by a <see cref="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.ClearIndexDictionary"/> call when the search or swap is finished. </remarks>
            <example> For a code example please check topic <see cref="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.swap(VectorDraw.Professional.vdPrimaries.vdHatchPattern,VectorDraw.Professional.vdPrimaries.vdHatchPattern)"/> Method. </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.ClearIndexDictionary">
            <summary>
            Clears the Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must follow a <see cref="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.MakeIndexDictionary"/> call when the search or swap is finished. </remarks>
            <example> For a code example please check topic <see cref="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.swap(VectorDraw.Professional.vdPrimaries.vdHatchPattern,VectorDraw.Professional.vdPrimaries.vdHatchPattern)"/> Method. </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.swap(VectorDraw.Professional.vdPrimaries.vdHatchPattern,VectorDraw.Professional.vdPrimaries.vdHatchPattern)">
            <summary>
            Swaps the position between two different vdHatchPattern objects existing in the collection.
            </summary>
            <param name="Object1">first object needed.</param>
            <param name="Object2">second object needed.</param>
            <returns>True if the swap operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.Add(System.String)">
            <summary>
            Creates and adds a vdHatchPattern object to the collection with the specified name.
            </summary>
            <param name="Name">The name of the inserted vdHatchPattern object.</param>
            <returns>Returns the added vdHatchPattern object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.FindName(System.String)">
            <summary>
            Finds a vdHatchPattern object with the specified name in the collection.
            </summary>
            <param name="Name">The name to search in the collection.</param>
            <returns>The found object else returns null if a vdHatchPattern does not exist with this name.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.AddStandards">
            <summary>
            Adds Standard hatch patterns to the collection.
            </summary>
            <remarks>Standard hatch patterns:solid,single,double,horizontal,cross,Bdiagonal,Fdiagonal,Vertical,DiagCross.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.Load(System.String,System.Boolean)">
            <summary>
            Add  a collection of hatchPatterns that defined in the .pat file. 
            </summary>
            <param name="Filename">A file that contains the description of hatchPatterns.</param>
            <param name="redefineIfExist">Set it to true in order to redifine a hatchPattern that already exist with same name.</param>
            <returns>True if the file is a valid hatchPattern definition file.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.Load(System.IO.Stream,System.Boolean)">
            <summary>
            Add  a collection of hatchPatterns that defined in the .pat file. 
            </summary>
            <param name="stream">A stream that contains the description of hatchPatterns.</param>
            <param name="redefineIfExist">Set it to true in order to redifine a hatchPattern that already exist with same name.</param>
            <returns>True if the stream is a valid hatchPattern definition file.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.AddDefaults">
            <summary>
            Adds standard hatch patterns to the collection and also adds default hatch patterns.
            </summary>
            <remarks>
            Default hatch patterns:ANGLE ,ANSI31 , ANSI 32 etc...
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdHatchPattern object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdHatchPatterns object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.RemoveItem(System.Object)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The item to be removed.</param>
            <returns>Returns true if the item was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.AddItem(System.Object)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="value">The object to be added.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.FindItem(System.Object)">
            <summary>
            Searches the collection for a specified object.
            </summary>
            <param name="item">The object to search for into the collection.</param>
            <returns>Returns true if the item exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.VectorDraw#Professional#vdCollections#IvdObjectCollection#Item(System.Int32)">
            <summary>
            Retreave a specific item placed at a specified index from the collection.
            </summary>
            <param name="Index">The index where the object is.</param>
            <returns>Returns the object at the specified index.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.GetObjectRealPosition(System.Object)">
            <summary>
            Find the index where a specified object is located in the list.
            </summary>
            <param name="item">The object to find.</param>
            <returns>Returns the index where the object is or -1 if the object is not in the list.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.InsertAt(System.Int32,System.Object)">
            <summary>
            Insert an object at a specified index.
            </summary>
            <param name="index">The index where the object will be inserted.</param>
            <param name="item">The object to be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements the vdHatchPatterns collection object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdHatchPatterns.ItemType">
            <summary>
            Returns the Type of Items in the collection
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdHatchPatterns.Invisible">
            <summary>
            Gets and ensures existance of the default Invisible hatch pattern.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdHatchPatterns.Solid">
            <summary>
            Gets and ensures existance of the default solid hatch pattern.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdHatchPatterns.Single">
            <summary>
            Gets and ensures existance of the default single line hatch pattern.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdHatchPatterns.Double">
            <summary>
            Gets and ensures existance of the default double line hatch pattern.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdHatchPatterns.Horizontal">
            <summary>
            Gets and ensures existance of the default horizontal line hatch pattern.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdHatchPatterns.Cross">
            <summary>
            Gets and ensures existance of the default cross hatch pattern.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdHatchPatterns.BDiagonal">
            <summary>
            Gets and ensures existance of the default diagonal line hatch pattern.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdHatchPatterns.FDiagonal">
            <summary>
            Gets and ensures existance of the default diagonal line hatch pattern.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdHatchPatterns.Vertical">
            <summary>
            Gets and ensures existance of the default vertical line hatch pattern.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdHatchPatterns.DiagCross">
            <summary>
            Gets and ensures existance of the default diagonal cross line hatch pattern.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdHatchPatterns.ListPosition">
            <summary>
            Gets the <see cref="T:VectorDraw.Generics.IListPosition"/> interface object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdHatchPatterns.Item(System.Int32)">
            <summary>
            Get a vdHatchPattern object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The vdHatchPattern object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdHatchPatterns.Last">
            <summary>
            Returns the last item in the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdHatchPatterns.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.IvdScreenBlock">
            <summary>
            Implements the vdScreenBlock object which can be used for auxiliary display information.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdScreenBlock">
            <summary>
            Implements the vdScreenBlock object which can be used for auxiliary display information.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdScreenBlock.Dispose">
            <summary>
            Disposes the <see cref="T:VectorDraw.Professional.vdObjects.vdScreenBlock"/> object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdScreenBlock.#ctor">
            <summary>
            Constructor of the <see cref="T:VectorDraw.Professional.vdObjects.vdScreenBlock"/> object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdScreenBlock.HitTest(VectorDraw.Professional.vdObjects.vdDocument,System.Drawing.Point)">
            <summary>
            This method returns true if this Block's drawing items pass through the given location relative to the document rendering contol window.
            </summary>
            <param name="doc">A vdDocument object where this vdScreenBlock is rendered in.</param>
            <param name="pt">A point in pixels relative to the passed document rendering contol window.</param>
            <returns>True if this Block's drawing items pass through the given location relative to the document rendering contol window.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdScreenBlock.HitTestEx(VectorDraw.Professional.vdObjects.vdDocument,System.Drawing.Point)">
            <summary>
            This method will get you the entity of the ScreenBlock that is under the passed parameters.
            </summary>
            <param name="doc">The Document where the hit test takes place.</param>
            <param name="pt">A point in pixels relative to the passed document rendering contol window.</param>
            <returns>The figure of the screen block.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdScreenBlock.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Called in order to draw the <see cref="T:VectorDraw.Professional.vdObjects.vdScreenBlock"/> on screen.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdScreenBlock.Draw(VectorDraw.Render.vdRender,System.Drawing.Point,VectorDraw.Render.RenderSelect.RenterSelectObjectArray@)">
            <summary>
            Called in order to draw the <see cref="T:VectorDraw.Professional.vdObjects.vdScreenBlock"/> on screen.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdScreenBlock.Width">
            <summary>
            The width in pixels of  <see cref="T:VectorDraw.Professional.vdObjects.vdScreenBlock"/> object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdScreenBlock.Height">
            <summary>
            The height in pixels of  <see cref="T:VectorDraw.Professional.vdObjects.vdScreenBlock"/> object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdScreenBlock.Left">
            <summary>
            The distance  of  <see cref="T:VectorDraw.Professional.vdObjects.vdScreenBlock"/> object from the left side of the VDF Graphics area in pixels.
            </summary>      
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdScreenBlock.Top">
            <summary>
            The distance  of  <see cref="T:VectorDraw.Professional.vdObjects.vdScreenBlock"/> object from the top side of the VDF Graphics area in pixels.
            </summary>      
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdScreenBlock.Block">
            <summary>
            The <see cref="T:VectorDraw.Professional.vdPrimaries.vdBlock"/> object that will be render from the from the  <see cref="T:VectorDraw.Professional.vdObjects.vdScreenBlock"/>.
            </summary>      
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdScreenBlock.Location">
            <summary>
            Position on screen of the <see cref="T:VectorDraw.Professional.vdObjects.vdScreenBlock"/>. It can be LeftTop, RightTop, RightBottom, Center, Fixed or
            FollowAxisOrigin which will be the point where the Axis is.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdScreenBlock.Tranformation">
            <summary>
            The transformation that the <see cref="T:VectorDraw.Professional.vdObjects.vdScreenBlock"/> will follow, World, User or View coordinates system
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdScreenBlock.Rendermode">
            <summary>
            The render mode that the <see cref="T:VectorDraw.Professional.vdObjects.vdScreenBlock"/> will used in order to be draw on screen.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdScreenBlock.TranformationFlag">
            <summary>
            The transformation that the <see cref="T:VectorDraw.Professional.vdObjects.vdScreenBlock"/> will follow, World, User or View coordinates system
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdScreenBlock.TranformationFlag.WorldCS">
            <summary>
            The<see cref="T:VectorDraw.Professional.vdObjects.vdScreenBlock"/> will follow the World coordinates system
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdScreenBlock.TranformationFlag.UserCS">
            <summary>
            The <see cref="T:VectorDraw.Professional.vdObjects.vdScreenBlock"/> will follow the User coordinates system
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdScreenBlock.TranformationFlag.ViewCS">
            <summary>
            The  <see cref="T:VectorDraw.Professional.vdObjects.vdScreenBlock"/> will follow the View coordinates system
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdScreenBlock.LocationFlag">
            <summary>
            Position on screen of the <see cref="T:VectorDraw.Professional.vdObjects.vdScreenBlock"/>. It can be LeftTop, RightTop, RightBottom, Center, Fixed or
            FollowAxisOrigin which will be the point where the Axis is.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdScreenBlock.LocationFlag.LeftTop">
            <summary>
            Position of the <see cref="T:VectorDraw.Professional.vdObjects.vdScreenBlock"/> will be on the LeftTop of the VDF graphics area
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdScreenBlock.LocationFlag.RightTop">
            <summary>
            Position of the <see cref="T:VectorDraw.Professional.vdObjects.vdScreenBlock"/> will be on the RightTop of the VDF graphics area
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdScreenBlock.LocationFlag.LeftBottom">
            <summary>
            Position of the <see cref="T:VectorDraw.Professional.vdObjects.vdScreenBlock"/> will be on the LeftBottom of the VDF graphics area
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdScreenBlock.LocationFlag.RightBottom">
            <summary>
            Position of the <see cref="T:VectorDraw.Professional.vdObjects.vdScreenBlock"/> will be on the RightBottom of the VDF graphics area
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdScreenBlock.LocationFlag.Center">
            <summary>
            Position of the <see cref="T:VectorDraw.Professional.vdObjects.vdScreenBlock"/> will be on the Center of the VDF graphics area
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdScreenBlock.LocationFlag.Fixed">
            <summary>
            Position of the <see cref="T:VectorDraw.Professional.vdObjects.vdScreenBlock"/> will be Fixed in the VDF graphics area
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdScreenBlock.LocationFlag.FollowAxisOrigin">
            <summary>
            Position of the <see cref="T:VectorDraw.Professional.vdObjects.vdScreenBlock"/> will follow the center axis position
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.frmPrintManager">
            <summary>
            Implements the Printer dialog.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmPrintManager.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmPrintManager.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.picPreview">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.butExit">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.groupPrintArea">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.radioWindow">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.radioExtends">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.butPick">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.groupBox1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.checkBnW">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.butPen">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.groupScale">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.textDunits">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.textPunits">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.checkFit">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.label2">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.label1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.labScale">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.groupBox2">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.radioLand">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.radioPortrait">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.groupBox3">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.radioinches">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.radiomm">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.textMarTop">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.label3">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.label4">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.label5">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.textMarLeft">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.textMarRight">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.label6">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.textMarBottom">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.butPrint">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.butSelPrinter">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.butUpdate">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.checkAsBitmap">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.radioPreview">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.radioPreview1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.groupBox4">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.button1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.groupBox5">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.comboPapers">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.textPaperW">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.checkCustom">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.textBoxPaperH">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.labelPaperW">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.labelPapers">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.butUpsideDown">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.labelCopies">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.textCopies">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.checkGrayScale">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.chkIgnoreGradientBG">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.label7">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.formToolTip">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.checkSaveToFile">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPrintManager.mprinter">
            <summary>
            A value that if true changes the "Print" button to "Save to PDF" in order to export the preview to PDF file.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmPrintManager.#ctor">
            <summary>
            Initializes the dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmPrintManager.InitializeExtra(VectorDraw.Professional.vdObjects.vdPrint)">
            <summary>
            Initializes the dialog.
            </summary>
            <param name="printer">The vdprint object.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmPrintManager.LoadDialog">
            <summary>
            Initializes default values for the dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmPrintManager.Show(VectorDraw.Professional.vdObjects.vdPrint)">
            <summary>
            Used to show the dialog.
            </summary>
            <param name="printer">The vdprint object.</param>
            <returns>A DialogResult indicating the user's action.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmPrintManager.UpdatePicture">
            <summary>
            Updates the PrintPreview picture of the dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmPrintManager.OnLoad(System.EventArgs)">
            <summary>
            Raises the System.Windows.Forms.Form.Load event.
            </summary>
            <param name="e">An System.EventArgs that contains the event data.</param>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.frmPrintManager.FormMaximumPaperSize">
            <summary>
            Get/Set a rectangle value that represents the maximum width and height for papersize in hundrends of Inches.
            </summary>
            <remarks>Default value is a 0,0,0,0 rectangle which means unlimited paper size. If there are positive values in the width and height of this property
            then the user is limited into these values.</remarks>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.frmEditXproperty">
            <summary>
            Implements a dialog to edit XProperties.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditXproperty.mXprop">
            <summary>
            This is used to get the edited vdXProperty object after the dialog is closed.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmEditXproperty.#ctor">
            <summary>
            Initializes the dialog to create a new vdXProperty object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmEditXproperty.InitializeExtra(VectorDraw.Professional.vdObjects.vdXProperty)">
            <summary>
            Initializes the dialog to edit an vdXProperty object.
            </summary>
            <param name="xprop">The vdXProperty object to be edited.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmEditXproperty.Show(VectorDraw.Professional.vdObjects.vdXProperty,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Used to show the dialog.
            </summary>
            <param name="xprop">The vdXProperty object to be edited.</param>
            <param name="document">The vdDocument object where the dialog opens.</param>
            <returns>A frmEditXproperty object to obtain the necessary information.</returns>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditXproperty.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmEditXproperty.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmEditXproperty.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditXproperty.comboBox1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditXproperty.label1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditXproperty.label2">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditXproperty.textName">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditXproperty.butCancel">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditXproperty.groupBox1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditXproperty.textZ">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditXproperty.textY">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditXproperty.textX">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditXproperty.labZ">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditXproperty.labY">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditXproperty.labX">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditXproperty.textstrValue">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditXproperty.butOk">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditXproperty.formToolTip">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.frmColor">
            <summary>
            Implements the Color Picher dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmColor.#ctor">
            <summary>
            Initializes the dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmColor.#ctor(VectorDraw.Professional.vdObjects.vdColor)">
            <summary>
            Initializes the Color Picher dialog.
            </summary>
            <param name="color">A vdColor object indicating the default selected color to show when the dialog opens.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmColor.#ctor(VectorDraw.Professional.vdObjects.vdColor,System.Boolean)">
            <summary>
            Initializes the Color Picher dialog.
            </summary>
            <param name="color"> vdColor object indicating the default selected color to show when the dialog opens.</param>
            <param name="HideByLayerByBlock">A boolean value indicating if the ByLayer,ByBlock buttons will be enabled/disabled.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmColor.#ctor(VectorDraw.Professional.vdObjects.vdColor,System.Boolean,System.Boolean)">
            <summary>
            Initializes the Color Picher dialog.
            </summary>
            <param name="color"> vdColor object indicating the default selected color to show when the dialog opens.</param>
            <param name="HideByLayerByBlock">A boolean value indicating if the ByLayer, ByBlock buttons will be enabled.</param>
            <param name="HideForeGround">A boolean value indicating if the ForeGround button will be enabled.</param>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmColor.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmColor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmColor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.frmAddAttribute">
            <summary>
            Implements a dialog to add attributes to a document.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmAddAttribute.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmAddAttribute.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmAddAttribute.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmAddAttribute.label1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmAddAttribute.label2">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmAddAttribute.textTag">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmAddAttribute.textValue">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmAddAttribute.groupBox1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmAddAttribute.textZ">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmAddAttribute.textY">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmAddAttribute.textX">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmAddAttribute.label5">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmAddAttribute.label4">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmAddAttribute.label3">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmAddAttribute.butPick">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmAddAttribute.checkInv">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmAddAttribute.groupBox2">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmAddAttribute.butOk">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmAddAttribute.butCancel">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmAddAttribute.label6">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmAddAttribute.textHeight">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmAddAttribute.textRotation">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmAddAttribute.label7">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmAddAttribute.label8">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmAddAttribute.comboVer">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmAddAttribute.comboHor">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmAddAttribute.label10">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmAddAttribute.label9">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmAddAttribute.comboStyle">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmAddAttribute.label11">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmAddAttribute.checkLockedPosition">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmAddAttribute.formToolTip">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmAddAttribute.#ctor">
            <summary>
            Initializes the dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmAddAttribute.Show(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Use this method to Show the dialog.
            </summary>
            <param name="doc">The vdDocument object.</param>
            <returns>The created vdAtribDef object which is not inserted in the document.</returns>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdGroup">
            <summary>
            Implements the vdGroup object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdGroup.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes a new instance of the vdGroup object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) method after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdGroup.#ctor(VectorDraw.Professional.vdObjects.vdDocument,System.String)">
            <summary>
            Initializes a new instance of the vdGroup object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <param name="name">The name of the group object.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) method after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdGroup.#ctor">
            <summary>
            Initializes the vdGroup collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdGroup.#ctor(System.String)">
            <summary>
            Initializes the vdGroup collection object with the specified name.
            </summary>
            <param name="name">The name of the created vdGroup object.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdGroup.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdGroup.RemoveAll">
            <summary>
            Removes all items from the group.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdGroup.AddItem(VectorDraw.Professional.vdPrimaries.vdFigure)">
            <summary>
            Adds a vdFigure object to the group.
            </summary>
            <param name="value">The vdFigure object to be added to the group.</param>
            <returns>True if the object was succesfully added to the collection.</returns>
            <remarks>Entities in lock layers are not added if checking contains <see cref="F:VectorDraw.Professional.vdCollections.vdSelection.AddItemCheck.RemoveLockLayerEntities"/>value or <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethod"/> does not contain the value of <see cref="F:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum.EnableAddToSelections"/>.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdGroup.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdGroup.AddRange(VectorDraw.Professional.vdCollections.vdEntities)">
            <summary>
            Adds all vdFigure objects from the passed collection to this group.
            </summary>
            <param name="set">A vdEntities collection from which the vdFigure objects will be added to this group.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdGroup.AddRange(VectorDraw.Professional.vdCollections.vdSelection)">
            <summary>
            Adds all vdFigure objects from the passed collection to this group.
            </summary>
            <param name="set">A vdSelection collection from which the vdFigure objects will be added to this group.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdGroup.AddRange(VectorDraw.Professional.vdPrimaries.vdGroup)">
            <summary>
            Adds all vdFigure objects from the passed group to this group.
            </summary>
            <param name="group">Another vdGroup collection from which the vdFigure objects will be added to this group.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdGroup.RemoveAt(System.Int32)">
            <summary>
            Removes an object from the specified index of the group.
            </summary>
            <param name="Index">The zero based index.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdGroup.RemoveItem(VectorDraw.Professional.vdPrimaries.vdFigure)">
            <summary>
            Removes a specific vdFigure object from the group.
            </summary>
            <param name="Object">The vdFigure object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdGroup.FindItem(VectorDraw.Professional.vdPrimaries.vdFigure)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">A vdFigure object to be checked if it exists in the collection</param>
            <returns>True if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdGroup.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdGroup object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdGroup.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdGroup object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdGroup.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matching properties between groups is not supported.
            </summary>
            <param name="_from"></param>
            <param name="thisdocument"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdGroup.InitializeProperties">
            <summary>
            Resets the properties of the vdGroup object to the Default values.
            </summary>
            <remarks>
            Default values:Remove all Entities. Description = "" , Name = "Unonymus" , Selectable = true , HighLight = false.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdGroup.ToString">
            <summary>
            Gets a System.String description of the vdGroup Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdGroup.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdGroup.BoundingBox">
            <summary>
            Gets the Bounding Box of all the entities that belong to the group in WorldCoordinate System.
            </summary>
            <returns>A Box object that represents the BoundingBox in World coordinate system of all the entities of the group.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdGroup.AddItem(System.Object)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="value">The object to be added.</param>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdGroup.Name">
            <summary>
            Get/Set the name of the vdGroup object
            </summary>
            <remarks>
            Default value : "Unonymus".
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <exception cref="T:VectorDraw.Professional.Exceptions.InvalidTableNameException"></exception>
            <exception cref="T:VectorDraw.Professional.Exceptions.CannotRenameException">Thrown when cannot rename an object.</exception>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdGroup.Description">
            <summary>
            Get/Set a Description string for the object
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdGroup.Selectable">
            <summary>
            A boolean value representing if the group is selectable
            </summary>
            <remarks> 
            Default value true.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdGroup.HighLight">
            <summary>
            Get/Set the value indicating if the lines of the group's objects will be drawn as dashed
            </summary>
            <remarks>
            Usually it is used when user selects one of the object's of the group.
            Default value false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdGroup.Count">
            <summary>
            Get the number of entities of the group.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdGroup.VisibleOnForms">
            <summary>
            Get/Set a boolean value representing if the vdGroup will be viewed in Vectordraw forms.
            </summary>
            <remarks>
            Default value is true.
            The ToString value of the vdGroups also takes consideration this value and if it is false then the count returned does not contain these items.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdGroup.Item(System.Int32)">
            <summary>
            Gets an item from the collection from a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The vdFigure object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdGroup.ItemType">
            <summary>
            Returns the Type of Items in the collection
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.frmVPortsLayoutSplit">
            <summary>
            Implements the multi view layout dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmVPortsLayoutSplit.#ctor">
            <summary>
            Initializes The Split manager.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmVPortsLayoutSplit.InitializeExtra(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Professional.vdPrimaries.vdLayoutSplit)">
            <summary>
            Initializes The Split manager.
            </summary>
            <param name="doc">The Document where the layout is going to be created.</param>
            <param name="Layout">A vdLayoutSplit to be modified or null so a new one will be created.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmVPortsLayoutSplit.Show(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Professional.vdPrimaries.vdLayoutSplit)">
            <summary>
            Used to show the dialog.
            </summary>
            <param name="doc">The Document where the layout is going to be added.</param>
            <param name="Layout">A vdLayoutSplit to be modified or null so a new one will be created.</param>
            <returns>A DailogResult indicating the user's action.</returns>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmVPortsLayoutSplit.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmVPortsLayoutSplit.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmVPortsLayoutSplit.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmVPortsLayoutSplit.label1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmVPortsLayoutSplit.textName">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmVPortsLayoutSplit.listSplitStyle">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmVPortsLayoutSplit.label2">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmVPortsLayoutSplit.groupPreview">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmVPortsLayoutSplit.label4">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmVPortsLayoutSplit.combDisplayStyle">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmVPortsLayoutSplit.combViews">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmVPortsLayoutSplit.label3">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmVPortsLayoutSplit.picPreview">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmVPortsLayoutSplit.butOK">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmVPortsLayoutSplit.butCancel">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmVPortsLayoutSplit.checkCreateNew">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmVPortsLayoutSplit.checkPerspective">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmVPortsLayoutSplit.formToolTip">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdForms.frmTextEdit.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdForms.frmTextEdit.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdForms.frmTextEdit.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdForms.frmTextEdit.vdFormSize">
            <summary>
            Get/Set the size of the form used when loading the form. This value is stored when the form is closed in order to be used the next time the form is loaded. 
            </summary>
            <remarks>The default value is -1,-1.</remarks>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdPaletteControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPaletteControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPaletteControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionText">
            <summary>
            Implements the ActionText object used when adding a text.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionText.#ctor">
            <summary>
            Initializes the action.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionText.#ctor(VectorDraw.Geometry.gPoint,System.Double,VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Initializes the action with the passed parameters.
            </summary>
            <param name="reference1">Insertion point of the mtext.</param>
            <param name="rotation">Rotation of the mtext.</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionText.End">
            <summary>
            Called when the action is finished.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionText.Start">
            <summary>
            Called at the beginning of the action
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionText.MouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Fires when the user presses a mouse button.
            </summary>
            <param name="e">Mouse event arguments.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionText.KeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Fires when the user presses a keyboard key.
            </summary>
            <param name="e">KeyDown event arguments.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionText.Parse(System.String,VectorDraw.Geometry.Matrix,VectorDraw.Geometry.LUnits,VectorDraw.Geometry.AUnits)">
            <summary>
            Parses the user input string.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="user2world">The active user to world Matrix.</param>
            <param name="lunits">LUnits object to use when parsing.</param>
            <param name="aunits">AUnits object to use when parsing.</param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionText.ScreenPaint(VectorDraw.Actions.ActionWrapperRender)">
            <summary>
            Draws the already input string to the screen.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionText.KeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Fires when the user presses a keyboard key.
            </summary>
            <param name="e">KeyPress event arguments.</param>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionText.SendKeyEvents">
            <summary>
            Internally used in order to parse or not the key pressed from the user , from the CommandLine control
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionText.Value">
            <summary>
            Get the user's imput string.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionText.UserWaiting">
            <summary>
            A boolean value representing if the action is waiting for user input.Returns true.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionText.WaitingPoint">
            <summary>
            A boolean value representing if the action is waiting for a point.Returns false.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionText.KeepFocus">
            <summary>
            Internally used in order to lock the Focus while the action is in progress.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionEditText">
            <summary>
            An Action implemented to Edit vdText objects
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionEditText.#ctor(VectorDraw.Professional.vdFigures.vdText,VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Initializes the Action to Edit the passed Mtext.
            </summary>
            <param name="text">The vdtext object to be edited.</param>
            <param name="layout">The layout where the action takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionEditText.#ctor(VectorDraw.Professional.vdFigures.vdText,VectorDraw.Professional.vdPrimaries.vdLayout,System.Int32)">
            <summary>
            Initializes the Action to Edit the passed Mtext.
            </summary>
            <param name="text">The vdtext object to be edited.</param>
            <param name="layout">The layout where the action takes place.</param>
            <param name="maxchars">The maximum number of characters for the whole length of the text string value.Set 0 for unlimited characters.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionEditText.#ctor(VectorDraw.Professional.vdFigures.vdText,VectorDraw.Professional.vdPrimaries.vdLayout,System.Int32,VectorDraw.Geometry.Matrix)">
            <summary>
            Initializes the Action to Edit the passed Mtext.
            </summary>
            <param name="text">The vdtext object to be edited.</param>
            <param name="layout">The layout where the action takes place.</param>
            <param name="maxchars">The maximum number of characters for the whole length of the text string value.Set 0 for unlimited characters.</param>
            <param name="AdditionalECSMatrix">Additional ECS Matrix used for nexted texts inside Inserts.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionEditText.KeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Fires when the user presses a keyboard key.
            </summary>
            <param name="e">KeyUp event arguments.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionEditText.Start">
            <summary>
            Called at the beginning of the action
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionEditText.KeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Fires when the user presses a keyboard key.
            </summary>
            <param name="e">KeyDown event arguments.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionEditText.Parse(System.String,VectorDraw.Geometry.Matrix,VectorDraw.Geometry.LUnits,VectorDraw.Geometry.AUnits)">
            <summary>
            Parses the user input string.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="user2world">The active user to world Matrix.</param>
            <param name="lunits">LUnits object to use when parsing.</param>
            <param name="aunits">AUnits object to use when parsing.</param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionEditText.End">
            <summary>
            Called when the action is finished.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionEditText.MouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Fires when the user presses a mouse button.
            </summary>
            <param name="e">Mouse event arguments.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionEditText.ScreenPaint(VectorDraw.Actions.ActionWrapperRender)">
            <summary>
            Draws the already input string to the screen.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionEditText.KeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Called when a user press a button on the keyboard
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionEditText.SendKeyEvents">
            <summary>
            Internally used in order to parse or not the key pressed from the user , from the CommandLine control
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionEditText.KeepFocus">
            <summary>
            Internally used in order to lock the Focus while the action is in progress.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionEditText.Value">
            <summary>
            Get the user's imput string.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionEditText.UserWaiting">
            <summary>
            A boolean value representing if the action is waiting for user input.Returns true.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionEditText.WaitingPoint">
            <summary>
            A boolean value representing if the action is waiting for a point.Returns false.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionMText2">
            <summary>
            Implements the ActionMText2 object used when creating and editing a vdMtext.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionMText2.#ctor(VectorDraw.Geometry.gPoint,System.Double,System.Double,VectorDraw.Professional.vdPrimaries.vdLayout,System.Int32,System.Int32)">
            <summary>
            Initializes the action object with the passed parameters.
            </summary>
            <param name="reference1">Insertion point of the vdMText.</param>
            <param name="rotation">Rotation angle in radians.</param>
            <param name="height">The height of the Text.</param>
            <param name="layout">The layout where the action takes place.</param>
            <param name="maxlinechars">The maximum number of characters per line.Set 0 for unlimited characters.</param>
            <param name="maxchars">The maximum number of characters for the whole length of the mtext string value. Set 0 for unlimited characters.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionMText2.#ctor(VectorDraw.Professional.vdFigures.vdMText,VectorDraw.Professional.vdPrimaries.vdLayout,System.Int32,System.Int32)">
            <summary>
            Initializes the Action to Edit the passed MText.
            </summary>
            <param name="text">The vdMtext object to be edited.</param>
            <param name="layout">The layout where the action takes place.</param>
            <param name="maxlinechars">The maximum number of characters per line.Set 0 for unlimited characters.</param>
            <param name="maxchars">The maximum number of characters for the whole length of the mtext string value. Set 0 for unlimited characters.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionMText2.#ctor(VectorDraw.Professional.vdFigures.vdMText,VectorDraw.Professional.vdPrimaries.vdLayout,System.Int32,System.Int32,VectorDraw.Geometry.Matrix)">
            <summary>
            Initializes the Action to Edit the passed MText.
            </summary>
            <param name="text">The vdMtext object to be edited.</param>
            <param name="layout">The layout where the action takes place.</param>
            <param name="maxlinechars">The maximum number of characters per line.Set 0 for unlimited characters.</param>
            <param name="maxchars">The maximum number of characters for the whole length of the mtext string value. Set 0 for unlimited characters.</param>
            <param name="AdditionalECSMatrix">Additional ECS Matrix used for nexted texts inside Inserts.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionMText2.Parse(System.String,VectorDraw.Geometry.Matrix,VectorDraw.Geometry.LUnits,VectorDraw.Geometry.AUnits)">
            <summary>
            Parses the user input string.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="user2world">The active user to world Matrix.</param>
            <param name="lunits">LUnits object to use when parsing.</param>
            <param name="aunits">AUnits object to use when parsing.</param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionMText2.End">
            <summary>
            Called when the action is finished.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionMText2.Start">
            <summary>
            Called at the beginning of the action
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionMText2.MouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Fires when the user presses a mouse button.
            </summary>
            <param name="e">Mouse event arguments.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionMText2.ScreenPaint(VectorDraw.Actions.ActionWrapperRender)">
            <summary>
            Draws the already input string to the screen.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionMText2.KeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Called when a user press a button on the keyboard
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionMText2.KeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Fires when the user presses a keyboard key.
            </summary>
            <param name="e">KeyUp event arguments.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionMText2.KeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Fires when the user presses a keyboard key.
            </summary>
            <param name="e">KeyDown event arguments.</param>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionMText2.SendKeyEvents">
            <summary>
            Internally used in order to parse or not the key pressed from the user , from the CommandLine control
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionMText2.KeepFocus">
            <summary>
            Internally used in order to lock the Focus while the action is in progress.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionMText2.Value">
            <summary>
            Get the user's imput string.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionMText2.UserWaiting">
            <summary>
            A boolean value representing if the action is waiting for user input.Returns true.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionMText2.WaitingPoint">
            <summary>
            A boolean value representing if the action is waiting for a point.Returns false.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.LineTypeConverterNoExpand">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.LineTypeConverterNoExpand.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.LineTypeConverterNoExpand.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.LineTypeConverterNoExpand.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.LineTypeConverterNoExpand.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.LineTypeConverter">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.LineTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.LineTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.LineTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.LineTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdLineType">
            <summary>
            Implements all functionality for the vdLinetype object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLineType.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes the vdLinetype object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this constructor the is no need to call the SetUnRegisterDocument method in order to register the Document of this object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLineType.#ctor(VectorDraw.Professional.vdObjects.vdDocument,System.String)">
            <summary>
            Initializes the vdLinetype object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <param name="name">The name of the linetype object.</param>
            <remarks>Calling this constructor the is no need to call the SetUnRegisterDocument method in order to register the Document of this object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLineType.#ctor">
            <summary>
            Initializes the vdLinetype object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLineType.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.
            User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLineType.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLineType.GetgrLineType">
            <summary>
            Get the geometrical information of the linetype.
            </summary>
            <returns>Returns the LineType object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLineType.InitializeProperties">
            <summary>
            Resets the properties of the vdLinetype object to the Default values.
            </summary>
            <remarks>
            Default values:Name = "SOLID" , Comment = "SOLID_____________________________",IsDPIScale = false,
            and also Remove all Segments.
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLineType.SetDefault">
            <summary>
            Sets the vdLinetype object as SOLID.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLineType.ToString">
            <summary>
            Gets a System.String that represents the name of the vdLinetype Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLineType.IsByLayer">
            <summary>
            Get a boolean value representing if the linetype is the default BYLAYER linetype.
            </summary>
            <returns>Returns true if the vdLinetype object is the BYLAYER linetype.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLineType.IsByBlock">
            <summary>
            Get a boolean value representing if the linetype is the default BYBLOCK linetype.
            </summary>
            <returns>Returns true if the vdLinetype object is the BYBLOCK linetype.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLineType.Update">
            <summary>
            Updates the objects of the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLineType.OnOwnerChanged">
            <summary>
            Overrides <see cref="M:VectorDraw.Professional.vdObjects.vdBaseObject.OnOwnerChanged"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLineType.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdLineType object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLineType.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdLinetype object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLineType.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements all functionality for the vdLinetype object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLineType.Name">
            <summary>
            Get/Set the name of the vdLinetype object.
            </summary>
            <remarks>
            Default value "SOLID".
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <exception cref="T:VectorDraw.Professional.Exceptions.InvalidTableNameException"></exception>
            <exception cref="T:VectorDraw.Professional.Exceptions.CannotRenameException">Thrown when cannot rename an object.</exception>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLineType.Comment">
            <summary>
            Get/Set the comments for the linetype.
            </summary>
            <remarks>
            Default value "SOLID_____________________________".
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLineType.DrawMethod">
            <summary>
            Get/Set a value that controls the way that the linetype is drawn on the line segments.
            </summary>
            <remarks>
            Default value is <see cref="F:VectorDraw.Render.LineType.LineTypeDrawMethod.Center"/>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLineType.Segments">
            <summary>
            Get/Set the segments for the linetype.
            </summary>
            <remarks>
            Default value an empty array of linetype segments.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLineType.IsDPIScale">
            <summary>
            Get/Set a boolean value representing if the linetype will be always the same not depended from the zoom.
            </summary>
            <remarks>
            Default value false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLineType.Deleted">
             <summary>
             Get/Set a property that marks the object as Deleted or not.
             </summary>
            <exception cref="T:VectorDraw.Professional.Exceptions.CannotDeleteException">Thrown when an object cannot be deleted.</exception>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLineType.VisibleOnForms">
            <summary>
            Get/Set a boolean value representing if the vdLineType will be viewed in Vectordraw forms.
            </summary>
            <remarks>
            Default value is true.
            The ToString value of the vdLineTypes also takes consideration this value and if it is false then the count returned does not contain these items.
            </remarks>
        </member>
        <member name="T:VectorDraw.Professional.Constants.PrinterFlag">
            <summary>
            Represents how the file will be printed.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.PrinterFlag.Prn_DCBitmap">
            <summary>
            Print as Bitmap.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.PrinterFlag.Prn_Default">
            <summary>
            Default printing.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Constants.VdConstAngDir">
            <summary>
            Represents the way angles are measured.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstAngDir.CLOCKWISE">
            <summary>
            Angles are clockwise.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstAngDir.COUNTER_CLOCKWISE">
            <summary>
            Angles are counter clockwise.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Constants.VdConstColor">
            <summary>
            Represents default color values.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstColor.VdColorBlue">
            <summary>
            Blue color (index 5).
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstColor.VdColorByBlock">
            <summary>
            Color by block
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstColor.VdColorByLayer">
            <summary>
            Color by layer.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstColor.VdColorCyan">
            <summary>
            Cyan color (index 4).
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstColor.VdColorGreen">
            <summary>
            Green color(index 4).
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstColor.VdColorMagenta">
            <summary>
            Magenta color(index 6).
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstColor.VdColorRed">
            <summary>
            Red color (index 1).
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstColor.VdColorWhite">
            <summary>
            White color(index 7).
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstColor.VdColorYellow">
            <summary>
            Yellow color (index 2).
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Constants.VdConstDimTextHorRot">
            <summary>
            Specifies the horizontal justification of the dimension's text
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstDimTextHorRot.DIMTEXT_ALIGN">
            <summary>
            the text is aligned with the dimension.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstDimTextHorRot.DIMTEXT_HORIZONTAL">
            <summary>
            The text is horizontal
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Constants.VdConstDimAngularType">
            <summary>
            Specifies if the Angular dimension will measure length or angle.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstDimAngularType.Angle">
            <summary>
            The Dimension is measuring angle
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstDimAngularType.Length">
            <summary>
            The Dimension is measuring length
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Constants.VdConstDimTextVerJust">
            <summary>
            Specifies the vertical justification of the dimension's text
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstDimTextVerJust.DIMTEXT_ABOVE">
            <summary>
            The text is above the dimension's line.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstDimTextVerJust.DIMTEXT_CENTER">
            <summary>
            The text is inside the dimension's line.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Constants.VdConstDimTextMovement">
            <summary>
            A value that specifies the behaviour of the dimension accordint to the dimension's text change position.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstDimTextMovement.KeepDimLineWithText">
            <summary>
            The dimension's line will follow the text.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstDimTextMovement.MoveAddLeader">
            <summary>
            A leader will be added from the dimension's text to it's line.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstDimTextMovement.MoveNoLeader">
            <summary>
            The text will move and no change will occur to the dimension's line.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Constants.VdConstDimType">
            <summary>
            Specifies the dimension's type.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstDimType.dim_Aligned">
            <summary>
            The dimension is aligned.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstDimType.dim_Angular">
            <summary>
            The dimension is angular.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstDimType.dim_Diameter">
            <summary>
            The dimension measures a diameter.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstDimType.dim_Radial">
            <summary>
            The dimension measures a radius.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstDimType.dim_Rotated">
            <summary>
            The dimension is rotated.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Constants.VdConstFill">
            <summary>
            Specifies the fill type for object's hatch properties.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstFill.VdFillModeHatchBlock">
            <summary>
            The object is hatched with a specified Block.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstFill.VdFillModeImage">
            <summary>
            The object is hatched with a specified Image.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstFill.VdFillModeNone">
            <summary>
            The object is not hatched.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstFill.VdFillModeSolid">
            <summary>
            The object is hatched with a solid specified color.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstFill.VdFillModeHatchBDiagonal">
            <summary>
            The object is hatched with diagonal lines(simulates API Hatch).
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstFill.VdFillModeHatchCross">
            <summary>
            The object is hatched with crossed lines(simulates API Hatch).
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstFill.VdFillModeHatchDiagCross">
            <summary>
            The object is hatched with crossed diagonal lines(simulates API Hatch).
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstFill.VdFillModeHatchFDiagonal">
            <summary>
            The object is hatched with diagonal lines(simulates API Hatch).
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstFill.VdFillModeHatchHorizontal">
            <summary>
            The object is hatched with horizontal lines(simulates API Hatch).
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstFill.VdFillModeHatchVertical">
            <summary>
            The object is hatched with vertical lines(simulates API Hatch).
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstFill.VdFillModeSingleHatch">
            <summary>
            The object is hatched with parallel lines(horizontal).
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstFill.VdFillModeDoubleHatch">
            <summary>
            The object is hatched with parallel crossing lines(horizontal and vertical).
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstFill.VdFillModePattern">
            <summary>
            The object is hatched with a specified hatch pattern.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Constants.VdConstFilterFig">
            <summary>
            Used in FilterFigure event to specify the filtering type.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstFilterFig.FILTERFIG_NONE">
            <summary>
            No entity filtering
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstFilterFig.FILTERFIG_SELECT">
            <summary>
            Filters an entity when is added in a selection.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstFilterFig.FILTERFIG_TOOLTIP">
            <summary>
            Filters an entity when showing it's tooltip.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstFilterFig.FILTERFIG_GETEPOINTNTITY">
            <summary>
            Filters an Entity from the GetEntityFromPoint.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstFilterFig.FILTERFIG_POLYFACE_EDGE_SELECT">
            <summary>
            Filters an Entity when selecting polyface edges.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstFilterFig.FILTERFIG_POLYFACE_FACE_SELECT">
            <summary>
            Filters an Entity when selecting polyface faces.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstFilterFig.FILTERFIG_MOUSE_OVER">
            <summary>
            Filters an Entity when the mouse is over the entity.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstFilterFig.FILTERFIG_OBJECT_SNAPS">
            <summary>
            Filters an Entity when it has Osnaps.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Constants.VdConstHorJust">
            <summary>
            Horizontal Justification for texts.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstHorJust.VdTextHorAligned">
            <summary>
            Aligned.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstHorJust.VdTextHorCenter">
            <summary>
            Center.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstHorJust.VdTextHorFit">
            <summary>
            Fit.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstHorJust.VdTextHorLeft">
            <summary>
            Left.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstHorJust.VdTextHorRight">
            <summary>
            Right.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Constants.VdConstImg">
            <summary>
            Constants used for displaying vdImage object.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstImg.VdImageShowRect">
            <summary>
            Shows the bounding Rect.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstImg.VdImageShowAll">
            <summary>
            Shows Image and bounding Rect.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstImg.VdImageApplyClip">
            <summary>
            Apply the clip object set at the vdImage object.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstImg.VdImageTransparent">
            <summary>
            Use transparency.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstImg.VdImageNoBorder">
            <summary>
            Hides the border.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstImg.VdImageShowAllTransparent">
            <summary>
            Values VdImageTransparent and VdImageShowAll.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstImg.VdImageShowImage">
            <summary>
            Values VdImageNoBorder and VdImageShowAll
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstImg.VdImageShowImageTransparent">
            <summary>
            Values VdImageShowImage and VdImageTransparent
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstImg.VdImageWithClip">
            <summary>
            Values VdImageApplyClip and VdImageShowAll
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstImg.VdImageWithClipAndTransparent">
            <summary>
            Values VdImageApplyClip and VdImageTransparent and VdImageShowAll
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstImg.VdImageWithClipNoBorder">
            <summary>
            Values VdImageApplyClip and VdImageNoBorder and VdImageShowAll
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Constants.VdConstInters">
            <summary>
            Constant Values used for <see cref="M:VectorDraw.Professional.vdPrimaries.vdFigure.IntersectWith(VectorDraw.Professional.vdPrimaries.vdFigure,VectorDraw.Professional.Constants.VdConstInters,VectorDraw.Geometry.gPoints)"/> method.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstInters.VdIntExtendArg">
            <summary>
            Extends the input parameter object in the IntersectWith method.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstInters.VdIntExtendBoth">
            <summary>
            Extends both objects,input parameter and calling(this) object in the IntersectWith method.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstInters.VdIntExtendThis">
            <summary>
            Extends the calling(this) object in the IntersectWith method.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstInters.VdIntOnBothOperands">
            <summary>
            Does not extend any of the objects. Each intersection point belongs to both objects.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Constants.VdConstLineWeight">
            <summary>
            LineWeight represents the width of a printing line in hundrents of millimeters.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_0">
            <summary>
            minimum printing width.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_100">
            <summary>
            Printing width 1 mm.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_106">
            <summary>
            Printing width 1.06 mm.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_120">
            <summary>
            Printing width 1.2 mm.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_13">
            <summary>
            Printing width 0.13 mm.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_140">
            <summary>
            Printing width 1.4 mm.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_15">
            <summary>
            Printing width 0.15 mm.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_158">
            <summary>
            Printing width 1.58 mm.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_18">
            <summary>
            Printing width 0.18 mm.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_20">
            <summary>
            Printing width 0.2 mm.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_200">
            <summary>
            Printing width 2 mm.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_211">
            <summary>
            Printing width 2.11 mm.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_25">
            <summary>
            Printing width 0.25 mm.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_30">
            <summary>
            Printing width 0.3 mm.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_35">
            <summary>
            Printing width 0.35 mm.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_40">
            <summary>
            Printing width 0.4 mm.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_5">
            <summary>
            Printing width 0.05 mm.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_50">
            <summary>
            Printing width 0.5 mm.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_53">
            <summary>
            Printing width 0.53 mm.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_60">
            <summary>
            Printing width 0.6 mm.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_70">
            <summary>
            Printing width 0.7 mm.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_80">
            <summary>
            Printing width 0.8 mm.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_9">
            <summary>
            Printing width 0.09 mm.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_90">
            <summary>
            Printing width 0.9 mm.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_BYBLOCK">
            <summary>
            Setting the lineWeight to BYBLOCK means that an object assumes the LW_0 lineWeight until 
            it is grouped into a block. Whenever the block is inserted, all objects inherit the 
            block's lineWeight.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_BYLAYER">
            <summary>
            Setting the lineWeight to BYLAYER means that an object assumes the lineWeight that is assigned
            to the object's layer.
            If the object that has the line, belongs to a block and the object's Layer is <see cref="P:VectorDraw.Professional.vdCollections.vdLayers.Standard"/>
            (Layer 0), then the object inherits the insert's Layer LineWeight.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_DOCUMENTDEFAULT">
            <summary>
            Represents the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.LineWeight"/>
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Constants.VdConstHelixConstrain">
            <summary>
            Constant representing which property is constrained when editing other properties.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstHelixConstrain.TurnHeight">
            <summary>
            The TurnHeight of the Helix will remain.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstHelixConstrain.Turns">
            <summary>
            The Turns of the Helix will remain.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstHelixConstrain.Height">
            <summary>
            The Height of the Helix will remain.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Constants.VdConstHelixTwist">
            <summary>
            Constant representing the way a vdHelix entity will turn.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstHelixTwist.CounterClockWise">
            <summary>
            The Helix will turn counter clockwise.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstHelixTwist.ClockWise">
            <summary>
            The Helix will turn clockwise
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Constants.VdConstPlineFlag">
            <summary>
            Constants representing if a polyline is closed or open.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstPlineFlag.PlFlagCLOSE">
            <summary>
            The polyline is closed,value 1.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstPlineFlag.PlFlagOPEN">
            <summary>
            The polyline is open,value 0.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Constants.VdConstSpaceMode">
            <summary>
            Specifies The space mode of the layout object.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstSpaceMode.SPACEMOD_MODEL">
            <summary>
            The layout is in model space mode,when a viewport is active for editing.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstSpaceMode.SPACEMOD_PAPER">
            <summary>
            The layout is in paper space mode,No viewport is active and editing takes place to the layout itself.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Constants.VdConstMultilineJustification">
            <summary>
            Specifies the Justification of the Multiline object.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstMultilineJustification.Top">
            <summary>
            Top Justification for the Multiline object.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstMultilineJustification.Middle">
            <summary>
            Middle Justification for the Multiline object.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstMultilineJustification.Bottom">
            <summary>
            Bottom Justification for the Multiline object.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Constants.VdConstMultilineFlags">
            <summary>
            Specifies the extra flags of the Multiline object.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstMultilineFlags.None">
            <summary>
            None extra flags.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstMultilineFlags.IsClosed">
            <summary>
            The Multiline object is closed.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstMultilineFlags.SupressStartCaps">
            <summary>
            Supress start caps of ther vdMultilineStyle object.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstMultilineFlags.SupressEndCaps">
            <summary>
            Supress end caps of ther vdMultilineStyle object.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Constants.VdConstSplineFlag">
            <summary>
            Constants indicating the Spline flag of a vdPolyline object..
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstSplineFlag.SFlagCONTROLPOINTS">
            <summary>
            The vdPolyline object is a qubic Spline.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstSplineFlag.SFlagFITTING">
            <summary>
            The vdpolyline object is a fitting qubic Spline.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstSplineFlag.SFlagQUADRATIC">
            <summary>
            The vdpolyline object is a quadratic Spline.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstSplineFlag.SFlagSTANDARD">
            <summary>
            The vdpolyline object is straight lines.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Constants.SectionOffsetDrawTypeEnum">
            <summary>
            Controls the draw method for extra entities drawn while in Section Offset area.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.SectionOffsetDrawTypeEnum.NoList">
            <summary>
            The offset entities are drawn using the color and linetype properties without using OpenGL lists
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.SectionOffsetDrawTypeEnum.HighLight">
            <summary>
            A special Highlight filter is applied to the offset entities , the draw uses OpenGL lists.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Constants.VdConstTextstyleFlag">
            <summary>
            Draw flag for text's letters.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstTextstyleFlag.BACKWARD">
            <summary>
            Letters are drawn backward.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstTextstyleFlag.BACKWARD_UPSIDEDOWN">
            <summary>
            Letters are drawn upsidedown.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstTextstyleFlag.LEFTTORIGHT">
            <summary>
            Letters are drawn left to right(default draw).
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstTextstyleFlag.UPSIDEDOWN">
            <summary>
            Letters are drawn upsidedown.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Constants.VdConstVerJust">
            <summary>
            Vertical Justification for texts.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstVerJust.VdTextVerBaseLine">
            <summary>
            Baseline.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstVerJust.VdTextVerBottom">
            <summary>
            Bottom.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstVerJust.VdTextVerCen">
            <summary>
            Center.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstVerJust.VdTextVerTop">
            <summary>
            Top.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Constants.VdConstXPropType">
            <summary>
            Xproperties type.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstXPropType.XD_NULL">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstXPropType.XD_STRING">
            <summary>
            The Xproperty has a String.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstXPropType.XD_BINDATA">
            <summary>
            The Xproperty has binary data.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstXPropType.XD_OBJHANDLE">
            <summary>
            The Xproperty has a vdHandle object.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstXPropType.XD_POINT">
            <summary>
            The Xproperty has a vdPoint object.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstXPropType.XD_WORLDPOS">
            <summary>
            The Xproperty has a point in WCS.If the object having this Xproperty is tranformed with a matrix this point will be tranformed too.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstXPropType.XD_WORLDDISP">
            <summary>
            The Xproperty has a point in WCS.Accepts all tranformations except move. 
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstXPropType.XD_WORLDDIR">
            <summary>
            The Xproperty has a point in WCS.Accepts only rotate and mirror tranformations. 
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstXPropType.XD_REAL">
            <summary>
            The Xproperty has a real.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstXPropType.XD_DIST">
            <summary>
            The Xproperty has a real that transforms when the object scales.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstXPropType.XD_SCALE">
            <summary>
            The Xproperty has a real that transforms when the object scales.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstXPropType.XD_INT">
            <summary>
            The Xproperty has an integer.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdConstXPropType.XD_LONG">
            <summary>
            The Xproperty has an long.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Constants.VdMultilineFlags">
            <summary>
            Multiline start and end flags.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdMultilineFlags.None">
            <summary>
            None of the below.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdMultilineFlags.Fill_on">
            <summary>
            The Multiline is filled with it's HatchProperties.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdMultilineFlags.DisplayMiters">
            <summary>
            The element's vertexes are connected with a line.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdMultilineFlags.Start_Square_Line">
            <summary>
            A line that connects the start vertexes of the elements.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdMultilineFlags.Start_Inner_Arc">
            <summary>
            Inner Arc that connects the start vertexes of the elements.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdMultilineFlags.Start_Outer_Arc">
            <summary>
            Outer Arc that connects the start vertexes of the elements.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdMultilineFlags.End_Square_Line">
            <summary>
            A line that connects the end vertexes of the elements.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdMultilineFlags.End_Inner_Arc">
            <summary>
            Inner Arc that connects the end vertexes of the elements.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Constants.VdMultilineFlags.End_Outer_Arc">
            <summary>
            Outer Arc that connects the end vertexes of the elements.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.OSnapDialog">
            <summary>
            Implements the Osnap dialog manager.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.OSnapDialog.#ctor">
            <summary>
            Initializes the dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.OSnapDialog.InitializeExtra(VectorDraw.Professional.vdObjects.vdDocument,System.Windows.Forms.Control)">
            <summary>
            Initializes necessary values for the dialog.
            </summary>
            <param name="Document">The vdDocument object.</param>
            <param name="parent">The parent control of the document.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.OSnapDialog.Show(VectorDraw.Professional.vdObjects.vdDocument,System.Windows.Forms.Control)">
            <summary>
            Shows the dialog.
            </summary>
            <param name="Document">The vdDocument object.</param>
            <param name="parent">The parent control of the document.</param>
            <returns>A value indicating the user action.</returns>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.OSnapDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.OSnapDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.checkBox1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.checkBox2">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.checkBox3">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.checkBox4">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.checkBox5">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.checkBox6">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.checkBox7">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.checkBox8">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.checkBox10">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.checkBox11">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.checkBox12">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.bClear">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.bSelect">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.bOk">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.bCancel">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.bCV">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.checkBox9">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.checkBox13">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.pictureBox1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.pictureBox2">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.pictureBox3">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.pictureBox4">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.pictureBox5">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.pictureBox6">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.pictureBox7">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.pictureBox8">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.pictureBox9">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.pictureBox10">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.pictureBox11">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.pictureBox12">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.pictureBox13">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.groupSnpMds">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.OSnapDialog.formToolTip">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.LayersDialog">
            <summary>
            Implements the Layer manager.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.LayersDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.LayersDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.LayersDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.LayersDialog.NewLayer">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.LayersDialog.imageList1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.LayersDialog.Delete">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.LayersDialog.Current">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.LayersDialog.LayerName">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.LayersDialog.Cancel">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.LayersDialog.Ok">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.LayersDialog.lstLayers">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.LayersDialog.butSelectAll">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.LayersDialog.butDeselectAll">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.LayersDialog.butFilters">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.LayersDialog.treeFilters">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.LayersDialog.splitContainer1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.LayersDialog.textSearch">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.LayersDialog.formToolTip">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.LayersDialog.contextMenuStrip1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.LayersDialog.#ctor">
            <summary>
            Initializes the dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.LayersDialog.InitializeExtra(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes the dialog.
            </summary>
            <param name="Document">The Document where the Layers belong.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.LayersDialog.Show(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Shows the dialog.
            </summary>
            <param name="Document">The Document object where the collection is.</param>
            <returns>A DialogResult indicating the user's action.</returns>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.LayersDialog.vdFormOtherProps">
            <summary>
            This property holds extra parameters for the form.
            </summary>
            <remarks>
            For Layers form holds the widths of each column of the layers list.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.LayersDialog.InstantUpdate">
            <summary>
            This is a static bool value that indicates if the layer dialog will update the drawing when the user makes a change to the layer. Default value is true. If this value is false in order to see changes the user must close the dialog. Disable this feature if you deal with very heavy layer drawings...
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.LayersDialog.vdFormSize">
            <summary>
            Get/Set the size of the form used when loading the form. This value is stored when the form is closed in order to be used the next time the form is loaded. 
            </summary>
            <remarks>The default value is -1,-1.</remarks>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.LayersDialog.ListViewItemComparer">
            <summary>
            Implements the manual sorting of items by columns.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.LayersDialog.ListViewItemComparer.#ctor">
            <summary>
            Internally used to sort the items of the list.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.LayersDialog.ListViewItemComparer.#ctor(System.Int32)">
            <summary>
            Internally used to sort the items of the list.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.LayersDialog.ListViewItemComparer.Compare(System.Object,System.Object)">
            <summary>
            Internally used to sort the items of the list.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.LayersDialog.ListViewColumnSorter.Compare(System.Object,System.Object)">
            <summary>
            This method is inherited from the IComparer interface.  It compares the two objects passed using a case insensitive comparison.
            </summary>
            <param name="x">First object to be compared</param>
            <param name="y">Second object to be compared</param>
            <returns>The result of the comparison. "0" if equal, negative if 'x' is less than 'y' and positive if 'x' is greater than 'y'</returns>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.InsertBlockDialog">
            <summary>
            Implements a dialog for viewing and inserting blocks.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.blockname">
            <summary>
            Variable to get the block name that the user selected.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.insertionPoint">
            <summary>
            Variable to get the insertion that the user selected.Initial value is "user".
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.scales">
            <summary>
            Variable to get the scales that the user selected.Initial value is "user".
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.rotationAngle">
            <summary>
            Variable to get the rotation angle that the user selected.Initial value is "user".
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.InsertBlockDialog.#ctor">
            <summary>
            Initializes the dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.InsertBlockDialog.InitializeExtra(VectorDraw.Professional.vdObjects.vdDocument,System.Windows.Forms.Control,System.Boolean,System.String)">
            <summary>
            Initializes the dialog with the passed parameters.
            </summary>
            <param name="Document">The Document object where the command will take place.</param>
            <param name="parent">The action Control of the document.</param>
            <param name="IsXref">true if the filename parameter is an xref of the document.</param>
            <param name="filename">The filename of the xref to be inserted.This string must not be empty.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.InsertBlockDialog.Show(VectorDraw.Professional.vdObjects.vdDocument,System.Windows.Forms.Control,System.Boolean,System.String)">
            <summary>
            Displays the dialog.
            </summary>
            <param name="Document">The Document object where the command will take place.</param>
            <param name="parent">The action Control of the document.</param>
            <param name="IsXref">true if the filename parameter is an xref of the document.</param>
            <param name="filename">The filename of the xref to be inserted.This string must not be empty.</param>
            <returns>A InsertBlockDialog object to obtain any necessary information.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.InsertBlockDialog.Show(VectorDraw.Professional.vdObjects.vdDocument,System.Windows.Forms.Control,System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Displays the dialog.
            </summary>
            <param name="Document">The Document object where the command will take place.</param>
            <param name="parent">The action Control of the document.</param>
            <param name="IsXref">true if the filename parameter is an xref of the document.</param>
            <param name="filename">The filename of the xref to be inserted.This string must not be empty.</param>
            <param name="insertionpoint">A double[] representing the insertionpoint or "user"</param>
            <param name="scales">A double[] representing the scales or "user"</param>
            <param name="rotation">A double value representing the rotation in degrees or "user"</param>
            <returns>A InsertBlockDialog object to obtain any necessary information.</returns>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.InsertBlockDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.InsertBlockDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.comboBox1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.bOK">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.bCancel">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.rBlockFile1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.rBlockFile2">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.txtFile">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.bSelect">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.gBox1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.gBox2">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.gBox3">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.txtInsX">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.label3">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.label2">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.label1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.label6">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.label5">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.label4">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.label7">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.txtInsZ">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.txtInsY">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.txtScaleZ">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.txtScaleY">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.txtScaleX">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.textBox4">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.chkSelect">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.gBox4">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.imgblock">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.checkInsPT">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.checkScale">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.checkRotation">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.label8">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.comboAttributesMode">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.groupBox1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.InsertBlockDialog.formToolTip">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdViewTypeConverter">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdViewTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdViewTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdViewTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdViewTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdViewTypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdView">
            <summary>
            Implements all functionality for the vdView object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdView.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes the vdView object with the passed Document.
            </summary>
            <param name="doc">The vdDocument where the view will be registered.</param>
            <remarks>Calling this constructor the is no need to call the SetUnRegisterDocument method in order to register the Document of this object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdView.#ctor(VectorDraw.Professional.vdObjects.vdDocument,System.String)">
            <summary>
            Initializes the vdView object with the passed Document.
            </summary>
            <param name="doc">The vdDocument where the view will be registered.</param>
            <param name="name">The name of the vdView Object.</param>
            <remarks>Calling this constructoer the is no need to call the SetUnRegisterDocument method in order to register the Document of this object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdView.#ctor(VectorDraw.Professional.vdPrimaries.vdLayout,System.String)">
            <summary>
            Initializes the vdView object with the passed layout object.
            </summary>
            <param name="layout">Sets the properties of the vdView object with the passed layout's properties.</param>
            <param name="name">The name of the vdView Object.</param>
            <remarks>Calling this constructoer the is no need to call the SetUnRegisterDocument method in order to register the Document of this object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdView.#ctor(VectorDraw.Professional.vdFigures.vdViewport,System.String)">
            <summary>
            Initializes the vdView object with the passed viewport object.
            </summary>
            <param name="viewport">The viewport from which the properties will be copied.</param>
            <param name="name">The name of the vdView to be created.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdView.#ctor">
            <summary>
            Initializes the vdView object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdView.#ctor(System.String)">
            <summary>
            Initializes the vdView object with the passed name.
            </summary>
            <param name="name">The name of the newly created vdView object</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdView.SetFromLayout(VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Sets the properties of the vdView object with the passed layout's properties.
            </summary>
            <param name="lay">A vdLayout object from which the properties are going to be copied.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdView.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdNamedUCS object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdView.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdView object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdView.ToString">
            <summary>
            Gets a System.String that represents the name of the vdView Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdView.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements all functionality for the vdView object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdView.Name">
            <summary>
            Get/Set the name of the vdView object
            </summary>
            <remarks>
            Default value : "Anonymous".
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <exception cref="T:VectorDraw.Professional.Exceptions.InvalidTableNameException"></exception>
            <exception cref="T:VectorDraw.Professional.Exceptions.CannotRenameException">Thrown when cannot rename an object.</exception>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdView.Description">
            <summary>
            Get/Set a Description string for the object
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdView.ViewPerspectiveMod">
            <summary>
            Get/Set the PerspectiveMod of the view.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdView.ViewLayout">
            <summary>
            Get/Set the Layout object of the View.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdView.ViewRenderMode">
            <summary>
            Get/Set the render mode for the view.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdView.ViewLensAngle">
            <summary>
            Get/Set the Lens Angle of the View in degrees.
            </summary>
            <remarks>
            Default value is 60.0d
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdView.ViewFocalLength">
            <summary>
            Get/Set the Focal Length for the View.
            </summary>
            <remarks>
            Default value is 0.05d
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdView.ViewCenter">
            <summary>
            Get/Set the view center of the view.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdView.ViewSize">
            <summary>
            Get/Set the Viewsize of the view.
            </summary>
            <remarks>
            Default value 10.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdView.AspectRatioX">
            <summary>
            Get/Set the aspect ratio that determines the field of view in the x-direction. 
            </summary>
            <remarks>
            The aspect ratio is the ratio of view width to view height .
            Default value is 1.0
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdView.ViewWorldToViewMatrix">
            <summary>
            Get/Set a Matrix that represents the WorldToView matrix of the view.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdView.ViewNamedUCS">
            <summary>
            Get/Set the named UCS for the view.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdView.VisibleOnForms">
            <summary>
            Get/Set a boolean value representing if the vdView will be viewed in Vectordraw forms.
            </summary>
            <remarks>
            Default value is true.
            The ToString value of the vdViews also takes consideration this value and if it is false then the count returned does not contain these items.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdView.IgnoreFrozenLayers">
            <summary>
            Get/Set a boolean value that Ignores or not the default frozen property of document layers.
            </summary>
            <remarks>
            Set it to true so all layers are thowed except the layers that defined in <see cref="P:VectorDraw.Professional.vdPrimaries.vdView.FrozenLayerList"/>
            Default value is false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdView.FrozenLayerList">
            <summary>
            Get/Set a string array contaning the names of the layers to be frozen in the view.
            </summary>
            <remarks>
            If the <see cref="P:VectorDraw.Professional.vdPrimaries.vdView.IgnoreFrozenLayers"/> is true then only the layers in this collection will be frozen.
            Default value an empty array.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="F:vdLineWeightComboBox.ListForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:vdLineWeightComboBox.ListForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:vdLineWeightComboBox.ListForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:vdLinetypeComboBox.vdLinetypeCombo">
            <summary>
            A Linetypes control to give easy access to the linetypes.
            </summary>
            <remarks>
            vdLinetypeCombo is a combobox like control to give you easy access to the linetypes.
            <remarks>If none entity is selected then the activelinetype is shown and you can easily select the activelinetype.</remarks>
            <remarks>If entities are selected to the Document then the linetype of the entities is shown where you can easily change it.</remarks>
            </remarks>
        </member>
        <member name="M:vdLinetypeComboBox.vdLinetypeCombo.#ctor">
            <summary>
            The constructor of the Control always necessary.
            </summary>
        </member>
        <member name="M:vdLinetypeComboBox.vdLinetypeCombo.SetLinetypeFont(System.String,System.Single,System.Int32)">
            <summary>
            A method to set the linetype font.
            </summary>
            <param name="name">The name of the font.</param>
            <param name="size">The size of the font.</param>
            <param name="style">The style of the Font <see cref="T:System.Drawing.FontStyle"/></param>
            <remarks> This method is exported specially for vb6 users , for .NET it is better to use directly the LinetypeFont property.</remarks>
        </member>
        <member name="F:vdLinetypeComboBox.vdLinetypeCombo.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:vdLinetypeComboBox.vdLinetypeCombo.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:vdLinetypeComboBox.vdLinetypeCombo.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:vdLinetypeComboBox.vdLinetypeCombo.LinetypeSelected">
            <summary>
            Raises when a linetype is selected and the listbox is hiden. This event can be used to handle the focus on the form that is used.
            </summary>
        </member>
        <member name="P:vdLinetypeComboBox.vdLinetypeCombo.UserLinetype">
            <summary>
            Use this property to pass a vdLinetype object to be modified without interfering with the Document.
            </summary>
        </member>
        <member name="P:vdLinetypeComboBox.vdLinetypeCombo.LinetypesDocument">
            <summary>
            Get/Set the Document that the Control should interact with.
            </summary>
        </member>
        <member name="P:vdLinetypeComboBox.vdLinetypeCombo.ApplicationsMainForm">
            <summary>
            Get/Set the Main Form where the LinetypeControl is added.This is used only to choose either to open the list upward or downward depending the position and the height of the main application.This property can only be used in .NET applications.
            </summary>
        </member>
        <member name="P:vdLinetypeComboBox.vdLinetypeCombo.MaxNumberOfLinetypesShown">
            <summary>
            Get/Set the Maximum number of Linetypes to be shown at the Drop Down List.
            </summary>
        </member>
        <member name="P:vdLinetypeComboBox.vdLinetypeCombo.SelectedLinetypeColor">
            <summary>
            The color of the Selected Linetype.
            </summary>
        </member>
        <member name="P:vdLinetypeComboBox.vdLinetypeCombo.BackgroundColor">
            <summary>
            The background color of the combobox.
            </summary>
        </member>
        <member name="P:vdLinetypeComboBox.vdLinetypeCombo.TextColor">
            <summary>
            The color of every text in the combobox.
            </summary>
        </member>
        <member name="P:vdLinetypeComboBox.vdLinetypeCombo.LinetypeFont">
            <summary>
            Get/Set the font used to display the name of the linetype
            </summary>
            <remarks> Default value is Microsoft Sans Serif", 8.25f, FontStyle.Regular.</remarks>
        </member>
        <member name="P:vdLinetypeComboBox.vdLinetypeCombo.ShowIconImage">
            <summary>
            Get/Set a value representing if the icon in front of the combo box is shown.
            </summary>
            <remarks>Default value true</remarks>
        </member>
        <member name="P:vdLinetypeComboBox.vdLinetypeCombo.MinimumSize">
            <summary>
            The minimum size of this control is 180,21
            </summary>
        </member>
        <member name="T:vdLinetypeComboBox.vdLinetypeCombo.LinetypeSelectedEventHandler">
            <summary>
            Represents the method that will handle the RaiseLinetypeSelected event.
            </summary>
            <param name="sender">The vdLinetypeCombo object.</param>
        </member>
        <member name="F:vdLinetypeComboBox.ListForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:vdLinetypeComboBox.ListForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:vdLinetypeComboBox.ListForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:FileDialogExtenders.FileDialogControlBase.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:FileDialogExtenders.FileDialogControlBase.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:FileDialogExtenders.FileDialogControlBase.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="T:VectorDraw.Professional.ActionUtility.MagnifierDisplayProperties">
            <summary>
            Display properties for the Magnifier Class
            </summary>
            <example>
            This Class can be used like this
            <code>
                VectorDraw.Professional.ActionUtility.MagnifierDisplayProperties props = new VectorDraw.Professional.ActionUtility.MagnifierDisplayProperties();
                props.MagnifierPerigramColor = Color.Red;
                props.MagnifierPerigramTransparency = 150;
                VectorDraw.Geometry.gPoint retptWorld = VectorDraw.Professional.ActionUtility.ActionMagnifier.getUserMagnifierPoint(doc, 4, 500, (int)Keys.ShiftKey,props);
                } 
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.MagnifierDisplayProperties.#ctor">
            <summary>
            Constructor of the class
            </summary>
            <example>
            This Class can be used like this
            <code>
                    VectorDraw.Professional.ActionUtility.MagnifierDisplayProperties props = new VectorDraw.Professional.ActionUtility.MagnifierDisplayProperties();
                    props.MagnifierPerigramColor = Color.Red;
                    props.MagnifierPerigramTransparency = 150;
                    VectorDraw.Geometry.gPoint retptWorld = VectorDraw.Professional.ActionUtility.ActionMagnifier.getUserMagnifierPoint(doc, 4, 500, (int)Keys.ShiftKey,props);
                    } 
            </code>
            </example>
        </member>
        <member name="P:VectorDraw.Professional.ActionUtility.MagnifierDisplayProperties.MagnifierPerigramColor">
            <summary>
            The Color of the Perigram of the Magnifgier Class. Default Color is Color.Transparent when the ForColor of the current render is being used instead.
            </summary>
            <example>
            This Class can be used like this
            <code>
                    VectorDraw.Professional.ActionUtility.MagnifierDisplayProperties props = new VectorDraw.Professional.ActionUtility.MagnifierDisplayProperties();
                    props.MagnifierPerigramColor = Color.Red;
                    props.MagnifierPerigramTransparency = 150;
                    VectorDraw.Geometry.gPoint retptWorld = VectorDraw.Professional.ActionUtility.ActionMagnifier.getUserMagnifierPoint(doc, 4, 500, (int)Keys.ShiftKey,props);
                    } 
            </code>
            </example>
        </member>
        <member name="P:VectorDraw.Professional.ActionUtility.MagnifierDisplayProperties.MagnifierPerigramTransparency">
            <summary>
            The transparency of the perigram of the Magnifier. Default value is 96.
            </summary>
            <example>
            This Class can be used like this
            <code>
                    VectorDraw.Professional.ActionUtility.MagnifierDisplayProperties props = new VectorDraw.Professional.ActionUtility.MagnifierDisplayProperties();
                    props.MagnifierPerigramColor = Color.Red;
                    props.MagnifierPerigramTransparency = 150;
                    VectorDraw.Geometry.gPoint retptWorld = VectorDraw.Professional.ActionUtility.ActionMagnifier.getUserMagnifierPoint(doc, 4, 500, (int)Keys.ShiftKey,props);
                    } 
            </code>
            </example>
        </member>
        <member name="T:VectorDraw.Professional.ActionUtility.ActionMagnifier">
            <summary>
            Implements the ActionText object used when adding a text.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.ActionMagnifier.#ctor(VectorDraw.Professional.vdPrimaries.vdLayout,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialises the action.
            </summary>
            <param name="Layout">The Layout where the action takes place.</param>
            <param name="MagnifierSize">The size of the Magnifier, default value 210.</param>
            <param name="MagnifierZoom">Zoom factor of the Magnifier, default value 3</param>
            <param name="ExtraCancelKeyCode">The extra Key (Besides Esc) to Cancel the command.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.ActionMagnifier.getUserMagnifierPoint(VectorDraw.Professional.vdObjects.vdDocument,System.Int32,System.Int32,System.Int32,VectorDraw.Professional.ActionUtility.MagnifierDisplayProperties)">
            <summary>
             Starts a magnifier glass action.
            </summary>
            <param name="document">The Document where the action will take place.</param>
            <param name="MagnifierZoom">The Magnifier Zoom level bigger than 1.</param>
            <param name="MagnifierSize">The Magnifier Glass diameter size in pixels.</param>
            <param name="ExtraCancelKeyCode">The extra Key (Besides Esc) to Cancel the command.</param>
            <param name="DisplayProps">Display properties for the MAgnifier. <see cref="T:VectorDraw.Professional.ActionUtility.MagnifierDisplayProperties"/></param>
            <returns>A point in World Coordinate System</returns>
            <remarks>
            Magnifier is not working when ActiveLayout <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.SpaceMode"/> is <see cref="F:VectorDraw.Professional.Constants.VdConstSpaceMode.SPACEMOD_MODEL"/> and the method returns null. 
            Note <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.osnapMode"/>, <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.OrthoMode"/> , <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.PolarTrack"/> and <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.GridMode"/> are not supported with Magnifier.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.ActionMagnifier.getUserMagnifierPoint(VectorDraw.Professional.vdObjects.vdDocument,System.Int32,System.Int32,System.Int32)">
            <summary>
             Starts a magnifier glass action.
            </summary>
            <param name="document">The Document where the action will take place.</param>
            <param name="MagnifierZoom">The Magnifier Zoom level bigger than 1.</param>
            <param name="MagnifierSize">The Magnifier Glass diameter size in pixels.</param>
            <param name="ExtraCancelKeyCode">The extra Key (Besides Esc) to Cancel the command.</param>
            <returns>A point in World Coordinate System</returns>
            <remarks>
            Magnifier is not working when ActiveLayout <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.SpaceMode"/> is <see cref="F:VectorDraw.Professional.Constants.VdConstSpaceMode.SPACEMOD_MODEL"/> and the method returns null.
             Note <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.osnapMode"/>, <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.OrthoMode"/> , <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.PolarTrack"/> and <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.GridMode"/> are not supported with Magnifier.
            </remarks>
        </member>
        <member name="F:VectorDraw.Professional.ActionUtility.ActionMagnifier.mReferencePt">
            <summary>
            In WCS matrix
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.ActionMagnifier.KeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handles Key events when Action is active.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.ActionMagnifier.OnIdle">
            <summary>
            Commited when the mouse is idle.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.ActionMagnifier.Draw">
            <summary>
            Overrides the <see cref="M:VectorDraw.Actions.BaseAction.Draw"/>
            </summary>
            <returns>Returns false if the Render is not valid.</returns>
        </member>
        <member name="P:VectorDraw.Professional.ActionUtility.ActionMagnifier.MagnifierSize">
            <summary>
            Get/Set the Magnifier Glass diameter size in pixels.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.ActionUtility.ActionMagnifier.MagnifierZoom">
            <summary>
            Get/Set the Magnifier Zoom level.Set it to 1 or a negative value to hide the Magnifier.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.ActionUtility.ActionMagnifier.ExtraCancelKeyCode">
            <summary>
            Get/Set the extra Key (Besides Esc) to Cancel the command.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.ActionUtility.ActionSelectEntitiesWithGrips.SelectionPolygon">
            <summary>
            An array of all the selection polygons defined by the user during this action.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.ActionUtility.IUtility">
            <summary>
            Provides all functionality for the Utility object.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.ActionUtility.Utility">
            <summary>
            This Class contains usefull functions for user interaction.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.AddAcceptedStringValues(System.String[])">
            <summary>
            Adds string values to the accepted string values of the currently active user action.
            </summary>
            <param name="userStrings">A string array of string values to be added to the accepted sting values of the action.</param>
            <remarks>
            Each item in the string array must have the following syndax for example for the word Close:  
            "Close;C;Cl", this means that Cl,C,Close are accepted values and the value of the action will return the string "Close".
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.SetAcceptedStringValuesEx(VectorDraw.Professional.vdCollections.StringArray,System.Object)">
            <summary>
            Sets string values to the accepted string values of the currently active user action.
            </summary>
            <param name="userStrings">A string array of string values to be added to the accepted sting values of the action.</param>
            <param name="defaultValue">The default value that is going to be returned if the user presses Enter or Right Click.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.SetAcceptedStringValues(System.String[],System.Object)">
            <summary>
            Sets string values to the accepted string values of the currently active user action.
            </summary>
            <param name="userStrings">A string array of string values to be added to the accepted sting values of the action.</param>
            <param name="defaultValue">The default value that is going to be returned if the user presses Enter or Right Click.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserPointDCS(VectorDraw.Geometry.gPoint@)">
            <summary>
            Gets a gPoint from the user in View Coordinate System.
            </summary>
            <param name="retpt">A gPoint variable in View Coordinate Systemwhere the picked point's value is going to be returned.</param>
            <returns>A code is returned indicating the user action.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserPoint">
            <summary>
            Gets a point from the user in User Coordinate System.
            </summary>
            <returns>An object representing a point in User Coordinate System or null if the user cancels the operation or one of the preselected accepted values.</returns>
            <see cref="M:VectorDraw.Professional.ActionUtility.Utility.SetAcceptedStringValues(System.String[],System.Object)"/>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserPoint(VectorDraw.Geometry.gPoint@)">
            <summary>
            Gets a point from the user in User Coordinate System.
            </summary>
            <param name="retpt">A gPoint reference to fill the point the user selected in User Coordinate System.</param>
            <returns>Returns a status code indicating the success of the action.</returns>
            <remarks>Note that accepted values are not taken into consideration.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserActionEntity(VectorDraw.Professional.Actions.ActionEntity)">
            <summary>
            Used to visualize a user action to create a user figure.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserRefPoint(VectorDraw.Geometry.gPoint)">
            <summary>
            Gets a point from the user in User Coordinate System.
            </summary>
            <param name="reference">A point in current User Coordinate System.</param>
            <returns>An object representing a point in User Coordinate System or null if the user cancels the operation or one of the preselected accepted values.</returns>
            <remarks>A rubber line is drawn from the reference point to the mouse position until the action is finished.Note that the reference point must not be null.</remarks>
            <see cref="M:VectorDraw.Professional.ActionUtility.Utility.SetAcceptedStringValues(System.String[],System.Object)"/>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserRefPointLine(VectorDraw.Geometry.gPoint)">
            <summary>
            Gets a point from the user in User Coordinate System by drawing a rubber vdLine with active document properties.
            </summary>
            <param name="reference">A point in current User Coordinate System.</param>
            <returns>An object representing a point in User Coordinate System or null if the user cancels the operation or one of the preselected accepted values.</returns>
            <remarks>A rubber vdLine with active document properties is drawn from the reference point to the mouse position until the action is finished.Note that the reference point must not be null.</remarks>
            <see cref="M:VectorDraw.Professional.ActionUtility.Utility.SetAcceptedStringValues(System.String[],System.Object)"/>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserRefPoint(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint@)">
            <summary>
            Gets a point from the user in User Coordinate System.
            </summary>
            <param name="reference">A point in current User Coordinate System.</param>
            <param name="retpt">A reference gPoint object where the selected point will be placed.</param>
            <returns>Returns a status code indicating the success of the action.</returns>
            <remarks>A rubber line is drawn from the reference point to the mouse position until the action is finished.Note that the reference point must not be null and also that the accepted values are not taken  into consideration.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserAngle(VectorDraw.Geometry.gPoint)">
            <summary>
            Gets an angle from the user in radians in current user coordinate system.
            </summary>
            <param name="reference">A reference gPoint in User Coordinate System.</param>
            <returns>An object representing the angle in radians or null if the user cancels the operation or one of the preselected accepted values.</returns>
            <remarks>If the reference point is a null object then a getpoint action is called first so the user can define the reference point.</remarks>
            <see cref="M:VectorDraw.Professional.ActionUtility.Utility.SetAcceptedStringValues(System.String[],System.Object)"/>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserDist(VectorDraw.Geometry.gPoint)">
            <summary>
            Gets a distance from the user in drawing units in current user coordinate system.
            </summary>
            <param name="reference">A reference gPoint in User Coordinate System.</param>
            <returns>An object representing the distance in drawing units or null if the user cancels the operation or one of the preselected accepted values.</returns>
            <remarks>If the reference point is a null object then a getpoint action is called first so the user can define the reference point.</remarks>
            <see cref="M:VectorDraw.Professional.ActionUtility.Utility.SetAcceptedStringValues(System.String[],System.Object)"/>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserLineSegment(VectorDraw.Geometry.gPoint@)">
            <summary>
            Prompts the user to select a line segment on the drawing area.
            </summary>
            <param name="pickPoint">A gPoint variable to return the point in User Coordinate System that the user clicked.</param>
            <returns>A new <see cref="T:VectorDraw.Professional.vdFigures.vdLine"/> and fills the pickPoint parameter or Null if there is no line segment that throw the pickpoint.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserEntityIgnoreLockLayers(VectorDraw.Professional.vdPrimaries.vdFigure@,VectorDraw.Geometry.gPoint@)">
            <summary>
            Prompt the user to pick an entity from the active layout.
            </summary>
            <param name="retfig">A vdFigure variable to return the figure that the user selected.</param>
            <param name="retpt">A gPoint variable to return the point in User Coordinate System that the user clicked.</param>
            <returns>Returns a status code indicating the success of the action.Entities in lock layer are ignored.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserEntityOneClick(VectorDraw.Professional.vdPrimaries.vdFigure@,VectorDraw.Geometry.gPoint@,VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum,System.Boolean)">
            <summary>
            Prompt the user to pick an entity from the active layout.
            </summary>
            <param name="retfig">A vdFigure variable to return the figure that the user selected.</param>
            <param name="retpt">A gPoint variable to return the point in User Coordinate System that the user clicked.</param>
            <param name="locklayerMethod">The method to be used in combination with active <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethod"/> property value, to test if entities belonging in locked layers are accepted.</param>        
            <param name="OneClick">True value defines that the command will return <see cref="F:VectorDraw.Actions.StatusCode.Success"/> and the picked point if user clicks on empty space and not on an entity. Use False to work as <see cref="M:VectorDraw.Professional.ActionUtility.Utility.getUserEntity(VectorDraw.Professional.vdPrimaries.vdFigure@,VectorDraw.Geometry.gPoint@,VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum)"/> action.</param>
            <returns>Returns a status code indicating the success of the action.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserEntity(VectorDraw.Professional.vdPrimaries.vdFigure@,VectorDraw.Geometry.gPoint@,VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum)">
            <summary>
            Prompt the user to pick an entity from the active layout.
            </summary>
            <param name="retfig">A vdFigure variable to return the figure that the user selected.</param>
            <param name="retpt">A gPoint variable to return the point in User Coordinate System that the user clicked.</param>
            <param name="locklayerMethod">The method to be used in combination with active <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethod"/> property value, to test if entities belonging in locked layers are accepted.</param>
            <returns>Returns a status code indicating the success of the action.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserEntityWithStringValuesOneClick(VectorDraw.Professional.vdPrimaries.vdFigure@,VectorDraw.Geometry.gPoint@,VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum,System.Boolean)">
            <summary>
            Prompt the user to pick an entity from the active layout.
            </summary>
            <param name="retfig">A vdFigure variable to return the figure that the user selected.</param>
            <param name="retpt">A gPoint variable to return the point in User Coordinate System that the user clicked.</param>
            <param name="locklayerMethod">The method to be used in combination with active <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethod"/> property value, to test if entities belonging in locked layers are accepted. You can use EnableGetEntityFromPoint for default <see cref="M:VectorDraw.Professional.ActionUtility.Utility.getUserEntity(VectorDraw.Professional.vdPrimaries.vdFigure@,VectorDraw.Geometry.gPoint@)"/> implementation.</param>
            <param name="OneClick">True value defines that the command will return an empty string and the picked point if user clicks on empty space and not on an entity. Use False to work as <see cref="M:VectorDraw.Professional.ActionUtility.Utility.getUserEntityWithStringValues(VectorDraw.Professional.vdPrimaries.vdFigure@,VectorDraw.Geometry.gPoint@,VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum)"/> action.</param>
            <returns>An Empty string if the user clicked a figure , or one of the added AcceptedStringValues that the developer gave.</returns>
            <remarks>The command can end with right click in which case the result will be an empty string.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserEntityWithStringValues(VectorDraw.Professional.vdPrimaries.vdFigure@,VectorDraw.Geometry.gPoint@,VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum)">
            <summary>
            Prompt the user to pick an entity from the active layout.
            </summary>
            <param name="retfig">A vdFigure variable to return the figure that the user selected.</param>
            <param name="retpt">A gPoint variable to return the point in User Coordinate System that the user clicked.</param>
            <param name="locklayerMethod">The method to be used in combination with active <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethod"/> property value, to test if entities belonging in locked layers are accepted. You can use EnableGetEntityFromPoint for default <see cref="M:VectorDraw.Professional.ActionUtility.Utility.getUserEntity(VectorDraw.Professional.vdPrimaries.vdFigure@,VectorDraw.Geometry.gPoint@)"/> implementation.</param>
            <returns>An Empty string if the user clicked a figure , or one of the added AcceptedStringValues that the developer gave.</returns>
            <remarks>The command can end with right click in which case the result will be an empty string.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserEntity(VectorDraw.Professional.vdPrimaries.vdFigure@,VectorDraw.Geometry.gPoint@)">
            <summary>
            Prompt the user to pick an entity from the active layout.
            </summary>
            <param name="retfig">A vdFigure variable to return the figure that the user selected.</param>
            <param name="retpt">A gPoint variable to return the point in User Coordinate System that the user clicked.</param>
            <returns>Returns a status code indicating the success of the action.</returns>
            <remarks>Entities in locked layers are not returned if <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethod"/> does not contain the value of <see cref="F:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum.EnableGetEntityFromPoint"/>.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserRect(VectorDraw.Geometry.gPoint,VectorDraw.Render.vdGdiPenStyle)">
            <summary>
            Prompt the user to pick a point. A rubber rect is drawn from the reference point to the mouse position.
            </summary>
            <param name="reference">A reference point in User Coordinate System.</param>
            <param name="penstyle">A penstyle which is used to draw the rectangle or null to use the default RubberBandColor.</param>
            <returns>A vector with 3 doubles which represent rotation in User Coordinate System,width and height. </returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserRect(VectorDraw.Geometry.gPoint)">
            <summary>
            Prompt the user to pick a point. A rubber rect is drawn from the reference point to the mouse position. 
            A vector with 3 doubles is returnred, which represent rotation in User Coordinate System, width and height of the rectangle.
            </summary>
            <param name="reference">A reference point in User Coordinate System.</param>
            <returns>A vector with 3 doubles which represent rotation in User Coordinate System,width and height. </returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserRectViewCS(VectorDraw.Geometry.gPoint,System.Boolean,VectorDraw.Geometry.Box@,System.Boolean@)">
            <summary>
            Prompt the user to pick a point.A rubber rect is drawn from the reference point to the mouse position.
            </summary>
            <param name="reference">A reference point in View Coordinate System or null to prompt the user to pick a reference point.</param>
            <param name="UseTransparentFill">A value to draw or not transparency filled rectangle.<see cref="P:VectorDraw.Render.vdRenderGlobalProperties.SelectingCrossColor"/> and <see cref="P:VectorDraw.Render.vdRenderGlobalProperties.SelectingWindowColor"/></param>
            <param name="retrect">A 2d Box object in View Coordinate system ,that the user selected.</param>
            <param name="isCrossing">Output a value that defines if the user select a rect in crossing mode (from right to left x) or in window mode (from left to right x).</param>
            <returns>Returns a status code indicating the success of the action.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserRectViewCS(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Box@)">
            <summary>
            Prompt the user to pick a point.A rubber rect is drawn from the reference point to the mouse position.
            </summary>
            <param name="reference">A reference point in View Coordinate System.</param>
            <param name="retrect">A 2d Box object in View Coordinate system ,that the user selected.</param>
            <returns>Returns a status code indicating the success of the action.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserPerigramViewCS(System.Boolean,System.Boolean)">
            <summary>
            Waits from the user to select a rubber polyline.
            </summary>
            <param name="closesegments"></param>
            <param name="iscrossing"></param>
            <returns>Returns a collection of gPoints that the user picked in View Coordinate System.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserStartWindowSelection(System.Drawing.Point,VectorDraw.Professional.vdCollections.vdSelection@)">
            <summary>
            Starts a window select command so the user can pick entities.
            </summary>
            <param name="reference">A reference point  as a start for the window in Screen pixel Coordinate System.</param>
            <param name="retset">A vdSelection object where the selected vdFigures will be returned.</param>
            <returns>Returns a status code indicating the success of the action.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserStartWindowSelection(VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdCollections.vdSelection@)">
            <summary>
            Starts a window select command so the user can pick entities.
            </summary>
            <param name="reference">A reference point  as a start for the window in View(Display) Coordinate System.</param>
            <param name="retset">A vdSelection object where the selected vdFigures will be returned.</param>
            <returns>Returns a status code indicating the success of the action.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserStartWindowSelection(System.Boolean,VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdCollections.vdSelection@,VectorDraw.Geometry.Box@)">
            <summary>
            Starts a window select command so the user can pick entities.
            </summary>
            <param name="freezeSelectionEvents">Set it to true in order <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnFilterFigure"/> not to be fired.</param>
            <param name="reference">A reference point  as a start for the window in View(Display) Coordinate System.</param>
            <param name="retset">A vdSelection object where the selected vdFigures will be returned.</param>
            <param name="retrect">Output <see cref="T:VectorDraw.Geometry.Box"/> that represents the box that the user selected.</param>
            <returns>Returns a status code indicating the success of the action.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserSelection">
            <summary>
            Starts a select command so the user can pick entities.
            </summary>
            <returns>A vdSelection object containing the figures the user selected.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserSelection(VectorDraw.Professional.vdCollections.vdSelection)">
            <summary>
            Starts a select command so the user can pick entities.
            </summary>
            <param name="selset">The selection where the entities are going to be added.</param>
            <returns>A vdSelection object containing the figures the user selected.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserSelection(VectorDraw.Professional.vdCollections.vdSelection,VectorDraw.Generics.vdArray{VectorDraw.Geometry.gPoints}@)">
            <summary>
            Starts a select command so the user can pick entities.
            </summary>
            <param name="selset">The selection where the entities are going to be added.</param>
            <param name="selectionPolygon">A vdArray of gPoints collection defining the polygons the user has selected.</param>
            <returns>A vdSelection object containing the figures the user selected.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserWalkThrough(System.Double)">
             <summary>
             Enables the Walkthrough action of vdraw, where the users can navigate through the drawing by controlling the camera. 
             </summary>
             <param name="stepMoveMent"> The size of the step on each movement performed. The bigger the step, the faster the movement. </param>
             <returns>Returns a status code indicating the success of the action.</returns>
            <remarks>
            You should set the stepMoveMent = -1.0 so we calculate a good step for the current drawing depending of the BoundingBox of the entities.The user can set a value if he knows the optimal step for his drawing.</remarks>
             <remarks>You can move forward and backward by pressing W and S.</remarks>
             <remarks>You can move left and right by presseing A and D.</remarks>
             <remarks>You can rotate the camera left, right, up and down by moving the mouse around.</remarks>
             <remarks>You can increase or decrease speed by pressing "+" and "-" or you can temporarily increase speed by pressing Shift</remarks>
             <remarks>You can move the camera upwards and downwards by scrolling the mouse wheel or by pressing "Space" and "PageUP" for up and C and "PageDown" for down.</remarks>
             <remarks>You can change between Fly and Walk mode by pressing F. In Fly mode you can move towards where you're looking while in Walk mode 
             your movement is restrained on the X-Y axis of the WorldMatrix.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserDynamicRotEx(System.Boolean)">
            <summary>
            Starts a dynamic rotate action so the user can rotate the active layout in 3D.
            </summary>
            <param name="continuous_orbit">Defines if  after release the mouse button, the objects continue their orbit in the direction that the user last specified.</param>
            <returns>Returns a status code indicating the success of the action.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserDynamicRot">
            <summary>
            Starts a dynamic rotate action so the user can rotate the active layout in 3D.
            </summary>
            <returns>Returns a status code indicating the success of the action.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserPan">
            <summary>
            Start a pan action to the active layout.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserString">
            <summary>
            Waits the user to type a string.
            </summary>
            <returns>The string the user typed.Note that the action accepted values are taken into consideration.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserInt(System.Int32@)">
            <summary>
            Waits the user to give an integer.
            </summary>
            <param name="retint">A reference integer where the value the user types will be placed.</param>
            <returns>Returns a status code indicating the success of the action.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.getUserDouble(System.Double@)">
            <summary>
            Waits the user to give a double value.
            </summary>
            <param name="retvalue">A reference to a double variable where the double value that the user typed will be placed.</param>
            <returns>Returns a status code indicating the success of the action.</returns>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.Utility.StartUserMagnifier(VectorDraw.Professional.vdObjects.vdDocument,System.Int32,System.Int32,System.Int32)">
            <summary>
             Starts a magnifier glass action.
            </summary>
            <param name="document">The Document where the action will take place.</param>
            <param name="MagnifierZoom">The Magnifier Zoom level bigger than 1.</param>
            <param name="MagnifierSize">The Magnifier Glass diameter size in pixels.</param>
            <param name="ExtraCancelKeyCode">The extra Key (Besides Esc) to Cancel the command.</param>
            <remarks>
            Magnifier is not working when ActiveLayout <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.SpaceMode"/> is <see cref="F:VectorDraw.Professional.Constants.VdConstSpaceMode.SPACEMOD_MODEL"/>.
             Note <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.osnapMode"/>, <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.OrthoMode"/> , <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.PolarTrack"/> and <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.GridMode"/> are not supported with Magnifier.
            </remarks>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionCircle3p">
            <summary>
            Implements the ActionCircle3p object used when adding a 3 point circle.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionCircle3p.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Initializes the action with the given parameters.
            </summary>
            <param name="reference1">First point of the circle in User Co-ordinate System(UCS).</param>
            <param name="reference2">Second point of the circle in User Co-ordinate System(UCS).</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionCircle3p.OnMyPositionChanged(VectorDraw.Geometry.gPoint)">
            <summary>
            Called when the mouse position changes.Calculates the circle from the passed third point in order to be drawn each time the mouse moves.
            </summary>
            <param name="newPosition">A gPoint representing the new mouse position in User Coordinate System.</param>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionCircle3p.HideRubberLine">
            <summary>
            Get a value that represents if the rubber line is drawn or not.Returns false since a rubber line is needed.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionCircle3p.Entity">
            <summary>
            The entity which is currently selected for this action.Returns the created circle.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionCircle3p.needUpdate">
            <summary>
            Get a value that represents if the entity should be updated after each position change.Returns true since an update is needed.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionCircle2p">
            <summary>
            Implements the ActionCircle2p object used when adding a 2 point circle.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionCircle2p.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Initializes the action from the passed parameters.
            </summary>
            <param name="reference">First point of the circle.</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionCircle2p.OnMyPositionChanged(VectorDraw.Geometry.gPoint)">
            <summary>
            Called when the mouse position changes.Changes the created circle entity in order to be drawn each time the mouse moves.
            </summary>
            <param name="newPosition">A gPoint representing the new mouse position in User Coordinate System.</param>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionCircle2p.HideRubberLine">
            <summary>
            Get a value that represents if the rubber line is drawn or not.Returns false since a rubber line is needed.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionCircle2p.Entity">
            <summary>
            The entity which is currently selected for this action.Returns the created circle.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionCircle2p.needUpdate">
            <summary>
            Get a value that represents if the entity should be updated after each position change.Returns true since an update is needed.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionCircle">
            <summary>
            Implements the ActionCircle object used when adding a circle from center point and one point for radius.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionCircle.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdPrimaries.vdLayout,VectorDraw.Actions.BaseAction.valueType)">
            <summary>
            Initializes the action from the passed parameters.
            </summary>
            <param name="reference">The center of the circle.</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
            <param name="valueType">A valuetype enum to control the .Value of the result.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionCircle.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Initializes the action from the passed parameters.
            </summary>
            <param name="reference">The center of the circle.</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionCircle.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdPrimaries.vdLayout,System.Boolean)">
            <summary>
            Initializes the action from the passed parameters.
            </summary>
            <param name="reference">The center of the circle.</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
            <param name="setDiameter">A boolean value that represents if the action will ask for radius or diameter.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionCircle.OnMyPositionChanged(VectorDraw.Geometry.gPoint)">
            <summary>
            Called when the mouse position changes.Changes the created circle entity in order to be drawn each time the mouse moves.
            </summary>
            <param name="newPosition">A gPoint representing the new mouse position in User Coordinate System.</param>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionCircle.HideRubberLine">
            <summary>
            Get a value that represents if the rubber line is drawn or not.Returns false since a rubber line is needed.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionCircle.Entity">
            <summary>
            The entity which is currently selected for this action.Returns the created circle.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionCircle.needUpdate">
            <summary>
            Get a value that represents if the entity should be updated after each position change.Returns true since an update is needed.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Actions.ActionEntityEx">
            <summary>
            This class is kept for backward compatibility , you should use <see cref="T:VectorDraw.Professional.Actions.ActionEntity"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Actions.ActionEntityEx.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="reference">A reference point used for the actions.</param>
            <param name="layout">The vdLayout object where the action will take place.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdXProperty">
            <summary>
            Implements all functionality fro the vdXproperty object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdXProperty.#ctor">
            <summary>
            Initializes the vdXproperty object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdXProperty.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdXProperty.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)">
            <summary>
            Check if the table object is depend on this figure
            </summary>
            <param name="table">A Table object to be searched.</param>
            <returns>Returns true is this object is not deleted and have a property reference equal with table object.</returns>
            <remarks>Called when <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ExtendedDeletedCheck"/> is False.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdXProperty.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.
            User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdXProperty.CopyFrom(VectorDraw.Professional.vdObjects.vdXProperty)">
            <summary>
            Copies all properties (TransformID,name,deleted,value) from another vdXproperty object.
            </summary>
            <param name="From">A vdXproperty object from which the properties will be copied.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdXProperty.Clone">
            <summary>
            Creates a new vdXproperty object as clone from this one.
            </summary>
            <returns>Returns a new created vdXproperty object as clone from this one.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdXProperty.ToString">
            <summary>
            Gets a System.String that represents the Name and Value of the vdXproperty Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdXProperty.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
            <remarks>
            If the vdXProperty contains gPoints( then they are transformed by this matrix.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdXProperty.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdXProperty object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdXProperty.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdXProperty object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdXProperty.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements all functionality fro the vdXproperty object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdXProperty.Deleted">
            <summary>
            Get/Set a property that marks the object as Deleted or not.
            </summary>
            <remarks>
            default value : false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdXProperty.Name">
            <summary>
            Get/Set the name of the vdXproperty object.
            </summary>
            <remarks>
            default value : "Unknown".
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdXProperty.PropValue">
            <summary>
            Get/Set the Value of the vdXproperty object.
            </summary>
            <remarks>
            default value : null.
            The value can either be an integer, a double , a gpoint depending the type of the vdXproperty object.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <seealso cref="P:VectorDraw.Professional.vdObjects.vdXProperty.TransformID"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdXProperty.TransformID">
            <summary>
            Get/Set the type of the vdXproperty object.
            </summary>
            <remarks>
            default value : None.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdXProperty.VisibleOnForms">
            <summary>
            Get/Set a boolean value representing if the vdXproperty will be viewed in Vectordraw forms.
            </summary>
            <remarks>
            Default value is true.
            The ToString value of the vdXproperties also takes consideration this value and if it is false then the count returned does not contain these items.
            </remarks>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdXProperty.TransformationType">
            <summary>
            Represents the transformations applied when <see cref="M:VectorDraw.Professional.vdObjects.vdXProperty.Transformby(VectorDraw.Geometry.Matrix)"/> is performed.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdXProperty.TransformationType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdXProperty.TransformationType.WorldSpacePosition">
            <summary>
            The gPoint of the vdXProperty is tranformed.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdXProperty.TransformationType.WorldSpaceDisplacement">
            <summary>
            The gPoint of the vdXProperty is tranformed.Ignores Transformation matrix offset(move command is ignored).
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdXProperty.TransformationType.WorldDirection">
            <summary>
            The gPoint of the vdXProperty is tranformed.The point is tranformed like a Vector.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdXProperty.TransformationType.WorldSpaceScale">
            <summary>
            No tranformation is commited.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdXProperty.TransformationType.WorldSpaceDist">
            <summary>
            No tranformation is commited.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.vdProxyClasses">
            <summary>
            Represents a collection of vdProxyClass objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdProxyClasses.#ctor">
            <summary>
            Initializes the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdProxyClasses.TypeContainsInterface(System.Type,System.String)">
            <summary>
            Checks if the passed type contains the given interface.
            </summary>
            <param name="t">The type of the object.</param>
            <param name="InterfaceName">The interface to check.</param>
            <returns>True if the interface is contained to the type.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdProxyClasses.Add(System.Type)">
            <summary>
            Converts the passed type to a vdProxyClass object and then adds it in the collection.
            </summary>
            <param name="type">The type to add.</param>
            <returns>True if the item is inserted to the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdProxyClasses.Add(System.Byte,System.String,System.String,System.String,System.String)">
            <summary>
            Converts the passed parameters to a vdProxyClass object and then adds it in the collection.
            </summary>
            <param name="proxytype">The type of the custom object.</param>
            <param name="CommonName">The name of the class object.</param>
            <param name="FullTypeName">The full name of the custom object(type and name).</param>
            <param name="DllName">The dll name.</param>
            <param name="DllFileName">The dll file name.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdProxyClasses.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdProxyClasses.RemoveAll">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdProxyClasses.FindName(System.String)">
            <summary>
            Finds the specified CommonName to the collection.
            </summary>
            <param name="Name">The CommonName of the vdProxyClass object to find.</param>
            <returns>The vdProxyClass having the specified CommonName.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdProxyClasses.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdProxyClasses object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdProxyClasses.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdProxyClasses object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdProxyClasses.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdProxyClasses.Item(System.String)">
            <summary>
            Get the specified item from the collection.
            </summary>
            <param name="item">The CommonName property of the item to search.</param>
            <returns>The vdProxyClass object from the collection.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdProxyClasses.Count">
            <summary>
            Get the items count of the collection.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.frmPointStyleDialog">
            <summary>
            Implements the Point style manager.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPointStyleDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmPointStyleDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmPointStyleDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPointStyleDialog.Cancel">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPointStyleDialog.Ok">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPointStyleDialog.radioButton1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPointStyleDialog.radioButton2">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPointStyleDialog.radioButton3">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPointStyleDialog.radioButton4">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPointStyleDialog.radioButton5">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPointStyleDialog.pictureBox1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPointStyleDialog.checkBox1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPointStyleDialog.checkBox2">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPointStyleDialog.label1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPointStyleDialog.textBox1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPointStyleDialog.relative">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPointStyleDialog.absolute">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPointStyleDialog.label2">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPointStyleDialog.panel1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPointStyleDialog.groupBox1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPointStyleDialog.formToolTip">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmPointStyleDialog.#ctor">
            <summary>
            Initializes the dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmPointStyleDialog.InitializeExtra(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes the Point style dialog.
            </summary>
            <param name="Document">The Document where the point style will be commited.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmPointStyleDialog.Show(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Used to show the dialog.
            </summary>
            <param name="Document">The Document where the point style will be commited.</param>
            <returns>A DialogResult indicating the user's action.</returns>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.frmLightManager">
            <summary>
            Implements the Light manager.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmLightManager.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmLightManager.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmLightManager.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmLightManager.butAdd">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmLightManager.butRemove">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmLightManager.butOk">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmLightManager.butCancel">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmLightManager.vdPropertyGrid1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmLightManager.listLights">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmLightManager.formToolTip">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmLightManager.#ctor">
            <summary>
            Initializes the dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmLightManager.InitializeExtra(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes the dialog.
            </summary>
            <param name="doc">The Document where the lights are.</param>
            <remarks >It is recomended to use the static method in order to show this dialog.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmLightManager.Show(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            This method is used in order to show the Light manager.
            </summary>
            <param name="Document">The Document where the lights are.</param>
            <returns>Returns a boolean value representing if the user pressed Ok(true) or Cancel(false).</returns>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.frmLightManager.vdFormSize">
            <summary>
            Get/Set the size of the form used when loading the form. This value is stored when the form is closed in order to be used the next time the form is loaded. 
            </summary>
            <remarks>The default value is -1,-1.</remarks>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.GetLineTypeDialog">
            <summary>
            Implements the LineType dialog.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.GetLineTypeDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.GetLineTypeDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.GetLineTypeDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.GetLineTypeDialog.bOK">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.GetLineTypeDialog.bCancel">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.GetLineTypeDialog.lvLinetypes">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.GetLineTypeDialog.lnTps">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.GetLineTypeDialog.formToolTip">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.GetLineTypeDialog.finalSelected">
            <summary>
            This property is used in order to get the selected LineType.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.GetLineTypeDialog.InitializeExtra(VectorDraw.Professional.vdObjects.vdDocument,System.Windows.Forms.Control,System.String,System.Boolean)">
            <summary>
            Set necessary objects used to show-use the dialog.
            </summary>
            <param name="Document">The Document where the selected mode will be implemented.</param>
            <param name="parent">The parent Control of the Document.</param>
            <param name="Selected">The default Linetype which will be selected when the dialog will be displayed.</param>
            <param name="showBylayer">This boolean value is used to set if the ByLayer button will be shown.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.GetLineTypeDialog.#ctor">
            <summary>
            Initializes the dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.GetLineTypeDialog.Show(VectorDraw.Professional.vdObjects.vdDocument,System.Windows.Forms.Control,System.String,System.Boolean)">
            <summary>
            Display the dialog.
            </summary>
            <returns>Returns a GetLineTypeDialog to obtain any necessary information.</returns>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.GetLineTypeDialog.vdFormSize">
            <summary>
            Get/Set the size of the form used when loading the form. This value is stored when the form is closed in order to be used the next time the form is loaded. 
            </summary>
            <remarks>The default value is -1,-1.</remarks>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.LoadUnknownObjectsEventHandler">
            <summary>
            Fires when an Unknown objects is loaded from a document after an open command.
            </summary>
            <remarks>Currently is raised only for DXF files and for objects that are not supported from VectorDraw.</remarks>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.LoadUnknownObjectsEventArgs">
            <summary>
            Event arguments to be used on the LoadUnknownObjects event of the Document.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.ILoadUnknownObjectsEventArgs">
            <summary>
            Interface for the event.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.LoadUnknownObjectsEventArgs.#ctor">
            <summary>
            Initialises the event with no arguments.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.LoadUnknownObjectsEventArgs.#ctor(VectorDraw.Professional.vdObjects.IDxfRecords)">
            <summary>
            Initialize the event with DxfRecords
            </summary>
            <param name="records"></param>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.LoadUnknownObjectsEventArgs.dataType">
            <summary>
            Datatype of the Data
            Dxf : The Data is an IDxfRecords collection
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.LoadUnknownObjectsEventArgs.Data">
            <summary>
            Data of the event. Currently for DXF is a collection IDxfRecords.
            The IDxfRecords is a collection of code and value which are the records of the DXF object from the DXF file.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.LoadUnknownObjectsEventArgs.ConvertedObject">
            <summary>
            A vdPrimary object currently not implemented and is intended for future use.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.frmPickColorDialog">
            <summary>
            Using this dialog the user can select a color to be set as transparent when displaying the image.
            The color can be set from a pixel of the bitmap or from the default  .Net color dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmPickColorDialog.#ctor">
            <summary>
            Main constructor
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmPickColorDialog.Show(VectorDraw.Professional.vdObjects.vdDocument,System.Drawing.Bitmap,System.Drawing.Color@)">
            <summary>
            Calls the frmPickColorDialog where the user can pick a color from the passed bitmap or by using the system colorpicker dialog.
            </summary>
            <param name="doc">The ActiveDocument of the control.</param>
            <param name="bmp">The bitmap from which to pick color clickin on a pixel.</param>
            <param name="c">The color that will be set as active transparency color.</param>
            <returns>The dialog result regarding if the user pressed the OK or Cancel button.</returns>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPickColorDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmPickColorDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmPickColorDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.frmPickColorDialog.SelectedColor">
            <summary>
            The color selected by the mouse or the dialog.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.vdGroups">
            <summary>
            A collection object of vdGroup objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdGroups.#ctor">
            <summary>
            Initializes the vdGroups collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdGroups.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdGroups.AddItem(VectorDraw.Professional.vdPrimaries.vdGroup)">
            <summary>
            Adds a vdGroup object to the collection.
            </summary>
            <param name="value">The vdGroup object to be added to the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdGroups.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdGroups.Add(System.String)">
            <summary>
            Creates and adds a vdGroup object to the collection with the specified name.
            </summary>
            <param name="Name">The name of the inserted vdGroup object.</param>
            <returns>Returns the added vdGroup object.</returns>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAddItem"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterAddItem"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdGroups.FindName(System.String)">
            <summary>
            Finds a vdGroup object with the specified name in the collection.
            </summary>
            <param name="Name">The name to search in the collection.</param>
            <returns>The found object else returns null if a vdGroup does not exist with this name.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdGroups.FindItem(VectorDraw.Professional.vdPrimaries.vdGroup)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">A vdGroup object to be checked if it exists in the collection</param>
            <returns>True if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdGroups.FindFigure(VectorDraw.Professional.vdPrimaries.vdFigure)">
            <summary>
            Try to find a figure in which group it belongs.
            </summary>
            <param name="fig">The figure to try to find</param>
            <returns>The vdGroup where the figure belongs to or null.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdGroups.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdGroups.RemoveItem(VectorDraw.Professional.vdPrimaries.vdGroup)">
            <summary>
            Removes a specific vdGroup object from the collection.
            </summary>
            <param name="Object">The vdGroup object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdGroups.getUniqueTableName(System.String)">
            <summary>
            Creates a unique string for use as name to a vdGroup object.
            </summary>
            <param name="prefix">A prefix string that will be present to the unique name.</param>
            <returns>Returns a unique string.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdGroups.ToString">
            <summary>
            Gets a System.String that represents the count of the vdGroups collection Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdGroups.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdGroups object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdGroups.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdGroups object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdGroups.ChangeOrder(VectorDraw.Professional.vdPrimaries.vdGroup,System.Boolean)">
            <summary>
            Changes the position of a vdGroup object to the front or the end of the collection.
            </summary>
            <param name="Object">The vdGroup object.</param>
            <param name="ToBack">If true moves the object to the beginning of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdGroups.swap(VectorDraw.Professional.vdPrimaries.vdGroup,VectorDraw.Professional.vdPrimaries.vdGroup)">
            <summary>
            Swaps the position between two different vdGroup objects existing in the collection.
            </summary>
            <param name="Object1">first object needed.</param>
            <param name="Object2">second object needed.</param>
            <returns>True if the swap operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdGroups.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdGroups.BoundingBox">
            <summary>
            Gets the Bounding Box of all the entities that belong to the group in WorldCoordinate System.
            </summary>
            <returns>A Box object that represents the BoundingBox in World coordinate system of all the entities of the group.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdGroups.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            A collection object of vdGroup objects.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdGroups.IgnoreGroups">
            <summary>
            A boolean value that represents if the groups are enabled for the Document.
            </summary>
            <remarks>
            Default value false which means that the groups are Not ignored.
            This value must be set each time a user opens a new Document or opens a drawing.There are several events where the user can set this value.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdGroups.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdGroups.ListPosition">
            <summary>
            Gets the <see cref="T:VectorDraw.Generics.IListPosition"/> interface object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdGroups.Item(System.Int32)">
            <summary>
            Get a vdGroup object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The vdGroup object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdGroups.ItemType">
            <summary>
            Returns the Type of Items in the collection
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.GridMeasured">
            <summary>
            Class object that used to draw a printable grid on the rendering area.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.GridMeasured.#ctor">
            <summary>
            Initializes the GridMeasured object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.GridMeasured.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.GridMeasured.SetMeasuredSpaceParameters(System.Double[],System.Double)">
            <summary>
            Controls the spaces between grid lines depend on each zoom and TextSize property.
            </summary>
            <param name="MinumLogicalSpaces">An array of minimun spaces (in Drawing Units) in ascedding order</param>
            <param name="SpaceMultiplier">A multiplier to be used to multiply the spaces if they are too small in order to be fit in selected grid</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.GridMeasured.CopyFrom(VectorDraw.Professional.vdObjects.GridMeasured)">
            <summary>
            Copies the passed object's properties to this object.
            </summary>
            <param name="from">A GridMeasured object from which the properties will be copied.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.GridMeasured.DeviceMillimetersToDrawingUnits(VectorDraw.Render.vdRender,System.Boolean,System.Double)">
            <summary>
            Convert length from millimeters to Device Drawing Units
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.GridMeasured.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the grPatternLine object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.GridMeasured.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the grPatternLine object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.GridMeasured.ViewOnlyInUCS">
            <summary>
            Get/Set a value that represents if the grid will be displayed on View planes other than Current User Co-ordinate system.
            </summary>
            <remarks>Default value is False.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.GridMeasured.DisplayText">
            <summary>
            Get/Set a value that represents if the X and Y text values will be dispalyed.
            </summary>
            <remarks>Default value is True.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.GridMeasured.TextStyle">
            <summary>
            Get/Set the selected textstyle.
            </summary>
            <remarks>Default value is the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveTextStyle"/></remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.GridMeasured.LineWeight">
            <summary>
            Get/Set The LineWeight for the grid lines.
            </summary>
            <remarks>
            Default value <see cref="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_0"/>.</remarks>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <seealso cref="T:VectorDraw.Professional.Constants.VdConstLineWeight"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.GridMeasured.LineWeightMinor">
            <summary>
            Get/Set The LineWeight for the minor grid lines.
            </summary>
            <remarks>
            Default value <see cref="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_0"/>.</remarks>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <seealso cref="T:VectorDraw.Professional.Constants.VdConstLineWeight"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.GridMeasured.AlphaBlending">
            <summary>
            Get/Set the AlphaBlending value for the selected GridColor.
            </summary>
            <remarks>
            Default value is 255.No AlphaBlending.
            Used only when <see cref="P:VectorDraw.Professional.vdObjects.GridMeasured.DrawBefore"/> property is False.</remarks>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.GridMeasured.TextColor">
            <summary>
            Get/Set the vdColor object that the texts will be drawn with.
            </summary>
            <remarks>
            When setting a value, the property's value is copied (no reference) to the object's TextColor.<see cref="T:VectorDraw.Professional.vdObjects.vdColor"/></remarks>
            <remarks>Default value null and the Palette Forground is used.</remarks>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.GridMeasured.Visible">
            <summary>
            Get/Set a value that represents if the grid is visible.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.GridMeasured.GridColor">
            <summary>
            Get/Set the color used to draw the grid.
            </summary>
            <remarks>
            When setting a value, the property's value is copied (no reference) to the object's GridColor.<see cref="T:VectorDraw.Professional.vdObjects.vdColor"/></remarks>
            <remarks>Default value null and the Palette Forground is used.</remarks>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.GridMeasured.GridColorMinor">
            <summary>
            Get/Set the color used to draw the minor grid lines.
            </summary>
            <remarks>
            Default value is Empty and the Minor lines are not drawn.</remarks>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.GridMeasured.DrawBefore">
            <summary>
            Get/Set a value that represents if the grid will be drawn before or after basic entities rendering.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.GridMeasured.Placement">
            <summary>
            Get/Set a value that represents the sides where the x and y coordinates will be drawn.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.GridMeasured.TextSize">
            <summary>
            Get/Set the height in device milimeters that all texts of the grid will be use.
            </summary>
            <remarks>Default value is 3 Millimeters.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.GridMeasured.TextGap">
            <summary>
            Get/Set the gap in device milimeters between text and grid lines.
            </summary>
            <remarks>Default value is 1 Millimeter.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.GridMeasured.MinGridLineDistance">
            <summary>
            Get/Set the minimun distance between horizontal or vertical grid lines in device milimeters.
            </summary>
            <remarks>Default value is 50 Millimeter.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.GridMeasured.NumericFormat">
            <summary>
            Get/Set a string that used to convert the double values into formated strings.
            </summary>
            <remarks>
            Default value is an empty string and used the default VectorDraw string format implementation.</remarks>
            <remarks>It can get values like "0.#" or "F3" or "#.#" or "###,###,###0.#" etc. see Standard Numeric Format Strings and Custom Numeric Format Strings of .NET, see MSDN.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.GridMeasured.LockGridLineDistance">
            <summary>
            Lock the grid line distance with the specified value in Drawing Units.
            </summary>
            <remarks>
            Set it to 0.0 in order the <see cref="P:VectorDraw.Professional.vdObjects.GridMeasured.MinGridLineDistance"/> in millimeters to be used.</remarks>
            <remarks>Set it to a negative value in order the current view grid line distance in drawing units to be used.</remarks>
            <remarks>Default value is 0.0</remarks>
            <remarks>Or set any value above to lock to that distance , for example 100.
            </remarks>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.GridMeasured.GridMeasuredValuesPlacementFlag">
            <summary>
            Defines the values that represents the sides where the x and y coordinates will be drawn.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.GridMeasured.GridMeasuredValuesPlacementFlag.LeftTop">
            <summary>
            Y coordinate values are drawn on Left side and X values are drawn on Top.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.GridMeasured.GridMeasuredValuesPlacementFlag.LeftBottom">
            <summary>
            Y coordinate values are drawn on Left side and X values are drawn on Bottom.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.GridMeasured.GridMeasuredValuesPlacementFlag.RightTop">
            <summary>
            Y coordinate values are drawn on Right side and X values are drawn on Top.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.GridMeasured.GridMeasuredValuesPlacementFlag.RightBottom">
            <summary>
            Y coordinate values are drawn on Right side and X values are drawn on Bottom.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Utilities.GlobalUtilities">
            <summary>
            Several utilities functions for string conversion and registry editing..
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Utilities.GlobalUtilities.splitString(System.String,System.String)">
            <summary>
            Returns a string array that contains the substrings in the passed string that are delimited by input split string.
            </summary>
            <param name="str">A string to be spilted.</param>
            <param name="split">A string that delimit the substrings in the passed string</param>
            <returns>A string array that contains the substrings in the passed string that are delimited by input split string.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Utilities.GlobalUtilities.ConvertString(System.String)">
            <summary>
            Convertes a string with special characters into a regular string.
            </summary>
            <param name="str">The given string</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Utilities.GlobalUtilities.getuservalue(System.String,System.String)">
            <summary>
            Reads a string from the VectorDraw registry.
            </summary>
            <param name="SectionName">The Section of the registry(CurrentUser\\SOFTWARE\\VectorDraw\\UserValues\).</param>
            <param name="defaultValue">Represents the value that will be returned if the section name does not exist</param>
            <returns>The string value of the registry key.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Utilities.GlobalUtilities.writeuservalue(System.String,System.String)">
            <summary>
            Writes a string from the VectorDraw registry.
            </summary>
            <param name="SectionName">The Section of the registry(CurrentUser\\SOFTWARE\\VectorDraw\\UserValues\).</param>
            <param name="Value">The string value to write to the registry.</param>
        </member>
        <member name="M:VectorDraw.Professional.Utilities.GlobalUtilities.GetDirectoryName(System.String)">
            <summary>
            Gets the Directory of a full path file name.
            </summary>
            <param name="FilePath">The Full path filename</param>
            <returns>The directory name.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Utilities.GlobalUtilities.GetFileName(System.String)">
            <summary>
            Gets only the filename with the extension from a full path file name.
            </summary>
            <param name="FilePath">The full path filename.</param>
            <returns>Returns a string representing only the filename with the extension.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Utilities.GlobalUtilities.GetFileNameWithoutExtension(System.String)">
            <summary>
            Gets only the filename without the extension from a full path file name.
            </summary>
            <param name="FilePath">The full path filename.</param>
            <returns>Returns a string representing only the filename without the extension.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Utilities.GlobalUtilities.GetFileProperties(System.String)">
            <summary>
            Gets the FileProperties of a supported file.
            </summary>
            <param name="fileName">The filename of the file.</param>
            <returns>Returns a vdFileProperties object contaning the properties of the given file.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Utilities.GlobalUtilities.GetFileActivator(System.String)">
            <summary>
            Gets the <see cref="T:VectorDraw.Serialize.Activator"/> of a supported file.
            </summary>
            <param name="fileName">The filename of the file.</param>
            <returns>Returns a <see cref="T:VectorDraw.Serialize.Activator"/> object of the given file.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Utilities.GlobalUtilities.GetTTFFileName(System.String)">
            <summary>
            Returns the font file for a specific TTF Font name.
            </summary>
            <param name="TTFFontName">A TrueType font face name as it used in TextStyles Fontfile property.</param>
            <returns>Returns the font file for a specific TTF Font name.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Utilities.GlobalUtilities.GetTTFFontName(System.String)">
            <summary>
            Returns the font name for a specific TTF Filename.
            </summary>
            <param name="TTFFileName">A TrueType font filename name as it used in TextStyles Fontfile property.</param>
            <returns>Returns the font name for a specific TTF Font filename.</returns>
        </member>
        <member name="T:VectorDraw.Professional.Utilities.vdGlobals">
            <summary>
            Global Utility functions.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Utilities.vdGlobals.GetDirectoryName(System.String)">
            <summary>
            Gets the Directory of a full path file name.
            </summary>
            <param name="FilePath">The Full path filename</param>
            <returns>The directory name.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Utilities.vdGlobals.GetFileName(System.String)">
            <summary>
            Gets only the filename with the extension from a full path file name.
            </summary>
            <param name="FilePath">The full path filename.</param>
            <returns>Returns a string representing only the filename with the extension.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Utilities.vdGlobals.GetFileNameWithoutExtension(System.String)">
            <summary>
            Gets only the filename without the extension from a full path file name.
            </summary>
            <param name="FilePath">The full path filename.</param>
            <returns>Returns a string representing only the filename without the extension.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Utilities.vdGlobals.IsFileExist(System.String)">
            <summary>
            Checks if a file exists or not.
            </summary>
            <param name="FullFilePathName">The full path file name of the file to be checked.</param>
            <returns>True if the file exists.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Utilities.vdGlobals.getuservalue(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Reads a string from the VectorDraw registry.
            </summary>
            <param name="baseRegistryPath">The base registry path ( CurrentUser or LocalMachine etc...)</param>
            <param name="SectionName">The Section of the registry(baseRegistryPath\\SOFTWARE\\VectorDraw\\UserValues\).</param>
            <param name="defaultValue">Represents the value that will be returned if the section name does not exist</param>
            <returns>The string value of the registry key.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Utilities.vdGlobals.writeuservalue(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Writes a string from the VectorDraw registry.
            </summary>
            <param name="baseRegistryPath">The base registry path ( CurrentUser or LocalMachine etc...)</param>
            <param name="SectionName">The Section of the registry(CurrentUser\\SOFTWARE\\VectorDraw\\UserValues\).</param>
            <param name="Value">The string value to write to the registry.</param>
        </member>
        <member name="F:vdLayersComboBox.ListForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:vdLayersComboBox.ListForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:vdLayersComboBox.ListForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:vdColorComboBox.ListForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:vdColorComboBox.ListForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:vdColorComboBox.ListForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.ActionUtilities.CmdMoveGripPoints">
            <summary>
            Represents the action used when moving grip points of an object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.CmdMoveGripPoints.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdPrimaries.vdLayout,VectorDraw.Professional.vdCollections.vdSelection,VectorDraw.Generics.vdArray{VectorDraw.Geometry.Int32Array})">
            <summary>
            Initializes the action with the passed parameters.
            </summary>
            <param name="referencept">A reference gPoint representing the point that the action started in User Coordinate System..</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
            <param name="selection">A collection of figures selected.</param>
            <param name="indexes">The array of indexes representing the grips.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.CmdMoveGripPoints.SetSelectionInVisibility(VectorDraw.Professional.vdPrimaries.vdFigure.VisibilityEnum)">
            <summary>
            Change the visibilty of selected figures.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.CmdMoveGripPoints.Start">
            <summary>
            Called when the Action is Started
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.CmdMoveGripPoints.CancelAction(VectorDraw.Actions.BaseAction)">
            <summary>
            Called when the Action is canceled
            </summary>
            <param name="Action"></param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.CmdMoveGripPoints.FinishAction(VectorDraw.Actions.BaseAction)">
            <summary>
            Called when the Action is about to finish.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.CmdMoveGripPoints.OnIdle">
            <summary>
            Commited when the mouse is idle.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtilities.CmdMoveGripPoints.PureDraw">
            <summary>
            Makes the necessary rendering for the action.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.ActionUtilities.CmdMoveGripPoints.Layout">
            <summary>
            The vdLayout object where the action takes place.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.ActionUtilities.CmdMoveGripPoints.ValuePointCS">
            <summary>
            Get a value that represents the coordinate system of the <see cref="P:VectorDraw.Actions.BaseAction.Value"/> property.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.ActionUtilities.CmdMoveGripPoints.HideRubberLine">
            <summary>
            Get a value that represents if the rubber line is drawn or not.Returns false since a rubber line is needed.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.Action3dFace">
            <summary>
            Implements the ActionArc object which is used when adding a 3d face.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.Action3dFace.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Initializes the action with the given paramaters.
            </summary>
            <param name="p1">First point needed for the 3d face.</param>
            <param name="p2">Second point of the face,can be null.</param>
            <param name="p3">Third point of the face,can be null.</param>
            <param name="p4">Fourth point of the face,can be null.</param>
            <param name="indexToChange">The index that is currently for selection from the user.</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.Action3dFace.OnMyPositionChanged(VectorDraw.Geometry.gPoint)">
            <summary>
            Called when the mouse position changes.Changes the created face entity in order to be drawn each time the mouse moves.
            </summary>
            <param name="newPosition">A gPoint representing the new mouse position in User Coordinate System.</param>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.Action3dFace.HideRubberLine">
            <summary>
            Get a value that represents if the rubber line is drawn or not.Returns false since a rubber line is needed.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.Action3dFace.Entity">
            <summary>
            The entity which is currently selected for this action.Returns the created 3dface.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.Action3dFace.needUpdate">
            <summary>
            Get a value that represents if the entity should be updated after each position change.Returns true since an update is needed.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionThickness.HideRubberLine">
            <summary>
            Get a value that represents if the rubber line is drawn or not.Returns false since a rubber line is needed.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionThickness.Entity">
            <summary>
            The entity which is currently selected for this action.Returns the created circle.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionThickness.needUpdate">
            <summary>
            Get a value that represents if the entity should be updated after each position change.Returns true since an update is needed.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.BlockTypeConverterNoExpand">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.BlockTypeConverterNoExpand.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.BlockTypeConverterNoExpand.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.BlockTypeConverterNoExpand.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.BlockTypeConverterNoExpand.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.BlockTypeConverter">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.BlockTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.BlockTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.BlockTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.BlockTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdBlock">
            <summary>
            Implements all functionality for the vdBlock object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdBlock.GetReferenceObjects">
            <summary>
            Returns a copy of the collection that contains all entities reference this object.
            </summary>
            <remarks>Only <see cref="T:VectorDraw.Professional.vdPrimaries.vdFigure"/> type objects that are DocumentRegister and have not null Owner are added into the return collection.</remarks>
            <returns>A copy of the collection that contains all entities reference this object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdBlock.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes the vdBlock object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this constructor the is no need to call the SetUnRegisterDocument method in order to register the Document of this object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdBlock.#ctor(VectorDraw.Professional.vdObjects.vdDocument,System.String)">
            <summary>
            Initializes the vdBlock object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <param name="name">The name of the block object.</param>
            <remarks>Calling this constructor the is no need to call the SetUnRegisterDocument method in order to register the Document of this object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdBlock.#ctor">
            <summary>
            Initializes the vdBlock object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdBlock.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdBlock.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.
            User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdBlock.BoundingBox">
            <summary>
            Gets the Bounding Box of the vdBlock object in WorldCoordinate System.
            </summary>
            <returns>A Box containing the vdBlock object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdBlock.XrefReLoad">
            <summary>
            Reloads the external reference.
            </summary>
            <remarks>
            This is used when an external reference is modified and in order to see the changes in a different
            document needs to be reloaded.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdBlock.MatchPropertiesWithoutEntities(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties(without matching the entities) from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <returns>Returns true if the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdBlock.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties(matches even the entities) from an vdBlock object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdBlock.InitializeProperties">
            <summary>
            Resets the properties of the vdBlock object to the Default values.
            </summary>
            <remarks>
            Default values:Set Origin to (0.0,0.0,0.0) and Remove all Entities.
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdBlock.OnOwnerChanged">
            <summary>
            This method is called when the object's owner is changed.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdBlock.ToString">
            <summary>
            Gets a System.String that represents the name of the vdBlock Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdBlock.Update">
            <summary>
            Updates the objects of the vbBlock object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdBlock.Contains(System.Type)">
            <summary>
            Check if a specific vdFigure type exists in the entities of the vdBlock object.
            </summary>
            <param name="type">The type of the vdFigure.</param>
            <returns>Returns true if at least one vdFigure object matches the parameter type.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdBlock.ToDocument">
            <summary>
            Creates and Returns a vdDocument object contaning to it's model all the vdFigure objects of the block entities.
            </summary>
            <returns>A vdDocument object contaning all the entities of the block to it's model.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdBlock.AttributeSync">
            <summary>
            Synchronizes the attributes of all inserts already added to the Document.
            </summary>
            <returns>True if the operation was succesfull.</returns>
            <remarks>
            All the properties are being updated from the AttributeDefinition to the Attributes of the inserts.
            The following proparties are being updated:
            TagString,InVisibleMode,IsConstant,IsLockedPosition and also the properties of the vdFigure object.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdBlock.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdBlock object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdBlock.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdBlock object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdBlock.CompareTo(System.Object)">
            <summary>
                Compares the current instance with another object of the same type and returns
                an integer that indicates whether the current instance precedes, follows,
                or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns> 
                A 32-bit signed integer that indicates the relative order of the objects
                being compared. The return value has these meanings: Value Meaning Less than
                zero This instance precedes obj in the sort order. Zero This instance occurs
                in the same position in the sort order as obj. Greater than zero This instanceG
                follows obj in the sort order.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdBlock.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements all functionality for the vdBlock object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdBlock.StretchBlock">
            <summary>
            Specifies if the object will be streched or not, when the selected WorldToView matrix has different x,y scales and vdDocument.GlobalRenderProperties.StrechText is false.
            </summary>
            <remarks>
            Default value : <see cref="F:VectorDraw.Professional.vdPrimaries.vdBlock.StretchBlockFlag.Stretch"/>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdBlock.Entities">
            <summary>
            Get the collection of entities contained to the vdBlock object.
            </summary>
            <remarks>
            If the block is an external reference then the model's entities
            of the reference are returned.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdBlock.Name">
            <summary>
            Get/Set the name of the vdBlock object.
            </summary>
            <remarks>
            Default value : "Unonymus".
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <exception cref="T:VectorDraw.Professional.Exceptions.InvalidTableNameException"></exception>
            <exception cref="T:VectorDraw.Professional.Exceptions.CannotRenameException">Thrown when cannot rename an object.</exception>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdBlock.Origin">
            <summary>
            Get/Set the origin point of the vdBlock object.
            </summary>
            <remarks>
            Represents the insertion point when the block is inserted.It is a value in relation with
            the other coordinates of the objects that consist the vdBlock object.
            Default value : (0.0,0.0,0.0).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdBlock.ExternalReferencePath">
            <summary>
            Get/Set External Reference path when the vdBlock <see cref="P:VectorDraw.Professional.vdPrimaries.vdBlock.IsXref"/> true.
            </summary>
            <remarks>
            Default value : "".
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdBlock.IsXrefUnloaded">
            <summary>
            Get/Set the unloaded status when the vdBlock <see cref="P:VectorDraw.Professional.vdPrimaries.vdBlock.IsXref"/> true.
            </summary>
            <remarks>
            Default value : false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdBlock.IsXref">
            <summary>
            Get if the vdBlock object is an external reference.
            </summary>
            <remarks>
            A vdBlock is an external reference when the <see cref="P:VectorDraw.Professional.vdPrimaries.vdBlock.ExternalReferencePath"/> is not "".
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdBlock.ExternalReference">
            <summary>
            Get the vdDocument object if the vdBlock object is an external reference.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdBlock.Deleted">
             <summary>
             Get/Set a property that marks the object as Deleted or not.
             </summary>
            <exception cref="T:VectorDraw.Professional.Exceptions.CannotDeleteException">Thrown when an object cannot be deleted.</exception>
            <remarks>When you set Deleted = True to a Block you must also call block.Entities.EraseAll() in order to completely remove the block.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdBlock.VisibleOnForms">
            <summary>
            Get/Set a boolean value representing if the vdBlock will be viewed in Vectordraw forms.
            </summary>
            <remarks>
            Default value is true.
            The ToString value of the vdBlocks also takes consideration this value and if it is false then the count returned does not contain these items.
            </remarks>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdBlock.StretchBlockFlag">
            <summary>
            Defines the Stretch block values.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdBlock.StretchBlockFlag.Stretch">
            <summary>
            the block is stretched.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdBlock.StretchBlockFlag.NoStretch">
            <summary>
            The block is not stretched.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdAttrib">
            <summary>
            Implements the vdAttrib object.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdText">
            <summary>
            Implements all functionality for the vdText object.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.IAlignToView">
            <summary>
            Provides the functionality for the AlignToView and AlignToViewSize properties implementation.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.IAlignToView.AlignToView">
            <summary>
            A boolean value that defines if the plane of the object is relative to the current view.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.IAlignToView.AlignToViewSize">
            <summary>
            Get/Set the height of the object in output Device millimeters when value is positive or in hundreds of millimeters for negative values.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdText.mStyle">
            <summary>
            Internally used for the Style of the text.It is recommended to use the <see cref="P:VectorDraw.Professional.vdFigures.vdText.Style"/> property instead.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdText.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes a new instance of the vdText object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdText.#ctor(VectorDraw.Professional.vdObjects.vdDocument,System.String,VectorDraw.Geometry.gPoint,System.Double)">
            <summary>
            Initializes a new instance of the vdText object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <param name="textstring">The textstring of the text object.</param>
            <param name="insertionpoint">The insertion point of the text object.</param>
            <param name="height">The height of the text object.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdText.#ctor(VectorDraw.Professional.vdObjects.vdDocument,System.String,VectorDraw.Geometry.gPoint,System.Double,VectorDraw.Professional.Constants.VdConstHorJust,VectorDraw.Professional.Constants.VdConstVerJust,VectorDraw.Professional.vdPrimaries.vdTextstyle)">
            <summary>
            Initializes a new instance of the vdText object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <param name="textstring">The textstring of the text object.</param>
            <param name="insertionpoint">The insertion point of the text object.</param>
            <param name="height">The height of the text object.</param>
            <param name="horJustify">The horizontal justification of the text.</param>
            <param name="verJustify">The vertical justification of the text.</param>
            <param name="style">The <see cref="T:VectorDraw.Professional.vdPrimaries.vdTextstyle"/> object of the vdText.Set it to null to use the document's active textstyle.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdText.#ctor">
            <summary>
            Initializes the vdText object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdText.CreateExtra">
            <summary>
            Creates new grTextStyleExtra object for the vdText object.These values can ovewrite the style's values.
            </summary>
            <returns>
            Returns a new grTextStyleExtra object for the vdText object. Initially the values
            are taken from the text's style.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdText.IsUnderline">
            <summary>
            Get a boolean value indicating if the line under the text is drawn.
            </summary>
            <returns>Returns true if the line under the text is drawn.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdText.OnDocumentSelected(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            This method is called when the object is inserted in a Document for the first time.
            </summary>
            <param name="document">The document where the object is inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdText.GetDisplayString">
            <summary>
            Gets the string that is displayed.
            </summary>
            <returns>Returns a string object representing the text that is displayed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdText.Invalidate">
            <summary>
            Invalidates the object's Bounding Box and causes the control to be redrawn in this region.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdText.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.
            User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdText.SelectPenWidth(VectorDraw.Render.vdGdiPenStyle,VectorDraw.Render.vdRender,VectorDraw.Professional.vdPrimaries.vdFigure)">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdText.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)">
            <summary>
            <see cref="M:VectorDraw.Professional.vdPrimaries.vdFigure.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)"/>.
            </summary>
            <param name="object2viewcs"></param>
            <param name="mode"></param>
            <param name="pickPoi"></param>
            <param name="LastPoi"></param>
            <param name="SegCount"></param>
            <param name="osnaps"></param>
            <returns>True if at least one osnap point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdText.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdText.GetGripPoints">
            <summary>
            A function returning the grip points of the object.
            </summary>
            <returns>Returns a new instance of gpoints object containing the grip points of the object.</returns>
            <remarks>
            The returning points are in World coordinate system(WCS).
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetGripPoints"/> event.
            When implementing this method the <see cref="M:VectorDraw.Professional.vdFigures.vdText.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)"/> must be also override according to the new selected grip points.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdText.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)">
            <summary>
            This function is intended to be called during a grip edit of the object. 
            </summary>
            <param name="Indexes">Represents a zero based array of the grip indexes that will be moved.</param>
            <param name="dx">The dx distance that the grip is moved.</param>
            <param name="dy">The dy distance that the grip is moved.</param>
            <param name="dz">The dz distance that the grip is moved.</param>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdText.GetGripPoints"/>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnMoveGripPointsAt"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdText.InitializeProperties">
            <summary>
            Resets the properties of the vdText object to the Default values.
            </summary>
            <remarks>
            Default values:Set InsertionPoint and AligmentPoint to (0.0,0.0,0.0),Height = WidthFactor = 1,Rotation = Thickness=0,
            VerJustify = VdTextVerBaseLine,HorJustify = VdTextHorLeft,Flag = LEFTTORIGHT, TextString = "".
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdText.ToString">
            <summary>
            Gets a System.String that represents the type of the vdText Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdText.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdText.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdText.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Called in order to draw the object in a specified vdRender object.
            </summary>
            <param name="render">The vdRender object in which the object will be drawn.</param>
            <returns><see cref="T:VectorDraw.Render.vdRender.DrawStatus"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdText.GetBackgroundBorderPolyline">
            <summary>
            Calculates and returns a vdPolyline used when <see cref="P:VectorDraw.Professional.vdFigures.vdText.BackgroundMaskBorder"/> is true.
            </summary>
            <returns>A vdPolyline that is used as background. <seealso cref="P:VectorDraw.Professional.vdFigures.vdText.BackGroundMaskBorderPenWidth"/> , <seealso cref="P:VectorDraw.Professional.vdFigures.vdText.BackGroundMaskBorderColor"/> , <seealso cref="P:VectorDraw.Professional.vdFigures.vdText.BackgroundMaskBorder"/></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdText.GetBackgroundPolyline">
            <summary>
            Calculates and returns a vdPolyline used when <see cref="P:VectorDraw.Professional.vdFigures.vdText.BackGroundMask"/> is true.
            </summary>
            <returns>A vdPolyline that is used as background. <seealso cref="P:VectorDraw.Professional.vdFigures.vdText.BackGroundMaskOffset"/> , <seealso cref="P:VectorDraw.Professional.vdFigures.vdText.BackGroundMaskColor"/> , <seealso cref="P:VectorDraw.Professional.vdFigures.vdText.BackGroundMask"/></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdText.Explode">
            <summary>
            Explodes the vdText object into a vdPolyHarch object for TTF fonts or into a collection of vdLine objects for SHX fonts.
            </summary>
            <returns>A collection contaning the new created objects from the explode method.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdText.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdText object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdText.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdText object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdText.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements all functionality for the vdText object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdText.BackgroundMaskBorder">
            <summary>
            Get/Set a boolean value that represents if the BackgroundMaskBorder color will be used.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdText.BackGroundMaskBorderPenWidth">
            <summary>
            Get/Set the object's backgroundMaskBorder pen width in drawing units.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdText.BackGroundMaskBorderColor">
            <summary>
            Get/Set the vdColor that the border of the mtext will be drawn.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdText.BackGroundMask">
            <summary>
            Get/Set a boolean value that represents if the backgroundmask color will be used.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdText.BackGroundMaskOffset">
            <summary>
            Get/Set the object's backgroundMask offset.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdText.BackGroundMaskColor">
            <summary>
            Get/Set the vdColor that will fill the box of the mtext.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdText.ExtraOveride">
            <summary>
            Extra draw properties for the text.
            </summary>
            <remarks>
            Overrides the TextStyle Extra properties.
            Default value ExtraOverideFlags.None.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdText.TextLine">
            <summary>
            Specifies if any lines will be drawn with the text using <see cref="T:VectorDraw.Render.grTextStyleExtra.TextLineFlags"/> flag.
            </summary>
            <remarks>
            Default value TextLineFlags.None.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <seealso cref="T:VectorDraw.Render.grTextStyleExtra.TextLineFlags"/>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdText.ObliqueAngle">
            <summary>
            Oblique angle for the text in degrees.
            </summary>
            <remarks>
            Default value 0.
            When setting this value the <see cref="T:VectorDraw.Professional.vdFigures.vdText.ExtraOverideFlags"/> of the text for oblique angle is turned on.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdText.Bold">
            <summary>
            Get/Set a boolean value indicating if the text is bold.
            </summary>
            <remarks>
            Default value false.
            When setting this value the <see cref="T:VectorDraw.Professional.vdFigures.vdText.ExtraOverideFlags"/> of the text for bold is turned on.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdText.Thickness">
             <summary>
             Get/Set the object's thickness in Drawing Units.
             </summary>
             <remarks>
             The thickness is always in the direction of entity's Extrusion Vector.
             Thickness for ttf fonts is supported for all rendermodes except wire2d.
             Default Value 0.0
             Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
             Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <seealso cref="T:VectorDraw.Geometry.Vector"/>
            <seealso cref="P:VectorDraw.Professional.vdFigures.vdText.ExtrusionVector"/>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdText.ExtrusionVector">
            <summary>
            Get/Set the 3D vector extrusion direction for the object.
            </summary>
            <remarks> 
            Default value is (0,0,1) and the object is drawn in the XY plane.
            Is a one-unit length vector relative to World Coordinate System(WCS).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <seealso cref="P:VectorDraw.Professional.vdFigures.vdText.Thickness"/>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdText.TextBox">
            <summary>
            It is the bounding box of the text in Entity Coordinate System(ECS)
            before the ECS Matrix is applied.
            </summary>
            <remarks>
            This is the box of the height with insertion point 0.0,0.0,0.0 ,
            rotation 0 and height equal to the ascent of the textstyle.
            Default value null.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdText.AlignToView">
             <summary>
             A boolean value that defines if the plane of the object is relative to the current view.
             </summary>
             <remarks>
             Default value is False.
             Please note that when AlignToView is true the extrusion vector of the object is relative to Current view coordinative system and not to World as the default behaviour is.
            Also the Rotaion property when AlignToView is true is relative and counterclockwise from axis X of current view coordinative system.
             Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
             Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
             </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdText.AlignToViewSize">
            <summary>
            Get/Set the height of the object in output Device millimeters for positive or hundreds of millimeters for negative.
            </summary>
            <remarks>
            If  value is not 0 then the height of the object will be the same independently of current zoom.
            If value = 0 height is relative to Drawing Units.
            Negative values are in hundreds of millimeters of output device (screen/printer etc). For example, in order the object to have 1.5 millimeters height you must set it to -150 (means 150/100 millimeters).
            Default value = 0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdText.BoundingBox">
            <summary>
            Gets the Bounding Box of the vdText object in WorldCoordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdText.InsertionPoint">
            <summary>
            Get/Set the Insertion point of the text in World Coordinate System(WCS).
            </summary>
            <remarks>
            Default value (0.0,0.0,0.0).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdText.TextString">
            <summary>
            Get/Set the string that the vdText object will draw.
            </summary>
            <remarks>
            Default value "".
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdText.Style">
            <summary>
            Get/Set the vdTextstyle object of the vdText.
            </summary>
            <remarks>
            Default value null or standard when added in a document..
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdText.VerJustify">
            <summary>
            Get/Set the vertical Justification of the text.
            </summary>
            <remarks>
            Default value VdConstVerJust.VdTextVerBaseLine.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdText.HorJustify">
            <summary>
            Get/Set the horizontal justification of the text.
            </summary>
            <remarks>
            Default value VdConstHorJust.VdTextHorLeft.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdText.Flag">
            <summary>
            Get/Set a flag indicating how the letters of the text will be drawn(upsidedown,backward etc...).
            </summary>
            <remarks>
            Default value VdConstTextstyleFlag.LEFTTORIGHT.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdText.Height">
            <summary>
            Get/Set the height of the text in drawing units.
            </summary>
            <remarks>
            Default value 1.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdText.Rotation">
            <summary>
            Get/Set the rotation of the text in radians.
            </summary>
            <remarks>
            Default value 0.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdText.WidthFactor">
            <summary>
            Get/Set a value used to stretch the vdText object by changing it's width.
            </summary>
            <remarks>
            Default value 1.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdText.AlignmentPoint">
            <summary>
            Get/Set a point used to stretch the object when HorJustify is Fit or Aligned.
            </summary>
            <remarks>
            Default value (0.0,0.0,0.0).
            To change this point the vdText must have a textstyle.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdText.ECSMatrix">
            <summary>
            Gets the matrix which is used to transform vectors or points from the 
            object's object coordinate system (OCS) to the World Coordinate System (WCS).
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdText.ExtraOverideFlags">
            <summary>
            Extra draw properties for the text.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdText.ExtraOverideFlags.None">
            <summary>
            None. 
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdText.ExtraOverideFlags.TextLine">
            <summary>
            Draws a line to the text.<see cref="T:VectorDraw.Render.grTextStyleExtra.TextLineFlags"/>
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdText.ExtraOverideFlags.Oblique">
            <summary>
            The text has Oblique angle.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdText.ExtraOverideFlags.Bold">
            <summary>
            The text is bold.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdText.ExtraOverideFlags.TextLine_Oblique">
            <summary>
            The text has oblique angle and line.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdText.ExtraOverideFlags.All">
            <summary>
            All options on.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdText.ExtraOverideFlags.TextLine_Bold">
            <summary>
            The text has a line and is bold.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdText.ExtraOverideFlags.Bold_Oblique">
            <summary>
            The text is bold and has oblique angle.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdAttrib.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes a new instance of the vdAttrib object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdAttrib.#ctor">
            <summary>
            Initializes a new instance of the vdAttrib object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdAttrib.OnDocumentSelected(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            This method is called when the object is inserted in a Document for the first time.
            </summary>
            <param name="document">The document where the object is inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdAttrib.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdAttrib.InitializeProperties">
            <summary>
            Resets the properties of the vdAttrib object to the Default values.
            </summary>
            <remarks>
            Default values:InVisibleMode = true,IsConstant = false,ValueString = "Value",TagString = "Tag".
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdAttrib.ToString">
            <summary>
            Gets a System.String that represents the type of the vdAttrib Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdAttrib.IsVisible">
            <summary>
            Indicates if the object can be drawn.
            </summary>
            <returns>True if the object can be drawn.</returns>
            <remarks> An object is invisible when is Deleted,has Layer null,Layer is frozen,
            <see cref="F:VectorDraw.Professional.vdPrimaries.vdFigure.VisibilityEnum.Invisible"/>,object's Bounding Box is empty.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdAttrib.CheckInvisibleMode">
            <summary>
            Checks tyhe visibility of the attribute taking into consideration the Document's <seealso cref="P:VectorDraw.Render.vdRenderGlobalProperties.AttributesMode"/>
            </summary>
            <returns>True if the attribute is visible.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdAttrib.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdAttrib object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdAttrib.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdAttrib object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdAttrib.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements the vdAttrib object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdAttrib.TextString">
            <summary>
            Gets the Value string of the vdAttrib object.
            </summary>
            <remarks> This is used internally to draw the vdattrib as vdText object.Default value "Value".</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdAttrib.IsConstant">
            <summary>
            Get/Set a value indicating if the Attribute Definition of the object is constant.
            </summary>
            <remarks>
            If this value is true the vdAttrib object keeps the value,position indicated
            from the attribute's definition of the block.Default value false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <seealso cref="P:VectorDraw.Professional.vdFigures.vdAttribDef.IsConstant"/>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdAttrib.IsLockedPosition">
            <summary>
            Get/Set a value indicating if the Attribute Definition of the object has Locked Position.
            </summary>
            <remarks>
            If this value is true the vdAttrib object does not show it's grip in any <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.GripBlock"/> value.
            Default value is true.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <seealso cref="P:VectorDraw.Professional.vdFigures.vdAttribDef.IsLockedPosition"/>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdAttrib.InVisibleMode">
            <summary>
            Get/Set the visibility property of the vdAttrib object.
            </summary>
            <remarks>Default value false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdAttrib.ValueString">
            <summary>
            Get/Set the default value string of the vdAttrib object.
            </summary>
            <remarks>
            Default value null.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdAttrib.TagString">
            <summary>
            Get/Set the string which identifies each occurrence of the attribute.
            </summary>
            <remarks>
            Default value "Tag".
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.IWrapperObjectPtr">
            <summary>
            Interfafe which interaly used to communicate between VectorDraw Wrapper (5x) objects and new VectorDraw (6x) objects. 
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.IWrapperObjectPtr.objectptr">
            <summary>
            A COM pointer of the object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.IWrapperObjectPtr.WrapperObject">
            <summary>
            The new VectorDraw (6x) object
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.frmShowXProperties">
            <summary>
            Implements a dialog for showing-editing Xproperties.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmShowXProperties.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmShowXProperties.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmShowXProperties.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmShowXProperties.listXprops">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmShowXProperties.butCancel">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmShowXProperties.butOK">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmShowXProperties.butAdd">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmShowXProperties.butRemove">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmShowXProperties.butEdit">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmShowXProperties.formToolTip">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmShowXProperties.#ctor">
            <summary>
            Initializes the dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmShowXProperties.InitializeExtra(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Professional.vdCollections.vdXProperties)">
            <summary>
            Initializes the show Xproperties dialog.
            </summary>
            <param name="Doc">The Document of the object that has the Xproperties.</param>
            <param name="props">The xproperties to be edited.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmShowXProperties.Show(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Professional.vdCollections.vdXProperties)">
            <summary>
            Used to show the dialog.
            </summary>
            <param name="Doc">The Document of the object that has the Xproperties.</param>
            <param name="props">The xproperties to be edited.</param>
            <returns>A DialogResult indicating the user's action</returns>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.frmShowXProperties.vdFormSize">
            <summary>
            Get/Set the size of the form used when loading the form. This value is stored when the form is closed in order to be used the next time the form is loaded. 
            </summary>
            <remarks>The default value is -1,-1.</remarks>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.frmPenAsigment">
            <summary>
            Implements a dialog used to select pen width for the print manager..
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPenAsigment.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmPenAsigment.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmPenAsigment.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPenAsigment.butCancel">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPenAsigment.butOk">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPenAsigment.listColors">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPenAsigment.picColor">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPenAsigment.label1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPenAsigment.label2">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPenAsigment.textWidth">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPenAsigment.label3">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPenAsigment.label4">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPenAsigment.label5">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPenAsigment.label6">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPenAsigment.groupBox1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPenAsigment.formToolTip">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmPenAsigment.#ctor">
            <summary>
            Initializes the dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmPenAsigment.InitializeExtra(VectorDraw.Professional.vdObjects.vdPrint)">
            <summary>
            Initializes the dialog.
            </summary>
            <param name="printer">The printer object used to obtain the palette.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmPenAsigment.Show(VectorDraw.Professional.vdObjects.vdPrint,System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Used to show the dialog.
            </summary>
            <param name="printer">The vdPrint object.</param>
            <param name="parent">The parent control used to show the dialog.</param>
            <param name="isInches">A boolean value that represents.</param>
            <returns>A DialogResult indicating the user's action.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmPenAsigment.Show(VectorDraw.Professional.vdObjects.vdPrint,System.Windows.Forms.Control)">
            <summary>
            Used to show the dialog.
            </summary>
            <param name="printer">The vdPrint object.</param>
            <param name="parent">The parent control used to show the dialog.</param>
            <returns>A DialogResult indicating the user's action.</returns>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.GetHatchPatternsDialog">
            <summary>
            Implements the Hatch Patterns dialog.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.GetHatchPatternsDialog.finalSelected">
            <summary>
            This is used to get the selected hatch pattern.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.GetHatchPatternsDialog.#ctor">
            <summary>
            Initializes the Hatch Patterns dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.GetHatchPatternsDialog.InitializeExtra(VectorDraw.Professional.vdObjects.vdDocument,System.Windows.Forms.Control,VectorDraw.Professional.vdPrimaries.vdHatchPattern)">
            <summary>
            Sets some necessary objects in order to show the dialog.
            </summary>
            <param name="Document">The Document where the patterns are.</param>
            <param name="parent">The parent control where the Document belongs.</param>
            <param name="Selected">This is the default pattern which is selected when the dialog opens.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.GetHatchPatternsDialog.Show(VectorDraw.Professional.vdObjects.vdDocument,System.Windows.Forms.Control,VectorDraw.Professional.vdPrimaries.vdHatchPattern)">
            <summary>
            Displayes the dialog.
            </summary>
            <returns>Returns a GetHatchPatternsDialog in order to obtain any necessary information.</returns>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.GetHatchPatternsDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.GetHatchPatternsDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.GetHatchPatternsDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.GetHatchPatternsDialog.Cancel">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.GetHatchPatternsDialog.Ok">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.GetHatchPatternsDialog.lsthatchpatterns">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.GetHatchPatternsDialog.htchPttrns">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.GetHatchPatternsDialog.formToolTip">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.GetHatchPatternsDialog.vdFormSize">
            <summary>
            Get/Set the size of the form used when loading the form. This value is stored when the form is closed in order to be used the next time the form is loaded. 
            </summary>
            <remarks>The default value is -1,-1.</remarks>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.vdInternalListView">
            <summary>
            This is an overriden Listview which overrides the DoubleBuffered used for better display.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.vdInternalListView.DoubleBuffered">
            <summary>
            Internally used for better display.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.frmEditPointsDialog">
            <summary>
            Implements a dialog to edit gPoints.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmEditPointsDialog.#ctor">
            <summary>
            Initializes the dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmEditPointsDialog.InitializeExtra(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Geometry.gPoints,System.Windows.Forms.Control)">
            <summary>
            Initializes the dialog in order to edit gPoints.
            </summary>
            <param name="Doc">The Document where the points belong to.</param>
            <param name="points">The points that will be edited.</param>
            <param name="ParentControl">The action Control where the control is opened.</param>
            <remarks >It is recomended to use the static methods in order to use this dialog.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmEditPointsDialog.InitializeExtra(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Geometry.gPoints,System.Windows.Forms.Control,VectorDraw.Professional.vdPrimaries.vdFigure)">
            <summary>
            Initializes the dialog in order to edit gPoints.
            </summary>
            <param name="Doc">The Document where the points belong to.</param>
            <param name="points">The points that will be edited.</param>
            <param name="ParentControl">The action Control where the control is opened.</param>
            <param name="fig">The figure that called the dialog , used in order to pass a polyline so a small cross is drawn at the active vertex.</param>
            <remarks >It is recomended to use the static methods in order to use this dialog.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmEditPointsDialog.InitializeExtra(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Geometry.Vertexes,System.Windows.Forms.Control,VectorDraw.Professional.vdPrimaries.vdFigure)">
            <summary>
            Initializes the dialog in order to edit Vertexes.
            </summary>
            <param name="Doc">The Document where the Vertexes belong to.</param>
            <param name="points">The Vertexes that will be edited.</param>
            <param name="ParentControl">Action Control where the dialog opens.</param>
            <param name="fig">The figure that called the dialog , used in order to pass a polyline so a small cross is drawn at the active vertex.</param>
            <remarks >It is recomended to use the static methods in order to use this dialog.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmEditPointsDialog.Show(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Geometry.gPoints,System.Windows.Forms.Control,VectorDraw.Professional.vdPrimaries.vdFigure)">
            <summary>
            A static method used to show the dialog.
            </summary>
            <param name="doc">The Document where the gPoints belong to.</param>
            <param name="points">The gPoints that will be edited.</param>
            <param name="ParentControl">The Document's control </param>
            <param name="fig">The Object where the points belong to.</param>
            <returns>Returns the edited gPoints.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmEditPointsDialog.Show(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Geometry.gPoints,System.Windows.Forms.Control,VectorDraw.Professional.vdPrimaries.vdFigure,System.Windows.Forms.DialogResult@)">
            <summary>
            A static method used to show the dialog.
            </summary>
            <param name="doc">The Document where the gPoints belong to.</param>
            <param name="points">The gPoints that will be edited.</param>
            <param name="ParentControl">The Document's control </param>
            <param name="fig">The Object where the points belong to.</param>
            <param name="result">Returns DialogResult.Cancel if user press Cancel button, otherwise returns DialogResult.OK.</param>
            <returns>Returns the edited gPoints.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmEditPointsDialog.Show(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Geometry.Vertexes,System.Windows.Forms.Control,VectorDraw.Professional.vdPrimaries.vdFigure)">
            <summary>
            A static method used to show the dialog.
            </summary>
            <param name="doc">The Document where the Vertexes belong to.</param>
            <param name="points">The Vertexes that will be edited.</param>
            <param name="ParentControl">The Document's control </param>
            <param name="fig">The Object where the points belong to.</param>
            <returns>Returns the edited Vertexes.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmEditPointsDialog.Show(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Geometry.Vertexes,System.Windows.Forms.Control,VectorDraw.Professional.vdPrimaries.vdFigure,System.Windows.Forms.DialogResult@)">
            <summary>
            A static method used to show the dialog.
            </summary>
            <param name="doc">The Document where the Vertexes belong to.</param>
            <param name="points">The Vertexes that will be edited.</param>
            <param name="ParentControl">The Document's control </param>
            <param name="fig">The Object where the points belong to.</param>
            <param name="result">Returns DialogResult.Cancel if user press Cancel button, otherwise returns DialogResult.OK.</param>
            <returns>Returns the edited Vertexes.</returns>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmEditPointsDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmEditPointsDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.textNumPoints">
            <summary>
            Used for distribution of the forms for globalization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.ButLeft">
            <summary>
            Used for distribution of the forms for globalization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.ButRight">
            <summary>
            Used for distribution of the forms for globalization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.textX">
            <summary>
            Used for distribution of the forms for globalization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.textY">
            <summary>
            Used for distribution of the forms for globalization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.textZ">
            <summary>
            Used for distribution of the forms for globalization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.label1">
            <summary>
            Used for distribution of the forms for globalization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.label2">
            <summary>
            Used for distribution of the forms for globalization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.label3">
            <summary>
            Used for distribution of the forms for globalization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.butY">
            <summary>
            Used for distribution of the forms for globalization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.butCancel">
            <summary>
            Used for distribution of the forms for globalization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.textbulge">
            <summary>
            Used for distribution of the forms for globalization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.labBulge">
            <summary>
            Used for distribution of the forms for globalization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.butReset">
            <summary>
            Used for distribution of the forms for globalization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.formToolTip">
            <summary>
            Used for distribution of the forms for globalization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.butRemoveVertex">
            <summary>
            Used for distribution of the forms for globalization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.textBoxPanel">
            <summary>
            Used for distribution of the forms for globalization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.DataGridPanel">
            <summary>
            Used for distribution of the forms for globalization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.GridPoints">
            <summary>
            Used for distribution of the forms for globalization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.buttonTable">
            <summary>
            Used for distribution of the forms for globalization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.buttonAddVertex">
            <summary>
            Used for distribution of the forms for globalization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.label4">
            <summary>
            Used for distribution of the forms for globalization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.label5">
            <summary>
            Used for distribution of the forms for globalization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.butBulgeView">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.btnCancelAll">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.textStartWidth">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.labEndWidth">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.labStartWidth">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.textEndWidth">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.id">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.x">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.y">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.z">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.Bulge">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.startwidth">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.endwidth">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.frmEditPointsDialog.ShowExpanded">
            <summary>
            If set to true the dialog will be first displayed with the points table visible.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.frmEditPointsDialog.BulgeView">
            <summary>
            Get/Set a value that represents the way bulges are displayed.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.frmEditPointsDialog.CreateParams">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.frmEditPointsDialog.BulgeViewEnum">
            <summary>
            Represents how bulge will be shown in the point dialog.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.BulgeViewEnum.Bulge">
            <summary>
            The bulge is shown as it is.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.BulgeViewEnum.Altitude">
            <summary>
            The bulge is converted to the Altitude of the Arc.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmEditPointsDialog.BulgeViewEnum.IncludedAngle">
            <summary>
            The bulge is converted to the included angle of the arc.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.IvdFillet">
            <summary>
            Provides the functionality for the objects fillet command.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.IvdFillet.Fillet(System.Double,VectorDraw.Professional.vdFigures.vdCurve@,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdFigures.vdArc@)">
            <summary>
            This and withObject must be in the same plane
            </summary>
            <param name="Radius"></param>
            <param name="withObject"></param>
            <param name="pointOnThis">in WCS and in the same plane with this object</param>
            <param name="pointOnWithObject">in WCS in the same plane with withObject</param>
            <param name="arc"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdLayersFilterClass">
            <summary>
            Implements the vdLayersFilter object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersFilterClass.#ctor">
            <summary>
            Initializes the vdLayersFilter object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersFilterClass.IsLayerAcceptable(VectorDraw.Professional.vdPrimaries.vdLayer)">
            <summary>
            Checks if the layer is acceptable from this filter.
            </summary>
            <param name="layer">The layer to be checked</param>
            <returns>True if the layer is acceptible.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersFilterClass.IsFilterEmpty">
            <summary>
            Checks all properties of the filter if they are empty ("").
            </summary>
            <returns>True if all properties of the filter are all empty ("").</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayersFilterClass.Name">
            <summary>
            Get/Set the name of the layers to find.
            </summary>
            <remarks>
            Default value "".
            Check the Search layers form in order to see the format of this property.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayersFilterClass.Frozen">
            <summary>
            Get/Set the frozen value to find.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayersFilterClass.On">
            <summary>
            Get/Set the On value to find.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayersFilterClass.Lock">
            <summary>
            Get/Set the frozen value to find.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayersFilterClass.Plot">
            <summary>
            Get/Set the Plot value to find.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayersFilterClass.LineWeight">
            <summary>
            Get/Set the line weight of the layer to find.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayersFilterClass.LineType">
            <summary>
            Get/Set the Linetype of the Layers to find.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayersFilterClass.PenColor">
            <summary>
            Get/Set the pencolor of the layer to find.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdLayersFilter">
            <summary>
            Implements the vdLayersFilter object which is a collection of vdLayersFilterClass.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersFilter.#ctor">
            <summary>
            Initializes the vdLayersFilter collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersFilter.#ctor(System.String)">
            <summary>
            Initializes the vdLayersFilter collection object with the passed name.
            </summary>
            <param name="name">The name of the object.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersFilter.#ctor(System.String,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes the vdLayersFilter collection object with the passed name.
            </summary>
            <param name="name">The name of the object.</param>
            <param name="Document">The Document required to find the document's layers.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersFilter.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersFilter.RemoveAll">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersFilter.AddItem(VectorDraw.Professional.vdPrimaries.vdLayersFilterClass)">
            <summary>
            Adds a vdLayersFilterClass object to the group.
            </summary>
            <param name="value">The vdLayersFilterClass object to be added to the group.</param>
            <returns>True if the object was succesfully added to the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersFilter.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersFilter.RemoveAt(System.Int32)">
            <summary>
            Removes an object from the specified index of the group.
            </summary>
            <param name="Index">The zero based index.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersFilter.RemoveItem(VectorDraw.Professional.vdPrimaries.vdLayersFilterClass)">
            <summary>
            Removes a specific vdLayersFilterClass object from the group.
            </summary>
            <param name="Object">The vdLayersFilterClass object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersFilter.FindItem(VectorDraw.Professional.vdPrimaries.vdLayersFilterClass)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">A vdLayersFilterClass object to be checked if it exists in the collection</param>
            <returns>True if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersFilter.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matching properties between vdLayersGroup objects is not supported.
            </summary>
            <param name="_from"></param>
            <param name="thisdocument"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersFilter.InitializeProperties">
            <summary>
            Resets the properties of the vdLayersGroup object to the Default values.
            </summary>
            <remarks>
            Default values:Remove all Entities. Name = "Unonymus".
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersFilter.ToString">
            <summary>
            Gets a System.String description of the vdLayersGroup Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersFilter.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersFilter.GetFilteredLayers">
            <summary>
            Get a collection of layers that are acceptable from this collection of filters.
            </summary>
            <returns>A collection of acceptable layers.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersFilter.FromString(System.String)">
            <summary>
            Calculates the properties of the filter from a DXF filter string format.
            </summary>
            <param name="str">The DXF filter format.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersFilter.ToDXFString">
            <summary>
            Get a string that represents the properties of the filter in DXF format.
            </summary>
            <returns>Returns a string that represents the properties of the filter in DXF format.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersFilter.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdLayersGroup object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersFilter.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdLayersGroup object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayersFilter.FilterName">
            <summary>
            Get/Set the name of the vdLayersGroup object
            </summary>
            <remarks>
            Default value : "Unonymus".
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <exception cref="T:VectorDraw.Professional.Exceptions.InvalidTableNameException"></exception>
            <exception cref="T:VectorDraw.Professional.Exceptions.CannotRenameException">Thrown when cannot rename an object.</exception>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayersFilter.Count">
            <summary>
            Get the number of objects of the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayersFilter.Item(System.Int32)">
            <summary>
            Gets an item from the collection from a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The vdLayersFilterClass object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayersFilter.GroupOwner">
            <summary>
            Get/Set the vdLayersGroup owner.This owner can be another vdLayersGroup or null.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.frmLayoutPrintManager">
            <summary>
            Implements the Layout Printer dialog.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmLayoutPrintManager.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmLayoutPrintManager.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmLayoutPrintManager.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmLayoutPrintManager.butExit">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmLayoutPrintManager.butLeft">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmLayoutPrintManager.butRight">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmLayoutPrintManager.comboLayouts">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmLayoutPrintManager.groupBox1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmLayoutPrintManager.panel1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmLayoutPrintManager.butPrint">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmLayoutPrintManager.radioAll">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmLayoutPrintManager.radioRange">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmLayoutPrintManager.textRange">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmLayoutPrintManager.comboPrinters">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmLayoutPrintManager.label1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmLayoutPrintManager.checkAllInOne">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmLayoutPrintManager.groupBox2">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmLayoutPrintManager.formToolTip">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmLayoutPrintManager.#ctor">
            <summary>
            Initializes the form, It is strongly recomended to use the static Show method to use the form.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmLayoutPrintManager.Show(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Used to show the dialog.
            </summary>
            <param name="doc">The vdDocument object where the printing process takes place.</param>
            <param name="extends">If true then all layouts are loaded with PrintExtends including the Model.</param>
            <param name="scaleToFit">If True then all layouts are loaded with PrintScaleToFit including the Model.</param>
            <param name="partialpreview">If True then all layouts are loaded with their preview in full.</param>
            <param name="range">Set the range manually by default OR leave it empty for All printout.</param>
            <returns>A DialogResult indicating the user's action.</returns>
            <remarks>If the user of this Form has preprepared the printer property for each layout then the boolean values passed as parameters are not required to be true. </remarks>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.FrmImageEdit">
            <summary>
            Implements the Edit Image dialog.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.FrmImageEdit.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.FrmImageEdit.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.pictureBox1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.butExit">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.butOk">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.checkGrayScale">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.labBrightness">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.trackBrightness">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.labContrast">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.trackContrast">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.checkSepia">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.checkInvert">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.groupFlip">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.butFlipVertical">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.butFlipHorizontal">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.groupRotate">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.butRotate180">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.butRotateCounterClockWise">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.butRotate90clockwize">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.numericUpDownBrightness">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.numericUpDownContrast">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.butResetBrightness">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.butResetContrast">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.groupColors">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.groupAdgustments">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.trackColorsRed">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.numericUpDownColorsRed">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.labColorsRed">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.numericUpDownColorsGreen">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.labColorsGreen">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.trackColorsGreen">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.numericUpDownColorsBlue">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.labColorsBlue">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.trackColorsBlue">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.numericUpDownGammaRed">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.labGammaRed">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.trackGammaRed">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.numericUpDownGammaBlue">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.labGammaBlue">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.trackGammaBlue">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.numericUpDownGammaGreen">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.labGammaGreen">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.trackGammaGreen">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.butExport">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.splitContainer1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.FrmImageEdit.formToolTip">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.FrmImageEdit.#ctor">
            <summary>
            Initializes the dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.FrmImageEdit.Show(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Professional.vdPrimaries.vdImageDef)">
            <summary>
            Used to show the dialog.
            </summary>
            <param name="doc">The Document object of the drawing.</param>
            <param name="image">The vdImageDef object to be edited.</param>
            <returns>A DialogResult showing the user's action.</returns>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.FrmImageEdit.vdFormSize">
            <summary>
            Get/Set the size of the form used when loading the form. This value is stored when the form is closed in order to be used the next time the form is loaded. 
            </summary>
            <remarks>The default value is -1,-1.</remarks>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.frmGroups">
            <summary>
            Implements the vdGroups manager.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmGroups.#ctor">
            <summary>
            Initializes the dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmGroups.InitializeForm(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes the Document used by the form. Should be called before showing the dialog if the Show method is not used.
            </summary>
            <param name="Document">The Document to be used by the form.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmGroups.Show(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Shows the dialog.
            </summary>
            <param name="Document">The Document object where the collection is.</param>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGroups.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmGroups.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmGroups.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGroups.butClose">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGroups.groupCreate">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGroups.labDescription">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGroups.labName">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGroups.textDescription">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGroups.textName">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGroups.butCreate">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGroups.checkSelectable">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGroups.listGroups">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGroups.butEdit">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGroups.butDelete">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGroups.butAdd">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGroups.IgnoreCheck">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGroups.formToolTip">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.frmGroups.vdFormSize">
            <summary>
            Get/Set the size of the form used when loading the form. This value is stored when the form is closed in order to be used the next time the form is loaded. 
            </summary>
            <remarks>The default value is -1,-1.</remarks>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.frmCreateLayersFilter">
            <summary>
            This form is being used to add a new layer's filter.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmCreateLayersFilter.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmCreateLayersFilter.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmCreateLayersFilter.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmCreateLayersFilter.labFilterName">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmCreateLayersFilter.textName">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmCreateLayersFilter.listFilters">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmCreateLayersFilter.labFilterdefinition">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmCreateLayersFilter.Ok">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmCreateLayersFilter.Cancel">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmCreateLayersFilter.labFilterPreview">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmCreateLayersFilter.lstFilterPreview">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmCreateLayersFilter.comboOn">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmCreateLayersFilter.comboFrozen">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmCreateLayersFilter.comboLock">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmCreateLayersFilter.txtName">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmCreateLayersFilter.comboPlot">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmCreateLayersFilter.#ctor">
            <summary>
            Initialization of the form.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmCreateLayersFilter.Show(VectorDraw.Professional.vdObjects.vdDocument,System.Windows.Forms.IWin32Window,System.Windows.Forms.ImageList,VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdPrimaries.vdLayersFilter)">
            <summary>
            Shows the dialog.
            </summary>
            <param name="Document">The Document object where the collection is.</param>
            <param name="parent">The parent form where this form will be centered.</param>
            <param name="images">The images collection from the frmLayersDialog in order to show layer's images.</param>
            <param name="group">The vdLayersGroup where the filter is going to be added , can be null..</param>
            <param name="filter">A vdLayersFilter object to be edited or Null for a new one.</param>
            <returns>A DialogResult indicating the user's action.</returns>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdArcAlignedText">
            <summary>
            Represents a text that is aligned to an arc.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.IvdReferenceObj">
            <summary>
            This interface is for objects that have reference objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.IvdReferenceObj.ShouldBeTransformed(VectorDraw.Professional.vdCollections.vdSelection,System.Boolean)">
            <summary>
            This method is used in order to determine what should happen when a transformBy occurs in a collection.
            </summary>
            <param name="selset">The selection of entities that is going to be transformed.</param>
            <param name="Disconnect">A boolean value representing if the object should disconnect from it's reference , referenceobj = null</param>
            <returns>True if the transform should occur or false if not.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.IvdReferenceObj.param1">
            <summary>
            A parameter object used to store information about the reference object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.IvdReferenceObj.ReferenceObj">
            <summary>
            The reference Object of the figure.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArcAlignedText.#ctor">
            <summary>
            Initializes a new instance of the vdArcAlignedText object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArcAlignedText.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes a new instance of the vdArcAlignedText object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the text will be used.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArcAlignedText.#ctor(VectorDraw.Professional.vdObjects.vdDocument,System.String,System.Double,VectorDraw.Geometry.gPoint,System.Double)">
            <summary>
            Initializes a new instance of the vdArcAlignedText object using the passed parameters.
            </summary>
            <param name="doc">The Document where the text will be used.</param>
            <param name="textstring">The string that will be shown.</param>
            <param name="height">The height of the text.</param>
            <param name="center">Center of the arc that the text will be placed.</param>
            <param name="radius">The radius of the arc that the text will be placed.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArcAlignedText.#ctor(VectorDraw.Professional.vdObjects.vdDocument,System.String,System.Double,VectorDraw.Geometry.gPoint,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the vdArcAlignedText object using the passed parameters.
            </summary>
            <param name="doc">The Document where the text will be used.</param>
            <param name="textstring">The string that will be shown.</param>
            <param name="height">The height of the text.</param>
            <param name="center">Center of the arc that the text will be placed.</param>
            <param name="radius">The radius of the arc that the text will be placed.</param>
            <param name="startangle">The start angle of the arc that the text will be placed.</param>
            <param name="endangle">The end angle of the arc that the text will be placed.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArcAlignedText.Invalidate">
            <summary>
            Invalidates the object's Bounding Box and causes the control to be redrawn in this region.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArcAlignedText.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.
            User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArcAlignedText.InitializeProperties">
            <summary>
            Resets the properties of the vdArcAlignedText object to the Default values.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArcAlignedText.Explode">
            <summary>
            Explodes the vdArcAlignedText object into many vdText objects.
            </summary>
            <returns>A collection contaning the new created objects from the explode method.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArcAlignedText.GetGripPoints">
            <summary>
            A function returning the grip points of the object.
            </summary>
            <returns>Returns a new instance of gpoints object containing the grip points of the object.</returns>
            <remarks>
            The returning points are in World coordinate system(WCS).
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetGripPoints"/> event.
            When implementing this method the <see cref="M:VectorDraw.Professional.vdFigures.vdArcAlignedText.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)"/> must be also override according to the new selected grip points.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArcAlignedText.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)">
            <summary>
            This function is intended to be called during a grip edit of the object. 
            </summary>
            <param name="Indexes">Represents a zero based array of the grip indexes that will be moved.</param>
            <param name="dx">The dx distance that the grip is moved.</param>
            <param name="dy">The dy distance that the grip is moved.</param>
            <param name="dz">The dz distance that the grip is moved.</param>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdArcAlignedText.GetGripPoints"/>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnMoveGripPointsAt"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArcAlignedText.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArcAlignedText.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArcAlignedText.GetDisplayString">
            <summary>
            Gets the string that is displayed.
            </summary>
            <returns>Returns a string object representing the text that is displayed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArcAlignedText.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Called in order to draw the object in a specified vdRender object.
            </summary>
            <param name="render">The vdRender object in which the object will be drawn.</param>
            <returns><see cref="T:VectorDraw.Render.vdRender.DrawStatus"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArcAlignedText.ToString">
            <summary>
            Gets a System.String that represents the type of the vdArcAlignedText Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArcAlignedText.SetPropertiesFromArc(VectorDraw.Professional.vdFigures.vdArc)">
            <summary>
            Sets the properties of this vdArcAlignedText object from the passed arc.
            </summary>
            <param name="arc">A vdArc object to get the properties from.</param>
            <remarks>The properties that are being copied are CenterPoint , Radius , StartAngle , EndAngle.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArcAlignedText.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdArcAlignedText object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArcAlignedText.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdArcAlignedText object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArcAlignedText.ShouldBeTransformed(VectorDraw.Professional.vdCollections.vdSelection,System.Boolean)">
            <summary>
            This method is used in order to determine what should happen when a transformBy occurs in a collection.
            </summary>
            <param name="selset">The selection of entities that is going to be transformed.</param>
            <param name="Disconnect">A boolean value representing if the object should disconnect from it's reference , referenceobj = null</param>
            <returns>True if the transform should occur or false if not.</returns>
            <remarks>
            This method is used for example in the iteration of the CmdScale, when the user selects entities to scale then this method will return false if the reference object is also chosen in the selection so the Dimension is not transformed because it will apply the changes when the reference object is scaled.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArcAlignedText.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Represents a text that is aligned to an arc.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArcAlignedText.AlignToView">
             <summary>
             A boolean value that defines if the plane of the object is relative to the current view.
             </summary>
             <remarks>
             Default value is False.
             Please note that when AlignToView is true the extrusion vector of the object is relative to Current view coordinative system and not to World as the default behaviour is.
            Also the Rotaion property when AlignToView is true is relative and counterclockwise from axis X of current view coordinative system.
             Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
             Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
             </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArcAlignedText.AlignToViewSize">
            <summary>
            Get/Set the height of the object in output Device millimeters for positive or hundreds of millimeters for negative.
            </summary>
            <remarks>
            If  value is not 0 then the height of the object will be the same independently of current zoom.
            If value = 0 height is relative to Drawing Units.
            Negative values are in hundreds of millimeters of output device (screen/printer etc). For example, in order the object to have 1.5 millimeters height you must set it to -150 (means 150/100 millimeters).
            Default value = 0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArcAlignedText.ExtrusionVector">
            <summary>
            Get/Set the 3D vector extrusion direction for the object.
            </summary>
            <remarks> 
            Default value is (0,0,1) and the object is drawn in the XY plane.
            Is a one-unit length vector relative to World Coordinate System(WCS).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <seealso cref="P:VectorDraw.Professional.vdFigures.vdArcAlignedText.Thickness"/>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArcAlignedText.WidthFactor">
            <summary>
            Get/Set a value used to stretch the vdArcAlignedText object by changing it's width.
            </summary>
            <remarks>
            Default value 1.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArcAlignedText.Height">
            <summary>
            Get/Set the height of the text in drawing units.
            </summary>
            <remarks>
            Default value 1.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArcAlignedText.Style">
            <summary>
            Get/Set the vdTextstyle object of the vdArcAlignedText.
            </summary>
            <remarks>
            Default value null or standard when added in a document.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArcAlignedText.Thickness">
             <summary>
             Get/Set the object's thickness in Drawing Units.
             </summary>
             <remarks>
             The thickness is always in the direction of entity's Extrusion Vector.
             Thickness for ttf fonts is supported for all rendermodes except wire2d.
             Default Value 0.0
             Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
             Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <seealso cref="T:VectorDraw.Geometry.Vector"/>
            <seealso cref="P:VectorDraw.Professional.vdFigures.vdArcAlignedText.ExtrusionVector"/>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArcAlignedText.TextString">
            <summary>
            Get/Set the string that the vdArcAlignedText object will draw.
            </summary>
            <remarks>
            Default value "".
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArcAlignedText.Bold">
            <summary>
            Get/Set a boolean value indicating if the text is bold.
            </summary>
            <remarks>
            Default value false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArcAlignedText.ObliqueAngle">
            <summary>
            Oblique angle for the text in degrees.
            </summary>
            <remarks>
            Default value 0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArcAlignedText.TextLine">
            <summary>
            Specifies if any lines will be drawn with the text using <see cref="T:VectorDraw.Render.grTextStyleExtra.TextLineFlags"/> flag.
            </summary>
            <remarks>
            Default value TextLineFlags.None.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <seealso cref="T:VectorDraw.Render.grTextStyleExtra.TextLineFlags"/>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArcAlignedText.ArcOffset">
            <summary>
            Offset distance for the text from the text's arc.
            </summary>
            <remarks>
            Default value 0.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArcAlignedText.LeftOffset">
            <summary>
            Offset distance for the beginning of the text.
            </summary>
            <remarks>
            Default value 0.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArcAlignedText.RightOffset">
            <summary>
            Offset distance for the end of the text.
            </summary>
            <remarks>
            Default value 0.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArcAlignedText.Center">
            <summary>
            Get/Set the Center of the vdArcAlignedText object.
            </summary>
            <remarks>
            Default value (0.0,0.0,0.0).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArcAlignedText.Radius">
            <summary>
            Get/Set the radius of the vdArcAlignedText object.
            </summary>
            <remarks>
            Default value 0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArcAlignedText.EndAngle">
            <summary>
            Get/Set the end angle of the vdArcAlignedText object.
            </summary>
            <remarks>
            Default value 0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArcAlignedText.StartAngle">
            <summary>
            Get/Set the start angle of the vdArcAlignedText object.
            </summary>
            <remarks>
            Default value 0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArcAlignedText.IsClockWise">
            <summary>
            Get/Set a value that represents if the text is drawn reversed regarding the arc's orientation.
            </summary>
            <remarks>Default value is false.False means that the text will start from the start angle to the end angle of the arc.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArcAlignedText.Orientation">
            <summary>
            Specifies the orientation that the arc will be drawn.
            </summary>
            <remarks>Default value is Left.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArcAlignedText.Side">
            <summary>
            Specifies the side that the arc will be drawn , above or below the arc.
            </summary>
            <remarks>Default value is Above.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArcAlignedText.BoundingBox">
            <summary>
            Gets the Bounding Box of the vdArcAlignedText object in WorldCoordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArcAlignedText.ECSMatrix">
            <summary>
            Gets the matrix which is used to transform vectors or points from the 
            object's object coordinate system (OCS) to the World Coordinate System (WCS).
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArcAlignedText.ReferenceObj">
            <summary>
            The reference Object of the vdDimension
            </summary>
            <remarks>
            This property is internally used currently.
            It supports vdCircle and vdArc objects in order to associate a Radial or Diameter Dimension with these objects.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArcAlignedText.param1">
            <summary>
            This is not used for this object
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdArcAlignedText.OrientationEnum">
            <summary>
            Determines the orientation of the vdArcAlignedText object.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdArcAlignedText.OrientationEnum.Left">
            <summary>
            Draws the text with orientation on the endangle of the arc.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdArcAlignedText.OrientationEnum.Right">
            <summary>
            Draws the text with orientation on the startangle of the arc.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdArcAlignedText.OrientationEnum.Center">
            <summary>
            Draws the text with orientation on the center of the arc.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdArcAlignedText.OrientationEnum.FitToArc">
            <summary>
            Draws the text expanding the text to fit all the arc.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdArcAlignedText.SideEnum">
            <summary>
            Determines side that the arc will be drawn regarding the arc.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdArcAlignedText.SideEnum.Above">
            <summary>
            Draws the text with orientation on the endangle of the arc.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdArcAlignedText.SideEnum.Below">
            <summary>
            Draws the text with orientation on the startangle of the arc.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.vdLayersFilters">
            <summary>
            A collection object of vdLayersFilter objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersFilters.#ctor">
            <summary>
            Initializes the vdLayersFilters collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersFilters.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersFilters.AddItem(VectorDraw.Professional.vdPrimaries.vdLayersFilter)">
            <summary>
            Adds a vdLayersFilter object to the collection.
            </summary>
            <param name="value">The vdLayersFilter object to be added to the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersFilters.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersFilters.Add(System.String)">
            <summary>
            Creates and adds a vdLayersFilter object to the collection with the specified name.
            </summary>
            <param name="Name">The name of the inserted vdGroup object.</param>
            <returns>Returns the added vdLayersFilter object.</returns>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAddItem"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterAddItem"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersFilters.FindName(System.String)">
            <summary>
            Finds a vdLayersFilter object with the specified name in the collection.
            </summary>
            <param name="Name">The name to search in the collection.</param>
            <returns>The found object else returns null if a vdLayersFilter does not exist with this name.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersFilters.FindItem(VectorDraw.Professional.vdPrimaries.vdLayersFilter)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">A vdLayersFilter object to be checked if it exists in the collection</param>
            <returns>True if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersFilters.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersFilters.RemoveItem(VectorDraw.Professional.vdPrimaries.vdLayersFilter)">
            <summary>
            Removes a specific vdLayersFilter object from the collection.
            </summary>
            <param name="Object">The vdLayersFilter object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersFilters.getUniqueTableName(System.String)">
            <summary>
            Creates a unique string for use as name to a vdLayersFilter object.
            </summary>
            <param name="prefix">A prefix string that will be present to the unique name.</param>
            <returns>Returns a unique string.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersFilters.ToString">
            <summary>
            Gets a System.String that represents the count of the vdLayersFilters collection Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersFilters.ChangeOrder(VectorDraw.Professional.vdPrimaries.vdLayersFilter,System.Boolean)">
            <summary>
            Changes the position of a vdLayersFilter object to the front or the end of the collection.
            </summary>
            <param name="Object">The vdLayersFilter object.</param>
            <param name="ToBack">If true moves the object to the beginning of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersFilters.swap(VectorDraw.Professional.vdPrimaries.vdLayersFilter,VectorDraw.Professional.vdPrimaries.vdLayersFilter)">
            <summary>
            Swaps the position between two different vdLayersFilter objects existing in the collection.
            </summary>
            <param name="Object1">first object needed.</param>
            <param name="Object2">second object needed.</param>
            <returns>True if the swap operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersFilters.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersFilters.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdLayersFilters object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersFilters.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdLayersFilters object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLayersFilters.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLayersFilters.ListPosition">
            <summary>
            Gets the <see cref="T:VectorDraw.Generics.IListPosition"/> interface object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLayersFilters.Item(System.Int32)">
            <summary>
            Get a vdLayersFilter object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The vdLayersFilter object at the specified index.</returns>
        </member>
        <member name="T:vdLayersComboBox.vdLayersCombo">
            <summary>
            A Layers control to give easy access to the layers.
            </summary>
            <remarks>
            vdLayersCombo is a combobox like control to give you easy access to the layers.</remarks>
            <remarks>If none entity is selected then the activelayer is shown and you can easily select the activelayer.</remarks>
            <remarks>If entities are selected to the Document then the layer of the entities is shown where you can easily change it.</remarks>
            <remarks>Also you can freeze and lock a layer easily.
            </remarks>
        </member>
        <member name="F:vdLayersComboBox.vdLayersCombo.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:vdLayersComboBox.vdLayersCombo.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:vdLayersComboBox.vdLayersCombo.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:vdLayersComboBox.vdLayersCombo.#ctor">
            <summary>
            The constructor of the Control always necessary.
            </summary>
        </member>
        <member name="M:vdLayersComboBox.vdLayersCombo.SetLayerFont(System.String,System.Single,System.Int32)">
            <summary>
            A method to set the layer font.
            </summary>
            <param name="name">The name of the font.</param>
            <param name="size">The size of the font.</param>
            <param name="style">The style of the Font <see cref="T:System.Drawing.FontStyle"/></param>
            <remarks> This method is exported specially for vb6 users , for .NET it is better to use directly the LayerFont property.</remarks>
        </member>
        <member name="E:vdLayersComboBox.vdLayersCombo.LayerSelected">
            <summary>
            Raises when a layer is selected and the listbox is hiden. This event can be used to handle the focus on the form that is used.
            </summary>
        </member>
        <member name="P:vdLayersComboBox.vdLayersCombo.UserLayer">
            <summary>
            Use this property to pass a vdLayer object to be modified without interfering with the Document.
            </summary>
        </member>
        <member name="P:vdLayersComboBox.vdLayersCombo.LayersDocument">
            <summary>
            Get/Set the Document that the Control should interact with.
            </summary>
        </member>
        <member name="P:vdLayersComboBox.vdLayersCombo.ApplicationsMainForm">
            <summary>
            Get/Set the Main Form where the LayerControl is added. This is used only to choose either to open the list upward or downward depending the position and the height of the main application.This property can only be used in .NET applications.
            </summary>
        </member>
        <member name="P:vdLayersComboBox.vdLayersCombo.MaxNumberOfLayersShown">
            <summary>
            Get/Set the Maximum number of Layers to be shown at the Drop Down List.
            </summary>
        </member>
        <member name="P:vdLayersComboBox.vdLayersCombo.SelectedLayerColor">
            <summary>
            The color of the Selected Layer.
            </summary>
        </member>
        <member name="P:vdLayersComboBox.vdLayersCombo.FrozenLayerTextColor">
            <summary>
            The color of every frozen and off layers text.
            </summary>
        </member>
        <member name="P:vdLayersComboBox.vdLayersCombo.BackgroundColor">
            <summary>
            The background color of the combobox.
            </summary>
        </member>
        <member name="P:vdLayersComboBox.vdLayersCombo.TextColor">
            <summary>
            The color of every text in the combobox.
            </summary>
        </member>
        <member name="P:vdLayersComboBox.vdLayersCombo.LayerFont">
            <summary>
            Get/Set the font used to display the name of the layer
            </summary>
            <remarks> Default value is Microsoft Sans Serif", 8.25f, FontStyle.Regular.</remarks>
        </member>
        <member name="P:vdLayersComboBox.vdLayersCombo.MinimumSize">
            <summary>
            The minimum size of this control is 150,21
            </summary>
        </member>
        <member name="T:vdLayersComboBox.vdLayersCombo.LayerSelectedEventHandler">
            <summary>
            Represents the method that will handle the RaiseLayerSelected event.
            </summary>
            <param name="sender">The vdLayerCombo object.</param>
        </member>
        <member name="T:Win32Types.OfnHookProc">
            <summary>
            Defines the shape of hook procedures that can be called by the OpenFileDialog
            </summary>
        </member>
        <member name="T:Win32Types.OPENFILENAME">
            <summary>
            See the documentation for OPENFILENAME
            </summary>
        </member>
        <member name="F:VectorDraw.ExDialogs.OpenPreviewDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.ExDialogs.OpenPreviewDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.ExDialogs.OpenPreviewDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:VectorDraw.ExDialogs.OpenPreviewDialog.SelectionChangedHandler">
            <summary>
            Clients can implement handlers of this type to catch "selection changed" events
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionRect">
            <summary>
            Implements the ActionRect object used when adding a rectangle from Insertion point and one point for Width,Height.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionRect.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Initializes the action from the passed parameters.
            </summary>
            <param name="reference">The Insertion point of the vdrect.</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionRect.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdPrimaries.vdLayout,VectorDraw.Render.vdGdiPenStyle)">
            <summary>
            Initializes the action from the passed parameters.
            </summary>
            <param name="reference">The Insertion point of the vdrect.</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
            <param name="penstyle">A penstyle which is used to draw the rectangle or null to use the default RubberBandColor.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionRect.DrawEntity">
            <summary>
            Called from PureDraw method when the action entity is to be drawn or hide to the screen.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionRect.OnMyPositionChanged(VectorDraw.Geometry.gPoint)">
            <summary>
            Called when the mouse position changes.Changes the created circle entity in order to be drawn each time the mouse moves.
            </summary>
            <param name="newPosition">A gPoint representing the new mouse position in User Coordinate System.</param>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionRect.HideRubberLine">
            <summary>
            Get a value that represents if the rubber line is drawn or not.Returns false since a rubber line is needed.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionRect.Entity">
            <summary>
            The entity which is currently selected for this action.Returns the created circle.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionRect.needUpdate">
            <summary>
            Get a value that represents if the entity should be updated after each position change.Returns true since an update is needed.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionRect.Value">
            <summary>
            Returns a Vector with Rectangle rotation,Width,Height
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Actions.PolarTrackActionFlags">
            <summary>
             Additional flags that controls the PolarTrack with user actions.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Actions.PolarTrackActionFlags.None">
            <summary>
            No extra flags
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Actions.PolarTrackActionFlags.PlineAutoSnap">
            <summary>
            If present during a user polyline action, the PolarTrackAngle is relative to last polyline segment.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Actions.vdDummyFontExpandableConverter">
            <summary>
            Dummy TypeConverter to hide Font expandable properties.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Actions.vdDummyFontExpandableConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.Actions.vdDummyFontExpandableConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
             Internally used. 
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.Actions.IToolTipDisplayProps">
            <summary>
            Provides the functionality for the ToolTipDisplayProps object.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Actions.ToolTipDisplayProps">
            <summary>
            Displaying properties for tooltip windows
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Actions.ToolTipDisplayProps.#ctor">
            <summary>
            Initializes a new instance of the object
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Actions.ToolTipDisplayProps.ToString">
            <summary>
            Returns a System.String that represents the FontStyle property of the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Actions.ToolTipDisplayProps.Modify(System.String,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Select new properties for the object.
            </summary>
            <param name="FontFamilyName">The FontFamily name.</param>
            <param name="FontSize">Size of selected font.</param>
            <param name="FontStyle">Style of selected font.</param>
            <param name="Aligment">Alignment of a text string relative to its layout rectangle.</param>
            <param name="TextColor">Color used to draw the text inside the tooltip window.</param>
            <param name="BkColor">Color used to fill the background of the tooltip window.</param>
            <param name="FrameColor">Color used to draw a frame rectangle of the tooltip window.</param>
            <remarks>
            FontFamilyName is a the font name as it is display in the Windows Character Map.</remarks>
            <remarks>FontSize the size of selected font in  point units (1/72 inch for each unit)</remarks>
            <remarks>FontStyle a compination of the following values : 0(Regular), 1(Bold), 2(Italic), 4(Underline), 8(Strikeout).</remarks>
            <remarks>Aligment one of the following : 0(Left Align), 1(Center Align) , 2(Right Align)</remarks>
            <remarks>TextColor as string in format : Red(0-255),Green(0-255),Blue(0-255) example : "255,0,0" for red color</remarks>
            <remarks>BkColor as string in format : Red(0-255),Green(0-255),Blue(0-255) example : "255,0,0" for red color</remarks>
            <remarks>FrameColor as string in format : Red(0-255),Green(0-255),Blue(0-255) example : "255,0,0" for red color
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.Actions.ToolTipDisplayProps.SetOffsetXY(System.Int32,System.Int32)">
            <summary>
            Set the Offset distance for the tooltip.
            </summary>
            <param name="x">X Offset in pixels.</param>
            <param name="y">Y Offset in pixels.</param>
        </member>
        <member name="P:VectorDraw.Professional.Actions.ToolTipDisplayProps.UseReverseOrder">
            <summary>
            Get/Set the order that used to find a tooltip under the cursor
            </summary>
            <remarks>Default value is true for begin searching from the last entity in list to the first.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.Actions.ToolTipDisplayProps.FontStyle">
            <summary>
            Get/Set the font style used to draw the text inside the tooltip window.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Actions.ToolTipDisplayProps.ToolTipAligment">
            <summary>
            Specifies the alignment of a text string relative to its layout rectangle.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Actions.ToolTipDisplayProps.TextColor">
            <summary>
            Get/Set the color used to draw the text inside the tooltip window.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Actions.ToolTipDisplayProps.BkColor">
            <summary>
            Get/Set the color used to fill the background of the tooltip window.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Actions.ToolTipDisplayProps.FrameColor">
            <summary>
            Get/Set the color used to draw a frame rectangle of the tooltip window.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Actions.ToolTipDisplayProps.ToolTipOffset">
            <summary>
            Get/Set a Point that Indicates the offset of the tooltip from the cursor in pixels.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Actions.ActionGripOn.Dispose">
            <summary>
            Performs tasks associated with freeing, releasing, or resetting the necessary memory objects.
            After calling this method the object is not available.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Actions.ActionManager">
            <summary>
            This is the main class that handles the component's actions.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Actions.ActionManager.Dispose">
            <summary>
            Performs tasks associated with freeing, releasing, or resetting the necessary memory objects.
            After calling this method the object is not available.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Actions.ActionManager.#ctor(VectorDraw.Professional.vdPrimaries.vdLayout,VectorDraw.Professional.vdFigures.vdViewport)">
            <summary>
            Initializes the object.
            </summary>
            <param name="layout">The vdLayout where the actions will take place.</param>
            <param name="viewPort">The vdViewport where the actions will take place or null if the action is reference to a single Layout object. </param>
        </member>
        <member name="M:VectorDraw.Professional.Actions.ActionManager.PureDraw">
            <summary>
            Overrides <see cref="M:VectorDraw.Actions.BaseAction.PureDraw"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Actions.ActionManager.MouseMove(System.Windows.Forms.MouseEventArgs,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Internally used only for mouse move.
            </summary>
            <param name="e"></param>
            <param name="cursorpos"></param>
            <param name="orthoPoint"></param>
        </member>
        <member name="M:VectorDraw.Professional.Actions.ActionManager.MouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internally used for mouse down event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:VectorDraw.Professional.Actions.ActionManager.Parse(System.String,VectorDraw.Geometry.Matrix,VectorDraw.Geometry.LUnits,VectorDraw.Geometry.AUnits)">
            <summary>
            Parses the user input string.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="user2world">The active user to world Matrix.</param>
            <param name="lunits">LUnits object to use when parsing.</param>
            <param name="aunits">AUnits object to use when parsing.</param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.Actions.ActionManager.KeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Internally used.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:VectorDraw.Professional.Actions.ActionManager.GetGripSelection">
            <summary>
            Returns a selection  with all visible entities that have <see cref="P:VectorDraw.Professional.vdPrimaries.vdFigure.ShowGrips"/> property true.
            </summary>
            <returns>A selection  with all visible entities that have <see cref="P:VectorDraw.Professional.vdPrimaries.vdFigure.ShowGrips"/> property true.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Actions.ActionManager.Activated">
            <summary>
            Overrides <see cref="M:VectorDraw.Actions.BaseAction.Activated"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Actions.ActionManager.DeActivated">
            <summary>
            Overrides <see cref="M:VectorDraw.Actions.BaseAction.DeActivated"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Actions.ActionManager.OnIdle">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Actions.ActionManager.ScreenPaint(VectorDraw.Actions.ActionWrapperRender)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Actions.ActionManager.MouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internally used.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:VectorDraw.Professional.Actions.ActionManager.MouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internally used.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:VectorDraw.Professional.Actions.ActionManager.Render">
            <summary>
            The render where the actions will be rendered.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdSectionClip">
            <summary>
            Implements all functionality for the vdSectionClip object.
            </summary>
            <remarks>
            This object is used to apply a section in a specific plane in order to display one part of the plane and hide the rest.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdSectionClip.CreateSectionCoverFacesList(VectorDraw.Render.vdRender,System.IntPtr,VectorDraw.Render.IRenderListItem)">
            <summary>
            Internally used only.Create a list that contains the section clip cover faces for a specific drawing figure defined by listItem parameter
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdSectionClip.DrawCoverFaces(VectorDraw.Render.vdRender)">
            <summary>
            Internally used.Draws all calculated cover faces for this Section.
            </summary>
            <param name="render">The vdRender where the cover faces will be drawn.</param>
            <returns><see cref="T:VectorDraw.Render.vdRender.DrawStatus"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdSectionClip.Update">
            <summary>
            Updates all calculated object values.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdSectionClip.OnOwnerChanged">
            <summary>
            This method is called when the object's owner is changed.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdSectionClip.OnDocumentSelected(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            This method is called when the object is inserted in a Document for the first time.
            </summary>
            <param name="document">The document where the object is inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdSectionClip.#ctor">
            <summary>
            Initializes the vdSectionClip object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdSectionClip.#ctor(VectorDraw.Professional.vdObjects.vdDocument,System.String,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector,System.Boolean)">
            <summary>
            Initializes a new vdSectionClip object with passed parameters.
            </summary>
            <param name="document">The Document where the object is going to be registered.</param>
            <param name="name">The name of the vdSectionClip object.</param>
            <param name="origin"><see cref="P:VectorDraw.Professional.vdObjects.vdSectionClip.OriginPoint"/> in World Coordinate system.</param>
            <param name="direction"><see cref="P:VectorDraw.Professional.vdObjects.vdSectionClip.Direction"/> vector that defines the visible side.</param>
            <param name="enable">A boolean value representing if the clip is enabled or not.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdSectionClip.#ctor(VectorDraw.Professional.vdObjects.vdDocument,System.String,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector)">
            <summary>
            Initializes a new vdSectionClip object with passed parameters.
            </summary>
            <param name="document">The Document where the object is going to be registered.</param>
            <param name="name">The name of the vdSectionClip object.</param>
            <param name="origin"><see cref="P:VectorDraw.Professional.vdObjects.vdSectionClip.OriginPoint"/> in World Coordinate system.</param>
            <param name="direction"><see cref="P:VectorDraw.Professional.vdObjects.vdSectionClip.Direction"/> vector that defines the visible side.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdSectionClip.#ctor(System.String,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector,System.Boolean)">
            <summary>
            Initializes a new vdSectionClip object with passed parameters.
            </summary>
            <param name="name">The name of the vdSectionClip object.</param>
            <param name="origin"><see cref="P:VectorDraw.Professional.vdObjects.vdSectionClip.OriginPoint"/> in World Coordinate system.</param>
            <param name="direction"><see cref="P:VectorDraw.Professional.vdObjects.vdSectionClip.Direction"/> vector that defines the visible side.</param>
            <param name="enable">A boolean value representing if the clip is enabled or not.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdSectionClip.#ctor(System.String,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector)">
            <summary>
            Initializes a new vdSectionClip object with passed parameters.
            </summary>
            <param name="name">The name of the vdSectionClip object.</param>
            <param name="origin"><see cref="P:VectorDraw.Professional.vdObjects.vdSectionClip.OriginPoint"/> in World Coordinate system.</param>
            <param name="direction"><see cref="P:VectorDraw.Professional.vdObjects.vdSectionClip.Direction"/> vector that defines the visible side.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdSectionClip.UpdateMatrix">
            <summary>
            Updates the matrix used to transform an object from world to SectionClip coordinate system.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdSectionClip.IsSectionVisible(VectorDraw.Geometry.gPoint)">
            <summary>
            Checks if the given point is at the visible side of the clip.
            </summary>
            <param name="pt">A point in World Coordinate System.</param>
            <returns>Returns true if the point is visible.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdSectionClip.IsSectionVisible(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Matrix)">
            <summary>
            Checks if the given point is at the visible side of the clip.
            </summary>
            <param name="pt">A point in World Coordinate System.</param>
            <param name="object2World">This parameter can be null or containes the object to worls matrix used for transformations.</param>
            <returns>Returns true if the point is visible.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdSectionClip.IsSectionVisible(VectorDraw.Geometry.gPoints,VectorDraw.Geometry.Matrix)">
            <summary>
            Checks if the given points is at the visible side of the clip.
            </summary>
            <param name="pts">A collection of points in World Coordinate System.</param>
            <param name="object2World">This parameter can be null or containes the object to worls matrix used for transformations.</param>
            <returns>Returns true if all points are visible.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdSectionClip.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdSectionClip.Clone">
            <summary>
            Creates a new object with the same properties as this one.
            </summary>
            <returns>Returns a new created object as clone of this.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdSectionClip.ToString">
            <summary>
            Gets a System.String that represents the Name of the vdSectionClip Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdSectionClip.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Draws a solid rect with the SectionColor.
            </summary>
            <param name="render"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdSectionClip.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdSectionClip object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdSectionClip.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdSectionClip object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdSectionClip.VectorDraw#Geometry#ISectionClip#get_Id">
            <summary>
            Implements all functionality for the vdSectionClip object.
            </summary>
            <remarks>
            This object is used to apply a section in a specific plane in order to display one part of the plane and hide the rest.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdSectionClip.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements all functionality for the vdSectionClip object.
            </summary>
            <remarks>
            This object is used to apply a section in a specific plane in order to display one part of the plane and hide the rest.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdSectionClip.Deleted">
            <summary>
            Get/Set a property that marks the object as Deleted or not.
            </summary>
            <remarks>
            default value : false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdSectionClip.Name">
            <summary>
            Get/Set the name of the object.
            </summary>
            <remarks>
            default value : "".
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdSectionClip.OriginPoint">
            <summary>
            Get/Set the Origin point in World Coordinate System(WCS).
            </summary>
            <remarks>
            default value : (0.0,0.0,0.0).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdSectionClip.Direction">
            <summary>
            Get/Set the direction vector of the vdSectionClip object.
            </summary>
            <remarks>
            default value : (0.0,0.0,1.0).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdSectionClip.Enable">
            <summary>
            Get/Set a boolean value representing if the clip is enabled or not.
            </summary>
            <remarks>
            default value : false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdSectionClip.Object2SectionMatrix">
            <summary>
            Get the matrix used for transformations between Object and Section Coordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdSectionClip.OffsetDistance">
            <summary>
            Get/Set the distance in Drawing units to additionally draw Layout's entities. This distance is calculated from the Origin point and the opposite direction of the Section Clip.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdSectionClip.OffsetEntitiesColor">
            <summary>
            Get/Set the PenColor to be used for additional offset drawing of the entities. Note you can also set the AlphaBlending to have transparency.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdSectionClip.OffsetEntitiesLinetype">
            <summary>
            This property is no longer in use.
            Get/Set the Linetype to be used for additional offset drawing of the entities.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdSectionClip.OffsetDrawType">
            <summary>
            This property is no longer in use.
            Set the draw method to be used for the extra offset entities.
            </summary>
            <remarks>
            Default value is HighLight.
            If the type is Highlight then the extra offset entities are being drawn with a highlight filter using OpenGL lists if possible.
            If type is NoLists then the color/Linetype properties are being used.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdSectionClip.SectionColor">
            <summary>
            Get/Set the Color of the drawable Section Clip.
            </summary>
            <remarks>
            A Solid face is drawn that passes From the OriginPoint of the Section and it's Bounds are the Bounds of the Drawing.
            Set the Color to Empty to not draw the face , Default value is Empty.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdSectionClip.SectionAlphaBlending">
            <summary>
            The Transparency of the Section Clip if it is drawn.
            <see cref="P:VectorDraw.Professional.vdObjects.vdSectionClip.SectionColor"/>
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdVisibleLayerListEditor">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdFrozenListEditor">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdFrozenListEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Internally used. 
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdFrozenListEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdIgnoreModelSectionsListEditor">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdIgnoreModelSectionsListEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Internally used. 
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdIgnoreModelSectionsListEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdViewport">
            <summary>
            Implements all functionality for the vdViewport object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes a new instance of the vdViewport object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.#ctor">
            <summary>
            Initializes the vdViewport object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.OnOwnerChanged">
            <summary>
            This method is called when the object's owner is changed.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.Refresh">
            <summary>
            Refreshes the graphics by drawing the memory bitmap of the render into the control device.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.InitActions">
            <summary>
            Initializes the base action for the viewport.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdViewport.mTmpClone">
            <summary>
            It is used only whem MoveGripPointsAt
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.SetClipHandle(VectorDraw.Professional.vdObjects.vdHandle)">
            <summary>
            Set an object as clipping object by it's handle.
            </summary>
            <param name="handle">The handle of the object set to clip the viewport.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)">
            <summary>
            This function is intended to be called during a grip edit of the object. 
            </summary>
            <param name="Indexes">Represents a zero based array of the grip indexes that will be moved.</param>
            <param name="dx">The dx distance that the grip is moved.</param>
            <param name="dy">The dy distance that the grip is moved.</param>
            <param name="dz">The dz distance that the grip is moved.</param>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdViewport.GetGripPoints"/>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnMoveGripPointsAt"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.GetGripPoints">
            <summary>
            A function returning the grip points of the object.
            </summary>
            <returns>Returns a new instance of gpoints object containing the grip points of the object.</returns>
            <remarks>
            The returning points are in World coordinate system(WCS).
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetGripPoints"/> event.
            When implementing this method the <see cref="M:VectorDraw.Professional.vdFigures.vdViewport.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)"/> must be also override according to the new selected grip points.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.InitializeProperties">
            <summary>
            Resets the properties of the vdViewport object to the Default values.
            </summary>
            <remarks>
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.Dispose">
            <summary>
            Dispose of the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.ToString">
            <summary>
            Gets a System.String that represents the type of the vdViewport Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.IsVisible">
            <summary>
            Returns if the viewport is visible.
            </summary>
            <returns>Returns if the viewport is true.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.UCS(System.String)">
            <summary>
            Set the Coordinate System of the viewport.
            </summary>
            <param name="ucsType">A string representing the UCS.Valid values:"WORLD","VIEW","PREV".</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.UCS(VectorDraw.Geometry.Matrix)">
            <summary>
            Sets the matrix used for transformations between World to User Coordinate System (<see cref="P:VectorDraw.Professional.vdFigures.vdViewport.World2UserMatrix"/>).
            </summary>
            <param name="mat">The matrix to set for the tranformations.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.UCS(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Sets the matrix used for transformations between World to User Coordinate System (<see cref="P:VectorDraw.Professional.vdFigures.vdViewport.World2UserMatrix"/>).
            </summary>
            <param name="origin">Origin used to calculate the matrix.</param>
            <param name="xdir">X direction used to calculate the matrix.</param>
            <param name="ydir">Y direction used to calculate the matrix.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.UCSPrevious">
            <summary>
            Returns to the previous matrix used for transformations between World 
            to User Coordinate System (<see cref="P:VectorDraw.Professional.vdFigures.vdViewport.World2UserMatrix"/>).
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.AddCurentZoomToHistory">
            <summary>
            Add the current zoom (ViewCenter , ViewSize and World2ViewMatrix) in object zoom history in order to reset it with <see cref="M:VectorDraw.Professional.vdFigures.vdViewport.ZoomPrevious"/> method
            </summary>
            <remarks>By default user command actions: pan , scroll , dynamic 3d rotation  and vdCommandAction methods view3d, lookat are added to zoom history.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.AddCurentZoomToHistory(System.String)">
            <summary>
            Add the current zoom (ViewCenter , ViewSize and World2ViewMatrix) in object zoom history in order to reset it with <see cref="M:VectorDraw.Professional.vdFigures.vdViewport.ZoomPrevious"/> method
            </summary>
            <param name="commandid">Internally used only.Pass empty string.</param>
            <remarks>By default user command actions: pan , scroll , dynamic 3d rotation  and vdCommandAction methods view3d, lookat are added to zoom history.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.ZoomPrevious">
            <summary>
            Returns to the previous zoom.
            </summary>
            <returns>False if the zoom stack is empty -or- true otherwise.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.ZoomWindow(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Zooms to a specified window given by the two parameters.
            </summary>
            <param name="w1">Upper left point of the window.</param>
            <param name="w2">Bottom right point of the window.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.ZoomScale(System.Double)">
            <summary>
            Zooms using a specified scale factor,used for zoom in and zoom out.
            </summary>
            <param name="scalefactor">A double value representing the scale factor for the zoom command.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.ZoomAll">
            <summary>
            Zooms to show all objects of the viewport, takes into consideration also the limits of the action Layout and the <see cref="P:VectorDraw.Professional.vdFigures.vdViewport.ViewportVisibilityLogic"/> of the Viewport.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.ZoomExtents">
            <summary>
            Zooms to fit the extends of all objects of the viewport.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.SetFromView(VectorDraw.Professional.vdPrimaries.vdView)">
            <summary>
            Sets the viewport's properties equal to the passed vdView object.
            </summary>
            <param name="view">A vdView object from which the view properties are going to be copied from.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.OwnerLayout">
            <summary>
            Returns the Layout where this object belongs to.
            </summary>
            <returns>The Layout where this object belongs to.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.AppliedSections">
            <summary>
            Returns a collection of vdSectionClip that are applied to this viewport.
            </summary>
            <returns>A collection of vdSectionClip that applied to this viewport.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.PushFrozenLayers">
            <summary>
            Push a stack that mark the layers in <see cref="P:VectorDraw.Professional.vdFigures.vdViewport.FrozenLayerList"/> , as Frozen
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.PopFrozenLayers">
             <summary>
            Pop the stack that previously was pushed by <see cref="M:VectorDraw.Professional.vdFigures.vdViewport.PushFrozenLayers"/>
             </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Called in order to draw the object in a specified vdRender object.
            </summary>
            <param name="WindowRender">The vdRender object in which the object will be drawn.</param>
            <returns><see cref="T:VectorDraw.Render.vdRender.DrawStatus"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)">
            <summary>
            <see cref="M:VectorDraw.Professional.vdPrimaries.vdFigure.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)"/>.
            </summary>
            <param name="object2viewcs"></param>
            <param name="mode"></param>
            <param name="pickPoi"></param>
            <param name="LastPoi"></param>
            <param name="SegCount"></param>
            <param name="osnaps"></param>
            <returns>True if at least one osnap point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdViewport object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdViewport object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.GetExtents">
            <summary>
            Gets the Bounding Box that completely encloses all visible Figure.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.FilterDrawEntities">
            <summary>
            Fast draw only VisibleFigures in case VisibleFigures Count > 0 and ViewportVisibilityLogic contains ShowOnlyVisibleFigures
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdViewport.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements all functionality for the vdViewport object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.Deleted">
            <summary>
            Get/Set a property that marks the object as Deleted or not.
            </summary>
            <remarks> <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.Deleted"/></remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.IsOn">
            <summary>
            Get/Set a boolean value that determines whether the viewport will display the model entities or not.
            </summary>
            <remarks>
            Default value is true.
            A Viewport with the IsOn value false , it can not be activated by a Layout object.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.GridMode">
            <summary>
            Get/Set a boolean value representing the display of the grid dots.
            </summary>
            <remarks>
            Default value is false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.GridSpaceX">
            <summary>
            Get/Set the space between the grid dots in the x direction.
            </summary>
            <remarks>
            Default value is 1.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.GridSpaceY">
            <summary>
            Get/Set the space between the grid dots in the y direction.
            </summary>
            <remarks>
            Default value is 1.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.GridStyle">
            <summary>
            Get/Set the style that used to draw the grid.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.OrthoMode">
            <summary>
            Get/Set a boolean value that if is true constrains cursor movement to the perpendicular.
            </summary>
            <remarks>
            Default value false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.OrthoModeAxis">
            <summary>
            Defines the axis where the Ortho is limited on when <see cref="P:VectorDraw.Professional.vdFigures.vdViewport.OrthoMode"/> is true.
            </summary>
            <remarks>
            By default ortho is limited on x , y and z axis.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.PolarTrackLock">
            <summary>
            Get/Set the polar track lock property .If true constrains cursor movement only to the <see cref="P:VectorDraw.Professional.vdFigures.vdViewport.PolarTrackAngle"/> direction.
            </summary>
            <remarks>
            Default value false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.PolarTrackInfinityLineDraw">
            <summary>
            Get/Set the draw of the infinity line. If true the infinity line will be rendered.
            </summary>
            <remarks>
            Default value true.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.PolarTrack">
            <summary>
            Get/Set a boolean value that enables/disables the <see cref="P:VectorDraw.Professional.vdFigures.vdViewport.PolarTrackAngle"/> functionality.
            </summary>
            <remarks>
            Default value false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.PolarTrackActionFlag">
            <summary>
            Get/Set additional flags that controls the PolarTrack with user actions.
            </summary>
            <remarks>
            Default value is <see cref="F:VectorDraw.Professional.Actions.PolarTrackActionFlags.None"/>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.PolarTrackAngle">
            <summary>
            Get/Set the polar track angle in radians.
            </summary>
            <remarks>
            Default value Globals.HALF_PI / 2.0d which is 90 degrees.
            If PolarTrack is true then as you move your cursor to specify points, and a user action is open waiting a reference point, a dotted polar tracking line appears at the tracking angles you specified with PolarTrackAngle property. Also A text tool tip display the polar coordinates. 
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.SnapAngle">
            <summary>
            Get/Set the snap angle of the vdlayout object.The snap angle affectes the grid angle and also the cursor-axis display angle.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.SnapBase">
            <summary>
            Get/Set the snap base point.
            </summary>
            <remarks>
            Default value is 0.0,0.0,0.0 .
            This property defines a point (origin) that the Snap and Grid will pass from it.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.SnapIso">
            <summary>
            Get/Set the snap iso for the vdlayout object. The snap iso affects the cursor-axis display.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.SnapMode">
            <summary>
            Get/Set a boolean value that enables/disables the mouse movement snaping.
            </summary>
            <remarks>
            Default value is false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.SnapSpaceX">
            <summary>
            Get/Set the distance that the mouse snaps in x direction.
            </summary>
            <remarks>
            Default value is 1.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.SnapSpaceY">
            <summary>
            Get/Set the distance that the mouse snaps in y direction.
            </summary>
            <remarks>
            Default value is 1.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.SnapStyle">
            <summary>
            Get/Set the snap style of the layout.The snap style affects the cursor-axis display.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.IgnoreFrozenLayers">
            <summary>
            Get/Set a boolean value that Ignores or not the default frozen property of document layers.
            </summary>
            <remarks>
            Set it to true so all layers are thowed except the layers that defined in <see cref="P:VectorDraw.Professional.vdFigures.vdViewport.FrozenLayerList"/>
            Default value is false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.GridMeasure">
            <summary>
            Get the <see cref="T:VectorDraw.Professional.vdObjects.GridMeasured"/> object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.ShowUCSAxis">
            <summary>
            Get/Set a value representing if the axis will be drawn.
            </summary>
            <remarks>
            Default value :true.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.LensAngle">
            <summary>
            Represents the Lens Angle in degrees of the vdViewport object.
            </summary>
            <remarks>
            Default value 60.0 .Typical values range from 60 to 30 degrees.This value is valid only when perspective mode is on.A wide angle lens means a wide field of view.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.FocalLength">
            <summary>
            Get/Set the focal length of the layout.
            </summary>
            <remarks>
            This value is valid only when perspective mode is on.Represents the distance between the "eye" and the center of the view in the current view direction plane.Default value is 0.05.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.PerspectiveMod">
            <summary>
            Represents if the vdViewport object has Perspective Mode On or Off.
            </summary>
            <remarks>
            Default value VdConstPerspectiveMod.PerspectOFF.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.BoundingBox">
            <summary>
            Gets the Bounding Box of the vdViewport object in WorldCoordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.ActiveActionRender">
            <summary>
            Get the Action render of the viewport.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.Render">
            <summary>
            The vdRender object of the viewport.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.RenderStatus">
            <summary>
            Returns an OpenGL status code for diagnostic purposes.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.MouseElevation">
            <summary>
            Get/Set a value in Drawing Units used to add a Zvalue to mouse position relative to Current UCS.
            </summary>
            <remarks>Default value is 0.0 </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.World2UserMatrix">
            <summary>
            Get/Set the Matrix used for trasformations of objects from World to User Coordinate System.
            </summary>
            <remarks>
            Default value VdConstPerspectiveMod.PerspectOFF.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.View2WorldMatrix">
            <summary>
            Get the Matrix used for trasformations between View and World Coordinative System.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.ViewSize">
            <summary>
            Get/Set in Display Coordinative System the Size of the Model View that is presented in the Height of the vdViewport object.
            </summary>
            <remarks>
            Default value 10.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.ColorPalette">
            <summary>
             Get/Set the output Color palette 
            </summary>
            <remarks>
            Deafault value <see cref="F:VectorDraw.Render.vdRender.ColorDisplay.TrueColor"/>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.ViewCenter">
            <summary>
            Get/Set the view center of the vdViewport object.
            </summary>
            <remarks>
            Default value (0.0,0.0,0.0).
            If you change this property and call Redraw then it is like calling panning.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.ViewMaximized">
            <summary>
            Extends the viewport to fit all the layout if it is active and this value is true.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.ViewportScale">
            <summary>
            Gets the viewportsize/viewport's height.
            </summary>
            <remarks>Default value 1.0.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.RenderMode">
            <summary>
            Get/Set the render mode for the vdViewport object.
            </summary>
            <remarks>
            Default value vdRender.Mode.Wire2d.
            If you change this property and call Redraw then it is like calling panning.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.World2ViewMatrix">
            <summary>
            Get/Set the matrix used for transformations between World Coordinate System(WCS)
            and View Coordinate System(VCS).
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.BkColorEx">
            <summary>
            Get/Set The Background of the vdViewport object.
            </summary>
            <remarks>
            Default value Empty.If this color is Empty then the background is the default 
            background(the palette color with index 0 palette[0]).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.BkGradientColor">
            <summary>
            Get/Set the second color for gradient fading effect of the background.
            </summary>
            <remarks>
            Default value is Color.Empty which means no gradient color effect.
            When this property is not empty then the Background is drawn gradient using the BkColor 
            fading in to this color.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.BkGradientAngle">
            <summary>
            Get/Set the background gradient direction angle in radians.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.DisplayWidth">
            <summary>
            Get/Set the width of the vdViewport's render in pixels.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.DisplayHeight">
            <summary>
            Get the height of the vdViewport's render in pixels.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.ViewDir">
            <summary>
            Get the view Direction of the vdViewport object.
            </summary>
            <remarks>
            Default value (0.0,0.0,1.0).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.TwistAngle">
            <summary>
            Get the twist angle of the vdViewport object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.Center">
            <summary>
            Get/Set the position of the viewport.
            </summary>
            <remarks>
            Default value 0.0,0.0,0.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.Width">
            <summary>
            Get/Set the width of the viewport.
            </summary>
            <remarks>
            Default value 1.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.Height">
            <summary>
            Get/Set the height of the viewport.
            </summary>
            <remarks>
            Default value 1.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.ClipObj">
            <summary>
            Get/Set the vdCurve object in which the viewport is.
            </summary>
            <remarks>
            Default value null.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.ShowHidenEdges">
            <summary>
            Get/Set a boolean value representing if the edges of the 3dFace object will be shown.
            </summary>
            <remarks>
            If this value is true then all edges of the 3dFace object will be shown ( even if they are invisible).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.EdgeColor">
            <summary>
            Get/Set the display color for edges of all faces when rendering in 3d.(when RenderMode is Wire3d ,Hide or ShadeOn)
            </summary>
            <remarks>
            Default value is Color.Empty and the edges keep their entity color.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.FrozenLayerList">
            <summary>
            Get/Set a string array contaning the names of the layers to be frozen in the viewport.
            </summary>
            <remarks>
            If the <see cref="P:VectorDraw.Professional.vdFigures.vdViewport.IgnoreFrozenLayers"/> is true then only the layers in this collection will be frozen.
            Default value an empty array.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.IgnoreModelSections">
            <summary>
            Get/Set a string array contaning the names of the Document Model Sections not to be applied.
            </summary>
            <remarks>
            Default value an empty array.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.Sections">
            <summary>
            Returns the Sections Clipping collection .
            </summary>
            <remarks >
            Default value is an empty vdSectionClips collection.
            Viewport applies these section clips and also the sections of the model.
            The sections are vidible only when the rendermode is not wire2D.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.LayoutRender">
            <summary>
            Returns the Layout render where this object belongs to.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.ClipBoundaryPoints">
            <summary>
            Get the Boundary clipping points in World Coord System of active layout.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.Actions">
            <summary>
            The Stack of active Actions in the viewport.
            </summary>
            <remarks>
            Default value is an empty created Stack.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.ActiveAction">
            <summary>
            Get the active action of the viewport.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.SelectionPreview">
            <summary>
            Get/Set the preview method <see cref="T:VectorDraw.Render.vdRenderGlobalProperties.SelectionPreviewFlags"/> of entities that are over the mouse position when an action waiting to select an entity.
            </summary>
            <remarks>Default value is <see cref="F:VectorDraw.Render.vdRenderGlobalProperties.SelectionPreviewFlags.DEFAULT"/> </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.PrintScaleValue">
            <summary>
            Get the <see cref="M:VectorDraw.Professional.vdFigures.vdViewport.OwnerLayout"/> <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.PrintScaleValue"/> .
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.IsModelLayout">
            <summary>
            Always returns false a vdViewport object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.IsViewPort">
            <summary>
            Implements the IgrPrinterProperties Interface used in vdRender object , returns true.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.ContainsViewPorts">
            <summary>
            Implements the IgrPrinterProperties Interface used in vdRender object , returns false.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.DocProperties">
            <summary>
            This interface is used internally to pass Document's properties to the Actions dll.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.ViewportVisibilityLogic">
            <summary>
            Get/Set entities visibilty logic for a viewport.
            </summary>
            <remarks>
            If a figure exist in then <see cref="P:VectorDraw.Professional.vdFigures.vdViewport.VisibleFigures"/> is visible.
            if  <see cref="P:VectorDraw.Professional.vdFigures.vdViewport.ViewportVisibilityLogic"/> contains <see cref="F:VectorDraw.Professional.vdFigures.vdViewport.ViewportVisibilityLogicFlag.ShowOnlyVisibleFigures"/> value, only figures included in <see cref="P:VectorDraw.Professional.vdFigures.vdViewport.VisibleFigures"/>, and their subitems (in case of insert or dimension), are visible independently of their layer visibility.
            else if figure <see cref="P:VectorDraw.Professional.vdPrimaries.vdFigure.visibility"/> is <see cref="F:VectorDraw.Professional.vdPrimaries.vdFigure.VisibilityEnum.Invisible"/> it is dot drawn
            else if <see cref="P:VectorDraw.Professional.vdFigures.vdViewport.VisibleLayerList"/> is not empty then only figures reference to layers included in  VisibleLayerList are visible.
            else if figure layer <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayer.Frozen"/> is true and <see cref="F:VectorDraw.Professional.vdFigures.vdViewport.ViewportVisibilityLogicFlag.IgnoreDefaultFrozenLayers"/> exist then assume that the figure layer is thaw.
            if figure layer is thaw and the layer included in the <see cref="P:VectorDraw.Professional.vdFigures.vdViewport.FrozenLayerList"/> figure is not visible
            Finaly figures in thaw layers are drawn.
            NOTE: In case the <see cref="P:VectorDraw.Professional.vdFigures.vdViewport.ViewportVisibilityLogic"/> is <see cref="F:VectorDraw.Professional.vdFigures.vdViewport.ViewportVisibilityLogicFlag.ShowOnlyVisibleFigures"/> and 
            the <see cref="P:VectorDraw.Professional.vdFigures.vdViewport.VisibleFigures"/> count is not 0 and the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.Model"/> Entities contains a large amount of vdFigures
            the rendering will be faster because the drawn entities are prefilter before the render.
            Default value is <see cref="F:VectorDraw.Professional.vdFigures.vdViewport.ViewportVisibilityLogicFlag.Default"/>.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.VisibleFigures">
            <summary>
            Contains an array of Figures that will be always visible inside this viewport indepent their visibility.
            </summary>
            <remarks>Figures must belong to Document Model Layout.Deleted Figures are not drawn.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdViewport.VisibleLayerList">
            <summary>
            Get/Set a string array contaning the names of the layers to be visible in the viewport.
            </summary>
            <remarks>
            Default value an empty array and the layer visibility is depend on the <see cref="P:VectorDraw.Professional.vdFigures.vdViewport.FrozenLayerList"/>.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdViewport.ViewportVisibilityLogicFlag">
            <summary>
            Specifies the visibility logic for a viewport object.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdViewport.ViewportVisibilityLogicFlag.Default">
            <summary>
            The default value used for the <see cref="P:VectorDraw.Professional.vdFigures.vdViewport.ViewportVisibilityLogic"/>.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdViewport.ViewportVisibilityLogicFlag.IgnoreDefaultFrozenLayers">
            <summary>
            Ignores the layers Frozen property and only the Layers in <see cref="P:VectorDraw.Professional.vdFigures.vdViewport.FrozenLayerList"/> are frozen
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdViewport.ViewportVisibilityLogicFlag.ShowOnlyVisibleFigures">
            <summary>
            Only figures included in <see cref="P:VectorDraw.Professional.vdFigures.vdViewport.VisibleFigures"/> are drawn.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdEllipse">
            <summary>
            Implements the vdEllipse object.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdCurve">
            <summary>
            This class is the base class for all the entities classes that are variations of a curve such as 
            vdArc, vdCircle, vdEllipse, vdPolyline,vdLine,vdRect.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdCurve.mSamplePoints">
            <summary>
            Internally used to temporary keep an array of points that are used in order to draw the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.#ctor">
            <summary>
             Initializes a new instance of the vdCurve object.
            </summary>
            /// <remarks>
            This object cannot be directly created but it is used as base for other objects.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.Divide(System.Int32)">
            <summary>
            Divides the curve into NumSegments segments.
            </summary>
            <param name="NumSegments">The number of segments to divide the curve into.</param>
            <returns>A collection of gPoints on the curve that devide the curve into NumSegments segments.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.Measure(System.Double)">
            <summary>
            Divides the curve into segments with length equal to the passed parameter.
            </summary>
            <param name="length">The length of each segment.</param>
            <returns>A collection of gPoints that represent each divided segment with equal length.The points returned are centered to the curve.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.geomMeasure(System.Double)">
            <summary>
            Divides the curve into segments with length equal to the passed parameter.
            </summary>
            <param name="length">The length of each segment.</param>
            <returns>A collection of gPoints that represent each divided segment with equal length.The points start from the beginning of the curve.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.TestOffsetSide(VectorDraw.Geometry.gPoint)">
            <summary>
            Returns -1.0 if the point is on the left side accordingly to the polyline direction.
            </summary>
            <param name="pt">The point with which the test will be commited in World Coordinate System(WCS).</param>
            <returns>-1.0 if the point is on the left side accordingly to the curve direction and 1.0 if it is on the right side.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.Extend(VectorDraw.Professional.vdCollections.vdSelection,VectorDraw.Geometry.gPoint)">
            <summary>
            Extends an object intersecting the closest object of the selection.
            </summary>
            <param name="entities">A selection of vdFigures that represent the limit of the extend.</param>
            <param name="pt">Represents the side of the object that will be extended in World Coordinate System(WCS).</param>
            <returns>Returns true if the object extends.</returns>
            <remarks >If the pt gPoint does not belong to the object the method uses the closest point belonging to the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.Extend(VectorDraw.Professional.vdCollections.vdSelection,VectorDraw.Geometry.gPoint,System.Boolean)">
            <summary>
            Extends an object intersecting the closest object of the selection.
            </summary>
            <param name="entities">A selection of vdFigures that represent the limit of the extend.</param>
            <param name="pt">Represents the side of the object that will be extended in World Coordinate System(WCS).</param>
            <param name="ExtendBoundary">If this is true then the extension of the bound entities is used.</param>
            <returns>Returns true if the object extends.</returns>
            <remarks >If the pt gPoint does not belong to the object the method uses the closest point belonging to the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.Trim(VectorDraw.Professional.vdCollections.vdSelection,VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdFigures.vdCurve@)">
            <summary>
            Trims an specific segment of the object.
            </summary>
            <param name="entities">A selection of vdFigures that represents the boundings that the trim will be commited.</param>
            <param name="pt">A point representing the section of the object that will be trimed in World Coordinate System(WCS).</param>
            <param name="newEntity">If the trim command creates two objects then the second object is returned in this value(not always).</param>
            <returns> True is the trim is succesfull.</returns>
            <remarks >
            If the pt gPoint does not belong to the object the method uses the closest point belonging to the object.
            The new entity is not added to the Document.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.Trim(VectorDraw.Professional.vdCollections.vdSelection,VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdFigures.vdCurve@,System.Boolean)">
            <summary>
            Trims an specific segment of the object.
            </summary>
            <param name="entities">A selection of vdFigures that represents the boundings that the trim will be commited.</param>
            <param name="pt">A point representing the section of the object that will be trimed in World Coordinate System(WCS).</param>
            <param name="newEntity">If the trim command creates two objects then the second object is returned in this value(not always).</param>
            <param name="ExtendBoundary">If this is true then the bound entities are extended.</param>
            <returns> True is the trim is succesfull.</returns>
            <remarks >
            If the pt gPoint does not belong to the object the method uses the closest point belonging to the object.
            The new entity is not added to the Document.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.IsParamValid(System.Double)">
            <summary>
            Checks if the param is between the getStartParam and the getEndParam.
            </summary>
            <param name="param">The parameter used for the check.</param>
            <returns>true if the param is between these two values.</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCurve.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCurve.getStartParam"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.getStartPoint">
            <summary>
            Returns the startpoint of the curve in World Coordinate System(WCS)
            </summary>
            <returns>Returns the startpoint of the curve</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCurve.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCurve.getStartParam"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.getEndPoint">
            <summary>
            Returns the endpoint of the curve in World Coordinate System(WCS)
            </summary>
            <returns>Returns the endpoint of the curve</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCurve.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCurve.getStartParam"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.getDistAtParam(System.Double)">
            <summary>
            Get the length of the curve’s segment from the curve’s beginning to the point specified by param.
            </summary>
            <param name="param">A value that represents a point on a curve.</param>
            <returns>The distance from the getStartParam.</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCurve.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCurve.getStartParam"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.getParamAtDist(System.Double)">
            <summary>
            Gets the parameter of the object at the specific distance.
            </summary>
            <param name="dist">The distance that the param is needed.</param>
            <returns>Returns parameter at the location specified by dist.</returns>
            <remarks>
            If the distance is 0.0 then the <see cref="M:VectorDraw.Professional.vdFigures.vdCurve.getStartParam"/> is returned.
            If the distance is equal to the length of the object then the <see cref="M:VectorDraw.Professional.vdFigures.vdCurve.getEndParam"/> is returned.
            </remarks>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCurve.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCurve.getStartParam"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.getPointAtDist(System.Double)">
            <summary>
            Gets a point belonging to the curve at the specified distance.
            </summary>
            <param name="dist">The distance along the curve.</param>
            <returns>Returns the point located at the location specified by dist</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCurve.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCurve.getStartParam"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.getDistAtPoint(VectorDraw.Geometry.gPoint)">
            <summary>
            Get the length of the curve’s segment between the curve’s start point and point pt.
            </summary>
            <param name="pt">The point of the curve in World Coordinate System(WCS).</param>
            <returns>Returns the length of the curve’s segment between the curve’s start point and point.</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCurve.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCurve.getStartParam"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.getFirstOffsetParam">
            <summary>
            Get a value representing the <see cref="M:VectorDraw.Professional.vdFigures.vdCurve.getStartParam"/>.
            </summary>
            <returns>Returns the value that the <see cref="M:VectorDraw.Professional.vdFigures.vdCurve.getStartParam"/> begins.</returns>
            <remarks>Usually this value is 0.0. For example the vdArc object starts with Startangle value.</remarks>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCurve.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCurve.getStartParam"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.PointOnCurve(VectorDraw.Geometry.gPoint,System.Boolean)">
            <summary>
            Checks if a point belongs to the curve.
            </summary>
            <param name="pt">The input point in World or in Entity Coordinate System (WCS or ECS).</param>
            <param name="IsInECS">A boolean value that shows if the point is in WCS or ECS.</param>
            <returns>Returns true if the point belongs to the curve.</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCurve.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCurve.getStartParam"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.getParamAtPoint(VectorDraw.Geometry.gPoint)">
            <summary>
            Get the parameter of the curve at a specified point.
            </summary>
            <param name="pt">The point in World Coordinate System(WCS) belonging to the curve.</param>
            <returns>Returns the parameter of the curve at point.</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCurve.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCurve.getStartParam"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.getPointAtParam(System.Double)">
            <summary>
            Returns a point on the curve representing a param.
            </summary>
            <param name="param">The param of the curve object.</param>
            <returns>Returns the point on the curve specified by the param in World Coordinate System(WCS).</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCurve.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCurve.getStartParam"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.getStartParam">
            <summary>
            Get the parameter of the start of the curve.
            </summary>
            <returns>Returns the parameter of the start of the curve.</returns>
            <remarks>
            The parameter is a value of the curve that represents a specific position from the begining of the curve.
            It is implemented and very usefull for geomatrical calculations like devide,measure,trim,extend etc...
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.getEndParam">
            <summary>
            Get the parameter of the end of the curve
            </summary>
            <returns>Returns the parameter of the end of the curve</returns>
            <remarks>
            The parameter is a value of the curve that represents a specific position from the begining of the curve.
            It is implemented and very usefull for geomatrical calculations like devide,measure,trim,extend etc...
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.Break(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdPrimaries.vdFigure@)">
            <summary>
            Removes the segment that is between the p1,p2 points.
            </summary>
            <param name="p1">Point 1 in World Coordinate System(WCS).</param>
            <param name="p2">Point 2 in World Coordinate System(WCS).</param>
            <param name="newEntity">A new created entity representing a new subsegment of the curve(not always present).</param>
            <returns>True if the break command is succesfull.</returns>
            <remarks>
            The new entity is not added in the Document.The newEntity can be null after the command.
            If p1 is the startpoint and the p2 is the endpoint then the command will return true
            and this entity will be deleted and the newEntity will be null.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.getOffsetCurve(System.Double)">
            <summary>
            Creates new objects at a specified distance and in the same plane with an existing object.
            </summary>
            <param name="offsetDist">The distance between this object and the created objects.</param>
            <returns>A collection of vdCurves produced by the offset command</returns>
            <remarks>
            The distance can be negative or positive representing the side that the offset command will take place.
            For example for vdcircle negative produce smaller circle and positive bigger
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.getClosestPointTo(VectorDraw.Geometry.gPoint)">
            <summary>
            Get The closest point belonging to the curve.
            </summary>
            <param name="givenPoint">A point in World Coordinate System(WCS).</param>
            <returns>Returns null or a point in WCS belonging to the curve.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.Area">
            <summary>
            Get the enclosed area of the object in Drawing Units.
            </summary>
            <returns>Returns the enclosed area of the object in Drawing Units.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.Length">
            <summary>
            Get the length of the object in Drawing Units
            </summary>
            <returns>Returns the length of the object in Drawing Units</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.InitializeProperties">
            <summary>
            Resets the properties of the vdCurve object to the Default values.
            </summary>
            <remarks>
            Default values:ExtrusionVector = (0.0,0.0,1.0),Thickness = 0.
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.ToString">
            <summary>
            Gets a System.String that represents the type of the vdCurve Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.GetSamplePoints(System.Int32,System.Double)">
            <summary>
            Returns a list of points on the curve from the start to the end point of the curve.
            </summary>
            <param name="CurveResolution">valid values (1 to 20000)</param>
            <param name="PixelSize">valid values possitive decimal ( >=0)</param>
            <returns>A collection of points belonging to the curve in Entity Coordinate System(ECS).</returns>
            <remarks >
            The greater the curveResolution the biggest the number of segments that the curve is 
            divided in(The Smoother the curve).The greater PixelSize the smallest the 
            number of curves that the curve is divided in(which means bigger segments).
            Usually it is used to draw the curve into small polygon segments.
            If you want to devide the curve into a specific number of segments then use pixelsize=0 and curveresolution = number of segments.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.ToMesh(System.Int32)">
            <summary>
            Converts the curve into a <see cref="T:VectorDraw.Professional.vdFigures.vdPolyface"/> object.
            </summary>
            <param name="CurveResolution">Determines the number of the segments that the arcs will be devided.</param>
            <returns>The created vdPolyface object which is not being added to the Document.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdCurve object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdCurve object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCurve.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            This class is the base class for all the entities classes that are variations of a curve such as 
            vdArc, vdCircle, vdEllipse, vdPolyline,vdLine,vdRect.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdCurve.SmoothAngle">
            <summary>
            Get/Set the angle in degrees between 0 and 90 used to calculate normals for each vertex in each face when rendering a vdcurve object with thickness.
            Defines the maximun angle which is compared with the angles between the planes of neighboring vertical thickness faces in order to filter out the normals of the planes that will added in the average calculation.
            </summary>
            <remarks>
            Set it to -1 in order the normals to be smoothing according to the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.SmoothAngle"/> property.
            Set it to 0 in order the normals not to be smoothing.
            Set it to 90 in order the normal of each vertex to be calculated as the average value with all the neighboring vertical thickness faces normals.
            Default value is -1.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdCurve.Thickness">
             <summary>
             Get/Set the object's thickness in Drawing Units.
             </summary>
             <remarks>
             The thickness is always in the direction of entity's Extrusion Vector.
             Default Value 0.0
             Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
             Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <seealso cref="T:VectorDraw.Geometry.Vector"/>
            <seealso cref="P:VectorDraw.Professional.vdFigures.vdCurve.ExtrusionVector"/>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdCurve.ExtrusionVector">
            <summary>
            Get/Set the 3D vector extrusion direction for the object.
            </summary>
            <remarks> Default value is (0,0,1) and the object is drawn in the XY plane.
            Is a one-unit length vector relative to World Coordinate System(WCS).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <seealso cref="P:VectorDraw.Professional.vdFigures.vdCurve.Thickness"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes a new instance of the vdEllipse object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.#ctor(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Geometry.gPoint,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the vdEllipse object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <param name="center">The center point of the ellipse object.</param>
            <param name="majorlength">The major length of the ellipse object.</param>
            <param name="minorlength">The minor length of the ellipse object.</param>
            <param name="majorangle">The major angle of the ellipse object.</param>
            <param name="startangle">The start angle of the ellipse object.</param>
            <param name="endangle">The end angle of the ellipse object.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.#ctor">
            <summary>
            Initializes a new instance of the vdEllipse object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.Explode">
            <summary>
            If the vdEllipse object has hatchproperties the explode method creates a <see cref="T:VectorDraw.Professional.vdFigures.vdPolyhatch"/> object.
            </summary>
            <returns>The entities created by the explode method.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.TestOffsetSide(VectorDraw.Geometry.gPoint)">
            <summary>
            Tests if a point is inside a vdEllipse or not.
            </summary>
            <param name="pt">The point with which the test will be commited in World Coordinate System(WCS).</param>
            <returns>Returns -1.0 if the point is inside the ellipse and 1.0 if not.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.getOffsetCurve(System.Double)">
            <summary>
            Creates a new vdEllipse object at a specified distance and in the same plane with the existing object.
            </summary>
            <param name="offsetDist">The distance where the new vdEllipse object will be created.</param>
            <returns>The new created vdEllipse object.An empty collection is returned if MinorLength
            and MajorLength of the new object are less or equal to 0.0 .</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.Break(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdPrimaries.vdFigure@)">
            <summary>
            Breaks the vdArc into two or one subarcs.Deletes the part that is between p1,p2.
            </summary>
            <param name="p1">The first point needed for this command.</param>
            <param name="p2">The second point needed for this command.</param>
            <param name="newEntity">If a new arc is created it is returned in this parameter.</param>
            <returns>true if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.Area">
            <summary>
            Calculates the enclosed area of the vdEllipse object in Drawing Units.
            </summary>
            <returns>Returns the enclosed area.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.Length">
            <summary>
            Calculates the length of the vdEllipse object.
            </summary>
            <returns>Returns the length of the object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.getFirstOffsetParam">
            <summary>
            Get a value representing the start angle of the object.
            </summary>
            <returns>Returns the start angle of the object.</returns>
            <remarks >The start angle is the start parameter for the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.getStartParam">
            <summary>
            Returns the start parameter for the object.
            </summary>
            <returns>Returns the start parameter for the object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.getEndParam">
            <summary>
            Return the end parameter for the object.
            </summary>
            <returns>Return the end parameter for the object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.getStartPoint">
            <summary>
            Returns the start point of the vdEllipse object in WCS.
            </summary>
            <returns>Returns the start point of the vdEllipse object in World Coordinate System(WCS).</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.getEndPoint">
            <summary>
            Returns the end point of the vdEllipse object in WCS.
            </summary>
            <returns>Returns the end point of the vdEllipse object in World Coordinate System(WCS).</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.getDistAtParam(System.Double)">
            <summary>
            Get the length of the vdEllipse’s segment from the curve’s beginning to the point specified by param.
            </summary>
            <param name="param">A value that represents a point on the ellipse.</param>
            <returns>The distance from the getStartParam.</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdEllipse.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdEllipse.getStartParam"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.getParamAtDist(System.Double)">
            <summary>
            Gets the parameter of the vdEllipse object at the specific distance.
            </summary>
            <param name="dist">The distance that the param is needed.</param>
            <returns>Returns parameter at the location specified by dist.</returns>
            <remarks>
            If the distance is 0.0 then the <see cref="M:VectorDraw.Professional.vdFigures.vdEllipse.getStartParam"/> is returned.
            If the distance is equal to the length of the object then the <see cref="M:VectorDraw.Professional.vdFigures.vdEllipse.getEndParam"/> is returned.
            </remarks>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdEllipse.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdEllipse.getStartParam"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.getDistAtPoint(VectorDraw.Geometry.gPoint)">
            <summary>
            Get the length of the Ellipse’s segment between the curve’s start point and pt.
            </summary>
            <param name="pt">The point of the vdEllipse in World Coordinate System(WCS).</param>
            <returns>Returns the length of the curve’s segment between the curve’s start point and point.</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdEllipse.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdEllipse.getStartParam"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.getPointAtDist(System.Double)">
            <summary>
            Gets a point belonging to the vdEllipse object at the specified distance.
            </summary>
            <param name="dist">The distance along the ellipse.</param>
            <returns>Returns the point located at the location specified by dist</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdEllipse.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdEllipse.getStartParam"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.getPointAtParam(System.Double)">
            <summary>
            Returns a point on the vdEllipse representing a param.
            </summary>
            <param name="param">The param of the vdEllipse object.</param>
            <returns>Returns the point on the curve specified by the param in World Coordinate System(WCS).</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdEllipse.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdEllipse.getStartParam"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.getParamAtPoint(VectorDraw.Geometry.gPoint)">
            <summary>
            Get the parameter of the vdEllipse at a specified point.
            </summary>
            <param name="pt">The point in World Coordinate System(WCS) belonging to the vdEllipse.</param>
            <returns>Returns the parameter of the ellipse at point.</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdEllipse.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdEllipse.getStartParam"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.PointOnCurve(VectorDraw.Geometry.gPoint,System.Boolean)">
            <summary>
            Returns if a point belongs to a vdEllipse object.
            </summary>
            <param name="pt">A point in WCS or ECS.</param>
            <param name="IsInECS">A boolean value indicating if the point is in ECS or WCS.</param>
            <returns>Returns true if the point belongs to the vdEllipse object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)">
            <summary>
            This function is intended to be called during a grip edit of the vdEllipse object. 
            </summary>
            <param name="Indexes">Represents a zero based array of the grip indexes that will be moved.</param>
            <param name="dx">The dx distance that the grip is moved.</param>
            <param name="dy">The dy distance that the grip is moved.</param>
            <param name="dz">The dz distance that the grip is moved.</param>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdEllipse.GetGripPoints"/>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnMoveGripPointsAt"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.GetGripPoints">
            <summary>
            A function returning the grip points of the object.
            </summary>
            <returns>Returns a new instance of gpoints object containing the grip points of the object.</returns>
            <remarks>
            The returning points are in World coordinate system(WCS).
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetGripPoints"/> event.
            When implementing this method the <see cref="M:VectorDraw.Professional.vdFigures.vdEllipse.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)"/> must be also override according to the new selected grip points.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.InitializeProperties">
            <summary>
            Resets the properties of the vdEllipse object to the Default values.
            </summary>
            <remarks>
            Default values:Center = (0.0,0.0,0.0),MajorAxis = MinorAxis = 1,MajorAngle = StartAngle = EndAngle = 0,HatchProperties = null.
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.ToString">
            <summary>
            Gets a System.String that represents the type of the vdEllipse Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.GetSamplePoints(System.Int32,System.Double)">
            <summary>
            Returns a list of points on the vdEllipse object from the start to the end point.
            </summary>
            <param name="curveResolution">valid values (1 to 20000)</param>
            <param name="pixelSize">valid values possitive decimal ( &gt;=0)</param>
            <returns>A collection of points belonging to the vdEllipse in Entity Coordinate System(ECS).</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCurve.GetSamplePoints(System.Int32,System.Double)"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.fixMajorMinorLength">
            <summary>
            Change the ellipse's properties in order MajorLength to be greater than MinorLength.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Called in order to draw the object in a specified vdRender object.
            </summary>
            <param name="render">The vdRender object in which the object will be drawn.</param>
            <returns><see cref="T:VectorDraw.Render.vdRender.DrawStatus"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.IntersectWith(VectorDraw.Professional.vdPrimaries.vdFigure,VectorDraw.Professional.Constants.VdConstInters,VectorDraw.Geometry.gPoints)">
            <summary>
            Finds the intersection points of an vdEllipse object with another object.
            </summary>
            <param name="pEntity">The entity with which the intersection of the object will be done.</param>
            <param name="intersectOption"><see cref="T:VectorDraw.Professional.Constants.VdConstInters"/> constant</param>
            <param name="intPoints">A precreated gPoints collection in which the instersection points will be added.The points are returned in WCS.</param>
            <returns>True if at least one intersection point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)">
            <summary>
            <see cref="M:VectorDraw.Professional.vdPrimaries.vdFigure.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)"/>.
            </summary>
            <param name="object2viewcs"></param>
            <param name="mode"></param>
            <param name="pickPoi"></param>
            <param name="LastPoi"></param>
            <param name="SegCount"></param>
            <param name="osnaps"></param>
            <returns>True if at least one osnap point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.ToMesh(System.Int32)">
            <summary>
            Converts the vdEllipse into a <see cref="T:VectorDraw.Professional.vdFigures.vdPolyface"/> object.
            </summary>
            <param name="CurveResolution">Determines the number of the segments that the arcs will be devided.</param>
            <returns>The created vdPolyface object which is not being added to the Document.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdEllipse object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdEllipse object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdEllipse.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements the vdEllipse object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdEllipse.BoundingBox">
            <summary>
            Gets the Bounding Box of the vdEllipse object in WorldCoordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdEllipse.Center">
            <summary>
            Get/Set the Center of the vdEllipse object.
            </summary>
            <remarks>
            Default value (0.0,0.0,0.0).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdEllipse.EndAngle">
            <summary>
            Get/Set the end angle of the vdEllipse object.
            </summary>
            <remarks>
            Default value 0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdEllipse.StartAngle">
            <summary>
            Get/Set the start angle of the vdEllipse object.
            </summary>
            <remarks>
            Default value 0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdEllipse.MajorLength">
            <summary>
            Get/Set the Major Length of a vdEllipse object.
            </summary>
            <remarks>
            Default value 1.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            The value must be greater than 0.0 else an Exception is raised.
            If MajorLength is equal to MinorLength then the vdEllipse is drawn as circle.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdEllipse.MinorLength">
            <summary>
            Get/Set the Minor Length of the vdEllipse object.
            </summary>
            <remarks>
            Default value 1.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            The value must be greater than 0.0 else an Exception is raised.
            If MajorLength is equal to MinorLength then the vdEllipse is drawn as circle.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdEllipse.MajorAngle">
            <summary>
            Get/Set the MajorAngle of the vdEllipse object.
            </summary>
            <remarks>
            Default value 0.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdEllipse.HatchProperties">
            <summary>
            Get/Set the hatch properties of the vdEllipse object.
            </summary>
            <remarks>
            Default value null.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdEllipse.ECSMatrix">
            <summary>
            Gets the matrix which is used to transform vectors or points from the 
            object's object coordinate system (OCS) to the World Coordinate System (WCS).
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdCircle">
            <summary>
            Implements the vdCircle object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes a new instance of the vdCircle object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.#ctor(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Geometry.gPoint,System.Double)">
            <summary>
            Initializes a new instance of the vdCircle object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <param name="center">The center point of the circle object.</param>
            <param name="radius">The radius of the circle object.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.#ctor">
            <summary>
            Initializes a new instance of the vdCircle object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.Invalidate">
            <summary>
            Invalidates the object's Bounding Box and causes the control to be redrawn in this region.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.AsPolyline">
            <summary>
            Create a vdPolyline object with the same properties as the this object.
            </summary>
            <returns>A new created vdPolyline object with the same properties as the this object.</returns>
            <remarks> The new vdPolyline object is not inserted in the Document.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.Explode">
            <summary>
            If the vdCircle object has hatchproperties the explode method creates a <see cref="T:VectorDraw.Professional.vdFigures.vdPolyhatch"/> object.
            </summary>
            <returns>The entities created by the explode method.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.TestOffsetSide(VectorDraw.Geometry.gPoint)">
            <summary>
            Tests if a point is inside a vdCircle or not.
            </summary>
            <param name="pt">The point with which the test will be commited in World Coordinate System(WCS).</param>
            <returns>Returns -1.0 if the distance between the point and the center of the circle is less than the radius
            and 1.0 if the distance is greater that the radius of the arc.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.getOffsetCurve(System.Double)">
            <summary>
            Creates a new vdCircle object at a specified distance and in the same plane with the existing object.
            </summary>
            <param name="offsetDist">The distance where the new vdCircle object will be created.</param>
            <returns>The new created vdCircle object.An empty collection is returned if the radius of the new object is less or equal to 0.0 .</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.Break(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdPrimaries.vdFigure@)">
            <summary>
            Breaks the vdCircle into two or one subarcs.Deletes the part that is between p1,p2.
            </summary>
            <param name="p1">The first point needed for this command.</param>
            <param name="p2">The second point needed for this command.</param>
            <param name="newEntity">If a new arc is created it is returned in this parameter.</param>
            <returns>true if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.AsEllipse">
            <summary>
            Returns a <see cref="T:VectorDraw.Professional.vdFigures.vdEllipse"/> object with the same properties as this vdCircle.
            </summary>
            <returns>Returns a <see cref="T:VectorDraw.Professional.vdFigures.vdEllipse"/> object.</returns>
            <remarks>This is used when exploding a vdInsert object with different Xscale and Yscale.
            In order to show correctly the vdCircle object it has to be converted into a vdEllipse object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.Area">
            <summary>
            Calculates the enclosed area of the vdCircle object in Drawing Units.
            </summary>
            <returns>Returns the enclosed area.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.Length">
            <summary>
            Calculates the length of the vdCircle object.
            </summary>
            <returns>Returns the length of the object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.getStartParam">
            <summary>
            Returns the start parameter for the vdCircle object.
            </summary>
            <returns>Returns the start parameter for the vdCircle object equal to 0.0.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.getEndParam">
            <summary>
            Returns the end parameter for the vdCircle object.
            </summary>
            <returns>Returns the end parameter for the vdArc object equal to <see cref="F:VectorDraw.Geometry.Globals.VD_TWOPI"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.getParamAtPoint(VectorDraw.Geometry.gPoint)">
            <summary>
            Returns the parameter of the vdCircle object at the specified point.
            </summary>
            <param name="pt">A point of the vdCircle object in World Coordinate System(WCS).</param>
            <returns>Returns the parameter of the vdCircle object at the specified point.</returns>
            <remarks>If the point does not belong to the vdCircle object an Exception is thrown.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.getPointAtParam(System.Double)">
            <summary>
            Get a point of the vdCircle object at a given param distance.
            </summary>
            <param name="param">The parameter used to calculate the point.</param>
            <returns>Returns a point of the vdArc object in World Coordinate System(WCS).</returns>
            <remarks>If the param is not between the start and end parameter of the vdArc object an Exception is thrown.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.PointOnCurve(VectorDraw.Geometry.gPoint,System.Boolean)">
            <summary>
            Returns if a point belongs to a vdCircle object.
            </summary>
            <param name="pt">A point in WCS or ECS.</param>
            <param name="IsInECS">A boolean value indicating if the point is in ECS or WCS.</param>
            <returns>Returns true if the point belongs to the vdCircle object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)">
            <summary>
            This function is intended to be called during a grip edit of the vdCircle object. 
            </summary>
            <param name="Indexes">Represents a zero based array of the grip indexes that will be moved.</param>
            <param name="dx">The dx distance that the grip is moved.</param>
            <param name="dy">The dy distance that the grip is moved.</param>
            <param name="dz">The dz distance that the grip is moved.</param>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCircle.GetGripPoints"/>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnMoveGripPointsAt"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.GetGripPoints">
            <summary>
            A function returning the grip points of the object.
            </summary>
            <returns>Returns a new instance of gpoints object containing the grip points of the object.</returns>
            <remarks>
            The returning points are in World coordinate system(WCS).
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetGripPoints"/> event.
            When implementing this method the <see cref="M:VectorDraw.Professional.vdFigures.vdCircle.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)"/> must be also override according to the new selected grip points.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.InitializeProperties">
            <summary>
            Resets the properties of the vdCircle object to the Default values.
            </summary>
            <remarks>
            Default values:Center = (0.0.0.0.0.0),Radius = 0,HatchProperties = null.
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.ToString">
            <summary>
            Gets a System.String that represents the type of the vdCircle Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.GetSamplePoints(System.Int32,System.Double)">
            <summary>
            Returns a list of points on the vdCircle object from the start to the end point of the curve.
            </summary>
            <param name="curveResolution">valid values (1 to 20000)</param>
            <param name="pixelSize">valid values possitive decimal ( &gt;=0)</param>
            <returns>A collection of points belonging to the vdArc in Entity Coordinate System(ECS).</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCurve.GetSamplePoints(System.Int32,System.Double)"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.IntersectWith(VectorDraw.Professional.vdPrimaries.vdFigure,VectorDraw.Professional.Constants.VdConstInters,VectorDraw.Geometry.gPoints)">
            <summary>
            Finds the intersection points of a vdCircle object with another object.
            </summary>
            <param name="pEntity">The entity with which the intersection of the object will be done.</param>
            <param name="intersectOption"><see cref="T:VectorDraw.Professional.Constants.VdConstInters"/> constant</param>
            <param name="intPoints">A precreated gPoints collection in which the instersection points will be added.The points are returned in WCS.</param>
            <returns>True if at least one intersection point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)">
            <summary>
            <see cref="M:VectorDraw.Professional.vdPrimaries.vdFigure.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)"/>.
            </summary>
            <param name="object2viewcs"></param>
            <param name="mode"></param>
            <param name="pickPoi"></param>
            <param name="LastPoi"></param>
            <param name="SegCount"></param>
            <param name="osnaps"></param>
            <returns>True if at least one osnap point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Called in order to draw the object in a specified vdRender object.
            </summary>
            <param name="render">The vdRender object in which the object will be drawn.</param>
            <returns><see cref="T:VectorDraw.Render.vdRender.DrawStatus"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.ToMesh(System.Int32)">
            <summary>
            Converts the vdCircle into a <see cref="T:VectorDraw.Professional.vdFigures.vdPolyface"/> object.
            </summary>
            <param name="CurveResolution">Determines the number of the segments that the arcs will be devided.</param>
            <returns>The created vdPolyface object which is not being added to the Document.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdCircle object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdCircle object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdCircle.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements the vdCircle object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdCircle.Center">
            <summary>
            Get/Set the Center of the vdCircle object in World Coordinate System.
            </summary>
            <remarks>
            Default value (0.0,0.0,0.0).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdCircle.Radius">
            <summary>
            Get/Set the radius of the vdCircle object.
            </summary>
            <remarks>
            Default value 0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdCircle.AlignToView">
            <summary>
            A boolean value that defines if the plane of the object is relative to the current view.
            </summary>
            <remarks>
            Default value is False.
            Please note that when AlignToView is true the extrusion vector of the object is relative to Current view coordinative system and not to World as the default behaviour is.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdCircle.AlignToViewSize">
            <summary>
            Get/Set the height of the object in output Device millimeters for positive or hundreds of millimeters for negative.
            </summary>
            <remarks>
            If  value is not 0 then the height of the object will be the same independently of current zoom.
            If value = 0 height is relative to Drawing Units.
            Negative values are in hundreds of millimeters of output device (screen/printer etc). For example, in order the object to have 1.5 millimeters height you must set it to -150 (means 150/100 millimeters).
            Default value = 0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdCircle.BoundingBox">
            <summary>
            Gets the Bounding Box of the vdCircle object in WorldCoordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdCircle.HatchProperties">
            <summary>
            Get/Set the hatch properties of the vdCircle object.
            </summary>
            <remarks>
            Default value null.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdCircle.ECSMatrix">
            <summary>
            Gets the matrix which is used to transform vectors or points from the 
            object's object coordinate system (OCS) to the World Coordinate System (WCS).
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.vdPrimariesList">
            <summary>
            Implements the vdPrimariesList collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPrimariesList.GetNotDeletedItems">
            <summary>
            Get all non deleted objects of the collection.
            </summary>
            <returns>
            Returns a new created collection of vdPrimary objects 
            that are not set as <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.Deleted"/>.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPrimariesList.#ctor">
            <summary>
            Initializes the vdPrimariesList collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPrimariesList.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPrimariesList.ToString">
            <summary>
            Gets a System.String that represents the count of the vdPrimariesList collection Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPrimariesList.FindItem(VectorDraw.Professional.vdObjects.vdPrimary)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">A vdPrimary object to be checked if it exists in the collection</param>
            <returns>True if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPrimariesList.AddItem(VectorDraw.Professional.vdObjects.vdPrimary)">
            <summary>
            Adds a vdPrimary object to the collection.
            </summary>
            <param name="value">The vdPrimary object to be added to the collection.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPrimariesList.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
            <remarks>
            All vdPrimary objects are removed from the collection.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPrimariesList.RemoveItem(VectorDraw.Professional.vdObjects.vdPrimary)">
            <summary>
            Removes a specific vdPrimary object from the collection.
            </summary>
            <param name="Object">The vdPrimary object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPrimariesList.RemoveAt(System.Int32)">
            <summary>
            Removes an object from the specified index of the collection.
            </summary>
            <param name="Index">The zero based index.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPrimariesList.InsertAt(System.Int32,VectorDraw.Professional.vdObjects.vdPrimary)">
            <summary>
            Insert a vdPrimary object to a specified index of the collection.
            </summary>
            <param name="Index">The zero based index of the collection where the object will be inserted.</param>
            <param name="Object">The vdPrimary object which will be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPrimariesList.ChangeOrder(VectorDraw.Professional.vdObjects.vdPrimary,System.Boolean)">
            <summary>
            Changes the position of a vdPrimary object to the front or the end of the collection.
            </summary>
            <param name="Object">The vdPrimary object.</param>
            <param name="ToBack">If true moves the object to the beginning of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPrimariesList.MakeIndexDictionary">
            <summary>
            Creates an Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must be followed by a <see cref="M:VectorDraw.Professional.vdCollections.vdPrimariesList.ClearIndexDictionary"/> call when the search or swap is finished. </remarks>
            <example> For a code example please check topic <see cref="M:VectorDraw.Professional.vdCollections.vdPrimariesList.swap(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdPrimary)"/> Method. </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPrimariesList.ClearIndexDictionary">
            <summary>
            Clears the Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must follow a <see cref="M:VectorDraw.Professional.vdCollections.vdPrimariesList.MakeIndexDictionary"/> call when the search or swap is finished. </remarks>
            <example> For a code example please check topic <see cref="M:VectorDraw.Professional.vdCollections.vdPrimariesList.swap(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdPrimary)"/> Method. </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPrimariesList.swap(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdPrimary)">
            <summary>
            Swaps the position between two different vdPrimary objects existing in the collection.
            </summary>
            <param name="Object1">first object needed.</param>
            <param name="Object2">second object needed.</param>
            <returns>True if the swap operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPrimariesList.RemoveItem(System.Object)">
            <summary>
            Removes an object from the collection.
            </summary>
            <param name="item">The object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPrimariesList.AddItem(System.Object)">
            <summary>
            Adds an object to the collection.
            </summary>
            <param name="value">The object to be added.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPrimariesList.FindItem(System.Object)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">The object required for the search.</param>
            <returns>true if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPrimariesList.VectorDraw#Professional#vdCollections#IvdObjectCollection#Item(System.Int32)">
            <summary>
            Retreave a specific item placed at a specified index from the collection.
            </summary>
            <param name="Index">The index where the object is.</param>
            <returns>Returns the object at the specified index.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPrimariesList.GetObjectRealPosition(System.Object)">
            <summary>
            Find the index where a specified object is located in the list.
            </summary>
            <param name="item">The object to find.</param>
            <returns>Returns the index where the object is or -1 if the object is not in the list.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPrimariesList.InsertAt(System.Int32,System.Object)">
            <summary>
            Insert an object at a specified index.
            </summary>
            <param name="index">The index where the object will be inserted.</param>
            <param name="item">The object to be inserted.</param>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdPrimariesList.ItemType">
            <summary>
            Returns the Type of Items in the collection
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdPrimariesList.ListPosition">
            <summary>
            Gets the <see cref="T:VectorDraw.Generics.IListPosition"/> interface object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdPrimariesList.Item(System.Int32)">
            <summary>
            Get a vdPrimary object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The vdPrimary object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdPrimariesList.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdArc">
            <summary>
            Implements the vdArc object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes a new instance of the vdArc object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.#ctor(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Geometry.gPoint,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the vdArc object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <param name="center">The center point of the arc object.</param>
            <param name="radius">The radius of the arc object.</param>
            <param name="startAngle">The start angle of the arc object.</param>
            <param name="endAngle">The end angle of the arc object.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.#ctor">
            <summary>
            Initializes a new instance of the vdArc object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.AsPolyline">
            <summary>
            Create a vdPolyline object with the same properties as the this object.
            </summary>
            <returns>A new created vdPolyline object with the same properties as the this object.</returns>
            <remarks> The new vdPolyline object is not inserted in the Document.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.Explode">
            <summary>
            If the vdArc object has hatchproperties the explode method creates a <see cref="T:VectorDraw.Professional.vdFigures.vdPolyhatch"/> object.
            </summary>
            <returns>The entities created by the explode method.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.TestOffsetSide(VectorDraw.Geometry.gPoint)">
            <summary>
            Tests if a point is inside a vdArc or not.
            </summary>
            <param name="pt">The point with which the test will be commited in World Coordinate System(WCS).</param>
            <returns>Returns -1.0 if the distance between the point and the center of the arc is less than the radius
            and 1.0 if the distance is greater that the radius of the arc.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.getOffsetCurve(System.Double)">
            <summary>
            Creates a new vdArc object at a specified distance and in the same plane with the existing object.
            </summary>
            <param name="offsetDist">The distance where the new vdArc object will be created.</param>
            <returns>The new created vdArc object.An empty collection is returned if the radius of the new object is less or equal to 0.0 .</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.Fillet(System.Double,VectorDraw.Professional.vdFigures.vdCurve@,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdFigures.vdArc@)">
            <summary>
            Fillets the edges between arcs and lines.
            </summary>
            <param name="Radius">The radius for the fillet command.</param>
            <param name="withObject">The object with which the fillet command will be commited.This object should be either a vdArc or vdLine object.This object must be already created.</param>
            <param name="pointOnThis">A point on the vdArc object in World Coordinate System(WCS).</param>
            <param name="pointOnWithObject">A point on the other entity in WCS.</param>
            <param name="arc">If a new object must be created it is returned in this parameter.</param>
            <returns>true if the fillet command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.Break(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdPrimaries.vdFigure@)">
            <summary>
            Breaks the vdArc into two or one subarcs.Deletes the part that is between p1,p2.
            </summary>
            <param name="p1">The first point needed for this command.</param>
            <param name="p2">The second point needed for this command.</param>
            <param name="newEntity">If a new arc is created it is returned in this parameter.</param>
            <returns>true if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.AsEllipse">
            <summary>
            Returns a <see cref="T:VectorDraw.Professional.vdFigures.vdEllipse"/> object with the same properties as this vdArc.
            </summary>
            <returns>Returns a <see cref="T:VectorDraw.Professional.vdFigures.vdEllipse"/> object.</returns>
            <remarks>This is used when exploding a vdInsert object with different Xscale and Yscale. 
            In order to show correctly the vdArc object it has to be converted into a vdEllipse object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.Area">
            <summary>
            Calculates the enclosed area of the vdArc object in Drawing Units.
            </summary>
            <returns>Returns the enclosed area.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.Length">
            <summary>
            Calculates the length of the vdArc object.
            </summary>
            <returns>Returns the length of the object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.getParamAtDist(System.Double)">
            <summary>
            Get the parameter at a specified distance.
            </summary>
            <param name="dist">The distance from the start of the vdArc object.</param>
            <returns>The parameter at the specified distance.</returns>
            <remarks>The parameter returned is the angle difference from the start angle.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.getFirstOffsetParam">
            <summary>
            Get a value representing the start angle of the vdArc object.
            </summary>
            <returns>Returns the start angle of the vdArc object.</returns>
            <remarks >The start angle is the start parameter for a vdArc object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.getStartParam">
            <summary>
            Returns the start parameter for the vdArc object.
            </summary>
            <returns>Returns the start parameter for the vdArc object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.getEndParam">
            <summary>
            Return the end parameter for the vdArc object.
            </summary>
            <returns>Return the end parameter for the vdArc object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.getPointAtParam(System.Double)">
            <summary>
            Get a point of the vdArc object at a given param distance.
            </summary>
            <param name="param">The parameter used to calculate the point.</param>
            <returns>Returns a point of the vdArc object in World Coordinate System(WCS).</returns>
            <remarks>If the param is not between the start and end parameter of the vdArc object an Exception is thrown.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.getParamAtPoint(VectorDraw.Geometry.gPoint)">
            <summary>
            Returns the parameter of the vdArc object at the specified point.
            </summary>
            <param name="pt">A point of the vdArc object in World Coordinate System(WCS).</param>
            <returns>Returns the parameter of the vdArc object at the specified point.</returns>
            <remarks>If the point does not belong to the vdArc object an Exception is thrown.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.PointOnCurve(VectorDraw.Geometry.gPoint,System.Boolean)">
            <summary>
            Returns if a point belongs to a vdArc object.
            </summary>
            <param name="pt">A point in WCS or ECS.</param>
            <param name="IsInECS">A boolean value indicating if the point is in ECS or WCS.</param>
            <returns>Returns true if the point belongs to the vdArc object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)">
            <summary>
            This function is intended to be called during a grip edit of the vdArc object. 
            </summary>
            <param name="Indexes">Represents a zero based array of the grip indexes that will be moved.</param>
            <param name="dx">The dx distance that the grip is moved.</param>
            <param name="dy">The dy distance that the grip is moved.</param>
            <param name="dz">The dz distance that the grip is moved.</param>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdArc.GetGripPoints"/>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnMoveGripPointsAt"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.GetGripPoints">
            <summary>
            A function returning the grip points of the object.
            </summary>
            <returns>Returns a new instance of gpoints object containing the grip points of the object.</returns>
            <remarks>
            The returning points are in World coordinate system(WCS).
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetGripPoints"/> event.
            When implementing this method the <see cref="M:VectorDraw.Professional.vdFigures.vdArc.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)"/> must be also override according to the new selected grip points.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.InitializeProperties">
            <summary>
            Resets the properties of the vdArc object to the Default values.
            </summary>
            <remarks>
            Default values:Center = (0.0,0.0,0.0),Radius = 0,EndAngle = 0,StartAngle = 0,HatchProperties = null.
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.ToString">
            <summary>
            Gets a System.String that represents the type of the vdArc Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.GetSamplePoints(System.Int32,System.Double)">
            <summary>
            Returns a list of points on the vdArc object from the start to the end point of the curve.
            </summary>
            <param name="curveResolution">valid values (1 to 20000)</param>
            <param name="pixelSize">valid values possitive decimal ( &gt;=0)</param>
            <returns>A collection of points belonging to the vdArc in Entity Coordinate System(ECS).</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCurve.GetSamplePoints(System.Int32,System.Double)"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.IntersectWith(VectorDraw.Professional.vdPrimaries.vdFigure,VectorDraw.Professional.Constants.VdConstInters,VectorDraw.Geometry.gPoints)">
            <summary>
            Finds the intersection points of an object with another object.
            </summary>
            <param name="pEntity">The entity with which the intersection of the object will be done.</param>
            <param name="intersectOption"><see cref="T:VectorDraw.Professional.Constants.VdConstInters"/> constant</param>
            <param name="intPoints">A precreated gPoints collection in which the instersection points will be added.The points are returned in WCS.</param>
            <returns>True if at least one intersection point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)">
            <summary>
            <see cref="M:VectorDraw.Professional.vdPrimaries.vdFigure.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)"/>.
            </summary>
            <param name="object2viewcs"></param>
            <param name="mode"></param>
            <param name="pickPoi"></param>
            <param name="LastPoi"></param>
            <param name="SegCount"></param>
            <param name="osnaps"></param>
            <returns>True if at least one osnap point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Called in order to draw the object in a specified vdRender object.
            </summary>
            <param name="render">The vdRender object in which the object will be drawn.</param>
            <returns><see cref="T:VectorDraw.Render.vdRender.DrawStatus"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.ToMesh(System.Int32)">
            <summary>
            Converts the vdArc into a <see cref="T:VectorDraw.Professional.vdFigures.vdPolyface"/> object.
            </summary>
            <param name="CurveResolution">Determines the number of the segments that the arcs will be devided.</param>
            <returns>The created vdPolyface object which is not being added to the Document.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdArc object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdArc object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdArc.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements the vdArc object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArc.Center">
            <summary>
            Get/Set the Center of the vdArc object.
            </summary>
            <remarks>
            Default value (0.0,0.0,0.0).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArc.Radius">
            <summary>
            Get/Set the radius of the vdArc object.
            </summary>
            <remarks>
            Default value 0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArc.EndAngle">
            <summary>
            Get/Set the end angle of the vdArc object.
            </summary>
            <remarks>
            Default value 0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArc.StartAngle">
            <summary>
            Get/Set the start angle of the vdArc object.
            </summary>
            <remarks>
            Default value 0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArc.HatchProperties">
            <summary>
            Get/Set the hatch properties of the vdArc object.
            </summary>
            <remarks>
            Default value null.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArc.BoundingBox">
            <summary>
            Gets the Bounding Box of the vdArc object in WorldCoordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdArc.ECSMatrix">
            <summary>
            Gets the matrix which is used to transform vectors or points from the 
            object's object coordinate system (OCS) to the World Coordinate System (WCS).
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.vdViews">
            <summary>
            A collection object of vdView objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdViews.#ctor">
            <summary>
            Initializes the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdViews.AddItem(VectorDraw.Professional.vdPrimaries.vdView)">
            <summary>
            Adds a vdViews object to the collection.
            </summary>
            <param name="value">The vdViews object to be added to the collection.</param>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAddItem"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterAddItem"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdViews.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdViews.Add(System.String)">
            <summary>
            Creates and adds a vdView object to the collection with the specified name.
            </summary>
            <param name="Name">The name of the inserted vdView object.</param>
            <returns>Returns the added vdView object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdViews.FindName(System.String)">
            <summary>
            Finds a vdView object with the specified name in the collection.
            </summary>
            <param name="name">The name to search in the collection.</param>
            <returns>The found object else returns null if a vdView does not exist with this name.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdViews.FindItem(VectorDraw.Professional.vdPrimaries.vdView)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">A vdView object to be checked if it exists in the collection</param>
            <returns>True if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdViews.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdViews.RemoveItem(VectorDraw.Professional.vdPrimaries.vdView)">
            <summary>
            Removes a specific vdView object from the collection.
            </summary>
            <param name="Object">The vdView object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdViews.getUniqueTableName(System.String)">
            <summary>
            Creates a unique string for use as name to a vdView object.
            </summary>
            <param name="prefix">A prefix string that will be present to the unique name.</param>
            <returns>Returns a unique string.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdViews.ToString">
            <summary>
            Gets a System.String that represents the count of the vdView collection Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdViews.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdViews object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdViews.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdViews object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdViews.ChangeOrder(VectorDraw.Professional.vdPrimaries.vdView,System.Boolean)">
            <summary>
            Changes the position of a vdView object to the front or the end of the collection.
            </summary>
            <param name="Object">The vdView object.</param>
            <param name="ToBack">If true moves the object to the beginning of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdViews.swap(VectorDraw.Professional.vdPrimaries.vdView,VectorDraw.Professional.vdPrimaries.vdView)">
            <summary>
            Swaps the position between two different vdView objects existing in the collection.
            </summary>
            <param name="Object1">first object needed.</param>
            <param name="Object2">second object needed.</param>
            <returns>True if the swap operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdViews.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdViews.GetNotDeletedItems">
            <summary>
            Get all non deleted objects of the collection.
            </summary>
            <returns>
            Returns a new created collection of vdView objects 
            that are not set as <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.Deleted"/>.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdViews.AddItem(System.Object)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="value">The object to be added.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdViews.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            A collection object of vdView objects.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdViews.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdViews.ListPosition">
            <summary>
            Gets the <see cref="T:VectorDraw.Generics.IListPosition"/> interface object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdViews.Item(System.Int32)">
            <summary>
            Get a vdView object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The vdView object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdViews.Last">
            <summary>
            Returns the last item in the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdViews.ItemType">
            <summary>
            Returns the Type of Items in the collection
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.vdLayersGroups">
            <summary>
            A collection object of vdLayersGroup objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersGroups.#ctor">
            <summary>
            Initializes the vdLayersGroups collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersGroups.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersGroups.AddItem(VectorDraw.Professional.vdPrimaries.vdLayersGroup)">
            <summary>
            Adds a vdLayersGroup object to the collection.
            </summary>
            <param name="value">The vdLayersGroup object to be added to the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersGroups.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersGroups.Add(System.String)">
            <summary>
            Creates and adds a vdLayersGroup object to the collection with the specified name.
            </summary>
            <param name="Name">The name of the inserted vdLayersGroup object.</param>
            <returns>Returns the added vdLayersGroup object.</returns>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAddItem"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterAddItem"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersGroups.FindName(System.String)">
            <summary>
            Finds a vdLayersGroup object with the specified name in the collection.
            </summary>
            <param name="Name">The name to search in the collection.</param>
            <returns>The found object else returns null if a vdLayersGroup does not exist with this name.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersGroups.FindItem(VectorDraw.Professional.vdPrimaries.vdLayersGroup)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">A vdLayersGroup object to be checked if it exists in the collection</param>
            <returns>True if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersGroups.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersGroups.RemoveItem(VectorDraw.Professional.vdPrimaries.vdLayersGroup)">
            <summary>
            Removes a specific vdLayersGroup object from the collection.
            </summary>
            <param name="Object">The vdLayersGroup object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersGroups.RemoveLayer(VectorDraw.Professional.vdPrimaries.vdLayer)">
            <summary>
            Removes a specific Layer from all the groups of this collection.
            </summary>
            <param name="layer">The layer to be removed.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersGroups.getUniqueTableName(System.String)">
            <summary>
            Creates a unique string for use as name to a vdLayersGroup object.
            </summary>
            <param name="prefix">A prefix string that will be present to the unique name.</param>
            <returns>Returns a unique string.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersGroups.ToString">
            <summary>
            Gets a System.String that represents the count of the vdLayersGroups collection Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersGroups.ChangeOrder(VectorDraw.Professional.vdPrimaries.vdLayersGroup,System.Boolean)">
            <summary>
            Changes the position of a vdLayersGroup object to the front or the end of the collection.
            </summary>
            <param name="Object">The vdLayersGroup object.</param>
            <param name="ToBack">If true moves the object to the beginning of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersGroups.swap(VectorDraw.Professional.vdPrimaries.vdLayersGroup,VectorDraw.Professional.vdPrimaries.vdLayersGroup)">
            <summary>
            Swaps the position between two different vdLayersGroup objects existing in the collection.
            </summary>
            <param name="Object1">first object needed.</param>
            <param name="Object2">second object needed.</param>
            <returns>True if the swap operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersGroups.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersGroups.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdLayersGroups object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayersGroups.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdLayersGroups object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLayersGroups.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLayersGroups.ListPosition">
            <summary>
            Gets the <see cref="T:VectorDraw.Generics.IListPosition"/> interface object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLayersGroups.Item(System.Int32)">
            <summary>
            Get a vdLayersGroup object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The vdLayersGroup object at the specified index.</returns>
        </member>
        <member name="T:VectorDraw.Professional.PropertyList.getDistUITypeEditor">
            <summary>
             Internally used. usage: [EditorAttribute(typeof(VectorDraw.Professional.PropertyList.getDistUITypeEditor), typeof(System.Drawing.Design.UITypeEditor))]
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.PropertyList.getDistUITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.PropertyList.getDistUITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.PropertyList.getAngleUITypeEditor">
            <summary>
             Internally used. usage: [EditorAttribute(typeof(VectorDraw.Professional.PropertyList.getAngleUITypeEditor), typeof(System.Drawing.Design.UITypeEditor))]
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.PropertyList.getAngleUITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.PropertyList.getAngleUITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.PropertyList.getUCSBoxUITypeEditor">
            <summary>
             Internally used. usage: [EditorAttribute(typeof(VectorDraw.Professional.PropertyList.getUCSBoxUITypeEditor), typeof(System.Drawing.Design.UITypeEditor))]
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.PropertyList.getUCSBoxUITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.PropertyList.getUCSBoxUITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.PropertyList.getDCSBoxUITypeEditor">
            <summary>
             Internally used. usage: [EditorAttribute(typeof(VectorDraw.Professional.PropertyList.getDCSBoxUITypeEditor), typeof(System.Drawing.Design.UITypeEditor))]
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.PropertyList.getDCSBoxUITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.PropertyList.getDCSBoxUITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.PropertyList.gPointsTypeEditor">
            <summary>
             Internally used. 
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.PropertyList.gPointsTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.PropertyList.gPointsTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.PropertyList.vdPickVectorDialog">
            <summary>
             Internally used. 
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.PropertyList.vdPickVectorDialog.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.PropertyList.vdPickVectorDialog.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.PropertyList.vdPickPointDialog">
            <summary>
             Internally used. 
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.PropertyList.vdPickPointDialog.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.PropertyList.vdPickPointDialog.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.PropertyList.vdFileOpenDialog">
            <summary>
             Internally used. 
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.PropertyList.vdFileOpenDialog.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.PropertyList.vdFileOpenDialog.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:VectorDraw.Professional.PropertyList.vdFileOpenDialog.FileFilter">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.PropertyList.vdFileImageOpenDialog">
            <summary>
             Internally used. 
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.PropertyList.vdFileImageOpenDialog.FileFilter">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.PropertyList.vdFolderOpenDialog">
            <summary>
            Internally used. 
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.PropertyList.vdFolderOpenDialog.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Internally used. 
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.PropertyList.vdFolderOpenDialog.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
             Internally used. 
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionSketch">
            <summary>
            Implements the ActionSketch object used in CmdSketch command.
            </summary>
            <remarks>
            The sketch command is a helpfull command that by moving the cursor points are being added. This command can be used over added images
            to a Document to draw polylines easily simply by moving the cursor over these lines.</remarks>
            <remarks>The command starts by asking a distance. This distance is going to be used as a reference distance between the points.So if a user 
            provides a distance of 0.5 this means that every 0.5 drawing units a point is going to be added.</remarks>
            <remarks>The command starts after providing a distance and a start point is being asked. By Left mouse clicking that command starts. Left mouse means Pen Down 
            and points are being added as the mouse moves.</remarks>
            <remarks>Other Keyboard commands during the Sketch command</remarks>
            <remarks>P : Pen Up / Pen Down : By pressing the P key is the same as Left mouse click. While Pen Down points are being added and while Pen up no points are being added 
            and the user can move to a different section of the Document and start a new polyline.</remarks>
            <remarks>E : Erase mode On/Off : By pressing the E button the erase mode is activated and the user can correct a previous point by simply moving the cusros over the previously
            added points and automatically these points arte going to be erased.</remarks>
            <remarks>C : Closes the current polyline</remarks>
            <remarks>Right Click : Ends the command and returns/adds the polylines that where created from the userr to the document.</remarks>
            <remarks>Esc : Cancels the command and no polylines are being added.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionSketch.getCurrentPoint">
            <summary>
            in World plane
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionSketch.getCurrentDistance">
            <summary>
            relative to user plane
            </summary>
            <returns></returns>
        </member>
        <member name="F:VectorDraw.Professional.CommandActions.ActionSketch.mDrawPolylines">
            <summary>
            Used to get the result when the action is finished.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionSketch.#ctor">
            <summary>
            Initializes the action.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionSketch.#ctor(System.Double,VectorDraw.Professional.vdPrimaries.vdLayout,System.Drawing.Color)">
            <summary>
            Initializes the Action with the passed parameters.
            </summary>
            <param name="distance">The Sketch record Increment distance.</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
            <param name="RubberLineColor">The Color that will be used as rubberLine.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionSketch.OnIdle">
            <summary>
            Commited when the mouse is idle.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionSketch.PureDraw">
            <summary>
            Makes the necessary rendering for the action.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionSketch.MouseLeave">
            <summary>
            Fires when the user leaves the screen basically used in TouchScreen implementations.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionSketch.MouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Fires when the user leaves the screen basically used in TouchScreen implementations.
            </summary>
            <param name="e">Mouse event arguments.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionSketch.MouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Fires when the user presses a mouse button.
            </summary>
            <param name="e">Mouse event arguments.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionSketch.MouseMove(System.Windows.Forms.MouseEventArgs,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Occurs when the mouse pointer is moved.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionSketch.KeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Fires when the user presses a keyboard key.
            </summary>
            <param name="e">KeyDown event arguments.</param>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionSketch.UserWaiting">
            <summary>
            A boolean value representing if the action is waiting for user input.Returns true.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionSketch.SendKeyEvents">
            <summary>
            Internally used in order to parse or not the key pressed from the user , from the CommandLine control
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionCloud">
            <summary>
            Implements the ActionCloud action used in cmdCloud command.
            </summary>
            <remarks> The Action finishes with right click(cancel) ,left click or if the cursor passes from the startpoint of the polyline(cloud). </remarks>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionCloud.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdPrimaries.vdLayout,System.Double)">
            <summary>
            Initializes the Action with the passed parameters
            </summary>
            <param name="reference">The first point of the polyline (cloud). In Current User Coordinate System</param>
            <param name="layout">The layout where the action takes place.</param>
            <param name="arcdistance">The distance between the points of the polyline (cloud).</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionCloud.OnMyPositionChanged(VectorDraw.Geometry.gPoint)">
            <summary>
            Called when the mouse position changes.Changes the end point of the created multiline entity in order to be drawn each time the mouse moves.
            </summary>
            <param name="newPosition">A gPoint representing the new mouse position in User Coordinate System.</param>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionCloud.Entity">
            <summary>
            The entity which is currently selected for this action.Returns the created polyline (cloud).
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionCloud.HideRubberLine">
            <summary>
            Get a value that represents if the rubber line is drawn or not.Returns true since a rubber line is not needed.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionCloud.needUpdate">
            <summary>
            Get a value that represents if the entity should be updated after each position change.Returns true since an update is needed.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdPolyline">
            <summary>
            Implements the vdPolyline object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes a new instance of the vdPolyline object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.#ctor(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Geometry.Vertexes)">
            <summary>
            Initializes a new instance of the vdPolyline object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <param name="vertexlist">The vertexlist of the polyline object.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.#ctor(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Geometry.gPoints)">
            <summary>
            Initializes a new instance of the vdPolyline object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <param name="vertexlist">The vertexlist of the polyline object.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.#ctor">
            <summary>
            Initializes a new instance of the vdPolyline object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.HasWidths">
            <summary>
            Returns true if and only if any of the segments in this Polyline entity have start and end widths
            and the <see cref="P:VectorDraw.Professional.vdFigures.vdPolyline.SPlineFlag"/> is <see cref="F:VectorDraw.Professional.Constants.VdConstSplineFlag.SFlagSTANDARD"/>
            </summary>
            <returns>True if the polyline has different widths.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.constantwidth">
            <summary>
            returns the PenWidth is not has widths or a value > 0 if all widths are the same else it return 0.0
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.setWidthsAt(System.Int32,System.Double,System.Double)">
            <summary>
            Sets the start and end widths for the specified segment of this Polyline entity.
            </summary>
            <param name="index"> Zero bazed segment index inside the range of <see cref="P:VectorDraw.Professional.vdFigures.vdPolyline.VertexList"/> length</param>
            <param name="StartWidth"> Start width for the vertex in Drawing Units</param>
            <param name="EndWidth">End width for the vertex in Drawing Units</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.setStartWidthAt(System.Int32,System.Double)">
            <summary>
            Sets the start width for the specified segment of this Polyline entity.
            </summary>
            <param name="index"> Zero bazed segment index inside the range of <see cref="P:VectorDraw.Professional.vdFigures.vdPolyline.VertexList"/> length</param>
            <param name="StartWidth"> Start width for the vertex in Drawing Units</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.setEndWidthAt(System.Int32,System.Double)">
            <summary>
            Sets the end width for the specified segment of this Polyline entity.
            </summary>
            <param name="index"> Zero bazed segment index inside the range of <see cref="P:VectorDraw.Professional.vdFigures.vdPolyline.VertexList"/> length</param>
            <param name="EndWidth"> Start width for the vertex in Drawing Units</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.IsClockwise">
            <summary>
            Returns true if the points of the vdPolyline object are clockwise.
            </summary>
            <returns>Returns true if the points of the vdPolyline object are clockwise.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.Union(VectorDraw.Professional.vdPrimaries.vdFigure)">
            <summary>
            Joins the Polyline with an other vdFigure object.
            </summary>
            <param name="withFigure">The vdFigure object with which the union will take place(vdCircle,vdRect,vdPolyline).</param>
            <returns>True if the operation was succesfull.</returns>
            <remarks>Use the one of UnionEx methods if the two curves are intersecting in more than two(2) points.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.UnionEx(VectorDraw.Professional.vdCollections.vdCurves,System.Boolean)">
            <summary>
            Try to Join the vdCurve objects of a collection with this object.
            </summary>
            <param name="curves">A collection contains the object that will be joined with this object.</param>
            <param name="useSamplePoints">If true then divide all arc segments of curves into small line segments.</param>
            <returns>True if at least one object was joined.</returns>
            <example><see cref="M:VectorDraw.Professional.vdFigures.vdPolyline.Combine(VectorDraw.Professional.vdFigures.vdCurve,VectorDraw.Professional.vdFigures.vdPolyline.CombineMode,System.Double)"/></example>
            <remarks>Set the useSamplePoints parameter to True if the input curves are intersecting in more than two(2) points with this curve object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.UnionEx(VectorDraw.Professional.vdCollections.vdSelection,System.Boolean)">
            <summary>
            Try to Join the vdFigure objects of a selection with this object.
            </summary>
            <param name="set">A selection set contains the object that will be joined with this object.</param>
            <param name="useSamplePoints">If true then divide all arc segments of curves into small line segments.</param>
            <returns>True if at least one object was joined.</returns>
            <example><see cref="M:VectorDraw.Professional.vdFigures.vdPolyline.Combine(VectorDraw.Professional.vdFigures.vdCurve,VectorDraw.Professional.vdFigures.vdPolyline.CombineMode,System.Double)"/></example>
            <remarks>Set the useSamplePoints parameter to True if the input curves are intersecting in more than two(2) points with this curve object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.UnionEx(VectorDraw.Professional.vdPrimaries.vdFigure,System.Boolean)">
            <summary>
            Joins the Polyline with an other vdFigure object.
            </summary>
            <param name="withFigure">The vdFigure object with which the union will take place(vdCircle,vdRect,vdPolyline).</param>
            <param name="useSamplePoints">If true then divide all arc segments of curves into small line segments.</param>
            <returns>True if the operation was succesfull.</returns>
            <example><see cref="M:VectorDraw.Professional.vdFigures.vdPolyline.Combine(VectorDraw.Professional.vdFigures.vdCurve,VectorDraw.Professional.vdFigures.vdPolyline.CombineMode,System.Double)"/></example>
            <remarks>Set the useSamplePoints parameter to True if the input curve is intersecting in more than two(2) points with this curve object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.SubtractSimple(VectorDraw.Professional.vdFigures.vdCurve,System.Double)">
            <summary>
            Subtract between this object and an other one of  vdPolyline, vdCircle or vdRect type.
            </summary>
            <param name="withFigure">A 2d closed curve of vdPolyline, vdCircle or vdRect type in the same CS with this object.</param>
            <param name="equality">A precision equality used to compare points and linear lengths.</param>
            <returns>True on Success.</returns>
            <remarks>withFigure parameter must intersect this object in two(2)  points. </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.Combine(VectorDraw.Professional.vdFigures.vdCurve,VectorDraw.Professional.vdFigures.vdPolyline.CombineMode)">
            <summary>
            Create a combination between this polyline object and a vdCurve object.
            </summary>
            <param name="curve">A vdCurve object with which the combination will be done.</param>
            <param name="combineMode">The combination operation.</param>
            <returns>A collection of vdCurves as a result of the combination.</returns>
            <example><see cref="M:VectorDraw.Professional.vdFigures.vdPolyline.Combine(VectorDraw.Professional.vdFigures.vdCurve,VectorDraw.Professional.vdFigures.vdPolyline.CombineMode,System.Double)"/></example>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.Combine(VectorDraw.Professional.vdFigures.vdCurve,VectorDraw.Professional.vdFigures.vdPolyline.CombineMode,System.Double)">
            <summary>
            Create a combination between this polyline object and a vdCurve object.
            </summary>
            <param name="curve">A vdCurve object with which the combination will be done.</param>
            <param name="combineMode">The combination operation.</param>
            <param name="FixArcEquality">Equality to be used to convert continous vertex in to arcs.Set it to 0 for no conversion. </param>
            <returns>A collection of vdCurves as a result of the combination.</returns>
            <example>Subtract a curve from a polyline.<code>
                            //A vdDocument object where the entities belongs.
                            vdDocument document = null;
                            //The master polyline object .
                            vdPolyline polyline = null;
                            //A vdCurve used used to combine with master polyline.
                            vdCurve CombineWithCurve = null;
                            //The combine operation
                            vdPolyline.CombineMode CombineOperation = vdPolyline.CombineMode.Xor;
                            //Begin an undo history group for all the next operations in order be able to restore them later with one single undo
                            document.UndoHistory.StoreUndoGroup(true);
                            //Change the default used equality for better result depend of what out objects represent.
                            double equality = Globals.VD_ZERO6;
                            //save existing wequality
                            double savePointEquality = Globals.DefaultPointEquality;
                            double saveLinearEquality = Globals.DefaultLinearEquality;
                            Globals.DefaultPointEquality = equality;
                            Globals.DefaultLinearEquality = equality;
                            //Create a combination between polyline object and a vdCurve object and get the result as a collection of vdCurve objects .
                            vdCurves curves = polyline.Combine(CombineWithCurve, CombineOperation, equality);
                            if (curves.Count > 0)
                            {
                                //remove the CombineWithCurve from the drawing.
                                CombineWithCurve.Deleted = true;
                                //Try to join the result curves  from the combination into one sigle Polyline.
                                //We begin with the first object in result curves and union it with the others on the collection.
                                vdPolyline mainpline = curves[0] as vdPolyline;
                                curves.RemoveAt(0);
                                mainpline.UnionEx(curves, false);
                                //We update the master polyline geometry with the union result.
                                polyline.VertexList = mainpline.VertexList;
                                polyline.Update();
            
                            }
                            //restore the default equality values
                            Globals.DefaultPointEquality = savePointEquality;
                            Globals.DefaultLinearEquality = saveLinearEquality;
                            //close the undo history.
                            document.UndoHistory.StoreUndoGroup(false);
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.GetBoundaryPolyFromPoint(VectorDraw.Geometry.gPoint,System.Double,System.Windows.Forms.Keys)">
            <summary>
            Search the ActiveLayout Entities which are visible in ActiveLayout render to find a closed perigram around the selected point and updates this polyline's VertexList.
            </summary>
            <param name="origin">The origin point in WCS which must be inside the desired closed path.</param>
            <param name="equality">A double representing the equality to be used in calculations(if this is equal to 0.0 the default = PixelSize * 1.4d is used).</param>
            <param name="CancelActionKey">A key value used to cancel the method.</param>
            <remarks>
            The return polyline has the active document default properties and it is not added in the active layout entities collection.
            The end points of seaching curves are compared with a default equality equal to (active render pixel size) * 1.4 if passed the parameter is 0.0.
            Only the 2d curves with  extrution vector 0,0,1 and in tha same elevation as the z of origin are taken into consideration.
            Only arcs , 2dpolylines , lines , circles, rectangles and ellipses, which are not filled are taken into consideration.
            Ellipses and polylines with spline flag are exploded into small segments depent on curveresolution.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.GetBoundaryPolyFromPoint(VectorDraw.Geometry.gPoint,System.Double,System.Boolean,System.Windows.Forms.Keys)">
            <summary>
            Search the ActiveLayout Entities which are visible in ActiveLayout render to find a closed perigram around the selected point and updates this polyline's VertexList.
            </summary>
            <param name="origin">The origin point in WCS which must be inside the desired closed path.</param>
            <param name="equality">A double representing the equality to be used in calculations(if this is equal to 0.0 the default = PixelSize * 1.4d is used).</param>
            <param name="Flat2d">Set it to true in order to include entities in any elevation.</param>
            <param name="CancelActionKey">A key value used to cancel the method.</param>
            <remarks>
            The return polyline has the active document default properties and it is not added in the active layout entities collection.
            The end points of seaching curves are compared with a default equality equal to (active render pixel size) * 1.4 if passed the parameter is 0.0.
            If Flag2d = false only the 2d curves with  extrution vector 0,0,1 and in the same elevation as the z of origin are taken into consideration.
            If Flag2d = true the result polyline will have the same elevation as the passed origin point.
            Only arcs , 2dpolylines , lines , circles, rectangles and ellipses, which are not filled are taken into consideration.
            Ellipses and polylines with spline flag are exploded into small segments depent on curveresolution.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.GetBoundaryPolyFromPoint(VectorDraw.Geometry.gPoint,System.Double)">
            <summary>
            Search the ActiveLayout Entities which are visible in ActiveLayout render to find a closed perigram around the selected point and updates this polyline's VertexList.
            </summary>
            <param name="origin">The origin point in WCS which must be inside the desired closed path.</param>
            <param name="equality">A double representing the equality to be used in calculations(if this is equal to 0.0 the default = PixelSize * 1.4d is used).</param>
            <remarks>
            The return polyline has the active document default properties and it is not added in the active layout entities collection.
            The end points of seaching curves are compared with a default equality equal to (active render pixel size) * 1.4 if passed the parameter is 0.0.
            Only the 2d curves with  extrution vector 0,0,1 and in tha same elevation as the z of origin are taken into consideration.
            Only arcs , 2dpolylines , lines , circles, rectangles and ellipses, which are not filled are taken into consideration.
            Ellipses and polylines with spline flag are exploded into small segments depent on curveresolution.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.TestOffsetSide(VectorDraw.Geometry.gPoint)">
            <summary>
            Returns -1.0 if the point is on the left side accordingly to the polyline direction.
            </summary>
            <param name="pt">The point with which the test will be commited in World Coordinate System(WCS).</param>
            <returns>-1.0 if the point is on the left side accordingly to the polyline direction and 1.0 if it is on the right side.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.getOffsetCurveEx(System.Double,System.Int32,System.Double)">
            <summary>
            Creates new objects at a specified distance from the existing vdPolyline object.
            </summary>
            <param name="offsetDist">The distance where the new objects will be created.</param>
            <param name="curveResolution">Valid values (1 to 20000).</param>
            <param name="Equality">A precision equality used used to compare linear lengths or points.</param>
            <returns>The new created objects.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.getOffsetCurve(System.Double)">
            <summary>
            Creates new objects at a specified distance and in the same plane with the existing vdPolyline object.
            </summary>
            <param name="offsetDist">The distance where the new objects will be created.</param>
            <returns>The new created objects.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.getSplineData(VectorDraw.Geometry.gPoints@,VectorDraw.Geometry.DoubleArray@,VectorDraw.Geometry.DoubleArray@,VectorDraw.Geometry.Vector@,VectorDraw.Geometry.Vector@)">
            <summary>
            Returns the data for this Spline entity.
            </summary>
            <param name="controlpoints">Receives an array of control points in WCS.</param>
            <param name="knots">Receives of knot values.</param>
            <param name="weights">Receives of weight values.</param>
            <param name="startTangent">Receives Start tangent vector.</param>
            <param name="endTangent">Receives End tangent vector.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.getSplineData(VectorDraw.Geometry.gPoints@,VectorDraw.Geometry.DoubleArray@,VectorDraw.Geometry.DoubleArray@,VectorDraw.Geometry.Vector@,VectorDraw.Geometry.Vector@,VectorDraw.Geometry.gPoints@)">
            <summary>
            Returns the data for this Spline entity.
            </summary>
            <param name="controlpoints">Receives an array of control points in WCS.</param>
            <param name="knots">Receives of knot values.</param>
            <param name="weights">Receives of weight values.</param>
            <param name="startTangent">Receives Start tangent vector.</param>
            <param name="endTangent">Receives End tangent vector.</param>
            <param name="FittingPoints">Receives an array of fitting points in WCS in case the SPlineFlag is VdConstSplineFlag.SFlagFITTING or null if not.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.getSplineData(System.Int32@,VectorDraw.Geometry.gPoints@,VectorDraw.Geometry.DoubleArray@,VectorDraw.Geometry.DoubleArray@,VectorDraw.Geometry.Vector@,VectorDraw.Geometry.Vector@,VectorDraw.Geometry.gPoints@)">
            <summary>
            Returns the data for this Spline entity.
            </summary>
            <param name="degree">Receives the degree value.</param>
            <param name="controlpoints">Receives an array of control points in WCS.</param>
            <param name="knots">Receives of knot values.</param>
            <param name="weights">Receives of weight values.</param>
            <param name="startTangent">Receives Start tangent vector.</param>
            <param name="endTangent">Receives End tangent vector.</param>
            <param name="FittingPoints">Receives an array of fitting points in WCS in case the SPlineFlag is VdConstSplineFlag.SFlagFITTING or null if not.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.CalculateKnots">
            <summary>
            Calculates the Knots of the vdPolyline object.
            </summary>
            <returns>
            A DoubleArray containing the Knot values.This is used when saving in DXF format.
            The <see cref="P:VectorDraw.Professional.vdFigures.vdPolyline.SPlineFlag"/> should not be <see cref="F:VectorDraw.Professional.Constants.VdConstSplineFlag.SFlagSTANDARD"/>.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.CalculateControlPoints">
            <summary>
            Calculates the control points of the vdPolyline object in WCS.
            </summary>
            <returns>Returns a gPoints collection containing the control points in World Coordinate System(WCS)."/></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.JoinEntities(VectorDraw.Professional.vdCollections.vdSelection,System.Double,System.Boolean)">
            <summary>
            Joines vdArcs,vdLines and vdPolylines into this object.
            </summary>
            <param name="entities">A collection of vdFigures (vdArc,vdLine,vdPolyline).</param>
            <param name="equality">A double precision used for points that are very close.</param>
            <param name="isHatchValidated">Set it to true in order to break the method search loop with the first closed shape.</param>
            <returns>A collection of vdFigures that where used in the join command.</returns>
            <remarks>Note that the extrusion vector of the entities passed must be the same!!!</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.JoinEntities(VectorDraw.Professional.vdCollections.vdSelection,System.Double)">
            <summary>
            Joins vdArcs, vdLines and vdPolylines into this object.
            </summary>
            <param name="entities">A collection of vdFigures (vdArc,vdLine,vdPolyline).</param>
            <param name="equality">A double precision used for points that are very close.</param>
            <returns>A collection of vdFigures that where used in the join command.</returns>
            <remarks>Note that the extrusion vector of the entities passed must be the same!!!</remarks>
            <example>See how to call the JoinEntities using specific objects in a selection set:<code>
                    private void PLJoinEntities_Demo()
                    {
                        vdDocument doc = vdFramedControl1.BaseControl.ActiveDocument; doc.New();
                        vdSelection sel = new vdSelection("Join"); sel.RemoveAll(); // create a selections set to add the lines/arcs to join
                        double p = VectorDraw.Geometry.Globals.PI;
            
                        vdArc arc = new vdArc(doc, new gPoint(-3, 1), 2.0d, p/2.0d, p); // and fill this with arcs and a line
                        sel.AddItem(arc,false,vdSelection.AddItemCheck.Nochecking);
                        vdLine lin = new vdLine(doc, new gPoint(-3,3), new gPoint(5,5));
                        sel.AddItem(lin, false, vdSelection.AddItemCheck.Nochecking);
                        arc = new vdArc(doc, new gPoint(5, 4), 1.0d, 1.5*p, p/2.0d);
                        sel.AddItem(arc, false, vdSelection.AddItemCheck.Nochecking);
            
                        vdPolyline pl = new vdPolyline(doc);
                        pl.JoinEntities(sel, 0.001); // join the entities of the selection set to one new polyline
                        pl.Invalidate(); pl.Update();
                        doc.Model.Entities.AddItem(pl);
                    }
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.JoinEntity(VectorDraw.Professional.vdFigures.vdCurve,System.Double)">
            <summary>
            Joins a vdLine,vdArc,vdPolyline to a vdPolyline object.
            </summary>
            <param name="_figure">The arc,line or polyline object.</param>
            <param name="equality">A double precision used for points that are very close.</param>
            <returns>
            True if the vdpolyline object changed joined with figure object.
            If the figure object is an vdArc then a bulge is added to the vdPolyline object. 
            </returns>
            <remarks>
            Note that the extrusion vector of the passed entity must be the same or the opposit with this one!!!
            If this polyline is closed then returns false.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.FilletRadius(System.Double)">
            <summary>
            Inserts fillet arcs at each vertex of a polyline where two line segments meet 
            if the specified radius is enough small to feet between the lines.
            </summary>
            <param name="Radius">The radius of the arcs that will fillet the vdPolyline object.</param>
            <remarks>If the polyline is not Spline and it is 3D with no bulges, then fillet arcs are added as sample points on the VertexList. </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.FilletRadiusAtIndex(System.Double,System.Int32)">
            <summary>
            Inserts fillet arcs at vertex of specified index of a polyline where two line 
            segments meet if the specified radius is enough small to feet between the lines
            </summary>
            <param name="Radius">The radius of the arc that will fillet the vdPolyline object.</param>
            <param name="Index">A valid index of vdPolyline where the fillet will be commited.</param>
            <remarks>If the polyline is not Spline and it is 3D with no bulges, then fillet arcs are added as sample points on the VertexList. </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.Fillet(System.Double,VectorDraw.Professional.vdFigures.vdCurve@,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdFigures.vdArc@)">
            <summary>
            It is not implemented for the vdPolyline object.
            </summary>
            <param name="Radius"></param>
            <param name="withObject"></param>
            <param name="pointOnThis"></param>
            <param name="pointOnWithObject"></param>
            <param name="arc"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.HasBulges">
            <summary>
            Checkes if any of the vertexes of the vdPolyline object has bulge value not equal to 0.0.
            </summary>
            <returns>True if at least one vertex has bulge value not equal to 0.0.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.Is2D">
            <summary>
            Checks if all points of the vdPolyline object belong to the same plane.
            </summary>
            <returns>Returns true if all points of the vdPolyline belong to the same plane.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.Area">
            <summary>
            Calculates the enclosed area of the vdPolyline object in Drawing Units relative to Entity CS.
            </summary>
            <returns>Returns the enclosed area.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.Length">
            <summary>
            Calculates the length of the vdPolyline object.
            </summary>
            <returns>Returns the length of the object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.getFirstOffsetParam">
            <summary>
            Get a value representing the start of the vdPolyline object.
            </summary>
            <returns>Returns 0.0.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.getStartParam">
            <summary>
            Returns the start parameter for the vdPolyline object.
            </summary>
            <returns>Returns 0.0.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.getEndParam">
            <summary>
            Return the end parameter for the vdPolyline object.
            </summary>
            <returns>Return the end parameter for the vdPolyline object ,equals to <see cref="M:VectorDraw.Professional.vdFigures.vdPolyline.Length"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.getStartPoint">
            <summary>
            Get the first point of the polyline.
            </summary>
            <returns>The start point of the vdPolyline object in World Coordinate System(WCS).</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.getEndPoint">
            <summary>
            Get the last point of the polyline.
            </summary>
            <returns>The last point of the vdPolyline object in World Coordinate System(WCS).</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.getDistAtParam(System.Double)">
            <summary>
            Get the length of the vdPolyline’s segment from the vdPolyline’s beginning to the point specified by param.
            </summary>
            <param name="param">A value that represents a point on the vdPolyline.</param>
            <returns>The distance from the getStartParam.</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdPolyline.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdPolyline.getStartParam"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.getParamAtDist(System.Double)">
            <summary>
            Gets the parameter of the object at the specific distance.
            </summary>
            <param name="dist">The distance that the param is needed.</param>
            <returns>Returns parameter at the location specified by dist.</returns>
            <remarks>
            If the distance is 0.0 then the <see cref="M:VectorDraw.Professional.vdFigures.vdPolyline.getStartParam"/> is returned.
            If the distance is equal to the length of the object then the <see cref="M:VectorDraw.Professional.vdFigures.vdPolyline.getEndParam"/> is returned.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.getDistAtPoint(VectorDraw.Geometry.gPoint)">
            <summary>
            Get the length of the vdPolyline’s segment between the vdPolyline’s start point and point pt.
            </summary>
            <param name="pt">The point of the vdPolyline in World Coordinate System(WCS).</param>
            <returns>Returns the length of the vdPolyline’s segment between the vdPolyline’s start point and point.</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdPolyline.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdPolyline.getStartParam"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.getPointAtDist(System.Double)">
            <summary>
            Gets a point belonging to the vdPolyline at the specified distance.
            </summary>
            <param name="dist">The distance along the vdPolyline.</param>
            <returns>Returns the point located at the location specified by dist</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdPolyline.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdPolyline.getStartParam"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.getPointAtParam(System.Double)">
            <summary>
            Returns a point on the vdPolyline representing a param.
            </summary>
            <param name="param">The param of the vdPolyline object.</param>
            <returns>Returns the point on the vdPolyline specified by the param in World Coordinate System(WCS).</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdPolyline.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdPolyline.getStartParam"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.getParamAtPoint(VectorDraw.Geometry.gPoint)">
            <summary>
            Get the parameter of the vdPolyline at a specified point.
            </summary>
            <param name="pt">The point in World Coordinate System(WCS) belonging to the vdPolyline.</param>
            <returns>Returns the parameter of the vdPolyline at point pt.</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdPolyline.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdPolyline.getStartParam"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.PointOnCurve(VectorDraw.Geometry.gPoint,System.Boolean)">
            <summary>
            Returns if a point belongs to a vdPolyline object.
            </summary>
            <param name="pt">A point in WCS or ECS.</param>
            <param name="IsInECS">A boolean value indicating if the point is in ECS or WCS.</param>
            <returns>Returns true if the point belongs to the vdPolyline object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.BulgeAtParam(System.Double,System.Double@,System.Double@)">
            <summary>
            Calculates the bulges at a given param of the vdPolyline object.
            </summary>
            <param name="param">The parameter of the vdPolyline object to specify a point.</param>
            <param name="bulge">The bulge value of the arc before the param.</param>
            <param name="PreviousBulge">The bulge value of the arc following the param.</param>
            <returns>Returns true if the param is valid and false if it is not.</returns>
            <remarks >
            This is used to calculate the 2 bulges that are generated when adding a point where the vdPolyline object
            already has bulge.In that case 2 new bulges will be created.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.SegmentIndexFromParam(System.Double)">
            <summary>
            Returns the segment of the vdPolyline object that the param belongs.
            </summary>
            <param name="param">The param used to specify a point on the vdPolyline object.</param>
            <returns>
            Returns -1 if the operation was unsuccesfull or an int representing the first index of the segment.
            The <see cref="P:VectorDraw.Professional.vdFigures.vdPolyline.SPlineFlag"/> must be <see cref="F:VectorDraw.Professional.Constants.VdConstSplineFlag.SFlagSTANDARD"/>.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.InsertPointAtParam(System.Double)">
            <summary>
            Adds a point to the vdPolyline object at the point indicated by the param.
            </summary>
            <param name="param">The param where the point will be added.</param>
            <returns>True if the point is added.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.Break(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdPrimaries.vdFigure@)">
            <summary>
            Breaks the vdPolyline into two or one subpolylines.Deletes the part that is between p1,p2.
            </summary>
            <param name="p1">The first point needed for this command.</param>
            <param name="p2">The second point needed for this command.</param>
            <param name="newEntity">If a new polyline is created it is returned in this parameter.</param>
            <returns>true if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.GetNumOfSubEntities(System.Boolean)">
            <summary>
            Returns the number of SubEntities (lines and arcs)
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)">
            <summary>
            This function is intended to be called during a grip edit of the object. 
            </summary>
            <seealso cref="P:VectorDraw.Render.vdRenderGlobalProperties.EnableMiddleGripForPolylines"/>
            <param name="Indexes">Represents a zero based array of the grip indexes that will be moved.</param>
            <param name="dx">The dx distance that the grip is moved.</param>
            <param name="dy">The dy distance that the grip is moved.</param>
            <param name="dz">The dz distance that the grip is moved.</param>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdPolyline.GetGripPoints"/>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnMoveGripPointsAt"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.GetGripPoints">
            <summary>
            A function returning the grip points of the object.
            </summary>
            <returns>Returns a new instance of gpoints object containing the grip points of the object.</returns>
            <remarks>
            The returning points are in World coordinate system(WCS).
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetGripPoints"/> event.
            When implementing this method the <see cref="M:VectorDraw.Professional.vdFigures.vdPolyline.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)"/> must be also override according to the new selected grip points.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.InitializeProperties">
            <summary>
            Resets the properties of the vdPolyline object to the Default values.
            </summary>
            <remarks>
            Default values:Remove all Points from the Polyline's VertexList,SplineFlag = SFlagSTANDARD,Flag = PlFlagOPEN,
            Remove All Weights , HatchProperties = StartTangent = EndTangent = null.
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.ToString">
            <summary>
            Gets a System.String that represents the type of the vdPolyline Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.GetSamplePoints(System.Int32,System.Double)">
            <summary>
            Returns a list of points on the vdPolyline object from the start to the end point of the curve.
            </summary>
            <param name="curveResolution">valid values (1 to 20000)</param>
            <param name="pixelSize">valid values possitive decimal ( &gt;=0)</param>
            <returns>A collection of points belonging to the vdPolyline in Entity Coordinate System(ECS).</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCurve.GetSamplePoints(System.Int32,System.Double)"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.AppendVertex(VectorDraw.Geometry.Vertex)">
            <summary>
            Adds a <see cref="T:VectorDraw.Geometry.Vertex"/> at the <see cref="P:VectorDraw.Professional.vdFigures.vdPolyline.VertexList"/> of the vdPolyline object.
            </summary>
            <param name="point">The point to be added.</param>
            <returns>True if the point is added.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.InsertVertex(System.Int32,VectorDraw.Geometry.Vertex)">
            <summary>
            Inserts a vertex at a specific index of the vdPolyline object.
            </summary>
            <param name="IndexAfter">The index value after which the vertex will be added.</param>
            <param name="vertex">The vertex to be added.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.SegmentIndexFromPoint(VectorDraw.Geometry.gPoint,System.Double)">
            <summary>
            Find the segment of a vdPolyline object that a point belongs. If the point passed in this function is not on the polyline, then the closest to this point segment will returned.
            </summary>
            <param name="point">A point on the vdPolyline object in World Coordinate System(WCS).</param>
            <param name="equality">A precision equality used for points that are close.</param>
            <returns>The first index of the segment where the point belongs.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.getClosestPointTo(VectorDraw.Geometry.gPoint)">
            <summary>
            Get The closest point belonging to the curve.
            </summary>
            <param name="givenPoint">A point in World Coordinate System(WCS).</param>
            <returns>Returns null or a point in WCS belonging to the curve.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)">
            <summary>
            <see cref="M:VectorDraw.Professional.vdPrimaries.vdFigure.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)"/>.
            </summary>
            <param name="object2viewcs"></param>
            <param name="mode"></param>
            <param name="pickPoi"></param>
            <param name="LastPoi"></param>
            <param name="SegCount"></param>
            <param name="osnaps"></param>
            <returns>True if at least one osnap point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.GetNumSegments">
             <summary>
             Returns the number of segments that this polyline consist from (arc and lines) in case that SPlineFlag == VdConstSplineFlag.SFlagSTANDARD
             </summary>
            <remarks>If VertexList.Count is less than 2 or  SPlineFlag != VdConstSplineFlag.SFlagSTANDARD return 0.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.GetSegmentAtPoint(VectorDraw.Geometry.gPoint)">
            <summary>
            Get a vdCurve segment(line or arc) that belongs to a polyline at the given closest point.
            </summary>
            <param name="pt">A point in World Coordinate system.</param>
            <returns>A vdCurve segment(line or arc) of the polyline.The segment requires document and documentdefaults in order to be drawn or added to a Document.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.GetSegmentAtIndex(System.Int32)">
            <summary>
            Returns a vdCurve line or arc at the specific zero based index.
            </summary>
            <param name="index">Valid zero based index.In case of closed pline for the last segment must be equal to VertexList.Count-1</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.GetFigureAtSegmentIndex(System.Int32)">
            <summary>
            Returns a vdLine or a vdArc object at a specified index of the vdPolyline object.
            </summary>
            <param name="index">A valid index of the vdPolyline.</param>
            <returns>A vdLine or a vdArc object or null if not succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.IntersectWith(VectorDraw.Professional.vdPrimaries.vdFigure,VectorDraw.Professional.Constants.VdConstInters,VectorDraw.Geometry.gPoints)">
            <summary>
            Finds the intersection points of an object with another object.
            </summary>
            <param name="pEntity">The entity with which the intersection of the object will be done.</param>
            <param name="intersectOption"><see cref="T:VectorDraw.Professional.Constants.VdConstInters"/> constant</param>
            <param name="intPoints">A precreated gPoints collection in which the instersection points will be added.The points are returned in WCS.</param>
            <returns>True if at least one intersection point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.Explode">
            <summary>
            Explodes the vdPolyline object into subentities vdArcs or vdLines.If the polyline has <see cref="P:VectorDraw.Professional.vdFigures.vdPolyline.HatchProperties"/>
            then the explode method creates a <see cref="T:VectorDraw.Professional.vdFigures.vdPolyhatch"/> object.
            </summary>
            <returns>The entities created by the explode method.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.Reverse">
            <summary>
            Gets the reversed Vertex list of the vdPolyline object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Called in order to draw the object in a specified vdRender object.
            </summary>
            <param name="render">The vdRender object in which the object will be drawn.</param>
            <returns><see cref="T:VectorDraw.Render.vdRender.DrawStatus"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.ToMesh(System.Int32)">
            <summary>
            Converts the vdPolyline into a <see cref="T:VectorDraw.Professional.vdFigures.vdPolyface"/> object.
            </summary>
            <param name="CurveResolution">Determines the number of the segments that the polyline will be devided.</param>
            <returns>The created vdPolyface object which is not being added to the Document.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.GetPolygonsAreas(System.Double)">
            <summary>
            This method is used for area calculation , devides the area of the polyline into small segments that can be used to calculate and demonstrate the area of the polyline.
            </summary>
            <param name="angle_direction">The direction of the lines that are going to devide the area of the polyline in radians.</param>
            <returns>Returns an array of SimplePolygonSegment objects that represent the area of the polyline.</returns>
            <remarks>See VDF sample AreaCalculation to see how this method can be used.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.ChamferAtIndex(System.Int32,System.Double,System.Double,VectorDraw.Professional.vdObjects.vdDocument.ChamferMethodEnum,System.Boolean,VectorDraw.Professional.vdCollections.vdEntities)">
            <summary>
            Chamferes one edge of the polyline at the given index.Chamfer in Splines is not supported.
            </summary>
            <param name="index">The index to chamfer.</param>
            <param name="argument1">First distance of the chamfer command.</param>
            <param name="argument2">Second distance of the chamfer command OR angle in degrees if the method is Angle.</param>
            <param name="method">Method to be used in chamfer command , Distance or Angle.</param>
            <param name="trim">A boolean value representing if the lines are going to be trimmed during the chamfer command.</param>
            <param name="result">result is a vdEntities collection which will be filled with the vdLines that will be produced during the chamfer method.</param>
            <returns>1 if succeded , 0 failed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.Chamfer(System.Double,System.Double,VectorDraw.Professional.vdObjects.vdDocument.ChamferMethodEnum,System.Boolean,VectorDraw.Professional.vdCollections.vdEntities@)">
            <summary>
            Chamfers all edges of the polyline using the passed parameters. Chamfer in Splines is not supported.
            </summary>
            <param name="argument1">First distance of the chamfer command.</param>
            <param name="argument2">Second distance of the chamfer command OR angle in degrees if the method is Angle.</param>
            <param name="method">Method to be used in chamfer command , Distance or Angle.</param>
            <param name="trim">A boolean value representing if the lines are going to be trimmed during the chamfer command.</param>
            <param name="result">result is a vdEntities collection which will be filled with the vdLines that will be produced during the chamfer method.</param>
            <returns>The number of adges that where chamfered.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdPolyline object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdPolyline object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyline.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements the vdPolyline object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdPolyline.BoundingBox">
            <summary>
            Gets the Bounding Box of the vdPolyline object in WorldCoordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdPolyline.VertexList">
            <summary>
            Get/Set the vertex list of the vdPolyline object.Bulges are relative to Entity CS.
            </summary>
            <remarks>
            vdPolyline's vertex list is a collection of <see cref="T:VectorDraw.Geometry.Vertex"/> objects in World Coordinate System(WCS).
            Default value an empty Vertexes list.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdPolyline.StartTangent">
            <summary>
            Get/Set the start Tangent in WCS of the vdPolyline object used when <see cref="P:VectorDraw.Professional.vdFigures.vdPolyline.SPlineFlag"/> is <see cref="F:VectorDraw.Professional.Constants.VdConstSplineFlag.SFlagFITTING"/> .
            </summary>
            <remarks>
            Default value (0.0,0.0,1.0).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdPolyline.EndTangent">
            <summary>
            Get/Set the end Tangent in WCS of the vdPolyline object used when <see cref="P:VectorDraw.Professional.vdFigures.vdPolyline.SPlineFlag"/> is <see cref="F:VectorDraw.Professional.Constants.VdConstSplineFlag.SFlagFITTING"/> .
            </summary>
            <remarks>
            Default value (0.0,0.0,1.0).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdPolyline.Knots">
            <summary>
            Get/Set the Knots of the vdPolyline object used when <see cref="P:VectorDraw.Professional.vdFigures.vdPolyline.SPlineFlag"/> is not <see cref="F:VectorDraw.Professional.Constants.VdConstSplineFlag.SFlagSTANDARD"/>.
            </summary>
            <remarks>
            Default value new empty double array.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdPolyline.Weights">
            <summary>
            Get/Set the weights of the vdPolyline object used when <see cref="P:VectorDraw.Professional.vdFigures.vdPolyline.SPlineFlag"/> is not <see cref="F:VectorDraw.Professional.Constants.VdConstSplineFlag.SFlagSTANDARD"/>.
            </summary>
            <remarks>
            Default value new empty double array.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdPolyline.Widths">
            <summary>
            Get/Set the widths of the vdPolyline object used when <see cref="P:VectorDraw.Professional.vdFigures.vdPolyline.SPlineFlag"/> is not <see cref="F:VectorDraw.Professional.Constants.VdConstSplineFlag.SFlagSTANDARD"/>.
            </summary>
            <remarks>
            Default value new empty double array and the <see cref="P:VectorDraw.Professional.vdPrimaries.vdFigure.PenWidth"/> is used for all segments.
            The length of the array can be 0 in case of no with or equal to <see cref="P:VectorDraw.Professional.vdFigures.vdPolyline.VertexList"/> length x 2 and every 2 of them are start and end width of each segment.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdPolyline.SPlineFlag">
            <summary>
            Get/Set the Spline flag of the vdPolyline object representing which type of Spline will be used.
            </summary>
            <remarks>
            Default value <see cref="F:VectorDraw.Professional.Constants.VdConstSplineFlag.SFlagSTANDARD"/>.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdPolyline.Flag">
            <summary>
            Get/Set a flag indicating if the polyline is closed or open.
            </summary>
            <remarks>
            Default value <see cref="F:VectorDraw.Professional.Constants.VdConstPlineFlag.PlFlagOPEN"/>.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdPolyline.HatchProperties">
            <summary>
            Get/Set the hatch properties of the vdPolyline object.
            </summary>
            <remarks>
            Default value null.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdPolyline.ECSMatrix">
            <summary>
            Gets the matrix which is used to transform vectors or points from the 
            object's object coordinate system (OCS) to the World Coordinate System (WCS).
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdPolyline.CombineMode">
            <summary>
            Specifies how different clipping curves can be combined.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdPolyline.CombineMode.Exclude">
            <summary>
            The input curve is excluded from this curve.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdPolyline.CombineMode.Intersect">
            <summary>
            Two clipping curves are combined by taking their intersection.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdPolyline.CombineMode.Xor">
            <summary>
            Two clipping curves are combined by taking only the areas enclosed by one or the other curve, but not both.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdPolyline.CombineMode.Union">
            <summary>
            Two clipping curves are combined by taking the union of both.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.vdSectionClips">
            <summary>
            Implements the vdSectionClips collection object.
            </summary>
            <remarks>
            This is a collection of vdSectionClip objects that are being applied in the current display. The limit of applied vdSectionClip objects is 6.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.CreateSectionCoverFacesList(VectorDraw.Render.vdRender,System.IntPtr,VectorDraw.Render.IRenderListItem)">
            <summary>
            Internally used only.Create a list for each section in collection, that contains the section clip cover faces for a specific drawing figure defined by listItem parameter
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.Update">
            <summary>
            Updates all calculated object values.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.GetNotDeletedItems">
            <summary>
            Get all non deleted objects of the collection.
            </summary>
            <returns>
            Returns a new created collection of vdSectionClip objects 
            that are not set as <see cref="P:VectorDraw.Professional.vdObjects.vdSectionClip.Deleted"/>.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.ToString">
            <summary>
            Gets a System.String that represents the count of the vdSectionClips collection Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.#ctor">
            <summary>
            Initializes the vdSectionClips collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.GetItemAtIndex(System.Int32)">
            <summary>
            Get an item at the specified index.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.getUniqueTableName(System.String)">
            <summary>
            Creates a unique string for use as name to a vdLayout object.
            </summary>
            <param name="prefix">A prefix string that will be present to the unique name.</param>
            <returns>Returns a unique string.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.FindItem(VectorDraw.Professional.vdObjects.vdSectionClip)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">A vdSectionClip object to be checked if it exists in the collection</param>
            <returns>True if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.AddItem(VectorDraw.Professional.vdObjects.vdSectionClip)">
            <summary>
            Adds a vdSectionClip object to the collection.
            </summary>
            <param name="value">The vdSectionClip object to be added to the collection.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAddItem"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterAddItem"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
            <remarks>
            All vdSectionClip objects are removed from the collection.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.RemoveItem(VectorDraw.Professional.vdObjects.vdSectionClip)">
            <summary>
            Removes a specific vdSectionClip object from the collection.
            </summary>
            <param name="Object">The vdSectionClip object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.RemoveAt(System.Int32)">
            <summary>
            Removes all objects from the collection.
            </summary>
            <remarks>
            All vdSectionClip objects are removed from the collection.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.ChangeOrder(VectorDraw.Professional.vdObjects.vdSectionClip,System.Boolean)">
            <summary>
            Changes the position of a vdSectionClip object to the front or the end of the collection.
            </summary>
            <param name="Object">The vdSectionClip object.</param>
            <param name="ToBack">If true moves the object to the beginning of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.swap(VectorDraw.Professional.vdObjects.vdSectionClip,VectorDraw.Professional.vdObjects.vdSectionClip)">
            <summary>
            Swaps the position between two different vdSectionClip objects existing in the collection.
            </summary>
            <param name="Object1">first object needed.</param>
            <param name="Object2">second object needed.</param>
            <returns>True if the swap operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.InsertAt(System.Int32,VectorDraw.Professional.vdObjects.vdSectionClip)">
            <summary>
            Insert a vdSectionClip object to a specified index of the collection.
            </summary>
            <param name="Index">The zero based index of the collection where the object will be inserted.</param>
            <param name="Object">The vdSectionClip object which will be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.Add(System.String)">
            <summary>
            Creates and adds a vdSectionClip object to the collection with the specified name.
            </summary>
            <param name="Name">The name of the inserted vdSectionClip object.</param>
            <returns>Returns the added vdSectionClip object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.FindName(System.String)">
            <summary>
            Finds a vdSectionClip object with the specified name in the collection.
            </summary>
            <param name="Name">The name to search in the collection.</param>
            <returns>The found object else returns null if a vdSectionClip does not exist with this name.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.IsSectionVisible(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Matrix)">
            <summary>
            Checks if the passed point is visible from all section clips of the collection
            </summary>
            <param name="pt">A point in World Coordinate System(WCS).</param>
            <param name="object2World">This parameter can be null or containes the object to world matrix used for transformations.</param>
            <returns>True if the point is visible using all clips of the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.IsSectionVisible(VectorDraw.Geometry.gPoints,VectorDraw.Geometry.Matrix)">
            <summary>
            Checks if all points are visible from all section clips of the collection
            </summary>
            <param name="pts">A collection of points in World Coordinate System(WCS).</param>
            <param name="object2World">This parameter can be null or containes the object to worls matrix used for transformations.</param>
            <returns>True if all points are visible from all clips of the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.CLipPoints(VectorDraw.Geometry.gPoints)">
            <summary>
            Apply the clipping of all enabled sections to the passed points.Pass points may be changed after the method return. 
            </summary>
            <param name="pts">A reference of point collection to be clipped</param>
            <returns>True if at least one segment is clipped.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.ApplySectionClips(VectorDraw.Render.vdRender)">
            <summary>
            Apply all enabled vdSectionClip object of this collection to passed vdRender object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdSectionClips object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdSectionClips object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.FindFromId(System.Int32)">
            <summary>
            Gets an object that belongs to collection passing through its ID number.
            </summary>
            <param name="Id">A unique id for the object.</param>
            <returns>
            An object that belongs to collection with specified id property.
            Null if the object id does not belong to the collection.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.GetItem(System.Int32)">
            <summary>
            Get a ISectionClip object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The ISectionClip object at the specified index.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.FindItem(VectorDraw.Geometry.ISectionClip)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">A ISectionClip object to be checked if it exists in the collection</param>
            <returns>True if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.IsSectionVisible(VectorDraw.Geometry.gPoint)">
            <summary>
            Checks if the passed point is visible from all section clips of the collection
            </summary>
            <param name="pt">A point in World Coordinate System(WCS).</param>
            <returns>True if the point is visible using all clips of the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.AddItem(System.Object)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="value">The object to be added.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSectionClips.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements the vdSectionClips collection object.
            </summary>
            <remarks>
            This is a collection of vdSectionClip objects that are being applied in the current display. The limit of applied vdSectionClip objects is 6.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdSectionClips.ListPosition">
            <summary>
            Gets the <see cref="T:VectorDraw.Generics.IListPosition"/> interface object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdSectionClips.Item(System.Int32)">
            <summary>
            Get a vdSectionClip object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The vdSectionClip object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdSectionClips.Last">
            <summary>
            Returns the last item in the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdSectionClips.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdSectionClips.ItemType">
            <summary>
            Returns the Type of Items in the collection
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.frmXrefManager">
            <summary>
            Implements the external references manager.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmXrefManager.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmXrefManager.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmXrefManager.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmXrefManager.butOK">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmXrefManager.listxrefs">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmXrefManager.butAttach">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmXrefManager.butDetach">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmXrefManager.butReload">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmXrefManager.butBind">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmXrefManager.butUnload">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmXrefManager.groupBox1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmXrefManager.formToolTip">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmXrefManager.butSupportPath">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmXrefManager.#ctor">
            <summary>
            Initializes the dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmXrefManager.InitializeExtra(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean)">
            <summary>
            Initializes the external references manager.
            </summary>
            <param name="Document">The top most document.</param>
            <param name="ShowSupportPath">A boolean value representing if the SupportPath button will be visible.</param>
            <remarks >It is recomended to use the static method in order to use this manager.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmXrefManager.Show(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean)">
            <summary>
            Implements the external references manager.
            </summary>
            <param name="Doc">The top most document.</param>
            <param name="ShowSupportPathButton">A boolean value representing if the SupportPath button will be visible.</param>
            <returns>A boolean value representing if the user pressed Ok(true) or Cancel(false).</returns>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmXrefManager.Show(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Implements the external references manager.
            </summary>
            <param name="Doc">The top most document.</param>
            <returns>A boolean value representing if the user pressed Ok(true) or Cancel(false).</returns>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.frmXrefManager.vdFormSize">
            <summary>
            Get/Set the size of the form used when loading the form. This value is stored when the form is closed in order to be used the next time the form is loaded. 
            </summary>
            <remarks>The default value is -1,-1.</remarks>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdGroundSurface">
            <summary>
            Implements the vdGroundSurface object that works with delunay triangulation method.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdGroundSurface.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes a new instance of the vdGroundSurface object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdGroundSurface.#ctor(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Geometry.gPoints)">
            <summary>
            Initializes a new instance of the vdGroundSurface object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <param name="points">The points of the groundsurface object.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdGroundSurface.#ctor">
            <summary>
            Initializes the vdGroundSurface object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdGroundSurface.SelectUserTriangles(VectorDraw.Geometry.gTriangles)">
            <summary>
            Set new user defined triangles for the object.
            </summary>
            <param name="triangles">New user define triangles to be used or null to use the default automatic triangulation.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdGroundSurface.GetNumMappedImages">
            <summary>
            Returns the Number of IBindMappedImage
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdGroundSurface.GetMappedImageAt(System.Int32)">
            <summary>
            Returns the <see cref="T:VectorDraw.Render.IBindMappedImage"/> at the specified index.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdGroundSurface.GetMappedImages">
            <summary>
            Returns an array of Images and their matrixes that applied over the Polyface object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdGroundSurface.MinLevel">
            <summary>
            Get the minimum z value of all points of the surface.
            </summary>
            <returns>Returns the minimum z value of all points of the surface.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdGroundSurface.MaxLevel">
            <summary>
            Get the maximum z value of all points of the surface.
            </summary>
            <returns>Return the minimum z value of all points of the surface.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdGroundSurface.CalculateContourLevels(System.Double,System.Double,System.Double)">
            <summary>
            Calculates contours from a minimum level to a maximum level using a predifined step.
            </summary>
            <param name="step">The step which will be used to calculate the contours.</param>
            <param name="minLevel">Minimum level of the contours.</param>
            <param name="maxLevel">Maximum  level of the contours.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdGroundSurface.CalculateContourLevels(System.Int32,System.Double,System.Double)">
            <summary>
            Calculate specified level count from a minimum to a maximum value.
            </summary>
            <param name="levels">How many levels to be calculated.</param>
            <param name="minLevel">Minimum level of the contours.</param>
            <param name="maxLevel">Maximum level of the contours.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdGroundSurface.CalculateContours(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector,VectorDraw.Professional.vdCollections.vdPolyCurves@)">
            <summary>
            Calculate the section of the triangles with a plane
            </summary>
            <param name="planePoint">A point in the plane.</param>
            <param name="planeNormal">A vector showing the plane's direction.</param>
            <param name="result">A vdPolyCurves reference which is filled with the section curves</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdGroundSurface.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.
            User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdGroundSurface.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdGroundSurface.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)">
            <summary>
            This function is intended to be called during a grip edit of the object. 
            </summary>
            <param name="Indexes">Represents a zero based array of the grip indexes that will be moved.</param>
            <param name="dx">The dx distance that the grip is moved.</param>
            <param name="dy">The dy distance that the grip is moved.</param>
            <param name="dz">The dz distance that the grip is moved.</param>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdGroundSurface.GetGripPoints"/>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnMoveGripPointsAt"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdGroundSurface.GetGripPoints">
            <summary>
            A function returning the grip points of the object.
            </summary>
            <returns>Returns a new instance of gpoints object containing the grip points of the object.</returns>
            <remarks>
            The returning points are in World coordinate system(WCS).
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetGripPoints"/> event.
            When implementing this method the <see cref="M:VectorDraw.Professional.vdFigures.vdGroundSurface.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)"/> must be also override according to the new selected grip points.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdGroundSurface.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)">
            <summary>
            <see cref="M:VectorDraw.Professional.vdPrimaries.vdFigure.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)"/>.
            </summary>
            <param name="object2viewcs"></param>
            <param name="mode"></param>
            <param name="pickPoi"></param>
            <param name="LastPoi"></param>
            <param name="SegCount"></param>
            <param name="osnaps"></param>
            <returns>True if at least one osnap point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdGroundSurface.ToMesh(System.Int32)">
            <summary>
            Converts the vdGroundSurface into a <see cref="T:VectorDraw.Professional.vdFigures.vdPolyface"/> object.
            </summary>
            <param name="CurveResolution">Determines the number of the segments that the rect will be devided.</param>
            <returns>The created vdPolyface object which is not being added to the Document.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdGroundSurface.Explode">
            <summary>
            Explodes the vdGroundSurface object into vd3DFace objects.
            </summary>
            <returns>A collection of vd3DFace objects is returned.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdGroundSurface.InitializeProperties">
            <summary>
            Resets the properties of the vdGroundSurface object to the Default values.
            </summary>
            <remarks>
            Default values:All Points Initialize to (0.0,0.0,0.0).
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdGroundSurface.ToString">
            <summary>
            Gets a System.String that represents the type of the vdGroundSurface Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdGroundSurface.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdGroundSurface.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdGroundSurface.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Called in order to draw the object in a specified vdRender object.
            </summary>
            <param name="render">The vdRender object in which the object will be drawn.</param>
            <returns><see cref="T:VectorDraw.Render.vdRender.DrawStatus"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdGroundSurface.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdGroundSurface object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdGroundSurface.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdGroundSurface object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdGroundSurface.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements the vdGroundSurface object that works with delunay triangulation method.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdGroundSurface.SmoothAngle">
            <summary>
            Get/Set the angle in degrees between 0 and 90 used to calculate normals for each vertex in each face when rendering a polyface object.
            Defines the maximun angle which is compared with the angles between the planes of neighboring faces in order to filter out the normals of the planes that will added in the average calculation.
            </summary>
            <remarks>
            Set it to -1 in order the normals to be smoothing according to the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.SmoothAngle"/> property.
            Set it to 0 in order the normals not to be smoothing.
            Set it to 90 in order the normal of each vertex to be calculated as the average value with all the neighboring faces normals.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdGroundSurface.MappedImages">
            <summary>
            Get/Set the mapped images of the object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdGroundSurface.LockTriangles">
            <summary>
            Enable/Disable the recalculation of triangulation after the Update method.
            </summary>
            <remarks>Default value is false.Set it true in order to disable the recalculation of triangation after an Update method.
            If you want to modify the items in Triangles collection property and any modification update not to change the triangles then set this value to true.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdGroundSurface.GradientFill">
            <summary>
            Specifies if the contours will be drawn as closed filled curves.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdGroundSurface.GradientMinimunColor">
            <summary>
            Specifies the color of the first level of contour curves
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdGroundSurface.GradientMaximunColor">
            <summary>
            Specifies the color of the last level of contour curves
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdGroundSurface.FitContours">
            <summary>
            Specifies if the contours will be drawn as Splines vdPolylines with flag SFlagFITTING.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdGroundSurface.ContourLevels">
            <summary>
            Get/Set an array of doubles indicating the contours of the object.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdGroundSurface.Contours">
            <summary>
            Calculates the contours as vdPolyCurves.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdGroundSurface.Triangles">
            <summary>
            Triangulates the points of the object using Delaunay algorithm and creates triangles.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdGroundSurface.BoundingBox">
            <summary>
            Gets the Bounding Box of the vdGroundSurface object in WorldCoordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdGroundSurface.Points">
            <summary>
            Get/Set a collection of points needed to draw the surface.The points are given in World Coordinate System(WCS).
            </summary>
            <remarks>
            Default value an empty collection of points.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdGroundSurface.DispMode">
            <summary>
            Get/Set the display mode for the vdGroundSurface object.
            </summary>
            <remarks>
            Default value Triangle.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdGroundSurface.MeshSize">
            <summary>
            Represents the size in drawing units of each mesh when the surface is drawn.
            </summary>
            <remarks>
            Default value 1.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdGroundSurface.GroundLevel">
            <summary>
            Represents the Z value of the Ground used while calculating the Mesh of the vdGroundSurface.
            </summary>
            <remarks>
            Default value 0.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdGroundSurface.GradientColors">
            <summary>
            Returns an <see cref="T:VectorDraw.Render.ElevatedGradientColors"/> collection with two elements.
            First element is the minimum Z of this BoundingBox with <see cref="P:VectorDraw.Professional.vdFigures.vdGroundSurface.GradientMinimunColor"/> color. 
            Second element is the maximun Z of this BoundingBox with <see cref="P:VectorDraw.Professional.vdFigures.vdGroundSurface.GradientMaximunColor"/> color. 
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdGroundSurface.DisplayMode">
            <summary>
            Display mode for the vdGroundSurface object.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdGroundSurface.DisplayMode.None">
            <summary>
            Does not draw anything.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdGroundSurface.DisplayMode.Triangle">
            <summary>
            Draws the surface as triangles.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdGroundSurface.DisplayMode.Mesh">
            <summary>
            Draws the surface as Mesh.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdGroundSurface.DisplayMode.Contours">
            <summary>
            Draws the given contours curves.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdGroundSurface.DisplayMode.MeshWithContours">
            <summary>
            Draws the surface as Mesh and the given contours curves.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdNamedUCS">
            <summary>
            Implements a named UCS object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdNamedUCS.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes the vdNamedUCS object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this constructor the is no need to call the SetUnRegisterDocument method in order to register the Document of this object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdNamedUCS.#ctor(VectorDraw.Professional.vdObjects.vdDocument,System.String)">
            <summary>
            Initializes the vdNamedUCS object.
            </summary>
            <param name="doc">The vdDocument where the NamedUCS will be registered.</param>
            <param name="name">The name of the vdNamedUCS object.</param>
            <remarks>Calling this constructor the is no need to call the SetUnRegisterDocument method in order to register the Document of this object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdNamedUCS.#ctor">
            <summary>
            Initializes the vdNamedUCS object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdNamedUCS.#ctor(System.String)">
            <summary>
            Initializes the vdNamedUCS object with the passed name.
            </summary>
            <param name="name">The name of the newly created vdNamedUCS object</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdNamedUCS.#ctor(VectorDraw.Professional.vdPrimaries.vdNamedUCS)">
            <summary>
            Initializes the vdNamedUcs object with the passed object's properties.
            </summary>
            <param name="item">A vdNamedUcs object from which the properties are going to be copied.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdNamedUCS.SetNamedUCS(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector,VectorDraw.Geometry.Vector)">
            <summary>
            Set the Matrix of the object using the passed parameters.
            </summary>
            <param name="origin">A gPoint representing the origin point in World Coordinate System.</param>
            <param name="xdir">A Vector that represents the direction of the x Axis.</param>
            <param name="ydir">A Vector that represents the direction of the y Axis.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdNamedUCS.SetNamedUCS(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Set the Matrix of the object using the passed parameters.
            </summary>
            <param name="origin">A gPoint representing the origin point in World Coordinate System.</param>
            <param name="xdir">A gPoint representing the x direction in World Coordinate System.</param>
            <param name="ydir">A gPoint representing the y direction in World Coordinate System.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdNamedUCS.SetNamedUCS(VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Set the Matrix of the object using the passed parameters.
            </summary>
            <param name="layout">Set the Matrix of the Object using the current UCS of the passed layout parameter.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdNamedUCS.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdNamedUCS object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdNamedUCS.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdNamedUCS object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdNamedUCS.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdNamedUCS.InitializeProperties">
            <summary>
            Resets the properties of the vdNamedUCS object to the Default values.
            </summary>
            <remarks>
            Default values:Description = "" , Name = "Unonymus" .
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdNamedUCS.ToString">
            <summary>
            Gets a System.String description of the vdNamedUCS Object equal to the object's name.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdNamedUCS.Name">
            <summary>
            Get/Set the name of the vdNamedUCS object
            </summary>
            <remarks>
            Default value : "Anonymous".
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <exception cref="T:VectorDraw.Professional.Exceptions.InvalidTableNameException"></exception>
            <exception cref="T:VectorDraw.Professional.Exceptions.CannotRenameException">Thrown when cannot rename an object.</exception>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdNamedUCS.Description">
            <summary>
            Get/Set a Description string for the object
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdNamedUCS.UCSMatrix">
            <summary>
            Get/Set the matrix used for the User Coordinate System.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.frmSearchText">
            <summary>
            Implements the Search and Replace Text form.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmSearchText.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmSearchText.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.lblFindString">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.lblReplace">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.txtSearch">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.txtReplace">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.lblFindWhere">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.cmbSearchIn">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.btnSelect">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.grpObjectsProps">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.grpOptions">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.chkvdMtexts">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.chkvdTexts">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.chkvdDims">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.chkLabels">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.chkTooltips">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.chkURLs">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.btnNoObjects">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.btnALLobjects">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.btnDone">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.btnReplaceAll">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.btnReplace">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.btnSearch">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.groupRslts">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.lstResults">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.chkvdAttribs">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.btnDefault">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.btnOpDefault">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.btnOpClear">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.btnOpAll">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.chkInsideXRefs">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.chkInserts">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.chkIgnoreFrozen">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.chkWholeText">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.chkIgnoreCase">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.lblSelectedObjects">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.lblSelectedCount">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmSearchText.formToolTip">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmSearchText.#ctor">
            <summary>
            Initializes the dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmSearchText.OnLoad(System.EventArgs)">
            <summary>
            Raises the System.Windows.Forms.Form.Load event.
            </summary>
            <param name="e">An System.EventArgs that contains the event data.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmSearchText.InitializeForm(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes the Document used by the form. Should be called before showing the dialog if the Show method is not used.
            </summary>
            <param name="Document">The Document to be used by the form.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmSearchText.Show(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Used to show the dialog.
            </summary>
            <param name="doc">The vdDocument object.</param>
            <returns>A DialogResult indicating the user's action.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmSearchText.ReplaceString(System.Windows.Forms.ListViewItem)">
            this function replaces the strings
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.frmSearchText.vdFormSize">
            <summary>
            Get/Set the size of the form used when loading the form. This value is stored when the form is closed in order to be used the next time the form is loaded. 
            </summary>
            <remarks>The default value is -1,-1.</remarks>
        </member>
        <member name="T:VectorDraw.Professional.DragDrop.DropTarget">
            <summary>
            Represents the class that handles drop events and actions of the component.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.DragDrop.DropTarget.#ctor(VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Initializes the object with the given parameters.
            </summary>
            <param name="layout">The vdLayout object where the drop action is being commited.</param>
        </member>
        <member name="M:VectorDraw.Professional.DragDrop.DropTarget.OnDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            Fires when an object is dropped in the component.
            </summary>
            <param name="e">Event's DragDrop parameters.</param>
        </member>
        <member name="M:VectorDraw.Professional.DragDrop.DropTarget.OnDragEnter(System.Windows.Forms.DragEventArgs)">
            <summary>
            Fires when an object has entered(dragged) the component.Note that version 5 objects cannot be dragged with version 6.
            </summary>
            <param name="e">Event's DragEnter parameters.</param>
        </member>
        <member name="M:VectorDraw.Professional.DragDrop.DropTarget.OnDragLeave(System.EventArgs)">
            <summary>
            Fires when an object is leaving the component.
            </summary>
            <param name="e">Event's DragLeave parameters.</param>
        </member>
        <member name="M:VectorDraw.Professional.DragDrop.DropTarget.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Fires when an object is gragged over the component.Note that version 5 objects cannot be dragged with version 6.
            </summary>
            <param name="e">Event's DragOver parameters.</param>
        </member>
        <member name="M:VectorDraw.Professional.DragDrop.DropTarget.GetDefualtEffect(System.Windows.Forms.DragEventArgs,VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Check the DataObject if it is VectorDraw File format or FileDrop and return DragDropEffects.Copy if CTRL is pressed else DragDropEffects.Move
            </summary>
            <param name="e"></param>
            <param name="layout"></param>
            <returns>True if it is the default VectorDraw supported DataObject implemantation.</returns>
        </member>
        <member name="M:VectorDraw.Professional.DragDrop.DropTarget.Dispose">
            <summary>
            Performs tasks associated with freeing, releasing, or resetting the necessary memory objects.
            After calling this method the vdDocument object is not available.
            </summary>
        </member>
        <member name="T:vdLineWeightComboBox.vdLineWeightCombo">
            <summary>
            A LineWeight control to give easy access to the lineweights.
            </summary>
            <remarks>
            vdLineWeightComboBox is a combobox like control to give you easy access to the lineweights.</remarks>
            <remarks>If none entity is selected then the activelineweight is shown and you can easily select the activelineweight.</remarks>
            <remarks>If entities are selected to the Document then the lineweight of the entities is shown where you can easily change it.
            </remarks>
        </member>
        <member name="M:vdLineWeightComboBox.vdLineWeightCombo.#ctor">
            <summary>
            The constructor of the Control always necessary.
            </summary>
        </member>
        <member name="M:vdLineWeightComboBox.vdLineWeightCombo.SetLineWeightFont(System.String,System.Single,System.Int32)">
            <summary>
            A method to set the LineWeight font.
            </summary>
            <param name="name">The name of the font.</param>
            <param name="size">The size of the font.</param>
            <param name="style">The style of the Font <see cref="T:System.Drawing.FontStyle"/></param>
            <remarks> This method is exported specially for vb6 users , for .NET it is better to use directly the LineWeightFont property.</remarks>
        </member>
        <member name="F:vdLineWeightComboBox.vdLineWeightCombo.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:vdLineWeightComboBox.vdLineWeightCombo.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:vdLineWeightComboBox.vdLineWeightCombo.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:vdLineWeightComboBox.vdLineWeightCombo.LineWeightSelected">
            <summary>
            Raises when a LineWeight is selected and the listbox is hidden. This event can be used to handle the focus on the form that is used.
            </summary>
        </member>
        <member name="P:vdLineWeightComboBox.vdLineWeightCombo.UserLineWeight">
            <summary>
            Use this property to pass a LineWeight object to be modified without interfering with the Document.
            </summary>
            <remarks>Default value (VectorDraw.Professional.Constants.VdConstLineWeight)(-5).</remarks>
        </member>
        <member name="P:vdLineWeightComboBox.vdLineWeightCombo.LineWeightDocument">
            <summary>
            Get/Set the Document that the Control should interact with.
            </summary>
        </member>
        <member name="P:vdLineWeightComboBox.vdLineWeightCombo.ApplicationsMainForm">
            <summary>
            Get/Set the Main Form where the LineWeightCombo is added. This is used only to choose either to open the list upward or downward depending the position and the height of the main application.This property can only be used in .NET applications.
            </summary>
        </member>
        <member name="P:vdLineWeightComboBox.vdLineWeightCombo.SelectedLineWeightColor">
            <summary>
            The color of the Selected lineweight.
            </summary>
        </member>
        <member name="P:vdLineWeightComboBox.vdLineWeightCombo.BackgroundColor">
            <summary>
            The background color of the combobox.
            </summary>
        </member>
        <member name="P:vdLineWeightComboBox.vdLineWeightCombo.TextColor">
            <summary>
            The color of every text in the combobox.
            </summary>
        </member>
        <member name="P:vdLineWeightComboBox.vdLineWeightCombo.LineWeightFont">
            <summary>
            Get/Set the font used to display the string of the lineweight
            </summary>
            <remarks> Default value is Microsoft Sans Serif", 8.25f, FontStyle.Regular </remarks>
        </member>
        <member name="P:vdLineWeightComboBox.vdLineWeightCombo.MaxNumberOfLineWeightsShown">
            <summary>
            Get/Set the Maximum number of lineweights to be shown at the Drop Down List.
            </summary>
        </member>
        <member name="P:vdLineWeightComboBox.vdLineWeightCombo.ShowIconImage">
            <summary>
            Get/Set a value representing if the icon in front of the combo box is shown.
            </summary>
            <remarks>Default value true</remarks>
        </member>
        <member name="P:vdLineWeightComboBox.vdLineWeightCombo.MinimumSize">
            <summary>
            The minimum size of this control is 180,21
            </summary>
        </member>
        <member name="T:vdLineWeightComboBox.vdLineWeightCombo.LineWeightEventHandler">
            <summary>
            Represents the method that will handle the RaiseLayerSelected event.
            </summary>
            <param name="sender">The vdLayerCombo object.</param>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtAngle_Radius_Direction">
            <summary>
            Implements the action taken when the user adds a polyline with bulge to a specified point.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionPolyLine">
            <summary>
            Implements the action used when adding a straight line polyline.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.CommandActions.ActionPolyLine.pline">
            <summary>
            The vdPolyline object created from the action.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionPolyLine.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vertexes,VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Initializes the action with the passed parameters.
            </summary>
            <param name="reference">A point of the polyline.</param>
            <param name="vertexes">The collection of vertexes of the polyline.</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionPolyLine.Activated">
            <summary>
            Overrides <see cref="M:VectorDraw.Actions.BaseAction.Activated"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionPolyLine.DeActivated">
            <summary>
            Overrides <see cref="M:VectorDraw.Actions.BaseAction.DeActivated"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionPolyLine.OnMyPositionChanged(VectorDraw.Geometry.gPoint)">
            <summary>
            Called when the mouse position changes.Changes the created polyline entity in order to be drawn each time the mouse moves.
            </summary>
            <param name="newPosition">A gPoint representing the new mouse position in User Coordinate System.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionPolyLine.FinishAction(VectorDraw.Actions.BaseAction)">
            <summary>
            Called when the Action is about to finish.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionPolyLine.HideRubberLine">
            <summary>
            Get a value that represents if the rubber line is drawn or not.Returns true since a rubber line is not needed.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionPolyLine.Entity">
            <summary>
            The entity which is currently selected for this action.Returns the created polyline.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionPolyLine.needUpdate">
            <summary>
            Get a value that represents if the entity should be updated after each position change.Returns true since an update is needed.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtAngle_Radius_Direction.#ctor(VectorDraw.Geometry.gPoint,System.Double,System.Double,VectorDraw.Geometry.Vertexes,VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Initializes the action with the passed parameters.
            </summary>
            <param name="reference">A point on the bulge's arc.</param>
            <param name="inangle">Angle in radians between this point and the last point of the polyline.</param>
            <param name="radius">Radius of the bulge of the next vertex.</param>
            <param name="vertexes">The collection of vertexes of the polyline.</param>
            <param name="layout">The vdlayout object where the action takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtAngle_Radius_Direction.OnMyPositionChanged(VectorDraw.Geometry.gPoint)">
            <summary>
            Called when the mouse position changes.Calculates the bulge of the created polyline entity in order to be drawn each time the mouse moves.
            </summary>
            <param name="newPosition">A gPoint representing the new mouse position in User Coordinate System.</param>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtAngle_Radius_Direction.HideRubberLine">
            <summary>
            Get a value that represents if the rubber line is drawn or not.Returns false since a rubber line is needed.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtAngle_Radius_Direction.ValuePointCS">
            <summary>
            A value representing the coordinate system of the returned <see cref="P:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtAngle_Radius_Direction.Value"/> object.Returns user coordinate system.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtAngle_Radius_Direction.Value">
            <summary>
            Get the Vertex object that the user selected.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtAngle_Center">
            <summary>
            Implements the action used when adding a vertex to a polyline with bulge.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtAngle_Center.#ctor(VectorDraw.Geometry.gPoint,System.Double,VectorDraw.Geometry.Vertexes,VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Initializes the action with the passed parameters.
            </summary>
            <param name="reference">A point that represents the radius of the bulge.</param>
            <param name="inangle">Angle in radians between this point and the last point of the polyline.</param>
            <param name="vertexes">The collection of vertexes of the polyline.</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtAngle_Center.OnMyPositionChanged(VectorDraw.Geometry.gPoint)">
            <summary>
            Called when the mouse position changes.Calculates the bulge of the created polyline entity in order to be drawn each time the mouse moves.
            </summary>
            <param name="newPosition">A gPoint representing the new mouse position in User Coordinate System.</param>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtAngle_Center.ValuePointCS">
            <summary>
            A value representing the coordinate system of the returned <see cref="P:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtAngle_Center.Value"/> object.Returns user coordinate system.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtAngle_Center.Value">
            <summary>
            Get the Vertex object that the user selected.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtRadius">
            <summary>
            Implements the action used when adding a vertex to a polyline with bulge.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtRadius.#ctor(VectorDraw.Geometry.gPoint,System.Double,VectorDraw.Geometry.Vertexes,VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Initializes the action with the passed parameters.
            </summary>
            <param name="reference">A point on the bulge's arc.</param>
            <param name="radius">The radius of the arc.</param>
            <param name="vertexes">The collection of vertexes of the polyline.</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtRadius.OnMyPositionChanged(VectorDraw.Geometry.gPoint)">
            <summary>
            Called when the mouse position changes.Calculates the bulge of the created polyline entity in order to be drawn each time the mouse moves.
            </summary>
            <param name="newPosition">A gPoint representing the new mouse position in User Coordinate System.</param>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtRadius.ValuePointCS">
            <summary>
            A value representing the coordinate system of the returned <see cref="P:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtRadius.Value"/> object.Returns user coordinate system.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtRadius.Value">
            <summary>
            Get the Vertex object that the user selected.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtAngle">
            <summary>
            Implements the action used when adding a vertex to a polyline with bulge.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtAngle.#ctor(VectorDraw.Geometry.gPoint,System.Double,VectorDraw.Geometry.Vertexes,VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Initializes the action with the passed parameters.
            </summary>
            <param name="reference">A point on the bulge's arc.</param>
            <param name="inangle">Angle in radians between this point and the last point of the polyline.</param>
            <param name="vertexes">The collection of vertexes of the polyline.</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtAngle.OnMyPositionChanged(VectorDraw.Geometry.gPoint)">
            <summary>
            Called when the mouse position changes.Calculates the bulge of the created polyline entity in order to be drawn each time the mouse moves.
            </summary>
            <param name="newPosition">A gPoint representing the new mouse position in User Coordinate System.</param>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtAngle.ValuePointCS">
            <summary>
            A value representing the coordinate system of the returned <see cref="P:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtAngle.Value"/> object.Returns user coordinate system.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtAngle.Value">
            <summary>
            Get the Vertex object that the user selected.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionPolyLineSecondArcPt">
            <summary>
            Implements the action used when adding a vertex to a polyline with bulge.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionPolyLineSecondArcPt.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vertexes,VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Initializes the action with the passed parameters.
            </summary>
            <param name="reference">Previous point of the polyline.</param>
            <param name="secondpt">Next point of the polyline.</param>
            <param name="vertexes">The vertex collection of the polyline.</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionPolyLineSecondArcPt.OnMyPositionChanged(VectorDraw.Geometry.gPoint)">
            <summary>
            Called when the mouse position changes.Calculates the bulge of the created polyline entity in order to be drawn each time the mouse moves.
            </summary>
            <param name="newPosition">A gPoint representing the new mouse position in User Coordinate System.</param>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionPolyLineSecondArcPt.ValuePointCS">
            <summary>
            A value representing the coordinate system of the returned <see cref="P:VectorDraw.Professional.CommandActions.ActionPolyLineSecondArcPt.Value"/> object.Returns user coordinate system.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionPolyLineSecondArcPt.Value">
            <summary>
            Get the Vertex object that the user selected.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtCenter">
            <summary>
            Implements the action used when adding a vertex to a polyline with bulge.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtCenter.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vertexes,VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Initializes the action with the passed parameters.
            </summary>
            <param name="reference">A point on the bulge's arc.</param>
            <param name="center">The center of the arc.</param>
            <param name="vertexes">The collection of vertexes of the polyline.</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtCenter.OnMyPositionChanged(VectorDraw.Geometry.gPoint)">
            <summary>
            Called when the mouse position changes.Calculates the bulge of the created polyline entity in order to be drawn each time the mouse moves.
            </summary>
            <param name="newPosition">A gPoint representing the new mouse position in User Coordinate System.</param>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtCenter.ValuePointCS">
            <summary>
            A value representing the coordinate system of the returned <see cref="P:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtCenter.Value"/> object.Returns user coordinate system.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtCenter.Value">
            <summary>
            Get the Vertex object that the user selected.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtTangetial">
            <summary>
            Implements the action used when adding an tangetial arc segment to a polylin.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtTangetial.#ctor(VectorDraw.Geometry.Vertexes,VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Initializes the action with the passed parameters.
            </summary>
            <param name="vertexes">The collection of vertexes of the polyline.</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtTangetial.OnMyPositionChanged(VectorDraw.Geometry.gPoint)">
            <summary>
            Called when the mouse position changes.Calculates the bulge of the created polyline entity in order to be drawn each time the mouse moves.
            </summary>
            <param name="newPosition">A gPoint representing the new mouse position in User Coordinate System.</param>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtTangetial.ValuePointCS">
            <summary>
            A value representing the coordinate system of the returned <see cref="P:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtTangetial.Value"/> object.Returns user coordinate system.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtTangetial.Value">
            <summary>
            Get the Vertex object that the user selected.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionPolyLineEndArcPtTangetial.HideRubberLine">
            <summary>
            Get a value that represents if the rubber line is drawn or not.Returns true since a rubber line is not needed.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionSpLine">
            <summary>
            Implements the action used when adding an spline polyline.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.CommandActions.ActionSpLine.pline">
            <summary>
            The vdPolyline object created from the action.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionSpLine.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vertexes,VectorDraw.Professional.vdPrimaries.vdLayout,VectorDraw.Professional.Constants.VdConstSplineFlag)">
            <summary>
            Initializes the action with the passed parameters.
            </summary>
            <param name="reference">A point of the polyline.</param>
            <param name="vertexes">The collection of vertexes of the polyline.</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
            <param name="splineflag">The polyline to be modifies.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionSpLine.OnMyPositionChanged(VectorDraw.Geometry.gPoint)">
            <summary>
            Called when the mouse position changes.Changes the created polyline entity in order to be drawn each time the mouse moves.
            </summary>
            <param name="newPosition">A gPoint representing the new mouse position in User Coordinate System.</param>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionSpLine.Entity">
            <summary>
            The entity which is currently selected for this action.Returns the created polyline.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionSpLineGetTangent">
            <summary>
            Implements the action to select Tangents for an spline polyline.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.CommandActions.ActionSpLineGetTangent.pline">
            <summary>
            The vdPolyline object created from the action.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionSpLineGetTangent.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vertexes,VectorDraw.Professional.vdPrimaries.vdLayout,VectorDraw.Professional.Constants.VdConstSplineFlag,System.Int32,VectorDraw.Geometry.Vector)">
            <summary>
            Initializes the action with the passed parameters.
            </summary>
            <param name="reference">A point of the polyline.</param>
            <param name="vertexes">The collection of vertexes of the polyline.</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
            <param name="splineflag">The splineflag to be used to the created polyline.</param>
            <param name="Tangents">Valid values from 0 to 2.0 for start Tangent , 1 for end Tangent and 2 for both.</param>
            <param name="StartTangent">Required if the Tangents value is 1 for setting the start tangent and ask the user to provide the end tangent.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionSpLineGetTangent.OnMyPositionChanged(VectorDraw.Geometry.gPoint)">
            <summary>
            Called when the mouse position changes.Changes the created polyline entity in order to be drawn each time the mouse moves.
            </summary>
            <param name="newPosition">A gPoint representing the new mouse position in User Coordinate System.</param>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionSpLineGetTangent.Entity">
            <summary>
            The entity which is currently selected for this action.Returns the created polyline.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdPoint">
            <summary>
            Implements all functionality for the vdPoint object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPoint.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes a new instance of the vdPoint object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPoint.#ctor(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Geometry.gPoint)">
            <summary>
            Initializes a new instance of the vdPoint object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <param name="insertionpoint">The Insertion point of tyhe vdPoint object.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPoint.#ctor">
            <summary>
            Initializes the vdPoint object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPoint.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPoint.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)">
            <summary>
            <see cref="M:VectorDraw.Professional.vdPrimaries.vdFigure.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)"/>.
            </summary>
            <param name="object2viewcs"></param>
            <param name="mode"></param>
            <param name="pickPoi"></param>
            <param name="LastPoi"></param>
            <param name="SegCount"></param>
            <param name="osnaps"></param>
            <returns>True if at least one osnap point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPoint.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPoint.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)">
            <summary>
            This function is intended to be called during a grip edit of the object. 
            </summary>
            <param name="Indexes">Represents a zero based array of the grip indexes that will be moved.</param>
            <param name="dx">The dx distance that the grip is moved.</param>
            <param name="dy">The dy distance that the grip is moved.</param>
            <param name="dz">The dz distance that the grip is moved.</param>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdPoint.GetGripPoints"/>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnMoveGripPointsAt"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPoint.GetGripPoints">
            <summary>
            A function returning the grip points of the object.
            </summary>
            <returns>Returns a new instance of gpoints object containing the grip points of the object.</returns>
            <remarks>
            The returning points are in World coordinate system(WCS).
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetGripPoints"/> event.
            When implementing this method the <see cref="M:VectorDraw.Professional.vdFigures.vdPoint.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)"/> must be also override according to the new selected grip points.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPoint.InitializeProperties">
            <summary>
            Resets the properties of the vdPoint object to the Default values.
            </summary>
            <remarks>
            Default values:InsertionPoint to 0.0,0.0,0.0 and ExtrusionVector (0.0,0.0,1.0).
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPoint.ToString">
            <summary>
            Gets a System.String that represents the type of the vdPoint Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPoint.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPoint.Explode">
            <summary>
            Explodes the vdPoint object into vdPolyline objects.
            </summary>
            <returns>A collection containing polyline objects created from the explode method.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPoint.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPoint.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Called in order to draw the object in a specified vdRender object.
            </summary>
            <param name="render">The vdRender object in which the object will be drawn.</param>
            <returns><see cref="T:VectorDraw.Render.vdRender.DrawStatus"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPoint.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdPoint object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPoint.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdPoint object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPoint.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements all functionality for the vdPoint object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdPoint.ECSMatrix">
            <summary>
            Gets the matrix which is used to transform vectors or points from the 
            object's object coordinate system (OCS) to the World Coordinate System (WCS).
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdPoint.AlignToView">
            <summary>
            A boolean value that defines if the plane of the object is relative to the current view.
            </summary>
            <remarks>
            Default value is False.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdPoint.AlignToViewSize">
            <summary>
            Get/Set the height of the object in output Device millimeters for positive or hundreds of millimeters for negative.
            </summary>
            <remarks>
            If  value is not 0 then the height of the object will be the same independently of current zoom.
            If value = 0 height is relative to Drawing Units.
            Negative values are in hundreds of millimeters of output device (screen/printer etc). For example, in order the object to have 1.5 millimeters height you must set it to -150 (means 150/100 millimeters).
            Default value = 0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdPoint.BoundingBox">
            <summary>
            Gets the Bounding Box of the vdPoint object in WorldCoordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdPoint.ExtrusionVector">
            <summary>
            Get/Set the extrusion vector of the vdPoint object.
            </summary>
            <remarks>
            Default value (0.0,0.0,1.0).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdPoint.InsertionPoint">
            <summary>
            Get/Set the insertion point in World Coordinate System(WCS).
            </summary>
            <remarks>
            Default value (0.0,0.0,0.0).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdRect">
            <summary>
            Implements the vdRect object.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdRect.mHatchProperties">
            <summary>
            Internally used for the object's hatch properties.It is recommended to use the <see cref="P:VectorDraw.Professional.vdFigures.vdRect.HatchProperties"/> property instead.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdRect.mWidth">
            <summary>
            The width of the vdRect object.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdRect.mHeight">
            <summary>
            The height of the vdRect object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes a new instance of the vdRect object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.#ctor(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Geometry.gPoint,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the vdRect object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <param name="insertionpoint">The insertion point of the rect object.</param>
            <param name="width">The width of the rect object.</param>
            <param name="height">The height of the rect object.</param>
            <param name="rotation">The rotation of the rect object.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.#ctor">
            <summary>
            Initializes a new instance of the vdRect object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.Break(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdPrimaries.vdFigure@)">
            <summary>
            Breaks the vdRect into one subpolylines.Deletes the part that is between p1,p2. Note that the vdRect after the break command will be Deleted and a newly created polyline will be added at the end of the rect's collection.
            </summary>
            <param name="p1">The first point needed for this command.</param>
            <param name="p2">The second point needed for this command.</param>
            <param name="newEntity">The newly created polyline is returned in this parameter.</param>
            <returns>true if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.TestOffsetSide(VectorDraw.Geometry.gPoint)">
            <summary>
            Tests if a point is inside a vdRect or not.
            </summary>
            <param name="pt">The point with which the test will be commited in World Coordinate System(WCS).</param>
            <returns>Returns -1.0 if the point is inside the rectangle and 1.0 if it is outside.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.getOffsetCurve(System.Double)">
            <summary>
            Creates a new vdRect object at a specified distance and in the same plane with the existing rectangle.
            </summary>
            <param name="offsetDist">The distance where the new vdRect object will be created.</param>
            <returns>The new created vdRect object.An empty collection is returned if the height and width of the new object is less or equal to 0.0 .</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.Area">
            <summary>
            Calculates the enclosed area of the vdRect object in Drawing Units.
            </summary>
            <returns>Returns the enclosed area.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.Length">
            <summary>
            Calculates the length of the vdRect object.
            </summary>
            <returns>Returns the length of the object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.getFirstOffsetParam">
            <summary>
            Get a value representing the start of the vdRect object.
            </summary>
            <returns>Returns 0.0.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.getStartParam">
            <summary>
            Returns the start parameter for the vdRect object.
            </summary>
            <returns>Returns the start parameter for the vdRect object equal to 0.0.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.getEndParam">
            <summary>
            Return the end parameter for the vdRect object.
            </summary>
            <returns>Return the end parameter for the vdRect object equal to it's length.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.getStartPoint">
            <summary>
            Get the first point of the vdRect object(lower left) in World Coordinate System(WCS).
            </summary>
            <returns>The start point of the vdRect object in World Coordinate System(WCS).</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.getEndPoint">
            <summary>
            Get the last point of the vdRect object(lower left) in World Coordinate System(WCS).
            </summary>
            <returns>The last point of the vdRect object in World Coordinate System(WCS) equals to the start point.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.getDistAtParam(System.Double)">
            <summary>
            Get the length of the vdRect’s segment from the vdRect’s beginning to the point specified by param.
            </summary>
            <param name="param">A value that represents a point on the vdRect.</param>
            <returns>The distance from the getStartParam.</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdRect.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdRect.getStartParam"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.getParamAtDist(System.Double)">
            <summary>
            Gets the parameter of the object at the specific distance.
            </summary>
            <param name="dist">The distance that the param is needed.</param>
            <returns>Returns parameter at the location specified by dist.</returns>
            <remarks>
            If the distance is 0.0 then the <see cref="M:VectorDraw.Professional.vdFigures.vdRect.getStartParam"/> is returned.
            If the distance is equal to the length of the object then the <see cref="M:VectorDraw.Professional.vdFigures.vdRect.getEndParam"/> is returned.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.getDistAtPoint(VectorDraw.Geometry.gPoint)">
            <summary>
            Get the length of the vdRect’s segment between the vdRect’s start point and point pt.
            </summary>
            <param name="pt">The point of the vdRect in World Coordinate System(WCS).</param>
            <returns>Returns the length of the vdRect’s segment between the vdRect’s start point and point.</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdRect.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdRect.getStartParam"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.getPointAtDist(System.Double)">
            <summary>
            Gets a point belonging to the vdRect at the specified distance.
            </summary>
            <param name="dist">The distance along the vdRect.</param>
            <returns>Returns the point located at the location specified by dist</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdRect.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdRect.getStartParam"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.getPointAtParam(System.Double)">
            <summary>
            Returns a point on the vdRect representing a param in WCS.
            </summary>
            <param name="param">The param of the vdRect object.</param>
            <returns>Returns the point on the vdRect specified by the param in World Coordinate System(WCS).</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdRect.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdRect.getStartParam"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.getParamAtPoint(VectorDraw.Geometry.gPoint)">
            <summary>
            Get the parameter of the vdRect at a specified point given in WCS.
            </summary>
            <param name="pt">The point in World Coordinate System(WCS) belonging to the vdRect.</param>
            <returns>Returns the parameter of the vdRect at point pt.</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdRect.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdRect.getStartParam"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.PointOnCurve(VectorDraw.Geometry.gPoint,System.Boolean)">
            <summary>
            Returns if a point belongs to a vdRect object.
            </summary>
            <param name="pt">A point in WCS or ECS.</param>
            <param name="IsInECS">A boolean value indicating if the point is in ECS or WCS.</param>
            <returns>Returns true if the point belongs to the vdRect object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)">
            <summary>
            This function is intended to be called during a grip edit of the object. 
            </summary>
            <param name="Indexes">Represents a zero based array of the grip indexes that will be moved.</param>
            <param name="dx">The dx distance that the grip is moved.</param>
            <param name="dy">The dy distance that the grip is moved.</param>
            <param name="dz">The dz distance that the grip is moved.</param>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdRect.GetGripPoints"/>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnMoveGripPointsAt"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.GetGripPoints">
            <summary>
            A function returning the grip points of the object.
            </summary>
            <returns>Returns a new instance of gpoints object containing the grip points of the object.</returns>
            <remarks>
            The returning points are in World coordinate system(WCS).
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetGripPoints"/> event.
            When implementing this method the <see cref="M:VectorDraw.Professional.vdFigures.vdRect.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)"/> must be also override according to the new selected grip points.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.InitializeProperties">
            <summary>
            Resets the properties of the vdRect object to the Default values.
            </summary>
            <remarks>
            Default values: InsertionPoint set to (0.0,0.0,0.0) , Width = Height = 1, Rotation = 0 , HatchProperties = null.
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.ToString">
            <summary>
            Gets a System.String that represents the type of the vdRect Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.GetSamplePoints(System.Int32,System.Double)">
            <summary>
            Returns a list of points on the vdRect object from the start to the end point of the curve.
            </summary>
            <param name="curveResolution">valid values (1 to 20000)</param>
            <param name="pixelSize">valid values possitive decimal ( &gt;=0)</param>
            <returns>A collection of points belonging to the vdRect in Entity Coordinate System(ECS).</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCurve.GetSamplePoints(System.Int32,System.Double)"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Called in order to draw the object in a specified vdRender object.
            </summary>
            <param name="render">The vdRender object in which the object will be drawn.</param>
            <returns><see cref="T:VectorDraw.Render.vdRender.DrawStatus"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.AsPolyline">
            <summary>
            Create a vdPolyline object with the same properties as the vdRect object.
            </summary>
            <returns>A new created vdPolyline object with the same properties as the vdRect object.</returns>
            <remarks> The new vdPolyline object is not inserted in the Document.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.Explode">
            <summary>
            Explodes the vdRect object into a vdPolyline object.
            </summary>
            <returns>A collection containing the vdPolyline object created from the explode method.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.IntersectWith(VectorDraw.Professional.vdPrimaries.vdFigure,VectorDraw.Professional.Constants.VdConstInters,VectorDraw.Geometry.gPoints)">
            <summary>
            Finds the intersection points of an object with another object.
            </summary>
            <param name="pEntity">The entity with which the intersection of the object will be done.</param>
            <param name="intersectOption"><see cref="T:VectorDraw.Professional.Constants.VdConstInters"/> constant</param>
            <param name="intPoints">A precreated gPoints collection in which the instersection points will be added.The points are returned in WCS.</param>
            <returns>True if at least one intersection point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)">
            <summary>
            <see cref="M:VectorDraw.Professional.vdPrimaries.vdFigure.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)"/>.
            </summary>
            <param name="object2viewcs"></param>
            <param name="mode"></param>
            <param name="pickPoi"></param>
            <param name="LastPoi"></param>
            <param name="SegCount"></param>
            <param name="osnaps"></param>
            <returns>True if at least one osnap point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.ToMesh(System.Int32)">
            <summary>
            Converts the vdRect into a <see cref="T:VectorDraw.Professional.vdFigures.vdPolyface"/> object.
            </summary>
            <param name="CurveResolution">Determines the number of the segments that the rect will be devided.</param>
            <returns>The created vdPolyface object which is not being added to the Document.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdRect object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdRect object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdRect.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements the vdRect object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdRect.BoundingBox">
            <summary>
            Gets the Bounding Box of the vdRect object in WorldCoordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdRect.InsertionPoint">
            <summary>
            Get/Set the lower left point of the rectangle in World Coordinate System(WCS).
            </summary>
            <remarks>
            Default value (0.0,0.0,0.0).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdRect.Width">
            <summary>
            Get/Set the width of the rectangle in drawing units.
            </summary>
            <remarks>
            Default value 1.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdRect.Height">
            <summary>
            Get/Set the height of the rectangle in drawing units.
            </summary>
            <remarks>
            Default value 1.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdRect.Rotation">
            <summary>
            Get/Set the vertical rotation angle in radians of the rectangle.
            </summary>
            <remarks>
            Default value 0.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdRect.HatchProperties">
            <summary>
            Get/Set the hatch properties of the vdRect object.
            </summary>
            <remarks>
            Default value null.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdRect.ECSMatrix">
            <summary>
            Gets the matrix which is used to transform vectors or points from the 
            object's object coordinate system (OCS) to the World Coordinate System (WCS).
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdLine">
            <summary>
            Implements the vdLine object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes a new instance of the vdLine object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.#ctor(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Initializes a new instance of the vdLine object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <param name="startpoint">The StartPoint of the vdLine object.</param>
            <param name="endpoint">The EndPoint of the vdLine object.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.#ctor">
            <summary>
            Initializes a new instance of the vdLine object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Initializes a new instance of the vdLine object.
            </summary>
            <param name="startpoint">The start point of the new created vdLine object.</param>
            <param name="endpoint">The end point of the new created vdLine object.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.TestOffsetSide(VectorDraw.Geometry.gPoint)">
            <summary>
            Tests if a point is left or right a vdLine object.
            </summary>
            <param name="pt">The point with which the test will be commited in World Coordinate System(WCS).</param>
            <returns>Returns 1.0 if the point pt is right from the line and -1.0 if the point is on the left side of the line.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.getOffsetCurve(System.Double)">
            <summary>
            Creates a new vdLine object at a specified distance and in the same plane with the existing object.
            </summary>
            <param name="offsetDist">The distance where the new vdLine object will be created.</param>
            <returns>The new created vdLine objects.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.Fillet(System.Double,VectorDraw.Professional.vdFigures.vdCurve@,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdFigures.vdArc@)">
            <summary>
            Fillets the edges between arcs and lines.
            </summary>
            <param name="Radius">The radius for the fillet command.</param>
            <param name="withObject">The object with which the fillet command will be commited.This object should be either a vdArc or vdLine object.This object must be already created.</param>
            <param name="pointOnThis">A point on the vdLine object in World Coordinate System(WCS).</param>
            <param name="pointOnWithObject">A point on the other entity in WCS.</param>
            <param name="arc">If a new object must be created it is returned in this parameter.</param>
            <returns>true if the fillet command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.Break(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdPrimaries.vdFigure@)">
            <summary>
            Breaks the vdLine into two or one sublines.Deletes the part that is between p1,p2.
            </summary>
            <param name="p1">The first point needed for this command.</param>
            <param name="p2">The second point needed for this command.</param>
            <param name="newEntity">If a new line is created it is returned in this parameter.</param>
            <returns>true if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.IntersectWith(VectorDraw.Professional.vdPrimaries.vdFigure,VectorDraw.Professional.Constants.VdConstInters,VectorDraw.Geometry.gPoints)">
            <summary>
            Finds the intersection points of an object with another object.
            </summary>
            <param name="pEntity">The entity with which the intersection of the object will be done.</param>
            <param name="intersectOption"><see cref="T:VectorDraw.Professional.Constants.VdConstInters"/> constant</param>
            <param name="intPoints">A precreated gPoints collection in which the instersection points will be added.The points are returned in WCS.</param>
            <returns>True if at least one intersection point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.Area">
            <summary>
            Returns 0.0.
            </summary>
            <returns>Returns 0.0.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.Length">
            <summary>
            Calculates the length of the vdLine object.
            </summary>
            <returns>Returns the length of the object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.getStartParam">
            <summary>
            Returns the start parameter for the vdLine object.
            </summary>
            <returns>Returns 0.0.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.getEndParam">
            <summary>
            Return the end parameter for the vdLine object.
            </summary>
            <returns>Return the end parameter for the vdLine object, equals to the length of the line.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.getDistAtParam(System.Double)">
            <summary>
            Get the length of the line’s segment from the line’s beginning to the point specified by param.
            </summary>
            <param name="param">A value that represents a point on a curve.</param>
            <returns>The distance from the getStartParam.</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdLine.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdLine.getStartParam"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.getParamAtDist(System.Double)">
            <summary>
            Gets the parameter of the object at the specific distance.
            </summary>
            <param name="dist">The distance that the param is needed.</param>
            <returns>Returns parameter at the location specified by dist.</returns>
            <remarks>
            If the distance is 0.0 then the <see cref="M:VectorDraw.Professional.vdFigures.vdLine.getStartParam"/> is returned.
            If the distance is equal to the length of the object then the <see cref="M:VectorDraw.Professional.vdFigures.vdLine.getEndParam"/> is returned.
            </remarks>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdLine.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdLine.getStartParam"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.getDistAtPoint(VectorDraw.Geometry.gPoint)">
            <summary>
            Get the length of the line’s segment between the line’s start point and point pt.
            </summary>
            <param name="pt">The point of the curve in World Coordinate System(WCS).</param>
            <returns>Returns the length of the line’s segment between the line’s start point and point.</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdLine.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdLine.getStartParam"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.getPointAtDist(System.Double)">
            <summary>
            Gets a point belonging to the line at the specified distance.
            </summary>
            <param name="dist">The distance along the curve.</param>
            <returns>Returns the point located at the location specified by dist</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdLine.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdLine.getStartParam"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.getStartPoint">
            <summary>
            Gets the start point of the Line.
            </summary>
            <returns>The start point of the vdLine object in (WCS).</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.getEndPoint">
            <summary>
            Gets the end point of the Line.
            </summary>
            <returns>The end point of the vdLine object in (WCS).</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.getParamAtPoint(VectorDraw.Geometry.gPoint)">
            <summary>
            Returns the parameter of the vdLine object at the specified point.
            </summary>
            <param name="pt">A point of the vdLine object in World Coordinate System(WCS).</param>
            <returns>Returns the parameter of the vdLine object at the specified point.</returns>
            <remarks>If the point does not belong to the vdLine object an Exception is thrown.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.getPointAtParam(System.Double)">
            <summary>
            Get a point of the vdLine object at a given param distance.
            </summary>
            <param name="param">The parameter used to calculate the point.</param>
            <returns>Returns a point of the vdLine object in World Coordinate System(WCS).</returns>
            <remarks>If the param is not between the start and end parameter of the vdArc object an Exception is thrown.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.PointOnCurve(VectorDraw.Geometry.gPoint,System.Boolean)">
            <summary>
            Checks if a point belongs to the line.
            </summary>
            <param name="pt">The input point in World or in Entity Coordinate System (WCS or ECS).</param>
            <param name="IsInECS">A boolean value that shows if the point is in WCS or ECS.</param>
            <returns>Returns true if the point belongs to the curve.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)">
            <summary>
            <see cref="M:VectorDraw.Professional.vdPrimaries.vdFigure.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)"/>.
            </summary>
            <param name="object2viewcs"></param>
            <param name="mode"></param>
            <param name="pickPoi"></param>
            <param name="LastPoi"></param>
            <param name="SegCount"></param>
            <param name="osnaps"></param>
            <returns>True if at least one osnap point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)">
            <summary>
            This function is intended to be called during a grip edit of the vdLine object. 
            </summary>
            <param name="Indexes">Represents a zero based array of the grip indexes that will be moved.</param>
            <seealso cref="P:VectorDraw.Render.vdRenderGlobalProperties.EnableMiddleGripForLines"/>
            <param name="dx">The dx distance that the grip is moved.</param>
            <param name="dy">The dy distance that the grip is moved.</param>
            <param name="dz">The dz distance that the grip is moved.</param>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdLine.GetGripPoints"/>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnMoveGripPointsAt"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.GetGripPoints">
            <summary>
            A function returning the grip points of the object.
            </summary>
            <returns>Returns a new instance of gpoints object containing the grip points of the object.</returns>
            <remarks>
            The returning points are in World coordinate system(WCS).
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetGripPoints"/> event.
            When implementing this method the <see cref="M:VectorDraw.Professional.vdFigures.vdLine.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)"/> must be also override according to the new selected grip points.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.InitializeProperties">
            <summary>
            Resets the properties of the vdLine object to the Default values.
            </summary>
            <remarks>
            Default values:StartPoint = EndPoint = new created (0.0,0.0,0.0) gpoints objects.
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.ToString">
            <summary>
            Gets a System.String that represents the type of the vdLine Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.GetSamplePoints(System.Int32,System.Double)">
            <summary>
            Returns a list of points on the vdLine object from the start to the end point of the line.
            </summary>
            <param name="curveResolution">valid values (1 to 20000)</param>
            <param name="pixelSize">valid values possitive decimal ( &gt;=0)</param>
            <returns>A collection of points belonging to the vdLine in Entity Coordinate System(ECS).</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCurve.GetSamplePoints(System.Int32,System.Double)"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Called in order to draw the object in a specified vdRender object.
            </summary>
            <param name="render">The vdRender object in which the object will be drawn.</param>
            <returns><see cref="T:VectorDraw.Render.vdRender.DrawStatus"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.AsPolyline">
            <summary>
            Create a vdPolyline object with the same properties as the this object.
            </summary>
            <returns>A new created vdPolyline object with the same properties as the this object.</returns>
            <remarks> The new vdPolyline object is not inserted in the Document.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.ToMesh(System.Int32)">
            <summary>
            Converts the vdLine into a <see cref="T:VectorDraw.Professional.vdFigures.vdPolyface"/> object.
            </summary>
            <param name="CurveResolution">Determines the number of the segments that the lines will be devided.</param>
            <returns>The created vdPolyface object which is not being added to the Document.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.ChamferLines(VectorDraw.Professional.vdFigures.vdLine,VectorDraw.Professional.vdFigures.vdLine,VectorDraw.Professional.vdFigures.vdLine@,VectorDraw.Professional.vdObjects.vdDocument.ChamferMethodEnum,System.Boolean,System.Double,System.Double)">
            <summary>
            Chamfers the two passed lines using the passed parameters.
            </summary>
            <param name="line1">The first vdLine to chamfer.</param>
            <param name="line2">The second vdLine to chamfer.</param>
            <param name="resultline">Here it will be returned a new vdLine if it is produced from the chamfer command.</param>
            <param name="Method">The method to be used , Distance or Angle.</param>
            <param name="Trim">A boolean value representing if the lines are going to be trimmed during the chamfer command.</param>
            <param name="argument1">First Distance for the chamfer command.</param>
            <param name="argument2">Second Distance OR Angle in degrees if the method is Angle.</param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdLine object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdLine object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLine.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements the vdLine object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLine.ECSMatrix">
            <summary>
            Gets the matrix which is used to transform vectors or points from the 
            object's object coordinate system (OCS) to the World Coordinate System (WCS).
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLine.BoundingBox">
            <summary>
            Gets the Bounding Box of the vdLine object in WorldCoordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLine.StartPoint">
            <summary>
            Get/Set the start point of the vdLine object.
            </summary>
            <remarks>
            Default value (0.0,0.0,0.0).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLine.EndPoint">
            <summary>
            Get/Set the end point of the vdLine object.
            </summary>
            <remarks>
            Default value (0.0,0.0,0.0).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.FilterObjectEventHandler">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.ObjectWalker">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ObjectWalker.mEventContextObject">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.ObjectWalker.#ctor(System.Object)">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.ObjectWalker.GetEnumerator">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.ObjectWalker.Reset">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.ObjectWalker.MoveNext">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.ObjectWalker.FilterObjects">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.ObjectWalker.FilterObjectsOfType(System.Object,System.Type,System.String,System.Object)">
            <summary>
            Internally used only.objectType must inherit from vdBaseObject 
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.ObjectWalker.getObjectReferences(System.Object,System.Object,System.Boolean)">
            <summary>
            Internally used only
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.ObjectWalker.FilterObject">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.ObjectWalker.StackCount">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.ObjectWalker.Current">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.VdrawDialogs">
            <summary>
            Implementations of several VectorDraw dialogs.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.VdrawDialogs.ShowDialog(System.Windows.Forms.CommonDialog,VectorDraw.Professional.vdObjects.vdDocument,System.Windows.Forms.IWin32Window)">
            <summary>
            Shows the form as a modal dialog box with the specified owner.
            </summary>
            <param name="dlg">The System.Windows.Forms.CommonDialog to display.</param>
            <param name="doc">The active vdDocument object.</param>
            <param name="owner"> Any object that implements System.Windows.Forms.IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>A System.Windows.Forms.DialogResult indicating the result code returned by the System.Windows.Forms.Form.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.VdrawDialogs.ShowDialog(System.Windows.Forms.Form,VectorDraw.Professional.vdObjects.vdDocument,System.Windows.Forms.IWin32Window)">
            <summary>
            Shows the form as a modal dialog box with the specified owner.
            </summary>
            <param name="form">The System.Windows.Forms.Form to display.</param>
            <param name="doc">The active vdDocument object.</param>
            <param name="owner"> Any object that implements System.Windows.Forms.IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>A System.Windows.Forms.DialogResult indicating the result code returned by the System.Windows.Forms.Form.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.VdrawDialogs.#ctor">
            <summary>
            Initializes the class. Call InitializeVdrawDialogs method in order to set the document used to show the dialogs.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.VdrawDialogs.#ctor(VectorDraw.Professional.vdObjects.vdDocument,System.Windows.Forms.Control)">
            <summary>
            Initializes necessary properties that are needed to show the dialogs.
            </summary>
            <param name="Document">The Document that the dialogs need in order to show their properties.</param>
            <param name="parent">The parent control where the dialogs will be implemented.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.VdrawDialogs.InitializeVdrawDialogs(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes the Document needed to show the dialogs.
            </summary>
            <param name="Document">The Document Object.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.VdrawDialogs.GetColorDlg(VectorDraw.Professional.vdObjects.vdColor)">
            <summary>
            Gets the color picker dialog.
            </summary>
            <param name="defaultValue">A vdColor that will be selected as default when the dialog opens.</param>
            <returns>The vdColor object selected by the user.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.VdrawDialogs.GetColorDlg(VectorDraw.Professional.vdObjects.vdColor,System.Boolean)">
            <summary>
            Gets the color picker dialog.
            </summary>
            <param name="defaultValue">A vdColor that will be selected as default when the dialog opens.</param>
            <param name="HideByLayerByBlockButtons">Enables/Disablers the ByBlock,ByLayer buttons.</param>
            <returns>The vdColor object selected by the user.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.VdrawDialogs.GetLineWeightDlg(VectorDraw.Professional.Constants.VdConstLineWeight)">
            <summary>
            Gets the Lineweight dialog.
            </summary>
            <param name="defaultValue">A default Lineweight value that will be selected when the dialog opens.</param>
            <returns>The Lineweight value the user selected.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.VdrawDialogs.GetLineTypeDlg(VectorDraw.Professional.vdPrimaries.vdLineType,System.Boolean)">
            <summary>
            Gets the Linetype dialog.
            </summary>
            <param name="defaultValue">A default vdLineType object that will be selected when the dialog opens.</param>
            /// <param name="ShowBLayer">A boolean value representing if the Bylayer linetype will be shown.</param>
            <returns>Returns the vdLineType object that the user selected.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.VdrawDialogs.EditAttrib(VectorDraw.Professional.vdFigures.vdInsert)">
            <summary>
            Gets the Edit attribute dialog.
            </summary>
            <param name="EntityObject">The vdInsert object that has the attributes to be edited.</param>
            <returns>Returns true if the user pressed the OK button.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.VdrawDialogs.PointStyleDlg">
            <summary>
            Gets the point style dialog.
            </summary>
            <returns>Returns true if the user pressed the OK button.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.VdrawDialogs.LayerControl">
            <summary>
            Gets the Layer manager.
            </summary>
            <returns>Returns true if the user pressed the OK button.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.VdrawDialogs.CmdInsertBlockDialog(System.String@,System.Object@,System.Object@,System.Object@)">
            <summary>
            Gets the insert Block dialog.
            </summary>
            <param name="blockname"></param>
            <param name="insertionPoint">Set as "user".</param>
            <param name="scales">Set as "user".</param>
            <param name="rotationAngle">Set as "user".</param>
            <returns>Returns true if the user pressed the OK button.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.VdrawDialogs.GetHatchPatternDlg(VectorDraw.Professional.vdPrimaries.vdHatchPattern)">
            <summary>
            Gets the Hatch Patterns dialog.
            </summary>
            <param name="defaultValue">Default pattern selected when the dialog opens.</param>
            <returns>Returns the pattern the user selected.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.VdrawDialogs.GetOsnapDialog">
            <summary>
            Gets the osnap dialog.
            </summary>
            <returns>Returns true if the user pressed the OK button.</returns>
            <remarks > Initializes and changes the Document's osnap mode passed at the constractor of this class.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.VdrawDialogs.GetTextStylesDialog">
            <summary>
            Shows the TextStyle Dialog.
            </summary>
            <returns>A boolean value representing if the user pressed Ok(true) of Cancel(false).</returns>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.VdrawDialogs.GetExternalReferencesDialog">
            <summary>
            Shows the External References Dialog.
            </summary>
            <returns>A boolean value representing if the user pressed Ok(true) of Cancel(false).</returns>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.VdrawDialogs.GetImagesDialog">
            <summary>
            Shows the Image Definition's dialog.
            </summary>
            <returns>A boolean value representing if the user pressed Ok(true) of Cancel(false).</returns>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.VdrawDialogs.GetEditImageDialog(VectorDraw.Professional.vdPrimaries.vdImageDef)">
            <summary>
            Shows the Edit Image Definition dialog.
            </summary>
            <param name="image">A vdImageDef object to be edited.</param>
            <returns>A boolean value representing if the user pressed Ok(true) of Cancel(false).</returns>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.VdrawDialogs.GetLightsDialog">
            <summary>
            Shows The Light Manager Dialog.
            </summary>
            <returns>A boolean value representing if the user pressed Ok(true) of Cancel(false).</returns>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.VdrawDialogs.GetBhatchDialog">
            <summary>
            Opens the bHatch dialog to select and hatch objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.VdrawDialogs.GetGroupsDialog">
            <summary>
            Opens the vdGroups dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.VdrawDialogs.GetMultiViewDialog">
            <summary>
            Call the multiview dialog.
            </summary>
            <remarks>
            If the ActiveLayout of the Document is a layout or the model then a new vdLayoutSplit dialog will appear.
            If the ActiveLayout is a vdLayoutSplit then the dialog will change the current LayoutSplit.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.VdrawDialogs.SetVertexDialogBulgeView(System.Int32)">
            <summary>
            Set the Value for the BulgeView property of the frmEditPointsDialog dialog.
            </summary>
            <param name="value">
            0 for BulgeViewEnum.Bulge
            1 for BulgeViewEnum.Altitude
            2 for BulgeViewEnum.IncludedAngle
            </param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.VdrawDialogs.GetVertexDialogBulgeView">
            <summary>
            Get the value of the BulgeView property of the frmEditPointsDialog dialog.
            </summary>
            <returns>
            Returns an integer that represents the value of BulgeView.
            0 for BulgeViewEnum.Bulge
            1 for BulgeViewEnum.Altitude
            2 for BulgeViewEnum.IncludedAngle
            </returns>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.VdrawDialogs.ColorDialogOKLocationX">
            <summary>
            Get/Set the X Location of the OK button of the dialog
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.VdrawDialogs.ColorDialogOKLocationY">
            <summary>
            Get/Set the Y Location of the OK button of the dialog
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.VdrawDialogs.ColorDialogCancelLocationX">
            <summary>
            Get/Set the X Location of the Cancel button of the dialog
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.VdrawDialogs.ColorDialogCancelLocationY">
            <summary>
            Get/Set the Y Location of the Cancel button of the dialog
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.VdrawDialogs.ColorDialogOKWidth">
            <summary>
            Get/Set the Width of the OK button of the dialog
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.VdrawDialogs.ColorDialogCancelWidth">
            <summary>
            Get/Set the Width of the Cancel button of the dialog
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.VdrawDialogs.LocationX">
            <summary>
            Gets or sets the x of the location that represents the upper-left corner of the System.Windows.Forms.Form in screen coordinates.
            </summary>
            <remarks> Better to use the static in .NET and this property for COM implementations</remarks>
            <example>vb6 code example to set these properties<code>
                     Dim dialogs As New VectorDraw_Professional.VdrawDialogs
                     dialogs.FormTitle = "This is my title"
                     dialogs.StartPosition = FormStartPosition_Manual
                     dialogs.LocationX = 100
                     dialogs.LocationY = 10
                     dialogs.InitializeVdrawDialogs VDraw1.ActiveDocument.WrapperObject
                     dialogs.LayerControl
                     dialogs.FormTitle = ""
            </code></example>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.VdrawDialogs.LocationY">
            <summary>
            Gets or sets the y of the location that represents the upper-left corner of the System.Windows.Forms.Form in screen coordinates.
            </summary>
            <remarks> Better to use the static in .NET and this property for COM implementations</remarks>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.VdrawDialogs.StartPosition">
            <summary>
            Gets or sets the starting position of the form at run time.
            </summary>
            <remarks> Better to use the static in .NET and this property for COM implementations</remarks>
            <example>Example in VD to set some initial properties for the dialogs<code>
                     Dim dialogs As New VectorDraw_Professional.VdrawDialogs
                    dialogs.FormTitle = "This is my title"
                    dialogs.InitializeVdrawDialogs VDraw1.ActiveDocument.WrapperObject
                    dialogs.LayerControl
                    dialogs.FormTitle = ""
            </code>
            </example>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.VdrawDialogs.FormTitle">
            <summary>
            Gets or sets the title of the form.
            </summary>
            <remarks> Better to use the static in .NET and this property for COM implementations</remarks>
            <example>Use initial values for VectorDraw dialogs.<code>
            C#
                     VectorDraw.Professional.Dialogs.VdrawDialogs.staticStartPosition = FormStartPosition.Manual;
                     VectorDraw.Professional.Dialogs.VdrawDialogs.staticLocation = new Point(10, 10);
                     VectorDraw.Professional.Dialogs.VdrawDialogs.staticFormTitle = "This is my title";
                     VectorDraw.Professional.Dialogs.LayersDialog.Show(vdFramedControl.BaseControl.ActiveDocument);
                     VectorDraw.Professional.Dialogs.VdrawDialogs.staticStartPosition = FormStartPosition.WindowsDefaultLocation; //Remember to set the value back since this is a static property!
                     VectorDraw.Professional.Dialogs.VdrawDialogs.staticFormTitle = "";//Remember to set the value back since this is a static property! 
            </code></example>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.VdrawDialogs.ShowVertexPolylineCross">
            <summary>
            Get/Set a value representing if the vertex dialog will show a little cross at the polyline's vertex.
            </summary>
            <remarks>Default value true.Better to use the static in .NET and this property for COM implementations.</remarks>
            <example>c# sample code.<code>
            C#
                     VectorDraw.Professional.Dialogs.VdrawDialogs.ShowVertexPolylineCross = false;
            </code></example>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.VdrawDialogs.staticLocation">
            <summary>
            Gets or sets the System.Drawing.Point that represents the upper-left corner of the System.Windows.Forms.Form in screen coordinates.
            </summary>
            <remarks> Better to use the static in .NET and this property for COM implementations</remarks>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.VdrawDialogs.staticStartPosition">
            <summary>
            Gets or sets the starting position of the form at run time.
            </summary>
            <remarks> Better to use the static in .NET and this property for COM implementations</remarks>
            <example>Use initial values for VectorDraw dialogs.<code>
            C#
                     VectorDraw.Professional.Dialogs.VdrawDialogs.staticStartPosition = FormStartPosition.Manual;
                     VectorDraw.Professional.Dialogs.VdrawDialogs.staticLocation = new Point(10, 10);
                     VectorDraw.Professional.Dialogs.VdrawDialogs.staticFormTitle = "This is my title";
                     VectorDraw.Professional.Dialogs.LayersDialog.Show(vdFramedControl.BaseControl.ActiveDocument);
                     VectorDraw.Professional.Dialogs.VdrawDialogs.staticStartPosition = FormStartPosition.WindowsDefaultLocation; //Remember to set the value back since this is a static property!
                     VectorDraw.Professional.Dialogs.VdrawDialogs.staticFormTitle = "";//Remember to set the value back since this is a static property! 
            </code></example>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.VdrawDialogs.staticFormTitle">
            <summary>
            Gets or sets the title of the form.
            </summary>
            <remarks> Better to use the static in .NET and this property for COM implementations</remarks>
            <example>Use initial values for VectorDraw dialogs.<code>
            C#
                     VectorDraw.Professional.Dialogs.VdrawDialogs.staticStartPosition = FormStartPosition.Manual;
                     VectorDraw.Professional.Dialogs.VdrawDialogs.staticLocation = new Point(10, 10);
                     VectorDraw.Professional.Dialogs.VdrawDialogs.staticFormTitle = "This is my title";
                     VectorDraw.Professional.Dialogs.LayersDialog.Show(vdFramedControl.BaseControl.ActiveDocument);
                     VectorDraw.Professional.Dialogs.VdrawDialogs.staticStartPosition = FormStartPosition.WindowsDefaultLocation; //Remember to set the value back since this is a static property!
                     VectorDraw.Professional.Dialogs.VdrawDialogs.staticFormTitle = "";//Remember to set the value back since this is a static property! 
            </code></example>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.VdrawDialogs.staticShowVertexPolylineCross">
            <summary>
            Get/Set a value representing if the vertex dialog will show a little cross at the polyline's vertex.
            </summary>
            <remarks>Default value true.Better to use the static in .NET and this property for COM implementations.</remarks>
            <example>c# sample code.<code>
            C#
                     VectorDraw.Professional.Dialogs.VdrawDialogs.ShowVertexPolylineCross = false;
            </code></example>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.frmPassword">
            <summary>
            Implements a simple dialog for password input if needed.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmPassword.#ctor">
            <summary>
            Initializes the dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmPassword.Show(System.String,System.Windows.Forms.Control)">
            <summary>
            Used to show the dialog.
            </summary>
            <param name="drawingname">The drawing name to be displayed.</param>
            <param name="ParentControl">The parent control used in order to show the form.</param>
            <returns>A frmPassword object in order to obtain the necessary information.</returns>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPassword.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmPassword.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmPassword.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPassword.Password">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPassword.label1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPassword.DrawingName">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPassword.Ok">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPassword.Cancel">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmPassword.formToolTip">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.frmPassword.password">
            <summary>
            Get the password the user selected.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.frmInputText">
            <summary>
            Implements a simple dialog for text input.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmInputText.#ctor">
            <summary>
            Initializes the dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmInputText.Show(System.String,System.String,System.String,System.Windows.Forms.IWin32Window)">
            <summary>
            Shows the text input dialog.
            </summary>
            <param name="Title">Title for the dialog.</param>
            <param name="InputPrompt">A label contained in the dialog.</param>
            <param name="defaultvalue">Default text shown.</param>
            <param name="owner">Owner of the dialog.</param>
            <returns>Returns the string the user typed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmInputText.Show(System.String,System.String,System.String,System.Windows.Forms.IWin32Window,System.Drawing.Point)">
            <summary>
            Shows the text input dialog.
            </summary>
            <param name="Title">Title for the dialog.</param>
            <param name="InputPrompt">A label contained in the dialog.</param>
            <param name="defaultvalue">Default text shown.</param>
            <param name="owner">Owner of the dialog.</param>
            <param name="location">Location of the dialog.</param>
            <returns>Returns the string the user typed.</returns>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmInputText.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmInputText.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmInputText.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmInputText.textInput">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmInputText.labelInput">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmInputText.buttonOK">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmInputText.buttonCancel">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmInputText.formToolTip">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.frmInputText.UserInput">
            <summary>
            Get the text the user typed.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.frmGetHatchDialog">
            <summary>
            Manages the Hatch Properties Dialog.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmGetHatchDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmGetHatchDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.combHatchStyle">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.labStyle">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.Cancel">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.OK">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.combpatterns">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.butpatterns">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.groupprops">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.labangle">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.labscale">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.textScale">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.textAngle">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.combBlock">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.imgHatchImage">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.imgblock">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.groupselectentities">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.butSelectEntities">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.labselectedentities">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.butPreview">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.combImage">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.labSelectedcurves">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.labfillcolor">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.imgcolor">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.grouphatchpattern">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.grouphatchblock">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.groupImage">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.groupColors">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.labBKColor">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.imgBKcolor">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.textTrasparency">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.labtransparency">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.butSelectPoint">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.tabControl1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.tabPage1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.tabPage2">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.groupBox1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.labfirstcolor">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.label1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.pictureFirstColor">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.pictureSecondColor">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.groupBox2">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.label2">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.combGradientType">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.label3">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.combGradientAngle">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.label4">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.combGradientInverted">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.groupBox3">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.pictureBox1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.pictureBox2">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmGetHatchDialog.formToolTip">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmGetHatchDialog.#ctor">
            <summary>
            Initializes the edit Hatch Properties dialog.
            </summary>
            <remarks>It is recomended to use the static methods in order to show-use this dialog.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmGetHatchDialog.InitializeExtra(VectorDraw.Professional.vdObjects.vdDocument,System.Windows.Forms.Control,VectorDraw.Professional.vdPrimaries.vdFigure)">
            <summary>
            Initializes necessary objects used to show the dialog.
            </summary>
            <param name="Document">The Document of the vdFigure.</param>
            <param name="ParentControl">The parent Control of the Document.</param>
            <param name="fig">The vdFigure object.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmGetHatchDialog.InitializeExtra(VectorDraw.Professional.vdObjects.vdDocument,System.Windows.Forms.Control,VectorDraw.Professional.vdPrimaries.vdFigure,System.Boolean)">
            <summary>
            Initializes necessary objects used to show the dialog.
            </summary>
            <param name="Document">The Document of the vdFigure.</param>
            <param name="ParentControl">The parent Control of the Document.</param>
            <param name="fig">The vdFigure object.</param>
            <param name="ShowPreviewButton">A boolean value indicating if the Preview button will be shown.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmGetHatchDialog.Show(VectorDraw.Professional.vdPrimaries.vdFigure,VectorDraw.Professional.vdObjects.vdDocument,System.Windows.Forms.Control)">
            <summary>
            Initializes and shows the dialog.
            </summary>
            <param name="fig">Can be either a vdFigure object to be hatched or null.If null the dialog has a button in order to select objects to hatch.</param>
            <param name="Document">The vdDocument object where the entities are.</param>
            <param name="ParentControl">The parent control of the document.</param>
            <returns>null or a vdPolyhatch object depending the value of the fig.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmGetHatchDialog.Show(VectorDraw.Professional.vdPrimaries.vdFigure[],VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            This method is used in order to show the Edit Hatch Properties dialog.
            </summary>
            <param name="figs">A collection of vdFigures objects.</param>
            <param name="Document">The Document of the vdFigures.</param>
            <returns>The selected Hatch Properties.</returns>
            <remarks > The default values that the dialog will be initialized with are the first figure's of the collection.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmGetHatchDialog.Show(VectorDraw.Professional.vdObjects.vdHatchProperties,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            This method is used in order to show the Edit Hatch Properties dialog.
            </summary>
            <param name="props">The vdHatchProperties to be edited.</param>
            <param name="Document">The Document of the vdFigures.</param>
            <returns>The selected Hatch Properties.</returns>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdMText">
            <summary>
            Implements all functionality for the vdMtext object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMText.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes a new instance of the vdMtext object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMText.#ctor(VectorDraw.Professional.vdObjects.vdDocument,System.String,VectorDraw.Geometry.gPoint,System.Double)">
            <summary>
            Initializes a new instance of the vdMtext object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <param name="textstring">The textstring of the Mtext object.</param>
            <param name="insertionpoint">The insertion point of the Mtext object.</param>
            <param name="height">The height of the Mtext object.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMText.#ctor">
            <summary>
            The constructor of the vdMtext object where the default initialization is commited.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMText.GetBackgroundBorderPolyline">
            <summary>
            Calculates and returns a vdPolyline used when <see cref="P:VectorDraw.Professional.vdFigures.vdMText.BackgroundMaskBorder"/> is true.
            </summary>
            <returns>A vdPolyline that is used as background. <seealso cref="P:VectorDraw.Professional.vdFigures.vdMText.BackGroundMaskBorderPenWidth"/> , <seealso cref="P:VectorDraw.Professional.vdFigures.vdMText.BackGroundMaskBorderColor"/> , <seealso cref="P:VectorDraw.Professional.vdFigures.vdMText.BackgroundMaskBorder"/></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMText.Invalidate">
            <summary>
            Invalidates the object's Bounding Box and causes the control to be redrawn in this region.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMText.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.
            User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMText.IsMtextSimple">
            <summary>
            Returns true if the Mtext only has lines and no other special atribute like color,font etc...
            </summary>
            <returns>True is the Mtext is a simple multiline mtext with no special attributes.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMText.GetLineStartPoint(System.Int32)">
            <summary>
            Internally used to calculate the y of each line, used in CmdMText in ECS .
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMText.GetGripPoints">
            <summary>
            A function returning the grip points of the object.
            </summary>
            <returns>Returns a new instance of gpoints object containing the grip points of the object.</returns>
            <remarks>
            The returning points are in World coordinate system(WCS).
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetGripPoints"/> event.
            When implementing this method the <see cref="M:VectorDraw.Professional.vdFigures.vdMText.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)"/> must be also override according to the new selected grip points.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMText.DrawGrip(System.Int32,VectorDraw.Geometry.Box,VectorDraw.Render.vdRender)">
            <summary>
            Overriden function in order to draw the insertion point of the vdMtext object differently.
            </summary>
            <param name="index"></param>
            <param name="GripBox"></param>
            <param name="render"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMText.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)">
            <summary>
            This function is intended to be called during a grip edit of the object. 
            </summary>
            <param name="Indexes">Represents a zero based array of the grip indexes that will be moved.</param>
            <param name="dx">The dx distance that the grip is moved.</param>
            <param name="dy">The dy distance that the grip is moved.</param>
            <param name="dz">The dz distance that the grip is moved.</param>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdMText.GetGripPoints"/>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnMoveGripPointsAt"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMText.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)">
            <summary>
            <see cref="M:VectorDraw.Professional.vdPrimaries.vdFigure.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)"/>.
            </summary>
            <param name="object2viewcs"></param>
            <param name="mode"></param>
            <param name="pickPoi"></param>
            <param name="LastPoi"></param>
            <param name="SegCount"></param>
            <param name="osnaps"></param>
            <returns>True if at least one osnap point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMText.Explode">
            <summary>
            Explodes the vdMtext object into vdText objects.
            </summary>
            <returns>A collection contaning the vdText objects created from the explode method.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMText.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMText.InitializeProperties">
            <summary>
            Resets the properties of the vdMtext object to the Default values.
            </summary>
            <remarks>
            Default values:InsertionPoint set to (0.0,0.0,0.0),Height = 2.5,Rotation = 0,TextString = "",
            VerJustify to Top, HorJustify to Left,Thickness = Width = 0, ExtrusionVector set to (0.0,0.0,1.0). 
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMText.ToString">
            <summary>
            Gets a System.String that represents the type of the vdMtext Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMText.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMText.CalculateEntities">
            <summary>
            Internally used to calculate the entities(mLines) of the mText object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMText.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMText.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Called in order to draw the object in a specified vdRender object.
            </summary>
            <param name="render">The vdRender object in which the object will be drawn.</param>
            <returns><see cref="T:VectorDraw.Render.vdRender.DrawStatus"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMText.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdMtext object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMText.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdMtext object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMText.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements all functionality for the vdMtext object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMText.BackgroundMaskBorder">
            <summary>
            Get/Set a boolean value that represents if the BackgroundMaskBorder color will be used.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMText.BackGroundMaskBorderPenWidth">
            <summary>
            Get/Set the object's backgroundMaskBorder pen width in drawing units.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMText.BackGroundMaskBorderColor">
            <summary>
            Get/Set the vdColor that the border of the mtext will be drawn.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMText.BackGroundMask">
            <summary>
            Get/Set a boolean value that represents if the backgroundmask color will be used.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMText.BackGroundMaskOffset">
            <summary>
            Get/Set the object's backgroundMask offset.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMText.BackGroundMaskColor">
            <summary>
            Get/Set the vdColor that will fill the box of the mtext.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMText.LineSpaceStyle">
            <summary>
            Get/Set the line spacing style of the vdMtext object.
            </summary>
            <remarks>
            Default value is TextHeightDepended.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <seealso cref="T:VectorDraw.Professional.vdFigures.vdMText.LineSpaceFlag"/>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMText.Thickness">
             <summary>
             Get/Set the object's thickness in Drawing Units.
             </summary>
             <remarks>
             The thickness is always in the direction of entity's Extrusion Vector.
             Default Value 0.0
             Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
             Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <seealso cref="T:VectorDraw.Geometry.Vector"/>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMText.LineSpacingFactor">
            <summary>
            Get/Set a value adjusting the space be3tween the lines of the Mtext.
            </summary>
            <remarks>
            Default value 1.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMText.ExtrusionVector">
            <summary>
            Get/Set the extrusion vector of the Mtext object.
            </summary>
            <remarks>
            Default value (0.0,0.0,1.0).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMText.BoxWidth">
            <summary>
            The width of the Mtext object in drawing units.Lines are broken if they exceed this value.
            </summary>
            <remarks>
            Default value 0.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMText.InsertionPoint">
            <summary>
            Get/Set the insertion point of the vdMtext object in World Coordinate System(WCS).
            </summary>
            <remarks>
            Default value (0.0,0.0,0.0).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <seealso cref="P:VectorDraw.Professional.vdFigures.vdMText.VerJustify"/>
            <seealso cref="P:VectorDraw.Professional.vdFigures.vdMText.HorJustify"/>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMText.StringScale">
            <summary>
            A value indicating a scale factor used internally for drawing calculations.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMText.Height">
            <summary>
            The height of the texts of the Mtext object.
            </summary>
            <remarks>
            This value corresponds to the height of the texts of the Mtext object.Each text has this value by default
            unless it has \Hx indicator which means that it will have the x as text Height.
            Default value 2.5.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMText.Rotation">
            <summary>
            The rotation of the Mtext object. All texts consisting the object will be rotated using this value.
            </summary>
            <remarks>
            Default value 0.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMText.TextString">
            <summary>
            The string that describes the Mtext object.
            </summary>
            <remarks>
            This string can have one of these indicators that change it's apperance.
            \O , \L , \\ , \H , \T , \Q , \W , \A , \P. 
            Default value "".
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMText.Style">
            <summary>
            This is the default vdTextstyle that the texts will inherit.
            </summary>
            <remarks>
            Default value null and Standard if added in a document.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMText.VerJustify">
            <summary>
            Get/Set the vertical justification of the object.
            </summary>
            <remarks>
            Default value VdTextVerTop.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMText.HorJustify">
            <summary>
            Get/Set the Horizontal justification of the object.
            </summary>
            <remarks>
            Default value VdTextHorLeft.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMText.TextBox">
            <summary>
            It is the bounding box of the text in Entity Coordinate System(ECS)
            before the ECS Matrix is applied.
            </summary>
            <remarks>
            This is the box of the height with insertion point 0.0,0.0,0.0 ,
            rotation 0 and height equal to the ascent of the textstyle.
            Default value null.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMText.BoundingBox">
            <summary>
            Gets the Bounding Box of the vdMtext object in WorldCoordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMText.AlignToView">
            <summary>
            A boolean value that defines if the plane of the object is relative to the current view.
            </summary>
            <remarks>
            Default value is False.
            Please note that when AlignToView is true the extrusion vector of the object is relative to Current view coordinative system and not to World as the default behaviour is.
            Also the Rotation property when AlignToView is true is relative and counterclockwise from axis X of current view coordinative system.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMText.AlignToViewSize">
            <summary>
            Get/Set the height of the object in output Device millimeters for positive or hundreds of millimeters for negative.
            </summary>
            <remarks>
            If  value is not 0 then the height of the object will be the same independently of current zoom.
            If value = 0 height is relative to Drawing Units.
            Negative values are in hundreds of millimeters of output device (screen/printer etc). For example, in order the object to have 1.5 millimeters height you must set it to -150 (means 150/100 millimeters).
            Default value = 0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMText.Flag">
            <summary>
            Get/Set a flag indicating how the letters of the text will be drawn(upsidedown,backward etc...).
            </summary>
            <remarks>
            Default value VdConstTextstyleFlag.LEFTTORIGHT.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMText.ECSMatrix">
            <summary>
            Gets the matrix which is used to transform vectors or points from the 
            object's object coordinate system (OCS) to the World Coordinate System (WCS).
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdMText.LineSpaceFlag">
            <summary>
            This enum is used to the LineSpaceStyle property.
            </summary>
            <remarks >
            Two values:Exact, TextHeightDepended .
            </remarks>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdMText.LineSpaceFlag.TextHeightDepended">
            <summary> Adjusts lines of text automatically based on the height of the largest character in the line.</summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdMText.LineSpaceFlag.Exact">
            <summary>Forces the line spacing to be the same for all lines of text in the vdMtext object.</summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdTab">
            <summary>
            vdTab object is used internally in the vdMtext object to control tabs.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdTab.#ctor">
            <summary>
            Empty Ctor of the 
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdTab.#ctor(System.Double)">
            <summary>
            Ctor of the vdTab object initializing its length with the passed double value.
            </summary>
            <param name="length">The length of the object.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdTab.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdTab object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdTab.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdTab object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdTab.Length">
            <summary>
            Get/Set the length of the vdTab object
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.frmViews">
            <summary>
            Implements the vdViews manager.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmViews.#ctor">
            <summary>
            Initializes the dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmViews.Show(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Shows the dialog.
            </summary>
            <param name="Document"></param>
            <returns></returns>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmViews.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmViews.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmViews.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmViews.mViewList">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmViews.mItemCount">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmViews.mGroupProperties">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmViews.mexit">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmViews.butNew">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmViews.vdPropertyGrid1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmViews.butDelete">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmViews.butPick">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmViews.butSelect">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmViews.comLayers">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmViews.label1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmViews.formToolTip">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.frmViews.vdFormSize">
            <summary>
            Get/Set the size of the form used when loading the form. This value is stored when the form is closed in order to be used the next time the form is loaded. 
            </summary>
            <remarks>The default value is -1,-1.</remarks>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.frmMultilineStyles">
            <summary>
            Implements the Multilines styles dialog.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmMultilineStyles.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmMultilineStyles.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.butCancel">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.butOk">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.listMultistyles">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.label1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.labActiveStyle">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.butAdd">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.butRemove">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.butCurrent">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.groupSelected">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.groupPreview">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.picPreview">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.textName">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.labDescription">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.labName">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.textDescription">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.butRename">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.labend">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.labStart">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.checkLineEnd">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.checkLineStart">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.labLine">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.checkInnerArcsEnd">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.checkInnerArcsStart">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.labInnerArc">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.checkOuterArcEnd">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.checkOuterArcStart">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.labOuterArc">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.checkMiters">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.labMiters">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.labFillColor">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.imgFillColor">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.checkFill">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.labStartAngle">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.textStartAngle">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.textEndAngle">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.labEndAngle">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.lstElements">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.groupElement">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.textOffset">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.labOffset">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.butLineweight">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.butLinetype">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.butColor">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.butRemoveElement">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.butAddElement">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.groupBox1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.label2">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.label6">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.label5">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.label4">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.label3">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.label7">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmMultilineStyles.formToolTip">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmMultilineStyles.#ctor">
            <summary>
            Constructor of the class , it is highly recommended to use the static Show method in order to show the dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmMultilineStyles.InitializeExtra(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Provide the vdDocument to the form.
            </summary>
            <param name="doc">The Document required to show its Multiline styles.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmMultilineStyles.LoadDialog">
            <summary>
            Loads the dialog with all the required information.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmMultilineStyles.Show(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Shows the dialog.
            </summary>
            <param name="Document">The Document object where the collection is.</param>
            <returns>A DialogResult indicating the user's action.</returns>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.frmMultilineStyles.vdFormSize">
            <summary>
            Get/Set the size of the form used when loading the form. This value is stored when the form is closed in order to be used the next time the form is loaded. 
            </summary>
            <remarks>The default value is -1,-1.</remarks>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdHelix">
            <summary>
            Implements the vdHelix object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdHelix.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes a new instance of the vdHelix object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdHelix.#ctor">
            <summary>
            Initializes a new instance of the vdHelix object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdHelix.InformProperties(VectorDraw.Professional.Constants.VdConstHelixConstrain)">
            <summary>
            
            </summary>
            <param name="propertychange">
            We use this enum (although the enum is for this) to set which property changed.
            </param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdHelix.Explode">
            <summary>
            Explodes the vdHelix object into a vdPolyline.
            </summary>
            <returns>A vdPolyline object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdHelix.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdHelix.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdHelix.InitializeProperties">
            <summary>
            Resets the properties of the vdHelix object to the Default values.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdHelix.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdHelix.GetSamplePoints(System.Int32,System.Double)">
            <summary>
            Returns a list of points on the vdHelix object from the start to the end point of the curve.
            </summary>
            <param name="curveResolution">valid values (1 to 20000)</param>
            <param name="pixelSize">valid values possitive decimal ( &gt;=0)</param>
            <returns>A collection of points belonging to the vdHelix in Entity Coordinate System(ECS).</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCurve.GetSamplePoints(System.Int32,System.Double)"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdHelix.GetGripPoints">
            <summary>
            A function returning the grip points of the object.
            </summary>
            <returns>Returns a new instance of gpoints object containing the grip points of the object.</returns>
            <remarks>
            The returning points are in World coordinate system(WCS).
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetGripPoints"/> event.
            When implementing this method the <see cref="M:VectorDraw.Professional.vdFigures.vdHelix.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)"/> must be also override according to the new selected grip points.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdHelix.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)">
            <summary>
            This function is intended to be called during a grip edit of the vdHelix object. 
            </summary>
            <param name="Indexes">Represents a zero based array of the grip indexes that will be moved.</param>
            <param name="dx">The dx distance that the grip is moved.</param>
            <param name="dy">The dy distance that the grip is moved.</param>
            <param name="dz">The dz distance that the grip is moved.</param>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdHelix.GetGripPoints"/>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnMoveGripPointsAt"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdHelix.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)">
            <summary>
            <see cref="M:VectorDraw.Professional.vdPrimaries.vdFigure.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)"/>.
            </summary>
            <param name="object2viewcs"></param>
            <param name="mode"></param>
            <param name="pickPoi"></param>
            <param name="LastPoi"></param>
            <param name="SegCount"></param>
            <param name="osnaps"></param>
            <returns>True if at least one osnap point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdHelix.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Called in order to draw the object in a specified vdRender object.
            </summary>
            <param name="render">The vdRender object in which the object will be drawn.</param>
            <returns><see cref="T:VectorDraw.Render.vdRender.DrawStatus"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdHelix.getStartParam">
            <summary>
            Returns the start parameter for the vdHelix object.
            </summary>
            <returns>Returns the start parameter for the vdHelix object equal to 0.0.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdHelix.getStartPoint">
            <summary>
            Get the first point of the helix.
            </summary>
            <returns>The start point of the vdHelic object in World Coordinate System(WCS).</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdHelix.getEndParam">
            <summary>
            Return the end parameter for the vdHelix object.
            </summary>
            <returns>Return the end parameter for the vdHelix object ,equals to <see cref="M:VectorDraw.Professional.vdFigures.vdHelix.Length"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdHelix.getEndPoint">
            <summary>
            Get the last point of the Helix.
            </summary>
            <returns>The last point of the vdHelix object in World Coordinate System(WCS).</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdHelix.TestOffsetSide(VectorDraw.Geometry.gPoint)">
            <summary>
            Returns 0.0 since offset is not supported.
            </summary>
            <param name="pt">The point to test.</param>
            <returns>Returns 0.0 since offset is not supported.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdHelix.Length">
            <summary>
            Provides an approximation of the length of the Helix.
            </summary>
            <returns>An approximation of the length of the Helix.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdHelix.Area">
            <summary>
            Area calculation is not supported.
            </summary>
            <returns>Returns 0.0.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdHelix.getOffsetCurve(System.Double)">
            <summary>
            Offset command is not supported by the Helix Object.
            </summary>
            <param name="offsetDist"></param>
            <returns>Null since offset is not supported into vdHelix object</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdHelix.Break(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdPrimaries.vdFigure@)">
            <summary>
            Break command is not supported!
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="newEntity"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdHelix.Extend(VectorDraw.Professional.vdCollections.vdSelection,VectorDraw.Geometry.gPoint)">
            <summary>
            Extend is not supported.
            </summary>
            <param name="entities"></param>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdHelix.Extend(VectorDraw.Professional.vdCollections.vdSelection,VectorDraw.Geometry.gPoint,System.Boolean)">
            <summary>
            Extend is not supported.
            </summary>
            <param name="entities"></param>
            <param name="pt"></param>
            <param name="ExtendBoundary"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdHelix.ToMesh(System.Int32)">
            <summary>
            ToMesh is not supported.
            </summary>
            <param name="CurveResolution"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdHelix.Trim(VectorDraw.Professional.vdCollections.vdSelection,VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdFigures.vdCurve@)">
            <summary>
            Trim command is not supported.
            </summary>
            <param name="entities"></param>
            <param name="pt"></param>
            <param name="newEntity"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdHelix.Trim(VectorDraw.Professional.vdCollections.vdSelection,VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdFigures.vdCurve@,System.Boolean)">
            <summary>
            Trim command is not supported.
            </summary>
            <param name="entities"></param>
            <param name="pt"></param>
            <param name="newEntity"></param>
            <param name="ExtendBoundary"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdHelix.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdHelix object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdHelix.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdHelix object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdHelix.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements the vdHelix object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdHelix.BoundingBox">
            <summary>
            Gets the Bounding Box of the vdHelix object in WorldCoordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdHelix.ECSMatrix">
            <summary>
            Gets the matrix which is used to transform vectors or points from the 
            object's object coordinate system (OCS) to the World Coordinate System (WCS).
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdHelix.BaseCenter">
            <summary>
            Get/Set the Center of the base of the vdHelix object in World Coordinate System.
            </summary>
            <remarks>
            Default value (0.0,0.0,0.0).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdHelix.BaseRadius">
            <summary>
            Get/Set the Base radius of the vdHelix object.
            </summary>
            <remarks>
            Default value 0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdHelix.TopRadius">
            <summary>
            Get/Set the Top radius of the vdHelix object.
            </summary>
            <remarks>
            Default value 0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdHelix.Height">
            <summary>
            Get/Set the Height of the vdHelix object.
            </summary>
            <remarks>
            Please note that when setting properties Height , TurnHeight or Turns , Turns must be set first because these properties affect each other.
            Default value 0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdHelix.TurnHeight">
            <summary>
            Get/Set the Height for each turn of the vdHelix object.
            </summary>
            <remarks>
            Please note that when setting properties Height , TurnHeight or Turns , Turns must be set first because these properties affect each other.
            Default value 0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdHelix.Turns">
            <summary>
            Get/Set the Turns of the vdHelix object.
            </summary>
            <remarks>
            Default value 0.
            Please note that when setting properties Height , TurnHeight or Turns , Turns must be set first because these properties affect each other.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdHelix.Twist">
            <summary>
            Get/Set a flag indicating the way the helix will turn.
            </summary>
            <remarks>
            Default value <see cref="F:VectorDraw.Professional.Constants.VdConstHelixTwist.CounterClockWise"/>.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdHelix.Constrain">
            <summary>
            Get/Set a flag indicating the property that will be constrained when other properties change.
            </summary>
            <remarks>
            Default value <see cref="F:VectorDraw.Professional.Constants.VdConstHelixConstrain.Turns"/>.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdHelix.StartAngle">
            <summary>
            Get/Set the start angle of the vdHelix object.
            </summary>
            <remarks>
            Default value 0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdHelix.Thickness">
            <summary>
            Does not implement vdCurves Thickness because it has no meaning.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.vdNamedUCSs">
            <summary>
            A collection object of vdNamedUCS objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdNamedUCSs.#ctor">
            <summary>
            Initializes the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdNamedUCSs.AddItem(VectorDraw.Professional.vdPrimaries.vdNamedUCS)">
            <summary>
            Adds a vdNamedUCS object to the collection.
            </summary>
            <param name="value">The vdNamedUCS object to be added to the collection.</param>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAddItem"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterAddItem"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdNamedUCSs.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdNamedUCSs.Add(System.String)">
            <summary>
            Creates and adds a vdNamedUCS object to the collection with the specified name.
            </summary>
            <param name="Name">The name of the inserted vdNamedUCS object.</param>
            <returns>Returns the added vdNamedUCS object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdNamedUCSs.FindName(System.String)">
            <summary>
            Finds a vdNamedUCS object with the specified name in the collection.
            </summary>
            <param name="name">The name to search in the collection.</param>
            <returns>The found object else returns null if a vdNamedUCS does not exist with this name.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdNamedUCSs.FindItem(VectorDraw.Professional.vdPrimaries.vdNamedUCS)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">A vdNamedUCS object to be checked if it exists in the collection</param>
            <returns>True if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdNamedUCSs.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdNamedUCSs.RemoveItem(VectorDraw.Professional.vdPrimaries.vdNamedUCS)">
            <summary>
            Removes a specific vdNamedUCS object from the collection.
            </summary>
            <param name="Object">The vdNamedUCS object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdNamedUCSs.getUniqueTableName(System.String)">
            <summary>
            Creates a unique string for use as name to a vdNamedUCS object.
            </summary>
            <param name="prefix">A prefix string that will be present to the unique name.</param>
            <returns>Returns a unique string.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdNamedUCSs.ToString">
            <summary>
            Gets a System.String that represents the count of the vdNamedUCSs collection Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdNamedUCSs.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdNamedUCSs object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdNamedUCSs.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdNamedUCSs object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdNamedUCSs.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdNamedUCSs.ChangeOrder(VectorDraw.Professional.vdPrimaries.vdNamedUCS,System.Boolean)">
            <summary>
            Changes the position of a vdNamedUCS object to the front or the end of the collection.
            </summary>
            <param name="Object">The vdNamedUCS object.</param>
            <param name="ToBack">If true moves the object to the beginning of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdNamedUCSs.swap(VectorDraw.Professional.vdPrimaries.vdNamedUCS,VectorDraw.Professional.vdPrimaries.vdNamedUCS)">
            <summary>
            Swaps the position between two different vdNamedUCS objects existing in the collection.
            </summary>
            <param name="Object1">first object needed.</param>
            <param name="Object2">second object needed.</param>
            <returns>True if the swap operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdNamedUCSs.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            A collection object of vdNamedUCS objects.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdNamedUCSs.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdNamedUCSs.ListPosition">
            <summary>
            Gets the <see cref="T:VectorDraw.Generics.IListPosition"/> interface object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdNamedUCSs.Item(System.Int32)">
            <summary>
            Get a vdNamedUCS object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The vdNamedUCS object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdNamedUCSs.Last">
            <summary>
            Returns the last item in the collection.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Serialize.vdSTL_Format">
            <summary>
            A class that handles open and save .stl files.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdSTL_Format.Open(System.String,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Opens the passed .stl file to the passed Document.
            </summary>
            <param name="cFilename">A valid stl file to be opened.</param>
            <param name="doc">The Document to be filled with the entities of the stl file.</param>
            <returns>True if the file opened succesfully.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Serialize.vdSTL_Format.Save(System.String,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Save the passed Document to the passed .stl filename.
            </summary>
            <param name="filename">The filename where the document will be saved. It must be a .stl filename.</param>
            <param name="doc">The Document where the entities of the Model will be saved.</param>
            <returns>True if the operation was succesfull.</returns>
        </member>
        <member name="T:VectorDraw.Professional.ActionUtility.LineSegmentColorFaceIndex">
            <summary>
            Used in ActionPolyfaceEdgeSelect
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.ActionPolyfaceEdgeSelect.#ctor(VectorDraw.Professional.vdPrimaries.vdLayout,VectorDraw.Professional.vdFigures.vdPolyface,System.Drawing.Point)">
            <summary>
            Initializes the class action.
            </summary>
            <param name="layout">The layout where the action takes place.</param>
            <param name="pface">The polyface that the edges are going to be selected.</param>
            <param name="firstedge">A gPoint in World Coordinate system representing the first selected edge.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.ActionPolyfaceFaceSelect.#ctor(VectorDraw.Professional.vdPrimaries.vdLayout,VectorDraw.Professional.vdFigures.vdPolyface)">
            <summary>
            Initializes the class action.
            </summary>
            <param name="layout">The layout where the action takes place.</param>
            <param name="pface">The polyface that the faces are going to be selected.</param>
        </member>
        <member name="M:VectorDraw.Professional.ActionUtility.ActionPolyfaceFaceSelect.#ctor(VectorDraw.Professional.vdPrimaries.vdLayout,VectorDraw.Professional.vdFigures.vdPolyface,System.Boolean)">
            <summary>
            Initializes the class action.
            </summary>
            <param name="layout">The layout where the action takes place.</param>
            <param name="pface">The polyface that the faces are going to be selected.</param>
            <param name="selectone">A boolean value representing if only one face is going to be selected.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.LayerTypeConverterNoExpand">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.LayerTypeConverterNoExpand.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.LayerTypeConverterNoExpand.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.LayerTypeConverterNoExpand.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.LayerTypeConverterNoExpand.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.LayerTypeConverter">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.LayerTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.LayerTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.LayerTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.LayerTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdLayer">
            <summary>
            Implements all functionality of the vdLayer object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayer.GetReferenceObjects">
            <summary>
            Returns a copy of the collection that contains all entities reference this object.
            </summary>
            <remarks>Only <see cref="T:VectorDraw.Professional.vdPrimaries.vdFigure"/> type objects that are DocumentRegister and have not null Owner are added into the return collection.</remarks>
            <returns>A copy of the collection that contains all entities reference this object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayer.GetReferenceObjects(VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Returns a copy of the collection that contains all entities reference this object and owns to a specific vdLayout.
            </summary>
            <param name="layoutOwner">A <see cref="T:VectorDraw.Professional.vdPrimaries.vdLayout"/> object where the return entities must belong to.</param>
            <returns> A copy of the collection that contains all entities reference this object and owns to a specific vdLayout.</returns>
            <remarks>If passed layoutOwner is null then all objects that reference this layer object are returned. Same as <see cref="M:VectorDraw.Professional.vdPrimaries.vdLayer.GetReferenceObjects"/></remarks>
            <example>
            A C# Example Setting the drawing order by Layer.
            <code>
                    doc.OnDrawScene += new vdDocument.DrawSceneEventHandler(doc_OnDrawScene);
                    void doc_OnDrawScene(object sender, vdRender render, vdEntities entities, vdSectionClips sections, vdLights lights, bool FireMeterProgress, ref vdRender.DrawStatus status, ref bool cancel)
                    {
                       
                        vdLayout owner = entities.Owner as vdLayout;
                        if (owner == null) return;
                        foreach (vdLayer  item in doc.Layers)
                        {
                            if (item.Frozen) continue;
                            vdEntities ents = item.GetReferenceObjects(owner);
                            status = ents.Draw(render, sections, lights, FireMeterProgress);
            
                        }
                        cancel = true;
                    }
            </code>
            A C# Example Setting the drawing order by Layer keeping the entities drawing order inside their layout collection.
            <code>
                    doc.OnDrawScene += new vdDocument.DrawSceneEventHandler(doc_OnDrawScene);
                    void doc_OnDrawScene(object sender, vdRender render, vdEntities entities, vdSectionClips sections, vdLights lights, bool FireMeterProgress, ref vdRender.DrawStatus status, ref bool cancel)
                    {
                        vdLayout owner = entities.Owner as vdLayout;
                        if (owner == null) return;
                        //create a dictionary where the key is the object reference and the value is the object position in the list.
                        System.Collections.Generic.Dictionary&lt;vdFigure, int&gt; indexdictionary = new Dictionary&lt;vdFigure, int&gt;();
                        for (int i = 0; i &lt; entities.Count; i++) indexdictionary.Add(entities[i], i);
                        //group the draw oreder by layer
                        foreach (vdLayer item in doc.Layers)
                        {
                            if (item.Frozen) continue;
            
                            //get the layer references figures that belongs to the drawing layout.
                            vdEntities ents = item.GetReferenceObjects(owner);
                            //sort the layer references using the order that they added in the layout entities collection
                            StringArray keys = new StringArray();
                            foreach (vdFigure fig in ents) keys.AddItem(indexdictionary[fig].ToString());
                            ents.SortByKeys(keys);
                            //draw the layer refernces
                            status = ents.Draw(render, sections, lights, FireMeterProgress);
            
                        }
                        cancel = true;
                    }
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayer.Invalidate">
            <summary>
            Call the <see cref="M:VectorDraw.Professional.vdPrimaries.vdFigure.Invalidate"/> method for each object that reference the Layer.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayer.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes the vdLayer object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this constructor the is no need to call the SetUnRegisterDocument method in order to register the Document of this object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayer.#ctor(VectorDraw.Professional.vdObjects.vdDocument,System.String)">
            <summary>
            Initializes the vdLayer object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <param name="name">The name of the layer object.</param>
            <remarks>Calling this constructor the is no need to call the SetUnRegisterDocument method in order to register the Document of this object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayer.#ctor(VectorDraw.Professional.vdObjects.vdDocument,System.String,VectorDraw.Professional.vdObjects.vdColor)">
            <summary>
            Initializes the vdLayer object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <param name="name">The name of the layer object.</param>
            <param name="color">The color of the layer object.</param>
            <remarks>Calling this constructor the is no need to call the SetUnRegisterDocument method in order to register the Document of this object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayer.#ctor">
            <summary>
            Initializes the vdLayer object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayer.SetFrozenNoErrorChecking(System.Boolean)">
            <summary>
            Used only internaly inside viewport draw
            </summary>
            <param name="bfreeze"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayer.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.
            User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayer.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayer.InitializeProperties">
            <summary>
            Resets the properties of the vdLayer object to the Default values.
            </summary>
            <remarks>
            Default values:PenColor's ColorIndex = 7,Frozen = Lock = false,LineWeight = LW_DOCUMENTDEFAULT.
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayer.ToString">
            <summary>
            Gets a System.String that represents the name of the vdLayer Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayer.CompareTo(System.Object)">
            <summary>
                Compares the current instance with another object of the same type and returns
                an integer that indicates whether the current instance precedes, follows,
                or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns> 
                A 32-bit signed integer that indicates the relative order of the objects
                being compared. The return value has these meanings: Value Meaning Less than
                zero This instance precedes obj in the sort order. Zero This instance occurs
                in the same position in the sort order as obj. Greater than zero This instanceG
                follows obj in the sort order.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayer.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdLayer object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayer.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdLayer object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayer.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements all functionality of the vdLayer object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayer.Name">
            <summary>
            Get/Set the name of the layer.
            </summary>
            <remarks>
            Default value "Unonymus".
            Note layer 0 cannot be renamed.Exceptions raised:<see cref="T:VectorDraw.Professional.Exceptions.InvalidTableNameException"/>,<see cref="T:VectorDraw.Professional.Exceptions.CannotRenameException"/>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <exception cref="T:VectorDraw.Professional.Exceptions.InvalidTableNameException"></exception>
            <exception cref="T:VectorDraw.Professional.Exceptions.CannotRenameException">Thrown when cannot rename an object.</exception>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayer.PenColor">
            <summary>
            Get/Set the pencolor of the layer.
            </summary>
            <remarks>
            Default value a color with index 6.All vdFigures that have their pencolor set as bylayer
            will obtain this pencolor as their color.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayer.LineType">
            <summary>
            Get/Set the Linetype of the Layer.
            </summary>
            <remarks>
            Default value Solid.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayer.Frozen">
            <summary>
            Get/Set a boolean value representing if a layer is frozen or not.
            </summary>
            <remarks>
            Frozen layers are not drawn to the document.
            Entities that belong to a frozen layer are not taken into consideration when calculating BoundingBox (extends) of the Document.
            Default value false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayer.On">
            <summary>
            Get/Set a boolean value representing if a layer is On or Off.
            </summary>
            <remarks>
            Off layers are not drawn to the document.
            Entities that belong to a layer that is Off are taken into consideration when calculating BoundingBox (extends) of the Document even though thay are not drawn.
            Inserts that belong to off layers still show their entities depending their visibility.
            Default value true (On).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayer.Lock">
            <summary>
            Get/Set a boolean value representing if the layer is frozen or not.
            </summary>
            <remarks>
            Objects that are in a locked layer are drawn but cannot be selected or modified.
            Default value false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayer.LineWeight">
            <summary>
            Get/Set the line weight of the layer.
            </summary>
            <remarks>
            Default value LW_DOCUMENTDEFAULT.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayer.IsUsed">
            <summary>
            Returns true if this layer object is equals to <see cref="P:VectorDraw.Professional.vdCollections.vdLayers.Standard"/> -or- 
            equals to <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayer"/> -or-
            <see cref="M:VectorDraw.Professional.vdPrimaries.vdLayer.GetReferenceObjects"/> returns a non empty array
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayer.Description">
            <summary>
            Get/Set the description of the layer.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayer.Deleted">
             <summary>
             Get/Set a property that marks the object as Deleted or not.
             </summary>
            <exception cref="T:VectorDraw.Professional.Exceptions.CannotDeleteException">Thrown when an object cannot be deleted.</exception>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayer.Plot">
            <summary>
            Get/Set a boolean value representing if the layer will be printed or not.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayer.VisibleOnForms">
            <summary>
            Get/Set a boolean value representing if the vdLayer will be viewed in Vectordraw forms.
            </summary>
            <remarks>
            Default value is true.
            The ToString value of the vdLayers also takes consideration this value and if it is false then the count returned does not contain these items.
            </remarks>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.IvdProxyFigureExport">
            <summary>
            This interface is implemented in Custom Objects and provides some extra information on the custom object. It can be used when the dll of the object is not present
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.IvdProxyFigureExport.ProxyProperties">
            <summary>
            Provides a vdXproperties list of xProperties that contain any extra property the custom object has other than the vdFigure's properties.
            The xproperty's name is the name of the xproperty and the propvalue is the value of the property.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.IvdProxyFigureExport.CustomType">
            <summary>
            Returns the Type name of the original proxy object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.IvdProxyFigureExport.DrawEntities">
            <summary>
            Get the collection of the entities that the proxyFigure has.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdProxyFigure.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdProxyFigure.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdProxyFigure object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdProxyFigure.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdProxyFigure object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdProxyFigure.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            The Drawentities of the parameter's custom object are being also copied to this object.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdProxyFigure.ProxyProperties">
            <summary>
            This is a vdXproperties collection which contains every extra properties (other than the vdFigure's properties) of a proxy figure.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdProxyFigure.BoundingBox">
            <summary>
            Gets the Bounding Box of the vdFigure object in WorldCoordinate System.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdShape">
            <summary>
            An object useful for derive custom figures with origin - extrusion and multi entities graphical representation
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdShape.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdShape.FillShapeEntities(VectorDraw.Professional.vdCollections.vdEntities@)">
            <summary>
            Fills the passed vdEntities collection with the necessary elements in order to draw the object.
            </summary>
            <param name="entities">A Reference vdEntities collection to be filled.</param>
            <remarks>This function needs to be overriden in order to draw the element.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdShape.OnDocumentDefaults">
            <summary>
            Implements the necessary actions taken in order the object to obtain default values.
            </summary>
            <remarks>This function needs to be overriden.For example if the object has a vdText object then the necessary textstyle needs to be set to that object(The standard or the activetextstyle).</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdShape.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
            <remarks>This function needs to be overriden in order the object to be serialized(saved).</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdShape.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
            <remarks>This function needs to be overriden in order the object to be serialized(opened).</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdShape.InitializeProperties">
            <summary>
            Initializes basic properties of the object.
            </summary>
            <remarks>This function needs to be overriden in order to initialize any additional objects added to the overriden object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdShape.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches the passed object's properties to this object.
            </summary>
            <param name="_from">A vdShape object to match the properties from.</param>
            <param name="thisdocument">The Document where both objects are registered.</param>
            <remarks>This function needs to be overriden in order to match any additional objects added to the overriden object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdShape.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
            <remarks>This function needs to be overriden for any additional objects that the object may have.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdShape.GetGripPoints">
            <summary>
            Gets a collection of gPoints representing the grips of the object.
            </summary>
            <returns>A collection of gPoints representing the grips of the object.</returns>
            <remarks>
            This function needs to be overriden for any additional objects that the object may have.
            When implementing this method the <see cref="M:VectorDraw.Professional.vdPrimaries.vdShape.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)"/> must be also override according to the new selected grip points.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdShape.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)">
            <summary>
            This function is intended to be called during a grip edit of the object. 
            </summary>
            <param name="Indexes">Represents a zero based array of the grip indexes that will be moved.</param>
            <param name="dx">The dx distance that the grip is moved.</param>
            <param name="dy">The dy distance that the grip is moved.</param>
            <param name="dz">The dz distance that the grip is moved.</param>
            <remarks>This function needs to be overriden for any additional objects that the object may have.</remarks>
            <seealso cref="M:VectorDraw.Professional.vdPrimaries.vdShape.GetGripPoints"/>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnMoveGripPointsAt"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdShape.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdShape.Explode">
            <summary>
            Explode an entity in sub entities.
            </summary>
            <returns> Returns a collection of the sub entities of the object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdShape.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Called in order to draw the object in a specified vdRender object.
            </summary>
            <param name="render">The vdRender object in which the object will be drawn.</param>
            <returns><see cref="T:VectorDraw.Render.vdRender.DrawStatus"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdShape.IntersectWith(VectorDraw.Professional.vdPrimaries.vdFigure,VectorDraw.Professional.Constants.VdConstInters,VectorDraw.Geometry.gPoints)">
            <summary>
            Finds the intersection points of an object with another object.
            </summary>
            <param name="pEntity">The entity with which the intersection of the object will be done.</param>
            <param name="intersectOption"><see cref="T:VectorDraw.Professional.Constants.VdConstInters"/> constant</param>
            <param name="intPoints">A precreated gPoints collection in which the instersection points will be added</param>
            <returns>True if at least one intersection point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdShape.OnOwnerChanged">
            <summary>
            This method is called when the object's owner is changed.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdShape.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdShape.ExtrusionVector">
            <summary>
            Get/Set the the 3D Vector extrusion direction of the object.
            </summary>
            <remarks>
            Default value (0.0,0.0,1.0).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdShape.Origin">
            <summary>
            Get/Set the origin point of the object.
            </summary>
            <remarks>
            Default value (0.0,0.0,0.0).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdShape.Rotation">
            <summary>
            Get/Set the rotation of the object in radians.
            </summary>
            <remarks>
            Default value 0.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdShape.Scales">
            <summary>
            Get/Set the x,y,z scales of the object.This Vector object represents the x scale,y scale and z scale of the object.
            </summary>
            <remarks>
            Default value 1.0,1.0,1.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdShape.ECSMatrix">
            <summary>
            Gets the matrix which is used to transform vectors or points from the 
            object's object coordinate system (OCS) to the World Coordinate System (WCS).
            </summary>
            <remarks>This function needs to be overriden if the object has additional properties like zRotation etc... that influence the matrix of the object.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdShape.BoundingBox">
            <summary>
            Gets the Bounding Box of the object in WorldCoordinate System.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs">
            <summary>
            A class object that groups a lot of arguments used by
            <see cref="M:VectorDraw.Professional.vdObjects.vdBaseObject.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)"/>
            <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.GetUnUsedTables(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)"/>
            and <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.GetUsedTables(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.#ctor">
            <summary>
            Initializes a new instance of the object ready to be filled with all known table objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.#ctor(System.Object,VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.TableTypes)">
            <summary>
             Initializes a new instance of the object
            </summary>
            <param name="breakOnObject">An object table to be tested if it contains any references that used by <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/> or when deleting a the table object.Null for all other calls.  </param>
            <param name="types">A <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.TableTypes"/> flag that specifies the type of tables that will be filled .</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.AddItem(System.Object)">
            <summary>
            Add the passed item table to one of the object's table collections.
            </summary>
            <param name="obj">Usually a table object of (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) types. </param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.Layers">
            <summary>
            Get the collection of <see cref="T:VectorDraw.Professional.vdPrimaries.vdLayer"/> type objects.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.Blocks">
            <summary>
            Get the collection of <see cref="T:VectorDraw.Professional.vdPrimaries.vdBlock"/> type objects.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.DimStyles">
            <summary>
            Get the collection of <see cref="T:VectorDraw.Professional.vdPrimaries.vdDimstyle"/> type objects.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.LineTypes">
            <summary>
            Get the collection of <see cref="T:VectorDraw.Professional.vdPrimaries.vdLineType"/> type objects.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.TextStyles">
            <summary>
            Get the collection of <see cref="T:VectorDraw.Professional.vdPrimaries.vdTextstyle"/> type objects.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.ImageDefs">
            <summary>
            Get the collection of <see cref="T:VectorDraw.Professional.vdPrimaries.vdImageDef"/> type objects.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.HatchPatterns">
            <summary>
            Get the collection of <see cref="T:VectorDraw.Professional.vdPrimaries.vdHatchPattern"/> type objects.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.MultilineStyles">
            <summary>
            Get the collection of <see cref="T:VectorDraw.Professional.vdPrimaries.vdMultilineStyle"/> type objects.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.BreakOnObject">
            <summary>
            Get the object table to be tested if it contains any references that used by <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/> or when deleting a the table object.Null for all other calls. 
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.IsObjectFound">
            <summary>
            Returns true if <see cref="P:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.BreakOnObject"/> is not null and the passed parameter of a previous <see cref="M:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.AddItem(System.Object)"/> call  is reference equals to  <see cref="P:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.BreakOnObject"/>
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.TableTypes">
            <summary>
            Flag that specifies the types of tables that will be filled by <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> argument object.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.TableTypes.None">
            <summary>
            No table will be  test and filled .
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.TableTypes.Layers">
            <summary>
            vdLayer objects will be added to <see cref="P:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.Layers"/> collection.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.TableTypes.Blocks">
            <summary>
            vdBlock objects will be added to <see cref="P:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.Blocks"/> collection.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.TableTypes.DimStyles">
            <summary>
            vdDimStyle objects will be added to <see cref="P:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.DimStyles"/> collection.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.TableTypes.LineTypes">
            <summary>
            vdLineType objects will be added to <see cref="P:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.LineTypes"/> collection.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.TableTypes.TextStyles">
            <summary>
            vdTextStyle objects will be added to <see cref="P:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.TextStyles"/> collection.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.TableTypes.ImageDefs">
            <summary>
            vdImageDefs objects will be added to <see cref="P:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.ImageDefs"/> collection.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.TableTypes.HatchPatterns">
            <summary>
            vdHatchPattern objects will be added to <see cref="P:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.HatchPatterns"/> collection.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.TableTypes.MultiLineStyles">
            <summary>
            vdMultilineStyle objects will be added to <see cref="P:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.MultilineStyles"/> collection.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs.TableTypes.All">
            <summary>
            All the known table type objects will be added to their collection.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdHandle">
            <summary>
            Implements all functionality of the vdHandle object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHandle.#ctor(System.UInt64)">
            <summary>
            Initializes the vdHandle object.
            </summary>
            <param name="value">The value of the handle.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHandle.#ctor(System.String)">
            <summary>
            Initializes the vdHandle object.
            </summary>
            <param name="shandle">A string value which is converted and stored to the handle value.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHandle.#ctor">
            <summary>
            Initializes the vdHandle object with value 0.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHandle.SetValueFromString(System.String)">
            <summary>
            Sets the value of the vdHandle object from a string value.
            </summary>
            <param name="str">A string value which will converted to the handle's value.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHandle.InternalSetValue(System.UInt64)">
            <summary>
            Sets the value of the vdHandle object
            </summary>
            <param name="value">An unsigned int 64bit number</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHandle.ToString">
            <summary>
            Gets a System.String that represents the (handle) value of the vdHandle Object as Decimal value.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHandle.ToDigits">
            <summary>
            Converts the value of the handle to an array of characters.
            </summary>
            <returns>An array of chars representing the value of the handle.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHandle.ToByteArray">
            <summary>
            Converts the value of the handle to an array of bytes.
            </summary>
            <returns>An array of bytes representing the value of the handle.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHandle.ToStringValue">
            <summary>
            Converts the value of the vdHandle object to a string as a Hexadecimal value.
            </summary>
            <returns>A string representing the value (as a Hexadecimal number) of the handle.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHandle.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. System.Object.GetHashCode()
            is suitable for use in hashing algorithms and data structures like a hash
            table.
            </summary>
            <returns>
            Returns the HashCode of the handle's value.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHandle.Equals(System.Object)">
            <summary>
            Checks if an object is referenced equal to this object.
            </summary>
            <param name="obj">A vdHandle object to be checked if it is equal to this object.</param>
            <returns>True if the objects are referenced equal.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHandle.Equals(VectorDraw.Professional.vdObjects.vdHandle)">
            <summary>
            Checks if a vdHandle object is referenced equal to this object.
            </summary>
            <param name="p">A vdHandle object to be checked if it is equal to this object.</param>
            <returns>True if the objects are referenced equal.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHandle.op_Equality(VectorDraw.Professional.vdObjects.vdHandle,VectorDraw.Professional.vdObjects.vdHandle)">
            <summary>
            Implements the == operator for two vdHandle objects.
            </summary>
            <param name="a">Left parameter of the == operator.</param>
            <param name="b">Right parameter of the == operator.</param>
            <returns>True if the objects are referenced equal.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHandle.op_Inequality(VectorDraw.Professional.vdObjects.vdHandle,VectorDraw.Professional.vdObjects.vdHandle)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="obj1">Left parameter of the != operator.</param>
            <param name="obj2">Right parameter of the != operator.</param>
            <returns>True if the objects are not equal referenced.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHandle.ValueToString(System.UInt64)">
            <summary>
            Converts an 64-bit unsigned integer value to a Hexadecimal string.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHandle.ValueFromString(System.String)">
            <summary>
            Converts a string into a handle value.This is used for backward compatibility for saving in vdf format(version 5).
            </summary>
            <param name="str">A string to be converted into a handle value representation.</param>
            <returns>A handle value representing the passed string.This value is not stored to this vdHandle object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHandle.ValueFrom8Bytes(System.Byte[])">
            <summary>
            Converts an array of 8 bytes to a handle value representation.
            </summary>
            <param name="handle">An array of 8 bytes to be converted to a handle value.</param>
            <returns>Returns the converted handle value.This value is not stored to this vdHandle object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHandle.FromString(System.String)">
            <summary>
            Converts a string to a int64 representation.This is used to convert handle strings when saving in xml format(version 6).
            </summary>
            <param name="str">A string to be converted into handle value.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHandle.ToString(VectorDraw.Serialize.Serializer)">
            <summary>
            Gets a System.String that represents the (handle) value of the vdHandle Object as Decimal value.
            </summary>
            <param name="serializer">the Serializer object where the object is going to be saved.</param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHandle.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdHandle object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHandle.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdHandle object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdHandle.Value">
            <summary>
            Get the value of the handle.
            </summary>
            <seealso cref="M:VectorDraw.Professional.vdObjects.vdHandle.ValueFromString(System.String)"/>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.vdPolyCurves">
            <summary>
            Implements the vdPolyCurves collection which is a collection of vdCurves objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPolyCurves.IsComplexOperation">
            <summary>
            Returns true if at least one <see cref="P:VectorDraw.Professional.vdCollections.vdCurves.Operation"/> has different value than <see cref="F:VectorDraw.Geometry.GpcWrapper.ClippingOperation.XOr"/>
            </summary>
            <returns>True if at least one <see cref="P:VectorDraw.Professional.vdCollections.vdCurves.Operation"/> has different value than <see cref="F:VectorDraw.Geometry.GpcWrapper.ClippingOperation.XOr"/></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPolyCurves.GetNotDeletedItems">
            <summary>
            Get all non deleted objects of the collection.
            </summary>
            <returns>
            Returns a new created collection of vdCurves 
            object that are not set as <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.Deleted"/>.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPolyCurves.ToString">
            <summary>
            Gets a System.String that represents the count of the vdPolyCurves collection Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPolyCurves.#ctor">
            <summary>
            Initializes the vdPolyCurves collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPolyCurves.#ctor(VectorDraw.Professional.vdCollections.vdCurves[])">
            <summary>
            Initializes a new instance of the object and adds the passed items at the end of this collection.
            </summary>
            <param name="items">An array of <see cref="T:VectorDraw.Professional.vdCollections.vdCurves"/> objects.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPolyCurves.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPolyCurves.FindItem(VectorDraw.Professional.vdCollections.vdCurves)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">A vdCurves object to be checked if it exists in the collection</param>
            <returns>True if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPolyCurves.AddItem(VectorDraw.Professional.vdCollections.vdCurves)">
            <summary>
            Adds a vdCurves object to the collection.
            </summary>
            <param name="value">The vdCurves object to be added to the collection.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAddItem"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterAddItem"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPolyCurves.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPolyCurves.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPolyCurves.RemoveItem(VectorDraw.Professional.vdCollections.vdCurves)">
            <summary>
            Removes a specific vdCurves object from the collection.
            </summary>
            <param name="Object">The vdCurves object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPolyCurves.RemoveAt(System.Int32)">
            <summary>
            Removes a vdCurves object from the specified index of the collection.
            </summary>
            <param name="Index">The zero based index.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPolyCurves.ChangeOrder(VectorDraw.Professional.vdCollections.vdCurves,System.Boolean)">
            <summary>
            Changes the position of a vdCurves object to the front or the end of the collection.
            </summary>
            <param name="Object">The vdCurves object.</param>
            <param name="ToBack">If true moves the object to the beginning of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPolyCurves.MakeIndexDictionary">
            <summary>
            Creates an Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must be followed by a <see cref="M:VectorDraw.Professional.vdCollections.vdPolyCurves.ClearIndexDictionary"/> call when the search or swap is finished. </remarks>
            <example> For a code example please check topic <see cref="M:VectorDraw.Professional.vdCollections.vdPolyCurves.swap(VectorDraw.Professional.vdCollections.vdCurves,VectorDraw.Professional.vdCollections.vdCurves)"/> Method. </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPolyCurves.ClearIndexDictionary">
            <summary>
            Clears the Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must follow a <see cref="M:VectorDraw.Professional.vdCollections.vdPolyCurves.MakeIndexDictionary"/> call when the search or swap is finished. </remarks>
            <example> For a code example please check topic <see cref="M:VectorDraw.Professional.vdCollections.vdPolyCurves.swap(VectorDraw.Professional.vdCollections.vdCurves,VectorDraw.Professional.vdCollections.vdCurves)"/> Method. </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPolyCurves.swap(VectorDraw.Professional.vdCollections.vdCurves,VectorDraw.Professional.vdCollections.vdCurves)">
            <summary>
            Swaps the position between two different vdCurves objects existing in the collection.
            </summary>
            <param name="Object1">first object needed.</param>
            <param name="Object2">second object needed.</param>
            <returns>True if the operation was succesfull</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPolyCurves.InsertAt(System.Int32,VectorDraw.Professional.vdCollections.vdCurves)">
            <summary>
            Insert a vdCurves object to a specified index of the collection.
            </summary>
            <param name="Index">The zero based index of the collection where the object will be inserted.</param>
            <param name="Object">The vdCurves object which will be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPolyCurves.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdPolyCurves object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPolyCurves.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdPolyCurves object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPolyCurves.RemoveItem(System.Object)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The item to be removed.</param>
            <returns>Returns true if the item was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPolyCurves.AddItem(System.Object)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="value">The object to be added.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPolyCurves.FindItem(System.Object)">
            <summary>
            Searches the collection for a specified object.
            </summary>
            <param name="item">The object to search for into the collection.</param>
            <returns>Returns true if the item exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPolyCurves.VectorDraw#Professional#vdCollections#IvdObjectCollection#Item(System.Int32)">
            <summary>
            Retreave a specific item placed at a specified index from the collection.
            </summary>
            <param name="Index">The index where the object is.</param>
            <returns>Returns the object at the specified index.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPolyCurves.GetObjectRealPosition(System.Object)">
            <summary>
            Find the index where a specified object is located in the list.
            </summary>
            <param name="item">The object to find.</param>
            <returns>Returns the index where the object is or -1 if the object is not in the list.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPolyCurves.InsertAt(System.Int32,System.Object)">
            <summary>
            Insert an object at a specified index.
            </summary>
            <param name="index">The index where the object will be inserted.</param>
            <param name="item">The object to be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPolyCurves.IsHatchValid">
            <summary>
            Returns true if all the curves define a closed perigram.
            </summary>
            <returns>True if all the curves define a closed perigram.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPolyCurves.MakeHatchValid">
            <summary>
            Reconstruct the curves if necessary , in order to each one define a closed perigram.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdPolyCurves.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements the vdPolyCurves collection which is a collection of vdCurves objects.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdPolyCurves.ItemType">
            <summary>
            Returns the Type of Items in the collection
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdPolyCurves.Item(System.Int32)">
            <summary>
            Get a vdCurves object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The vdCurves object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdPolyCurves.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.vdCurves">
            <summary>
            Implements the vdCurves collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdCurves.GetNotDeletedItems">
            <summary>
            Get all non deleted objects of the collection.
            </summary>
            <returns>Returns a new created collection of vdCurve objects that are not set as <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.Deleted"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdCurves.#ctor">
            <summary>
            Initializes the vdCurves collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdCurves.#ctor(VectorDraw.Professional.vdFigures.vdCurve[])">
            <summary>
            Initializes a new instance of the object and adds the passed items at the end of this collection.
            </summary>
            <param name="items">An array of <see cref="T:VectorDraw.Professional.vdFigures.vdCurve"/> objects.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdCurves.ToString">
            <summary>
            Gets a System.String that represents the count of the vdCurves collection Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdCurves.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdCurves.FindItem(VectorDraw.Professional.vdFigures.vdCurve)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">A vdCurve object to be checked if it exists in the collection</param>
            <returns>True if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdCurves.AddItem(VectorDraw.Professional.vdFigures.vdCurve)">
            <summary>
            Adds a vdCurve object to the collection.
            </summary>
            <param name="value">The vdCurve object to be added to the collection.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAddItem"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterAddItem"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdCurves.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdCurves.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
            <remarks>All vdCurve objects are removed.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdCurves.RemoveItem(VectorDraw.Professional.vdFigures.vdCurve)">
            <summary>
            Removes a specific vdCurve object from the collection.
            </summary>
            <param name="Object">The vdCurve object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdCurves.RemoveAt(System.Int32)">
            <summary>
            Removes an object from the specified index of the collection.
            </summary>
            <param name="Index">The zero based index.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdCurves.ChangeOrder(VectorDraw.Professional.vdFigures.vdCurve,System.Boolean)">
            <summary>
            Changes the position of a vdCurve object to the front or the end of the collection.
            </summary>
            <param name="Object">The vdCurve object.</param>
            <param name="ToBack">If true moves the object to the beginning of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdCurves.MakeIndexDictionary">
            <summary>
            Creates an Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must be followed by a <see cref="M:VectorDraw.Professional.vdCollections.vdCurves.ClearIndexDictionary"/> call when the search or swap is finished. </remarks>
            <example> For a code example please check topic <see cref="M:VectorDraw.Professional.vdCollections.vdCurves.swap(VectorDraw.Professional.vdFigures.vdCurve,VectorDraw.Professional.vdFigures.vdCurve)"/> Method. </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdCurves.ClearIndexDictionary">
            <summary>
            Clears the Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must follow a <see cref="M:VectorDraw.Professional.vdCollections.vdCurves.MakeIndexDictionary"/> call when the search or swap is finished. </remarks>
            <example> For a code example please check topic <see cref="M:VectorDraw.Professional.vdCollections.vdCurves.swap(VectorDraw.Professional.vdFigures.vdCurve,VectorDraw.Professional.vdFigures.vdCurve)"/> Method. </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdCurves.swap(VectorDraw.Professional.vdFigures.vdCurve,VectorDraw.Professional.vdFigures.vdCurve)">
            <summary>
            Swaps the position between two different vdCurve objects existing in the collection.
            </summary>
            <param name="Object1">first object needed.</param>
            <param name="Object2">second object needed.</param>
            <returns>True if the swap operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdCurves.InsertAt(System.Int32,VectorDraw.Professional.vdFigures.vdCurve)">
            <summary>
            Insert a vdCurve object to a specified index of the collection.
            </summary>
            <param name="Index">The zero based index of the collection where the object will be inserted.</param>
            <param name="Object">The vdCurve object which will be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdCurves.Update">
            <summary>
            Updates each curve of the collection after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdCurves.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdCurves object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdCurves.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdCurves object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdCurves.IsHatchValid(System.Double)">
            <summary>
            Returns true if the curves define a closed perigram
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdCurves.RemoveItem(System.Object)">
            <summary>
            Removes an object from the collection.
            </summary>
            <param name="item">The object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdCurves.AddItem(System.Object)">
            <summary>
            Adds an object to the collection.
            </summary>
            <param name="value">The object to be added.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdCurves.FindItem(System.Object)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">The object required for the search.</param>
            <returns>true if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdCurves.VectorDraw#Professional#vdCollections#IvdObjectCollection#Item(System.Int32)">
            <summary>
            Retreave a specific item placed at a specified index from the collection.
            </summary>
            <param name="Index">The index where the object is.</param>
            <returns>Returns the object at the specified index.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdCurves.GetObjectRealPosition(System.Object)">
            <summary>
            Find the index where a specified object is located in the list.
            </summary>
            <param name="item">The object to find.</param>
            <returns>Returns the index where the object is or -1 if the object is not in the list.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdCurves.InsertAt(System.Int32,System.Object)">
            <summary>
            Insert an object at a specified index.
            </summary>
            <param name="index">The index where the object will be inserted.</param>
            <param name="item">The object to be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdCurves.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements the vdCurves collection object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdCurves.ItemType">
            <summary>
            Returns the Type of Items in the collection
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdCurves.Deleted">
            <summary>
            Get/Set a property that marks the object as Deleted or not.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdCurves.Operation">
            <summary>
            Get/Set the Clipping type for the vdCurves object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdCurves.Item(System.Int32)">
            <summary>
            Get a vdCurve object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The vdCurve object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdCurves.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdCurves.Items">
            <summary>
            Get the items of the collection into a System.Array collection.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.EditAttribDialog">
            <summary>
            Implements the Edit Attribute dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.EditAttribDialog.#ctor">
            <summary>
            Initializes the Edit Attribute dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.EditAttribDialog.InitializeExtra(VectorDraw.Professional.vdObjects.vdDocument,System.Windows.Forms.Control,VectorDraw.Professional.vdFigures.vdInsert)">
            <summary>
            Sets the necessary objects in order to use the dialog.
            </summary>
            <param name="Document">The vdDocument object of the vdInsert object that has the attributes..</param>
            <param name="parent">The vdDocument's parent control.</param>
            <param name="ins">The vdInsert object where the attribute belongs.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.EditAttribDialog.Show(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Professional.vdFigures.vdInsert)">
            <summary>
            Used to Show the dialog to edit an attribute in an insert.
            </summary>
            <param name="Document">The Document where the insert is.</param>
            <param name="ins">The vdInsert object where the attribute for edit is.</param>
            <returns>A DialogResult value indicating the user's action.</returns>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.EditAttribDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.EditAttribDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.EditAttribDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.EditAttribDialog.label1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.EditAttribDialog.lblBlockName">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.EditAttribDialog.dataGVTags">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.EditAttribDialog.bCancel">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.EditAttribDialog.bOK">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.EditAttribDialog.bReset">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.EditAttribDialog.groupBox1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.EditAttribDialog.formToolTip">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.EditAttribDialog.vdFormSize">
            <summary>
            Get/Set the size of the form used when loading the form. This value is stored when the form is closed in order to be used the next time the form is loaded. 
            </summary>
            <remarks>The default value is -1,-1.</remarks>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.IDxfRecords">
            <summary>
            Collection of <seealso cref="T:VectorDraw.Professional.vdObjects.IDxfRecord"/> objects.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.IDxfRecord">
            <summary>
            IDxfRecord used in the LoadUknownObject event of the Document and is a collection od code and value as like it is in the DXF file.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.LoadUnknownObjectsDataType">
            <summary>
            Enumerator used to describe the data at the event's arguments when the event is raised.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.LoadUnknownObjectsDataType.Dxf">
            <summary>
            When this datatype is used means that the data are a collection of IDxfRecords
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.LoadUnknownObjectsDataType.DwgProxy">
            <summary>
            When this datatype is used means that the data is a string that represents the original object class name
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.frmStringArrayEditor">
            <summary>
            Implements a StringArray Edit dialog to be used in FrozenLayers property of the vdViewport object.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmStringArrayEditor.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmStringArrayEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmStringArrayEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmStringArrayEditor.listBox1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmStringArrayEditor.comboLayers">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmStringArrayEditor.butAdd">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmStringArrayEditor.butRemove">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmStringArrayEditor.butOk">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmStringArrayEditor.butCancel">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmStringArrayEditor.formToolTip">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmStringArrayEditor.mArray">
            <summary>
            The returned string array.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmStringArrayEditor.#ctor">
            <summary>
            Initializes the dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmStringArrayEditor.InitializeExtra(VectorDraw.Professional.vdCollections.StringArray,VectorDraw.Professional.vdCollections.StringArray)">
            <summary>
            Initializes parameters of the dialog needed.
            </summary>
            <param name="strings">The stringArray to be modified.</param>
            <param name="ListOfSelectedNames">A list of names used to select names that will be added to combo list.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmStringArrayEditor.Show(System.String,VectorDraw.Professional.vdCollections.StringArray,VectorDraw.Professional.vdCollections.StringArray,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Shows the dialog.
            </summary>
            <param name="TitleText">The dispaly title text of the form.</param>
            <param name="strings">The stringArray to be modified.</param>
            <param name="ListOfSelectedNames">A list of names used to select names that will be added to combo list.Set it to null in order any user names can be added.</param>
            <param name="doc">The Document object.</param>
            <returns>The form from which the user can get the mArray and also the DialogResult values.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmStringArrayEditor.Show(VectorDraw.Professional.vdCollections.StringArray,VectorDraw.Professional.vdCollections.StringArray,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Shows the dialog.
            </summary>
            <param name="strings">The stringArray to be modified.</param>
            <param name="ListOfSelectedNames">A list of names used to select names that will be added to combo list.Set it to null in order any user names can be added.</param>
            <param name="doc">The Document object.</param>
            <returns>The form from which the user can get the mArray and also the DialogResult values.</returns>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.frmStringArrayEditor.vdFormSize">
            <summary>
            Get/Set the size of the form used when loading the form. This value is stored when the form is closed in order to be used the next time the form is loaded. 
            </summary>
            <remarks>The default value is -1,-1.</remarks>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdLeader">
            <summary>
            Implements the vdLeader object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLeader.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes a new instance of the vdLeader object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLeader.#ctor">
            <summary>
            Initilaizes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLeader.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.
            User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLeader.IntersectWith(VectorDraw.Professional.vdPrimaries.vdFigure,VectorDraw.Professional.Constants.VdConstInters,VectorDraw.Geometry.gPoints)">
            <summary>
            Finds the intersection points of an object with another object.
            </summary>
            <param name="pEntity">The entity with which the intersection of the object will be done.</param>
            <param name="intersectOption"><see cref="T:VectorDraw.Professional.Constants.VdConstInters"/> constant</param>
            <param name="intPoints">A precreated gPoints collection in which the instersection points will be added.The points are returned in WCS.</param>
            <returns>True if at least one intersection point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLeader.dimstyle(VectorDraw.Professional.vdFigures.vdLeader.DimLeaderOverWrite)">
            <summary>
            Gets the vdDimstyle object of the dimension.
            </summary>
            <param name="value">A specific ovewrite value for the dimension.</param>
            <returns>Returns the vdDimstyle object of the dimension.If the dimension has ovewrite value specified
            by the parameter then a custom vdDimstyle object is returned containing the ovewrite value.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLeader.HasOverwritevalue(VectorDraw.Professional.vdFigures.vdLeader.DimLeaderOverWrite)">
            <summary>
            Checks if a specific ovewrite value exists to the dimension.
            </summary>
            <param name="value">A value representing a specific ovewrite value.</param>
            <returns>Returns true if the dimension ovewrites the specific value.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLeader.ToString">
            <summary>
            Gets a System.String that represents the type of the vdDimension Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLeader.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLeader.Explode">
            <summary>
            Explodes the vdLeader object into it's entities.
            </summary>
            <returns>Returns a collection of entities that draw the vdLeader object(vdPolyline,vdblock,vdMText).</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLeader.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Called in order to draw the object in a specified vdRender object.
            </summary>
            <param name="render">The vdRender object in which the object will be drawn.</param>
            <returns><see cref="T:VectorDraw.Render.vdRender.DrawStatus"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLeader.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLeader.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLeader.GetGripPoints">
            <summary>
            A function returning the grip points of the object.
            </summary>
            <returns>Returns a new instance of gpoints object containing the grip points of the object.</returns>
            <remarks>
            The returning points are in World coordinate system(WCS).
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetGripPoints"/> event.
            When implementing this method the <see cref="M:VectorDraw.Professional.vdFigures.vdLeader.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)"/> must be also override according to the new selected grip points.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLeader.InitializeProperties">
            <summary>
            Resets the properties of the vdLeader object to the Default values.
            </summary>
            <remarks>
            Default values:ScaleOverall = 1.0,TextOffset = 0.09,LeaderType = Line_with_Arrow,OvewriteFlag = 0.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLeader.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)">
            <summary>
            This function is intended to be called during a grip edit of the vdLeader object. 
            </summary>
            <param name="Indexes">Represents a zero based array of the grip indexes that will be moved.</param>
            <param name="dx">The dx distance that the grip is moved.</param>
            <param name="dy">The dy distance that the grip is moved.</param>
            <param name="dz">The dz distance that the grip is moved.</param>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdLeader.GetGripPoints"/>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnMoveGripPointsAt"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLeader.CalculateEntities">
            <summary>
            Calculates the entities in ECS of the vdLeader Object
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLeader.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdDimension object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLeader.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdDimension object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLeader.ShouldBeTransformed(VectorDraw.Professional.vdCollections.vdSelection,System.Boolean)">
            <summary>
            This method is used in order to determine what should happen when a transformBy occurs in a collection.
            </summary>
            <param name="selset">The selection of entities that is going to be transformed.</param>
            <param name="Disconnect">A boolean value representing if the object should disconnect from it's reference , referenceobj = null</param>
            <returns>True if the transform should occur or false if not.</returns>
            <remarks>
            This method is used for example in the iteration of the CmdScale, when the user selects entities to scale then this method will return false if the reference object is also chosen in the selection so the Dimension is not transformed because it will apply the changes when the reference object is scaled.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLeader.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements the vdLeader object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLeader.BoundingBox">
            <summary>
            Gets the Bounding Box of the vdLeader object in WorldCoordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLeader.ExtrusionVector">
            <summary>
            Get/Set the 3D vector extrusion direction for the object.
            </summary>
            <remarks> Default value is (0,0,1) and the object is drawn in the XY plane.
            Is a one-unit length vector relative to World Coordinate System(WCS).</remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLeader.HorizontalDirection">
            <summary>
            Get/Set the horizontal direction vector in World CS
            </summary>
            <remarks> Default value is (1,0,0).</remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLeader.DimOverwriteValue">
            <summary>
            Get a value indicating which ovewrite values has the vdLeader object.
            </summary>
            <remarks>It is recomended to use the <see cref="M:VectorDraw.Professional.vdFigures.vdLeader.HasOverwritevalue(VectorDraw.Professional.vdFigures.vdLeader.DimLeaderOverWrite)"/> method to check 
            the ovewrite values the dimension has.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLeader.VertexList">
            <summary>
            Get/Set the vertex list of the vdLeader object.
            </summary>
            <remarks>
            vdLeader's vertex list is a collection of three (3) <see cref="T:VectorDraw.Geometry.Vertex"/> objects in World Coordinate System(WCS).
            Default value an empty Vertexes list.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLeader.Style">
            <summary>
            Get/Set the vdDimstyle of the vdLeader object.
            </summary>
            <remarks>
            Default value a new created vdDimstyle object with default values.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLeader.ArrowBlock">
            <summary>
            Get/Set the vdBlock object used by the leader as arrow.
            </summary>
            <remarks>
            When setting this value the dimension gets an ovewrite value representing this property.
            Default value null and dimstyle's arrow when initialized in a Document.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLeader.ArrowSize">
            <summary>
            Get/Set the arrow size of the vdLeader.
            </summary>
            <remarks>
            Default value 1.0.
            When setting this value the dimension gets an ovewrite value representing this property.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLeader.ScaleOverall">
            <summary>
            Get/Set the overall scale of the vdLeader object.
            </summary>
            <remarks>
            Default value 1.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks> 
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLeader.TextOffset">
            <summary>
            Get/Set the text offset of the vdLeader object.
            </summary>
            <remarks>
            Default value 0.09.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks> 
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLeader.LineColor">
            <summary>
            Get/Set the Leader's line color.
            </summary>
            <remarks>
            Default value a color with index 7.
            When setting this value the leader gets an ovewrite value representing this property.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLeader.LeaderType">
            <summary>
            Get/Set the Leader's type.
            </summary>
            <remarks>
            Default value a color with index 1 Line_with_arrow.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLeader.LeaderMText">
            <summary>
            Get/Set the Mtext object of the leader.Mtext always follows the vdLeader object in the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLeader.TextIsAbove">
            <summary>
            Get/Set a boolean value that represents the vertical position of the text.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLeader.ECSMatrix">
            <summary>
            Gets the matrix which is used to transform vectors or points from the 
            object's object coordinate system (OCS) to the World Coordinate System (WCS).
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLeader.ReferenceObj">
            <summary>
            The reference Object of the Leader , this property is equal to LeaderMText
            </summary>
            <remarks>
            This property is internally used currently.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLeader.param1">
            <summary>
            This is not used for this object
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdLeader.DimLeaderOverWrite">
            <summary>
            Values that indicate the ovewrite values that the leader has.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdLeader.DimLeaderOverWrite.ArrowBlock">
            <summary>
            The leader has it's own block and does not inherit the Dimension's style block.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdLeader.DimLeaderOverWrite.ArrowSize">
            <summary>
            The leader has it's own arrowsize and does not inherit the Dimension's style block.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdLeader.DimLeaderOverWrite.LineColor">
            <summary>
            The leader has it's own color for the line and does not inherit the Dimension's style block.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdLeader.DimLeaderOverWrite.TextVerJust">
            <summary>
            The Leader has it's own justification for the text.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdLeader.DimLeaderOverWrite.TextOffset">
            <summary>
            The Leader has it's own value for the text offset.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdLeader.DimLeaderType">
            <summary>
            Indicates the way the leader is going to be drawn.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdLeader.DimLeaderType.Line_with_Arrow">
            <summary>
            Straight line with arrow block.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdLeader.DimLeaderType.Line_with_no_arrow">
            <summary>
            Straight line without arrow block.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdLeader.DimLeaderType.Spline_with_arrow">
            <summary>
            SPline line with arrow block.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdLeader.DimLeaderType.Spline_with_no_arrow">
            <summary>
            SPline line without arrow block.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdMultiline">
            <summary>
            Implements the vdMultiline object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes a new instance of the vdMultiline object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.#ctor">
            <summary>
            Initializes a new instance of the vdMultiline object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.Area">
            <summary>
            Get the enclosed area of the Vertexlist in Drawing Units.
            </summary>
            <returns>Returns the enclosed area of the Vertexlist in Drawing Units.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.Length">
            <summary>
            Get the length of the Vertexlist in Drawing Units.
            </summary>
            <returns>Returns the length of the Vertexlist in Drawing Units.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.GetGripPoints">
            <summary>
            A function returning the grip points of the object.
            </summary>
            <returns>Returns a new instance of gpoints object containing the grip points of the object.</returns>
            <remarks>
            The returning points are in World coordinate system(WCS).
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetGripPoints"/> event.
            When implementing this method the <see cref="M:VectorDraw.Professional.vdFigures.vdMultiline.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)"/> must be also override according to the new selected grip points.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)">
            <summary>
            This function is intended to be called during a grip edit of the object. 
            </summary>
            <param name="Indexes">Represents a zero based array of the grip indexes that will be moved.</param>
            <param name="dx">The dx distance that the grip is moved.</param>
            <param name="dy">The dy distance that the grip is moved.</param>
            <param name="dz">The dz distance that the grip is moved.</param>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdMultiline.GetGripPoints"/>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnMoveGripPointsAt"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.
            User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.InitializeProperties">
            <summary>
            Resets the properties of the vdMultiline object to the Default values.
            </summary>
            <remarks>
            Default values:Remove all Points from the vdMultiline's VertexList,flags = None,Scalefactor = 20.0,Justification = Middle.
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)">
            <summary>
            Check if the table object is depend on this figure
            </summary>
            <param name="table">A Table object to be searched.</param>
            <returns>Returns true is this object is not deleted and have a property reference equal with table object.</returns>
            <remarks>Called when <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ExtendedDeletedCheck"/> is False.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.IsVisible">
            <summary>
            Indicates if the object can be drawn.
            </summary>
            <returns>True if the object can be drawn.</returns>
            <remarks> An object is invisible when is Deleted,has Layer null,Layer is frozen,
            <see cref="F:VectorDraw.Professional.vdPrimaries.vdFigure.VisibilityEnum.Invisible"/>,object's Bounding Box is empty.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.OnDocumentSelected(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            This method is called when the object is inserted in a Document for the first time.
            </summary>
            <param name="document">The document where the object is inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.OnOwnerChanged">
            <summary>
            This method is called when the object's owner is changed.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.UpdateJoints">
            <summary>
            This runs when a display property of the Multiline changes like VertexList , MultilineStyle , Justification
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.Is3dSectionVisible(VectorDraw.Geometry.Matrix)">
            <summary>
            Indicates if at least a segment of the object is visible after applying the SectionClips in 3dRender mode.
            </summary>
            <param name="object2World">Represents the object to world coordinate system matrix.</param>
            <returns>True if the object is visible after applying the sections</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.Explode">
            <summary>
            Explodes the vdMultiline object into subentities.
            </summary>
            <returns>The entities created by the explode method.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.isClosed">
            <summary>
            Check if the Multiline is closed.
            </summary>
            <returns>A boolean value representing of the Multiline is closed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)">
            <summary>
            <see cref="M:VectorDraw.Professional.vdPrimaries.vdFigure.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)"/>.
            </summary>
            <param name="object2viewcs"></param>
            <param name="mode"></param>
            <param name="pickPoi"></param>
            <param name="LastPoi"></param>
            <param name="SegCount"></param>
            <param name="osnaps"></param>
            <returns>True if at least one osnap point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.Extend(VectorDraw.Professional.vdCollections.vdSelection,VectorDraw.Geometry.gPoint)">
            <summary>
            Extends an object intersecting the closest object of the selection.
            </summary>
            <param name="entities">A selection of vdFigures that represent the limit of the extend.</param>
            <param name="pt">Represents the side of the object that will be extended in World Coordinate System(WCS).</param>
            <returns>Returns true if the object extends.</returns>
            <remarks >If the pt gPoint does not belong to the object the method uses the closest point belonging to the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.Trim(VectorDraw.Professional.vdCollections.vdSelection,VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdFigures.vdCurve@)">
            <summary>
            Trims an specific segment of the object.
            </summary>
            <param name="entities">A selection of vdFigures that represents the boundings that the trim will be commited.</param>
            <param name="pt">A point representing the section of the object that will be trimed in World Coordinate System(WCS).</param>
            <param name="newEntity">If the trim command creates two objects then the second object is returned in this value(not always).</param>
            <returns> True is the trim is succesfull.</returns>
            <remarks >
            If the pt gPoint does not belong to the object the method uses the closest point belonging to the object.
            The new entity is not added to the Document.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.IntersectWith(VectorDraw.Professional.vdPrimaries.vdFigure,VectorDraw.Professional.Constants.VdConstInters,VectorDraw.Geometry.gPoints)">
            <summary>
            Finds the intersection points of an object with another object.
            </summary>
            <param name="pEntity">The entity with which the intersection of the object will be done.</param>
            <param name="intersectOption"><see cref="T:VectorDraw.Professional.Constants.VdConstInters"/> constant</param>
            <param name="intPoints">A precreated gPoints collection in which the instersection points will be added.The points are returned in WCS.</param>
            <returns>True if at least one intersection point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.Break(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdPrimaries.vdFigure@)">
            <summary>
            Breaks the vdMultiline into two or one submultilines.Deletes the part that is between p1,p2.
            </summary>
            <param name="p1">The first point needed for this command.</param>
            <param name="p2">The second point needed for this command.</param>
            <param name="newEntity">If a new vdMultiline is created it is returned in this parameter.</param>
            <returns>true if the command was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.getStartPoint">
            <summary>
            Get the first point of the multiline.
            </summary>
            <returns>The start point of the multiline object in World Coordinate System(WCS).</returns>
            <remarks>The result depends on the Vertexlist of the Multiline and not the Elements opf the MultilineStyle.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.getEndPoint">
            <summary>
            Get the last point of the multiline.
            </summary>
            <returns>The last point of the multiline object in World Coordinate System(WCS).</returns>
            <remarks>The result depends on the Vertexlist of the Multiline and not the Elements opf the MultilineStyle.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.getStartParam">
            <summary>
            Returns the start parameter for the multiline object.
            </summary>
            <returns>Returns 0.0.</returns>
            <remarks>The result depends on the Vertexlist of the Multiline and not the Elements opf the MultilineStyle.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.getEndParam">
            <summary>
            Return the end parameter for the multiline object.
            </summary>
            <returns>Return the end parameter for the vdPolyline object ,equals to <see cref="M:VectorDraw.Professional.vdFigures.vdMultiline.Length"/>.</returns>
            <remarks>The result depends on the Vertexlist of the Multiline and not the Elements opf the MultilineStyle.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.PointOnCurve(VectorDraw.Geometry.gPoint,System.Boolean)">
            <summary>
            Returns if a point belongs to a vdMultiline object.
            </summary>
            <param name="pt">A point in WCS or ECS.</param>
            <param name="IsInECS">A boolean value indicating if the point is in ECS or WCS.</param>
            <returns>Returns true if the point belongs to the vdMultiline object.</returns>
            <remarks>The result depends on the Vertexlist of the Multiline and not the Elements opf the MultilineStyle.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.getClosestPointTo(VectorDraw.Geometry.gPoint)">
            <summary>
            Get The closest point belonging to the curve.
            </summary>
            <param name="givenPoint">A point in World Coordinate System(WCS).</param>
            <returns>Returns null or a point in WCS belonging to the curve.</returns>
            <remarks>The result depends on the Vertexlist of the Multiline and not the Elements opf the MultilineStyle.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.getDistAtParam(System.Double)">
            <summary>
            Get the length of the vdMultiline’s segment from the vdMultiline’s beginning to the point specified by param.
            </summary>
            <param name="param">A value that represents a point on the vdMultiline.</param>
            <returns>The distance from the getStartParam.</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdMultiline.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdMultiline.getStartParam"/>
            <remarks>The result depends on the Vertexlist of the Multiline and not the Elements opf the MultilineStyle.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.getDistAtPoint(VectorDraw.Geometry.gPoint)">
            <summary>
            Get the length of the vdMultiline’s segment between the vdMultiline’s start point and point pt.
            </summary>
            <param name="pt">The point of the vdMultiline in World Coordinate System(WCS).</param>
            <returns>Returns the length of the vdMultiline’s segment between the vdMultiline’s start point and point.</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdMultiline.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdMultiline.getStartParam"/>
            <remarks>The result depends on the Vertexlist of the Multiline and not the Elements opf the MultilineStyle.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.getParamAtDist(System.Double)">
            <summary>
            Gets the parameter of the object at the specific distance.
            </summary>
            <param name="dist">The distance that the param is needed.</param>
            <returns>Returns parameter at the location specified by dist.</returns>
            <remarks>
            The result depends on the Vertexlist of the Multiline and not the Elements opf the MultilineStyle.
            If the distance is 0.0 then the <see cref="M:VectorDraw.Professional.vdFigures.vdMultiline.getStartParam"/> is returned.
            If the distance is equal to the length of the object then the <see cref="M:VectorDraw.Professional.vdFigures.vdMultiline.getEndParam"/> is returned.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.getParamAtPoint(VectorDraw.Geometry.gPoint)">
            <summary>
            Get the parameter of the vdMultiline at a specified point.
            </summary>
            <param name="pt">The point in World Coordinate System(WCS) belonging to the vdMultiline.</param>
            <returns>Returns the parameter of the vdMultiline at point pt.</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdMultiline.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdMultiline.getStartParam"/>
            <remarks>The result depends on the Vertexlist of the Multiline and not the Elements opf the MultilineStyle.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.getPointAtDist(System.Double)">
            <summary>
            Gets a point belonging to the vdMultiline at the specified distance.
            </summary>
            <param name="dist">The distance along the vdMultiline.</param>
            <returns>Returns the point located at the location specified by dist</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdMultiline.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdMultiline.getStartParam"/>
            <remarks>The result depends on the Vertexlist of the Multiline and not the Elements opf the MultilineStyle.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.getPointAtParam(System.Double)">
            <summary>
            Returns a point on the vdMultiline representing a param.
            </summary>
            <param name="param">The param of the vdMultiline object.</param>
            <returns>Returns the point on the vdMultiline specified by the param in World Coordinate System(WCS).</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdMultiline.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdMultiline.getStartParam"/>
            <remarks>The result depends on the Vertexlist of the Multiline and not the Elements opf the MultilineStyle.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.IsParamValid(System.Double)">
            <summary>
            Checks if the param is between the getStartParam and the getEndParam.
            </summary>
            <param name="param">The parameter used for the check.</param>
            <returns>true if the param is between these two values.</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdMultiline.getEndParam"/>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdMultiline.getStartParam"/>
            <remarks>The result depends on the Vertexlist of the Multiline and not the Elements opf the MultilineStyle.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.GetSamplePoints(System.Int32,System.Double)">
            <summary>
            Returns a list of points on the vdMultiline object from the start to the end point of the line.
            </summary>
            <param name="CurveResolution">valid values (1 to 20000)</param>
            <param name="PixelSize">valid values possitive decimal ( &gt;=0)</param>
            <returns>A collection of points belonging to the vdMultiline in Entity Coordinate System(ECS).</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCurve.GetSamplePoints(System.Int32,System.Double)"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.FixJoints(VectorDraw.Professional.vdFigures.MultiLineJoints)">
            <summary>
            Internally used in order to support DXF/DWG Multiline object.
            </summary>
            <param name="joints">A MultiLineJoints object that indicate the cuts of the multiline.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.GetSegmentPoints(System.Int32)">
            <summary>
            Get all the points of the Multiline at a specific Vertex.
            </summary>
            <param name="index">The index of the Vertex.</param>
            <returns>A gPoints collection containing all the points of the MultiLineStyle elements at the specified Vertex.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.GetJoints(System.Double,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Get the Joints for the specific parameters.
            </summary>
            <param name="offset">The offset of the line that we request the joints for.</param>
            <param name="vertex">The Vertex point of the Multiline.</param>
            <param name="mitterpoint">The mitter point</param>
            <returns>An array of doubles that represent the joints of the specified segment.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Called in order to draw the object in a specified vdRender object.
            </summary>
            <param name="render">The vdRender object in which the object will be drawn.</param>
            <returns><see cref="T:VectorDraw.Render.vdRender.DrawStatus"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdMultiline object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdMultiline object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdMultiline.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements the vdMultiline object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMultiline.ScaleFactor">
            <summary>
            Get/Set the ScaleFactor of the vdMultiline object.
            </summary>
            <remarks>
            Default value 20.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMultiline.MultilineStyle">
            <summary>
            Get/Set the vdMultilineStyle object that the vdMultiline object will use.
            </summary>
            <remarks>
            This object must be a valid existing vdMultilineStyle object in the <see cref="T:VectorDraw.Professional.vdCollections.vdMultilineStyles"/> collection of the figure's Document.
            When setting a value, the property's value is referenced to the object's vdMultilineStyle.
            Default value null. 
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMultiline.Justification">
            <summary>
            Get/Set the Justification of the vdMultiline object.
            </summary>
            <remarks>
            Default value <see cref="F:VectorDraw.Professional.Constants.VdConstMultilineJustification.Top"/>.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMultiline.Flags">
            <summary>
            Get/Set the extra flags of the vdMultiline object.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMultiline.VertexList">
            <summary>
            Get/Set the vertex list of the vdMultiline object.
            </summary>
            <remarks>
            vdMultiline's vertex list is a collection of <see cref="T:VectorDraw.Geometry.Vertex"/> objects in World Coordinate System(WCS).
            The points must have the same z value , which means that vdMultiline is a 2D object.
            Default value an empty Vertexes list.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMultiline.BoundingBox">
            <summary>
            Gets the Bounding Box of the vdInsert object in WorldCoordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdMultiline.ECSMatrix">
            <summary>
            Gets the matrix which is used to transform vectors or points from the 
            object's object coordinate system (OCS) to the World Coordinate System (WCS).
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.MultiLineJoint">
            <summary>
            Internally used class to support DXF/DWG Joints.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.MultiLineJoint.#ctor">
            <summary>
            Empty Constructor of the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.MultiLineJoint.#ctor(VectorDraw.Geometry.Vertex,System.Double,VectorDraw.Geometry.DoubleArray,VectorDraw.Geometry.gPoint)">
            <summary>
            Constractor of the object.
            </summary>
            <param name="v">The Vertex where the joints are going to be applied</param>
            <param name="offset">The offset where the joints are going to be applied.</param>
            <param name="joints">The joints which are double values indicating distance from the VertexPoint.</param>
            <param name="miterpoint">The miterpoint at the specified offset.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.MultiLineJoint.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdMultiline object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.MultiLineJoint.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdMultiline object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.MultiLineJoint.Joints">
            <summary>
            A double array which indicates the joints in distances from the VertexPoint in the specific offset.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.MultiLineJoint.Offset">
            <summary>
            The offset where the joints are.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.MultiLineJoint.VertexPoint">
            <summary>
            The VertexPoint where the joints are.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.MultiLineJoint.MiterPoint">
            <summary>
            The miter point at the offset where the joints are.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.MultiLineJoints">
            <summary>
            Internally used class to hold an array of MultiLineJoint objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.MultiLineJoints.#ctor">
            <summary>
            Initializes the MultiLineJoints object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.MultiLineJoints.#ctor(VectorDraw.Professional.vdFigures.MultiLineJoints)">
            <summary>
            Initializes the MultiLineJoints object.
            </summary>
            <param name="joints">Passing initialization values.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.MultiLineJoints.AddItem(VectorDraw.Professional.vdFigures.MultiLineJoint)">
            <summary>
            Adds a <see cref="T:VectorDraw.Professional.vdFigures.MultiLineJoint"/> to the end of the collection.
            </summary>
            <param name="value">A <see cref="T:VectorDraw.Professional.vdFigures.MultiLineJoint"/> value to be added to the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.MultiLineJoints.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.MultiLineJoints.Find(VectorDraw.Geometry.gPoint,System.Double,VectorDraw.Geometry.gPoint)">
            <summary>
            Internally used to find the joint that has the specified parameters
            </summary>
            <param name="v">The point(start) of the joint</param>
            <param name="offset">The offset of the joint</param>
            <param name="miterpoint">The miter point of the joint</param>
            <returns>The MultiLineJoint that meets the requirements.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.MultiLineJoints.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdMultiline object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.MultiLineJoints.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdMultiline object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.MultiLineJoints.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.MultiLineJoints.Item(System.Int32)">
            <summary>
            Get/Set the object at a specified index of the collection.
            </summary>
            <param name="index">The index of the object.</param>
            <returns>The object at the specified index.</returns>
        </member>
        <member name="T:VectorDraw.Professional.Table.vdTableRecordTypeConverter">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTableRecordTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTableRecordTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTableRecordTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTableRecordTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.Table.vdTableRecord">
            <summary>
            A class that store a <see cref="T:VectorDraw.Professional.vdCollections.vdXProperties"/> collection
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTableRecord.ToString">
            <summary>
            Gets a System.String that represents the name of the vdTableRecord Object.
            </summary>
            <returns>A string representing the name of the object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTableRecord.#ctor">
            <summary>
            Initializes the vdTableRecord object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTableRecord.#ctor(System.String)">
            <summary>
            Initializes the vdTableRecord object with the passed name.
            </summary>
            <param name="name">The name of the object.</param>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTableRecord.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTableRecord.ContainsReferenceObject(VectorDraw.Professional.vdObjects.vdPrimary)">
            <summary>
            Searches the reference objects for the passed vdPrimary object.
            </summary>
            <param name="primary">The vdPrimary object to be found.</param>
            <returns>True if the object is found , false if not.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTableRecord.AddReferenceObject(VectorDraw.Professional.vdObjects.vdPrimary)">
            <summary>
            Adds the passed reference object to the vdTableRecord object.
            </summary>
            <param name="primary">The vdPrimary object to be added to the reference objects of the vdTableRecord object.</param>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTableRecord.RemoveReferenceObject(VectorDraw.Professional.vdObjects.vdPrimary)">
            <summary>
            Removes the passed vdPrimary object from the reference objects of the vdTableRecord object.
            </summary>
            <param name="primary">The vdPrimary object to be removed.</param>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTableRecord.UpdateReferenceObjects">
            <summary>
            Updates all the referenced objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTableRecord.GetReferenceObjects(System.Boolean)">
             <summary>
             Returns a copy of the collection that contains all entities reference this object.
             </summary>
            <param name="getDeleted">If it is false then the items that are Deleted are not added to the return collection.</param>
             <returns>A copy of the collection that contains all primaries reference this object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTableRecord.ReferencesCount(System.Boolean)">
            <summary>
            Returns the number of entities that reference this object.
            </summary>
            <param name="getDeleted">Set to True in order the Deleted items to be take in consideration</param>
            <returns>The number of entities that reference this object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTableRecord.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the NamedStyles object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTableRecord.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the NamedStyles object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="P:VectorDraw.Professional.Table.vdTableRecord.SupportUndoWrite">
            <summary>
            overrides the <see cref="P:VectorDraw.Professional.vdObjects.vdBaseObject.SupportUndoWrite"/>. Always return false for this object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Table.vdTableRecord.xProperties">
            <summary>
            Get the vdXproperties object of the vdTableRecord object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Table.vdTableRecord.Name">
            <summary>
            Get/Set the name of the object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Table.vdTableRecord.Item(System.String)">
            <summary>
            Get/Set the <see cref="P:VectorDraw.Professional.vdObjects.vdXProperty.PropValue"/> of the first ocurrence xProperty with specific name.
            </summary>
            <param name="propertyName">A name of a xProperty to search for in the collection.</param>
            <returns>The <see cref="P:VectorDraw.Professional.vdObjects.vdXProperty.PropValue"/> of the first ocurrence vdXProperty with specific name.</returns>
            <remarks>
            if an xProperty with specific name does not exist then a new one is added in the collection.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.Table.vdTableRecord.Item(System.Int32)">
            <summary>
            Get the object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Professional.Table.vdTableRecord.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Table.vdTable">
            <summary>
            A class that store a group of <see cref="T:VectorDraw.Professional.Table.vdTableRecord"/> objects
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTable.#ctor">
            <summary>
            Initializes the vdTable object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTable.#ctor(System.String)">
            <summary>
            Initializes the vdTable object with the passed name.
            </summary>
            <param name="ItemTableName">The name of the table object.</param>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTable.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTable.ToString">
            <summary>
            Gets a System.String that represents the name of the vdTable Object.
            </summary>
            <returns>A string representing the name of the object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTable.AddItem(VectorDraw.Professional.Table.vdTableRecord)">
            <summary>
            Adds an object to the collection.
            </summary>
            <param name="item">The object to be added.</param>
            <returns>True if the item is added and false if the item was not added to the collection.</returns>
            <remarks>
            If the item already exists in the collection returns true , if already an existing item with the same name is in the collection returns false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAddItem"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterAddItem"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTable.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTable.Add(System.String)">
            <summary>
            Creates a new vdTableRecord with the passed name and adds it to the collection.
            </summary>
            <param name="name">The name of the vdTableRecord to be added to the collection.</param>
            <returns>The added object or null if the object is not added to the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTable.Contains(VectorDraw.Professional.Table.vdTableRecord)">
            <summary>
            Searches the collection for the passed object.
            </summary>
            <param name="item">The vdTableRecord object to search in the collection.</param>
            <returns>True if the object is found and false if the object is not in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTable.Contains(System.String)">
            <summary>
            Searches the collection for an object that has the passed name.
            </summary>
            <param name="name">The name of the object to search for.</param>
            <returns>True if the object was found and false if not.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTable.GetItemPosition(VectorDraw.Professional.Table.vdTableRecord)">
            <summary>
            Find the index where a specified object is located in the list.
            </summary>
            <param name="item">The object to find.</param>
            <returns>The index where the item object is or -1 if the item is not in the list.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTable.FindName(System.String)">
            <summary>
            Searches the collection for an object that has the passed name.
            </summary>
            <param name="name">The name of the object to search for.</param>
            <returns>The found vdTableRecord object with the specified name.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTable.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTable.RemoveItem(VectorDraw.Professional.Table.vdTableRecord)">
            <summary>
            Remove the passed vdTableRecord object from the collection.
            </summary>
            <param name="Object">The vdTableRecord object to remove from the list.</param>
            <returns>True if the object is removed from the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTable.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdTable object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTable.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdTable object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTable.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTable.GetArrayItems">
            <summary>
            Used with vdTableRecordTypeConverter for GetStandardValues method
            </summary>
            <returns></returns>
        </member>
        <member name="P:VectorDraw.Professional.Table.vdTable.SupportUndoWrite">
            <summary>
            overrides the <see cref="P:VectorDraw.Professional.vdObjects.vdBaseObject.SupportUndoWrite"/>. Always return false for this object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Table.vdTable.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Table.vdTable.ActiveTable">
            <summary>
            Get/Set the Active vdTableRecord object of the vdTable.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Table.vdTable.TableName">
            <summary>
            Get the name of the vdTable object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Table.vdTable.Item(System.Int32)">
            <summary>
            Get a vdTableRecord object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Professional.Table.vdTable.Item(System.String)">
            <summary>
            Get a vdTableRecord object from the collection with the specified name.
            </summary>
            <param name="name">The name of the vdTableRecord to search for.</param>
            <returns>The object with the specified name or null if not found.</returns>
        </member>
        <member name="P:VectorDraw.Professional.Table.vdTable.Items">
            <summary>
            Get the vdArray collection that contains the vdTableRecord objects of the vdTable collection.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Table.vdTables">
            <summary>
            A class that store a collection of <see cref="T:VectorDraw.Professional.Table.vdTable"/> objects
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTables.ToString">
            <summary>
            Gets a System.String that represents the count of the vdTables collection Object.
            </summary>
            <returns>A string representation of the count of this collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTables.#ctor">
            <summary>
            Initializes the vdTables object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTables.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTables.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTables.Contains(System.String)">
            <summary>
            Searches the collection for the specified named object.
            </summary>
            <param name="TableName">The name of the object to be found.</param>
            <returns>True if the object is found , false if not.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTables.Find(System.String)">
            <summary>
            Searches the collection for the passed named object.
            </summary>
            <param name="TableName">The name of the object to search for.</param>
            <returns>The vdTable object with the specified name that exists in the collection or null if the object is not found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTables.AddTableRecord(System.String,System.String)">
            <summary>
            This is a helpfull method to easily add a table and also add a vdTableRecord to the added table.
            </summary>
            <param name="TableName">The name of the vdTable to be added.</param>
            <param name="RecordName">The name of the vdTableRecord object to be added.</param>
            <returns>The vdTableRecord object that was added.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTables.GetTableRecord(System.String,System.String)">
            <summary>
            This is a helpfull method to easily access a vdTablerecord of an existing vdTable object of this collection.
            </summary>
            <param name="TableName">The name of the vdTable to be found.</param>
            <param name="RecordName">The name of the vdTableRecord object to be found.</param>
            <returns>The vdTableRecord object that was found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTables.Add(System.String)">
            <summary>
            Add a vdTable object with the specified name to the collection.
            </summary>
            <param name="TableName">The name of the object to be added.</param>
            <returns>
            The vdTable object that was added to the collection.If an item with the same name exists in the collection , then this item is returned.
            Null is returned if the item cannot be added.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTables.RemoveAll">
            <summary>
            Remove all objects from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTables.RemoveItem(System.String)">
            <summary>
            Removes the vdTable object from the collection with the specified name.
            </summary>
            <param name="TableName">The name of the vdTable object to be removed.</param>
            <returns>True if the object was removed, false if not.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTables.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdTables object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTables.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdTables object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.Table.vdTables.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:VectorDraw.Professional.Table.vdTables.SupportUndoWrite">
            <summary>
            overrides the <see cref="P:VectorDraw.Professional.vdObjects.vdBaseObject.SupportUndoWrite"/>. Always return false for this object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Table.vdTables.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Table.vdTables.Item(System.Int32)">
            <summary>
            Get a vdTable object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The vdTable object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Professional.Table.vdTables.Item(System.String)">
            <summary>
            Get a vdTable object from the collection with the specified name. If an object with the specified name does not exist then it is added to the collection.
            </summary>
            <param name="TableName">The name of the item's that has to be returned.</param>
            <returns>The vdTable object that was added or found to the collection.</returns>
        </member>
        <member name="T:VectorDraw.Professional.Components.vdDocumentComponent">
            <summary>
            This is a Document component that handles the Vectordraw graphics objects without the graphic interface.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Components.vdDocumentComponent.#ctor">
            <summary>
            Initializes the component.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Components.vdDocumentComponent.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes the component and adds it in a container object.
            </summary>
            <param name="container">A IContainer object tha the component will be added.</param>
        </member>
        <member name="M:VectorDraw.Professional.Components.vdDocumentComponent.detach">
            <summary>
            Detach and return the selected <see cref="P:VectorDraw.Professional.Components.vdDocumentComponent.Document"/> object.
            </summary>
            <remarks>
            After the call of this method the selected <see cref="P:VectorDraw.Professional.Components.vdDocumentComponent.Document"/> is null reference.
            </remarks>
        </member>
        <member name="F:VectorDraw.Professional.Components.vdDocumentComponent.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Components.vdDocumentComponent.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Components.vdDocumentComponent.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Components.vdDocumentComponent.Document">
            <summary>
            Get the vdDocument object of the component.
            </summary>
        </member>
        <member name="T:vdColorComboBox.vdColorCombo">
            <summary>
            A Color control to give easy access to the color of the entities.
            </summary>
            <remarks>
            vdColorComboBox is a combobox like control to give you easy access to the Colors.</remarks>
            <remarks>If none entity is selected then the activeColor is shown and you can easily select the activeColor.</remarks>
            <remarks>If entities are selected to the Document then the Color of the entities is shown where you can easily change it.
            </remarks>
        </member>
        <member name="M:vdColorComboBox.vdColorCombo.#ctor">
            <summary>
            The constructor of the Control always necessary.
            </summary>
        </member>
        <member name="M:vdColorComboBox.vdColorCombo.SetColorFont(System.String,System.Single,System.Int32)">
            <summary>
            A method to set the Color's font.
            </summary>
            <param name="name">The name of the font.</param>
            <param name="size">The size of the font.</param>
            <param name="style">The style of the Font <see cref="T:System.Drawing.FontStyle"/></param>
            <remarks> This method is exported specially for vb6 users , for .NET it is better to use directly the ColorFont property.</remarks>
        </member>
        <member name="F:vdColorComboBox.vdColorCombo.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:vdColorComboBox.vdColorCombo.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:vdColorComboBox.vdColorCombo.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:vdColorComboBox.vdColorCombo.ColorSelected">
            <summary>
            Raises when a color is selected and the colorpicker form is hiden. This event can be used to handle the focus on the form that is used.
            </summary>
        </member>
        <member name="P:vdColorComboBox.vdColorCombo.UserColor">
            <summary>
            Use this property to pass a vdColor object to be modified without interfering with the Document.
            </summary>
        </member>
        <member name="P:vdColorComboBox.vdColorCombo.ColorDocument">
            <summary>
            Get/Set the Document that the Control should interact with.
            </summary>
        </member>
        <member name="P:vdColorComboBox.vdColorCombo.ApplicationsMainForm">
            <summary>
            Get/Set the Main Form where the ColorControl is added. This is used only to choose either to open the list upward or downward depending the position and the height of the main application.This property can only be used in .NET applications.
            </summary>
        </member>
        <member name="P:vdColorComboBox.vdColorCombo.BackgroundColor">
            <summary>
            The background color of the combobox.
            </summary>
        </member>
        <member name="P:vdColorComboBox.vdColorCombo.TextColor">
            <summary>
            The color of every text in the combobox.
            </summary>
        </member>
        <member name="P:vdColorComboBox.vdColorCombo.ColorFont">
            <summary>
            Get/Set the font used to display the name of the Color
            </summary>
            <remarks> Default value is Microsoft Sans Serif", 8.25f, FontStyle.Regular.</remarks>
        </member>
        <member name="P:vdColorComboBox.vdColorCombo.ShowIconImage">
            <summary>
            Get/Set a value representing if the icon in front of the combo box is shown.
            </summary>
            <remarks>Default value true</remarks>
        </member>
        <member name="P:vdColorComboBox.vdColorCombo.MinimumSize">
            <summary>
            The minimum size of this control is 150,21
            </summary>
        </member>
        <member name="T:vdColorComboBox.vdColorCombo.ColorSelectedEventHandler">
            <summary>
            Represents the method that will handle the RaiseColorSelected event.
            </summary>
            <param name="sender">The vdColorCombo object.</param>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionMultiline">
            <summary>
            Implements the ActionMultiline object which is used when adding a multiline.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.CommandActions.ActionMultiline.mLine">
            <summary>
            A vdMultiline object created from the action.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionMultiline.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdPrimaries.vdLayout,VectorDraw.Geometry.Vertexes,VectorDraw.Professional.vdFigures.vdMultiline)">
            <summary>
            Initializes the object with the given parameters.
            </summary>
            <param name="reference">A reference point not really required</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
            <param name="verts">The vertexes of the Multiline object.</param>
            <param name="multiline">A vdMultiline object for initial properties of the action's object.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionMultiline.OnMyPositionChanged(VectorDraw.Geometry.gPoint)">
            <summary>
            Called when the mouse position changes.Changes the end point of the created multiline entity in order to be drawn each time the mouse moves.
            </summary>
            <param name="newPosition">A gPoint representing the new mouse position in User Coordinate System.</param>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionMultiline.HideRubberLine">
            <summary>
            Get a value that represents if the rubber line is drawn or not.Returns true since a rubber line is not needed.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionMultiline.Entity">
            <summary>
            The entity which is currently selected for this action.Returns the created vdMultiline.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionMultiline.needUpdate">
            <summary>
            Get a value that represents if the entity should be updated after each position change.Returns true since an update is needed.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionEllipse">
            <summary>
            Implements the ActionEllipse object which is used when adding an ellipse.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionEllipse.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="center">The center of the ellipse.</param>
            <param name="axis1pos">A point that represents the MajorLength of the ellipse.</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionEllipse.OnMyPositionChanged(VectorDraw.Geometry.gPoint)">
            <summary>
            Called when the mouse position changes.Changes the created ellipse entity in order to be drawn each time the mouse moves.
            </summary>
            <param name="newPosition">A gPoint representing the new mouse position in User Coordinate System.</param>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionEllipse.HideRubberLine">
            <summary>
            Get a value that represents if the rubber line is drawn or not.Returns false since a rubber line is needed.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionEllipse.Entity">
            <summary>
            The entity which is currently selected for this action.Returns the created ellipse.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionEllipse.needUpdate">
            <summary>
            Get a value that represents if the entity should be updated after each position change.Returns true since an update is needed.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.RemoveAllItemsEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdCollections.vdSelection.OnRemoveAllItems"/> event.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.RemoveItemEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdCollections.vdSelection.OnRemoveItem"/> event.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.AddItemEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdCollections.vdSelection.OnAddItem"/> event.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.AfterAddItemEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdCollections.vdSelection.OnAfterAddItem"/> event.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.UserChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdCollections.vdSelection.OnUserChanged"/> event.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.vdSelection">
            <summary>
            Implements the vdSelection object which is a collection of vdFigure objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.RaiseOnUserChanged">
            <summary>
            Raizes the <see cref="E:VectorDraw.Professional.vdCollections.vdSelection.OnUserChanged"/> event.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.#ctor">
            <summary>
            Initializes the vdSelection collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.#ctor(System.String)">
            <summary>
            Initializes the vdSelection collection object with the specified name.
            </summary>
            <param name="name">The name of the created vdSelection object.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.ToString">
            <summary>
            Gets a System.String that represents the count of the vdSelection collection Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.AddItem(VectorDraw.Professional.vdPrimaries.vdFigure,System.Boolean,VectorDraw.Professional.vdCollections.vdSelection.AddItemCheck,System.Boolean)">
            <summary>
            Addds a vdFigure object to the collection.
            </summary>
            <param name="value">The vdFigure object to be added to the collection.</param>
            <param name="checkExisting">If this value is true checks the collection 
            if the object is already in the collection and if so returns true.</param>
            <param name="checking">Enumerator for checking options while adding this item to the collection.</param>
            <param name="IgnoreGroups">If true then groups are ignored when adding items to the collection.</param>
            <returns>True if the object was succesfully added to the collection.</returns>
            <remarks>Entities in lock layers are not added if checking contains <see cref="F:VectorDraw.Professional.vdCollections.vdSelection.AddItemCheck.RemoveLockLayerEntities"/>value or <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethod"/> does not contain the value of <see cref="F:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum.EnableAddToSelections"/>.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.AddItem(VectorDraw.Professional.vdPrimaries.vdFigure,System.Boolean,VectorDraw.Professional.vdCollections.vdSelection.AddItemCheck)">
            <summary>
            Addds a vdFigure object to the collection.
            </summary>
            <param name="value">The vdFigure object to be added to the collection.</param>
            <param name="checkExisting">If this value is true checks the collection 
            if the object is already in the collection and if so returns true.</param>
            <param name="checking">Enumerator for checking options while adding this item to the collection.</param>
            <returns>True if the object was succesfully added to the collection.</returns>
            <remarks>Entities in lock layers are not added if checking contains <see cref="F:VectorDraw.Professional.vdCollections.vdSelection.AddItemCheck.RemoveLockLayerEntities"/>value or <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethod"/> does not contain the value of <see cref="F:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum.EnableAddToSelections"/>.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.Reverse">
            <summary>
            Changes the order of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.FindItem(VectorDraw.Professional.vdPrimaries.vdFigure)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">A vdFigure object to be checked if it exists in the collection</param>
            <returns>True if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
            <remarks>
            Raizes the <see cref="M:VectorDraw.Professional.vdCollections.vdSelection.RaiseOnRemoveAllItems"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.RemoveItem(VectorDraw.Professional.vdPrimaries.vdFigure)">
            <summary>
            Removes a specific vdFigure object from the collection.
            </summary>
            <param name="Object">The vdFigure object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
            <remarks>
            Raizes the <see cref="M:VectorDraw.Professional.vdCollections.vdSelection.RaiseOnRemoveItem(System.Object)"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.RemoveAt(System.Int32)">
            <summary>
            Removes an object from the specified index of the collection.
            </summary>
            <param name="Index">The zero based index.</param>
            <remarks>
            Raizes the <see cref="M:VectorDraw.Professional.vdCollections.vdSelection.RaiseOnRemoveItem(System.Object)"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.InsertAt(System.Int32,VectorDraw.Professional.vdPrimaries.vdFigure)">
            <summary>
            Insert a vdFigure object to a specified index of the collection.
            </summary>
            <param name="Index">The zero based index of the collection where the object will be inserted.</param>
            <param name="Object">The vdFigure object which will be inserted.</param>
            <remarks>
            raizes the <see cref="M:VectorDraw.Professional.vdCollections.vdSelection.RaiseOnAddItem(System.Object)"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.ChangeOrder(VectorDraw.Professional.vdPrimaries.vdFigure,System.Boolean)">
            <summary>
            Changes the position of a vdFigure object to the front or the end of the collection.
            </summary>
            <param name="Object">The vdFigure object.</param>
            <param name="ToBack">If true moves the object to the beginning of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.swap(VectorDraw.Professional.vdPrimaries.vdFigure,VectorDraw.Professional.vdPrimaries.vdFigure)">
            <summary>
            Swaps the position between two different vdFigure objects existing in the collection.
            </summary>
            <param name="Object1">first object needed.</param>
            <param name="Object2">second object needed.</param>
            <returns>True if the swap operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.AddRange(VectorDraw.Professional.vdCollections.vdSelection,VectorDraw.Professional.vdCollections.vdSelection.AddItemCheck)">
            <summary>
            Adds all vdFigure objects from the passed collection to this collection.
            </summary>
            <param name="set">Another vdSelection collection from which the vdFigure objects will be added to this list.</param>
            <param name="checking">Enumerator with check options when adding vdFigure objects to the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.AddRange(VectorDraw.Professional.vdCollections.vdEntities,VectorDraw.Professional.vdCollections.vdSelection.AddItemCheck)">
            <summary>
            Adds all vdFigure objects from the passed collection to this collection.
            </summary>
            <param name="set">A vdEntities collection from which the vdFigure objects will be added to this list.</param>
            <param name="checking">Enumerator with check options when adding vdFigure objects to the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.Sort(System.Collections.Generic.IComparer{VectorDraw.Professional.vdPrimaries.vdFigure})">
            <summary>
            Sorts the entities of the Selection taking into consideration the passed comparer.
            </summary>
            <param name="comparer">A System.Collections.Generic.IComparer&lt;vdFigure&gt; class comparer.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.GetBoundingBox">
            <summary>
            Gets the Bounding Box of all vdFigure objects of the collection.
            </summary>
            <returns>A box as a result of adding all Bounding Boxes of all entities of the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.Invalidate(System.Double)">
            <summary>
            Invalidates the collection's Bounding Box and causes the control to be redrawn in this region.
            </summary>
            <param name="additionalWidth">Additional width is added to the box and is in View Coordinate System(VCS).</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.Invalidate">
            <summary>
            Invalidates the collection's Bounding Box and causes the control to be redrawn in this region.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the objects of the collection with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.ShowGrips(System.Boolean)">
            <summary>
            Depending from the parameter the grip points of the objects of the collection are drawn or not.
            </summary>
            <param name="nvalue">If true when the objects of the collection are drawn the grips are drawn too.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.Select(VectorDraw.Render.RenderSelect.SelectingMode,VectorDraw.Geometry.gPoints)">
            <summary>
            Selects and adds vdFigure objects to the collection.
            </summary>
            <param name="mode">The type of the selection that will be used.</param>
            <param name="pts">Points in View Coordinate System(ViewCS).Depending the type of the select 1 or more points.</param>
            <returns>True if vdFigure objects were added to the collection.</returns>
            <remarks>Entities in lock layers are not added if <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethod"/> does not contain the value of <see cref="F:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum.EnableAddToSelections"/>.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.RenderToGraphics(System.Drawing.Graphics,System.Drawing.Bitmap,System.Drawing.Color,VectorDraw.Render.vdRender,System.Drawing.Size,VectorDraw.Geometry.Box)">
            <summary>
            Renders the objects of the selection in a GDI+ graphics render.
            </summary>
            <param name="gr">The GDI+ graphics render.</param>
            <param name="MemoryGraphicsBitmap">null or the selected bitmap of the gr Graphics.</param>
            <param name="bkcolor">The back color used.</param>
            <param name="matchingRenderProperties">null or A vdRender object from which all properties will be copied to the new render.</param>
            <param name="imagesize">The size(width,height) of the graphics</param>
            <param name="renderingArea">A box representing the rendering area(viewcenter,viewsize etc...) in View Coordinate System(ViewCS).</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.ToImage(System.Drawing.Color,VectorDraw.Render.vdRender,System.Drawing.Size,VectorDraw.Geometry.Box)">
            <summary>
            Renders the objects of the collection to a GDI+ Bitmap object.
            </summary>
            <param name="bkcolor">The back color.</param>
            <param name="matchingRenderProperties">null or A vdRender object from which all properties will be copied to the new render.</param>
            <param name="imagesize">The size(width,height) of the graphics</param>
            <param name="renderingArea">A box representing the rendering area(viewcenter,viewsize etc...) in View Coordinate System(ViewCS).</param>
            <returns>Returns the GDI+ Bitmap object created.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.ToDocument(VectorDraw.Geometry.gPoint)">
            <summary>
            Creates and Returns a vdDocument object contaning to it's model all the vdFigure objects of the collection.
            </summary>
            <param name="basepoint">The basepoint of the created vdDocument object.</param>
            <returns>A vdDocument object contaning all entities from the collection to it's model.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.Draw(VectorDraw.Render.vdRender,VectorDraw.Professional.vdCollections.vdLights)">
            <summary>
            Draws the entities of the collection to a specified vdRender object.
            </summary>
            <param name="render">A vdRender object where the entities will be drawn.</param>
            <param name="Lights">A collection of lights to be added to the render.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.FilterSelect(VectorDraw.Professional.vdObjects.vdFilterObject,System.Boolean)">
            <summary>
            Applies a filter to the collection's Document and adds all entities to the collection that pass the filter.
            </summary>
            <param name="filter">A vdFilterObject with the checking parameters.</param>
            <param name="applyToXrefs">If it is true search is performed also in ExternalReferences of the collection's Document.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.FilterSelect(VectorDraw.Professional.vdObjects.vdFilterObject)">
            <summary>
            Applies a filter to the collection's Document and adds all entities to the collection that pass the filter.
            </summary>
            <param name="filter">A vdFilterObject with the checking parameters.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.ApplyFilter(VectorDraw.Professional.vdObjects.vdFilterObject)">
            <summary>
            Applies a filter to the collection specified by a <see cref="T:VectorDraw.Professional.vdObjects.vdFilterObject"/>
            </summary>
            <param name="filter">A vdFilterObject specifying filter parameters.</param>
            <returns>False if the filter is null else true.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.
            User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdSelection object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdSelection object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelection.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements the vdSelection object which is a collection of vdFigure objects.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdSelection.IgnoreGroups">
            <summary>
            A boolean value that controls if groups will be ignored , internally used to avoid entities to be entered multiple times in collections.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdSelection.FreezeEvents">
            <summary>
            Get/Set a boolean value representing if the vdSelection events will be fired or not.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdCollections.vdSelection.OnRemoveAllItems">
            <summary>
            Occurs after removing all items from the collection.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdCollections.vdSelection.OnRemoveItem">
            <summary>
            Occurs after removing an item from the collection.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdCollections.vdSelection.OnAddItem">
            <summary>
            Occurs before adding one item to the collection.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdCollections.vdSelection.OnAfterAddItem">
            <summary>
            Occurs after adding one item to the collection.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdCollections.vdSelection.OnUserChanged">
            <summary>
            Occurs when the collection is changed( an item was added or removed).
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdSelection.HighLight">
            <summary>
            Get/Set the hightlight of the objects of the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdSelection.Name">
            <summary>
            Get/Set the name of the selection.
            </summary>
            <exception cref="T:VectorDraw.Professional.Exceptions.CannotRenameException">Thrown when cannot rename an object.</exception>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdSelection.ListPosition">
            <summary>
            Gets the <see cref="T:VectorDraw.Generics.IListPosition"/> interface object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdSelection.Item(System.Int32)">
            <summary>
            Get a vdFigure object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The vdFigure object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdSelection.Last">
            <summary>
            Returns the last item in the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdSelection.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.vdSelection.DragDropEffects">
            <summary>
            Specifies the effects of a drag-and-drop operation.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdCollections.vdSelection.DragDropEffects.Scroll">
            <summary>
            Scrolling is about to start or is currently occurring in the drop target.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdCollections.vdSelection.DragDropEffects.All">
            <summary>
            The data is copied, removed from the drag source, and scrolled in the drop target.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdCollections.vdSelection.DragDropEffects.None">
            <summary>
            The drop target does not accept the data.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdCollections.vdSelection.DragDropEffects.Copy">
            <summary>
            The data is copied to the drop target.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdCollections.vdSelection.DragDropEffects.Move">
            <summary>
            The data from the drag source is moved to the drop target.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdCollections.vdSelection.DragDropEffects.Link">
            <summary>
            The data from the drag source is linked to the drop target.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.vdSelection.AddItemCheck">
            <summary>
            Specifies a check for items to be added to the collection.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdCollections.vdSelection.AddItemCheck.Nochecking">
            <summary>
            All items are added.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdCollections.vdSelection.AddItemCheck.RemoveInVisibleEntities">
            <summary>
            Invisible items removed.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdCollections.vdSelection.AddItemCheck.RemoveLockLayerEntities">
            <summary>
            Items that belong to locked layers removed.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdCollections.vdSelection.AddItemCheck.RemoveInVisibleAndLockLayer">
            <summary>
            Invisible items and items that belong to locked layers removed.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.vdLayers">
            <summary>
            Implements the vdLayers collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.AddResolveProperty(System.Object,System.String,System.String)">
            <summary>
            Adds the parameters to the resolve list of the collection.
            </summary>
            <param name="_ObjectOfProperty">The object with the property to set(for example a vdDimension object).</param>
            <param name="_PropertyName">A string representing the property name of the object(for example "Style")</param>
            <param name="_TableName">A string representing the table name.(for example "mystyle1").</param>
            <remarks>The resolve list of the collections is used to set to an object a property that is equal to 
            an item of the list which may not be added yet to the collection. This is usually used when opening a 
            format and you want to add a layer to a vdFigure and it is not certain that the layer is already added 
            to the document.Use resolve list at the end of an open procedure of a format to resolve these properties.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.ResolveProperties">
            <summary>
            Resolves all the properties added with the <see cref="M:VectorDraw.Professional.vdCollections.vdLayers.AddResolveProperty(System.Object,System.String,System.String)"/> function.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.getUniqueTableName(System.String)">
            <summary>
            Creates a unique string for use as name to a vdLayer object.
            </summary>
            <param name="prefix">A prefix string that will be present to the unique name.</param>
            <returns>Returns a unique string.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.GetNotDeletedItemsAndVisibleOnForms">
            <summary>
            Get all non deleted objects of the collection.
            </summary>
            <returns>
            Returns a new created collection of vdLayer objects that are not set as <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.Deleted"/> and also <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayer.VisibleOnForms"/> is true. The array is sorted alphabetically by the name of the object.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.GetNotDeletedItems">
            <summary>
            Get all non deleted objects of the collection.
            </summary>
            <returns>
            Returns a new created collection of vdLayer objects 
            that are not set as <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.Deleted"/>.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.IsDefault(VectorDraw.Professional.vdObjects.vdPrimary)">
            <summary>
            Checks if the parameter passed is the standard vdLayer object.
            </summary>
            <param name="obj">A vdPrimary object to be checked if it is equal referenced to the standard vdLayer object.</param>
            <returns>True if the passed object is equal referenced with the standard vdLayer object of the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.ToString">
            <summary>
            Gets a System.String that represents the count of the vdLayers collection Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.#ctor">
            <summary>
            Initializes the vdLayers collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.Purge">
            <summary>
            Sets as Deleted all vdLayers that are not being used in the Collection's Document.
            </summary>
            <returns>Returns the number of unused vdLayers objects that where set as Deleted.</returns>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnEraseObject"/> event for each deleted item.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.EnsureDefaults">
            <summary>
            Ensures the default values to the properties of the standard vdLayer object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.InitDefaults(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Ensures the existance of the standard vdLayer object and also sets the document parameter
            to be the document of the collection.
            </summary>
            <param name="document">The Document object of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.GetGroupReferences(VectorDraw.Professional.vdObjects.vdPrimary)">
            <summary>
            Returns all vdPrimary objects (vdLayersGroup or vdLayersFilter) that have the passed object as GroupOwner.
            </summary>
            <param name="group">The vdLayersGroup object to search for.</param>
            <returns>A collection of vdPrimary objects that have the passed parameter as GroupOwner.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.FindItem(VectorDraw.Professional.vdPrimaries.vdLayer)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">A vdLayer object to be checked if it exists in the collection</param>
            <returns>True if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.FindFromId(System.Int32)">
            <summary>
            Gets an object that belongs to collection passing through its ID number.
            </summary>
            <param name="id">A unique id for the object.</param>
            <returns>
            An object that belongs to collection with specified id property.
            Null if the object id does not belong to the collection.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.AddItem(VectorDraw.Professional.vdPrimaries.vdLayer)">
            <summary>
            Adds a vdLayer object to the collection.
            </summary>
            <param name="value">The vdLayer object to be added to the collection.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAddItem"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterAddItem"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
            <remarks>
            All vdLayer objects are removed even the standard.Call EnsureDefaults method in 
            order to create the standard vdLayer object after removing all the item's of the collection.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.RemoveItem(VectorDraw.Professional.vdPrimaries.vdLayer)">
            <summary>
            Removes a specific vdLayer object from the collection.
            </summary>
            <param name="Object">The vdLayer object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.RemoveAt(System.Int32)">
            <summary>
            Removes an object from the specified index of the collection.
            </summary>
            <param name="Index">The zero based index.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.InsertAt(System.Int32,VectorDraw.Professional.vdPrimaries.vdLayer)">
            <summary>
            Insert a vdLayer object to a specified index of the collection.
            </summary>
            <param name="Index">The zero based index of the collection where the object will be inserted.</param>
            <param name="Object">The vdLayer object which will be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.ChangeOrder(VectorDraw.Professional.vdPrimaries.vdLayer,System.Boolean)">
            <summary>
            Changes the position of a vdLayer object to the front or the end of the collection.
            </summary>
            <param name="Object">The vdLayer object.</param>
            <param name="ToBack">If true moves the object to the beginning of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.MakeIndexDictionary">
            <summary>
            Creates an Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must be followed by a <see cref="M:VectorDraw.Professional.vdCollections.vdLayers.ClearIndexDictionary"/> call when the search or swap is finished. </remarks>
            <example> For a code example please check topic <see cref="M:VectorDraw.Professional.vdCollections.vdLayers.swap(VectorDraw.Professional.vdPrimaries.vdLayer,VectorDraw.Professional.vdPrimaries.vdLayer)"/> Method. </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.ClearIndexDictionary">
            <summary>
            Clears the Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must follow a <see cref="M:VectorDraw.Professional.vdCollections.vdLayers.MakeIndexDictionary"/> call when the search or swap is finished. </remarks>
            <example> For a code example please check topic <see cref="M:VectorDraw.Professional.vdCollections.vdLayers.swap(VectorDraw.Professional.vdPrimaries.vdLayer,VectorDraw.Professional.vdPrimaries.vdLayer)"/> Method. </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.swap(VectorDraw.Professional.vdPrimaries.vdLayer,VectorDraw.Professional.vdPrimaries.vdLayer)">
            <summary>
            Swaps the position between two different vdLayer objects existing in the collection.
            </summary>
            <param name="Object1">first object needed.</param>
            <param name="Object2">second object needed.</param>
            <returns>True if the swap operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.InsertCopyOf(VectorDraw.Professional.vdPrimaries.vdLayer)">
            <summary>
            Adds a clone of the obj in the collection if it is not exist.
            </summary>
            <param name="obj">The object to be added.</param>
            <returns>The new added item.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.Add(System.String)">
            <summary>
            Creates and adds a vdLayer object to the collection with the specified name.
            </summary>
            <param name="Name">The name of the inserted vdLayer object.</param>
            <returns>Returns the added vdLayer object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.FindName(System.String)">
            <summary>
            Finds a vdLayer object with the specified name in the collection.
            </summary>
            <param name="Name">The name to search in the collection.</param>
            <returns>The found object else returns null if a vdLayer does not exist with this name.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdLayers object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdLayers object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.RemoveItem(System.Object)">
            <summary>
            Removes an object from the collection.
            </summary>
            <param name="item">The object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.AddItem(System.Object)">
            <summary>
            Adds an object to the collection.
            </summary>
            <param name="value">The object to be added.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.FindItem(System.Object)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">The object required for the search.</param>
            <returns>true if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.VectorDraw#Professional#vdCollections#IvdObjectCollection#Item(System.Int32)">
            <summary>
            Retreave a specific item placed at a specified index from the collection.
            </summary>
            <param name="Index">The index where the object is.</param>
            <returns>Returns the object at the specified index.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.GetObjectRealPosition(System.Object)">
            <summary>
            Find the index where a specified object is located in the list.
            </summary>
            <param name="item">The object to find.</param>
            <returns>Returns the index where the object is or -1 if the object is not in the list.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.InsertAt(System.Int32,System.Object)">
            <summary>
            Insert an object at a specified index.
            </summary>
            <param name="index">The index where the object will be inserted.</param>
            <param name="item">The object to be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLayers.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements the vdLayers collection object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLayers.ItemType">
            <summary>
            Returns the Type of Items in the collection
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLayers.Standard">
            <summary>
            Get the standard vdLayer object existing to the collection with name "0".
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLayers.ListPosition">
            <summary>
            Gets the <see cref="T:VectorDraw.Generics.IListPosition"/> interface object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLayers.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLayers.Item(System.Int32)">
            <summary>
            Get a vdLayer object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The vdLayer object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLayers.Last">
            <summary>
            Returns the last item in the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLayers.LayersGroups">
            <summary>
            Get/Set tha layers groups that belong to this layer collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLayers.LayersFilters">
            <summary>
            Get/Set the layers filters that belong to this layer collection.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.HatchPatternTypeConverterNoExpand">
            <summary>
             Internally used. 
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.HatchPatternTypeConverterNoExpand.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Internally used. 
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.HatchPatternTypeConverterNoExpand.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Internally used. 
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.HatchPatternTypeConverterNoExpand.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
             Internally used. 
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.HatchPatternTypeConverterNoExpand.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Internally used. 
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.HatchPatternTypeConverter">
            <summary>
             Internally used. 
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.HatchPatternTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Internally used. 
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.HatchPatternTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Internally used. 
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.HatchPatternTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
             Internally used. 
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.HatchPatternTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Internally used. 
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdHatchPattern">
            <summary>
            Implements all functionality for the vdHatchPattern object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdHatchPattern.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdHatchPattern.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes the vdHatchPattern object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this constructor the is no need to call the SetUnRegisterDocument method in order to register the Document of this object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdHatchPattern.#ctor(VectorDraw.Professional.vdObjects.vdDocument,System.String)">
            <summary>
            Initializes the vdHatchPattern object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <param name="name">The name of the hatchpattern object.</param>
            <remarks>Calling this constructor the is no need to call the SetUnRegisterDocument method in order to register the Document of this object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdHatchPattern.#ctor">
            <summary>
            Initializes the vdHatchPattern object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdHatchPattern.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.
            User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdHatchPattern.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdHatchPattern.InitializeProperties">
            <summary>
            Resets the properties of the vdHatchPattern object to the Default values.
            </summary>
            <remarks>
            Removes all PatternLines and set the name = "SOLID".
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdHatchPattern.CopyFrom(VectorDraw.Professional.vdPrimaries.vdHatchPattern)">
            <summary>
            Copies all properties from another vdHatchPattern object.
            </summary>
            <param name="from">The vdHatchPattern object from which the properties will be copied.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdHatchPattern.ToString">
            <summary>
            Gets a System.String that represents the name of the vdHatchPattern Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdHatchPattern.IsSolid">
            <summary>
            Check if the vdHatchPattern object is solid.
            </summary>
            <returns>True if the vdHatchPattern is solid.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdHatchPattern.IsByDpiy">
            <summary>
            Checks if this object represents a specific hatch pattern(standard patterns:u10,u20,U10_45,U10_135,U10_90,U10_45_135).
            These objects are using a constant offset between pattern lines (0.0833 inches )whatever the active zoom is.
            </summary>
            <returns>A boolean value representing if this pattern is one of the following:u10,u20,U10_45,U10_135,U10_90,U10_45_135.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdHatchPattern.ModifyByDpi(System.Double,System.Double)">
            <summary>
             if the object is <see cref="M:VectorDraw.Professional.vdPrimaries.vdHatchPattern.IsByDpiy"/> modifies its pattern lines depend on the passed DPI and pixelsize.
            </summary>
            <param name="dpi">Dots per Inch of rendering context.</param>
            <param name="pixelsize">The size in Drawing Units of one pixel of render drawing context.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdHatchPattern.Transform(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdHatchPattern.Transform(System.Double,System.Double)">
            <summary>
            Transforms all the geometrical properties of the object with the specific rotation and scale.
            </summary>
            <param name="rotation">The rotation for the transformation.</param>
            <param name="scale">The scale for the transformation.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdHatchPattern.Update">
            <summary>
            Overrides the <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.Update"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdHatchPattern.OnOwnerChanged">
            <summary>
            Overrides the <see cref="M:VectorDraw.Professional.vdObjects.vdBaseObject.OnOwnerChanged"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdHatchPattern.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdHatchPattern object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdHatchPattern.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdHatchPattern object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdHatchPattern.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements all functionality for the vdHatchPattern object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdHatchPattern.Name">
            <summary>
            Get/Set the name of the vdHatchPattern object.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <exception cref="T:VectorDraw.Professional.Exceptions.InvalidTableNameException"></exception>
            <exception cref="T:VectorDraw.Professional.Exceptions.CannotRenameException">Thrown when cannot rename an object.</exception>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdHatchPattern.PatternLines">
            <summary>
            Get/Set the Pattern Lines of the object.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdHatchPattern.Deleted">
             <summary>
             Get/Set a property that marks the object as Deleted or not.
             </summary>
            <exception cref="T:VectorDraw.Professional.Exceptions.CannotDeleteException">Thrown when an object cannot be deleted.</exception>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdHatchPattern.VisibleOnForms">
            <summary>
            Get/Set a boolean value representing if the vdHatchPattern will be viewed in Vectordraw forms.
            </summary>
            <remarks>
            Default value is true.
            The ToString value of the vdHatchPatterns also takes consideration this value and if it is false then the count returned does not contain these items.
            </remarks>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdLight">
            <summary>
            Implements all functionality for the vdLight object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLight.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes a new instance of the vdLight object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLight.#ctor">
            <summary>
            Initializes the vdLight object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLight.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLight.GetGripPoints">
            <summary>
            A function returning the grip points of the object.
            </summary>
            <returns>Returns a new instance of gpoints object containing the grip points of the object.</returns>
            <remarks>
            The returning points are in World coordinate system(WCS).
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetGripPoints"/> event.
            When implementing this method the <see cref="M:VectorDraw.Professional.vdFigures.vdLight.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)"/> must be also override according to the new selected grip points.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLight.InitializeProperties">
            <summary>
            Resets the properties of the vdLight object to the Default values.
            </summary>
            <remarks >
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLight.SetDirectionalLight(VectorDraw.Geometry.Vector,VectorDraw.Professional.vdFigures.vdLight.LightIntensity,System.Drawing.Color)">
            <summary>
            Initializes a directional light with the given parameters.
            </summary>
            <param name="direction">The direction of the light.</param>
            <param name="intensity">The intensity of the light.</param>
            <param name="_color">The color of the light.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLight.SetPositionlLight(VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdFigures.vdLight.LightIntensity,System.Drawing.Color)">
            <summary>
            Initializes a positional light with the given parameters.
            </summary>
            <param name="position">The position of the light.</param>
            <param name="intensity">The intensity of the light.</param>
            <param name="_color">The color of the light.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLight.SetSpotLight(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector,System.Double,VectorDraw.Professional.vdFigures.vdLight.LightIntensity,System.Drawing.Color)">
            <summary>
            Initializes a spot light with the given parameters.
            </summary>
            <param name="position">The position of the light.</param>
            <param name="direction">The direction of the light.</param>
            <param name="spotAngle">The angle of the spot light.</param>
            <param name="intensity">The intensity of the light.</param>
            <param name="_color">The color of the light.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLight.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLight.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)">
            <summary>
            This function is intended to be called during a grip edit of the object. 
            </summary>
            <param name="Indexes">Represents a zero based array of the grip indexes that will be moved.</param>
            <param name="dx">The dx distance that the grip is moved.</param>
            <param name="dy">The dy distance that the grip is moved.</param>
            <param name="dz">The dz distance that the grip is moved.</param>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdLight.GetGripPoints"/>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnMoveGripPointsAt"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLight.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Called in order to draw the object in a specified vdRender object.
            </summary>
            <param name="render">The vdRender object in which the object will be drawn.</param>
            <returns><see cref="T:VectorDraw.Render.vdRender.DrawStatus"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLight.ToString">
            <summary>
            Gets a System.String that represents the type of the vdLight Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLight.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdLight object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLight.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdLight object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdLight.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements all functionality for the vdLight object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLight.Name">
            <summary>
            Get/Set the name of the light.
            </summary>
            <remarks>
            Default value "".
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLight.Enable">
            <summary>
            Get/Set a boolean value indicating if the light is enabled.
            </summary>
            <remarks>
            Default value true.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLight.TypeOfLight">
            <summary>
            Get/Set the type of the light.
            </summary>
            <remarks>
            When setting this value the light gets the default values in order to be directional,positional or spot.
            If the <see cref="P:VectorDraw.Professional.vdFigures.vdLight.GlobalLight"/> property is true then this property is always return <see cref="F:VectorDraw.Professional.vdFigures.LightType.Directional"/> and the <see cref="P:VectorDraw.Professional.vdFigures.vdLight.Direction"/> property is relative to Current View Co-ordinate System.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLight.SpotDirection">
            <summary>
            This property is used for backword compatibillity.Use <see cref="P:VectorDraw.Professional.vdFigures.vdLight.Direction"/> property instead.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLight.Direction">
            <summary>
            Direction vector only for directional light.
            </summary>
            <remarks>
            Default value (0.0,0.0,-1.0)
            If the <see cref="P:VectorDraw.Professional.vdFigures.vdLight.GlobalLight"/> property is true then this value is relative to Current View Co-ordinate System.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLight.Position">
            <summary>
            Get/Set the Position in World Co-ordinate System.
            </summary>
            <remarks>
            If the <see cref="P:VectorDraw.Professional.vdFigures.vdLight.GlobalLight"/> property is true then this value is (0,0,0) relative to Current View Co-ordinate System.
            Default value (0.0,0.0,0.0)
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLight.IntensityValue">
            <summary>
            Light's intensity in range 0 - 255.
            </summary>
            <remarks>
            Valid range between 0 to 255.Default value 0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLight.Intensity">
            <summary>
            Light's intensity.
            </summary>
            <remarks>
            Default value LightIntensity.Low.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLight.SpotAngle">
            <summary>
            Get/Set the half angle of the Spot's light cone in degrees used only for Spot light type.
            </summary>
            <remarks>
            Default value is 45 degrees.
            Values between 0 to 90 are accepted for  Spot light type
            Not used for Positional and Directional and always returns 180 for these types.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLight.SpotFallOff">
            <summary>
            Get/Set the angle in degrees that defines a ring on the outer side of a spot light where the light will fade to darkness.
            </summary>
            <remarks>
            Currently for internal use only.
            Default value is 0 degrees.This means no fading.
            Values between 0 to  <see cref="P:VectorDraw.Professional.vdFigures.vdLight.SpotAngle"/>
            Not used for Positional and Directional.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLight.color">
            <summary>
            Get/Set the color of the Light.
            </summary>
            <remarks>
            Default value black.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLight.BoundingBox">
            <summary>
            Gets the Bounding Box of the vdLight object in WorldCoordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLight.VisibleIn2d">
            <summary>
            Get/Set a boolean value indicating if the vdLight object will be drawn when in 2D mode.
            </summary>
            <remarks>
            Default value false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLight.GlobalLight">
            <summary>
            Get the default global light.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLight.Layer">
            <summary>
            Returns the Layer of the object
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLight.Handle">
            <summary>
            Gets a unique object for the Document that represents the handle of the object.
            </summary>
            <remarks>Default value is 0 and when the object becames DocumentRegistered generates a new unique value. </remarks>
            <seealso cref="T:VectorDraw.Professional.vdObjects.vdHandle"/>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLight.Label">
            <summary>
            Get/Set a label string for the object
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLight.Draw3DFlag">
            <summary>
            Get/Set a property value used when drawing an object in 3d.
            Not used for a vdLight object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLight.XProperties">
            <summary>
            Gets the Collection of vdXproperties of the object.
            </summary>
            <seealso cref="T:VectorDraw.Professional.vdCollections.vdXProperties"/>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLight.PenColor">
            <summary>
            Not used for a vdLight object.Use <see cref="P:VectorDraw.Professional.vdFigures.vdLight.color"/> property instead.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLight.HighLight">
            <summary>
            Get/Set the value indicating if the lines of the object will be drawn as dashed.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLight.LineType">
            <summary>
            Get/Set the vdLinetype object that the vdFigure will be drawn with.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLight.LineTypeScale">
            <summary>
            Get/Set The Linetype scale of the object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLight.LineWeight">
            <summary>
            Get/Set The LineWeight of the object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLight.PenWidth">
            <summary>
            Get/Set the PenWidth in Drawing Units of the object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLight.ToolTip">
            <summary>
            Get/Set a string representing the Tooltip of the object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLight.URL">
            <summary>
            Get/Set a string representing the URL of the object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLight.visibility">
            <summary>
            Get/Set the <see cref="P:VectorDraw.Professional.vdPrimaries.vdFigure.visibility"></see> of the object.
            For a vdLight object use <see cref="P:VectorDraw.Professional.vdFigures.vdLight.Enable"/> property instead.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLight.FadeEffect">
            <summary>
            overrides the <see cref="P:VectorDraw.Professional.vdPrimaries.vdFigure.FadeEffect"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdLight.TransparencyMethod">
            <summary>
            overrides the <see cref="P:VectorDraw.Professional.vdPrimaries.vdFigure.TransparencyMethod"/>
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdLight.LightIntensity">
            <summary>
            Light's intensity.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdLight.LightIntensity.Low">
            <summary>
            Intensity 0.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdLight.LightIntensity.LowMedium">
            <summary>
            Intensity 0.25.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdLight.LightIntensity.Medium">
            <summary>
            Intensity 0.5.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdLight.LightIntensity.MediumHight">
            <summary>
            Intensity 0.75.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdLight.LightIntensity.High">
            <summary>
            Intensity 1.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdAttribDef">
            <summary>
            Implements the vdAttribDef object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdAttribDef.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes a new instance of the vdAttribDef object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdAttribDef.#ctor">
            <summary>
            Initializes a new instance of the vdAttribDef object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdAttribDef.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdAttribDef.InitializeProperties">
            <summary>
            Resets the properties of the vdAttribDef object to the Default values.
            </summary>
            <remarks>
            Default values:InVisibleMode = true,IsConstant = false,ValueString = "Value",PromptString = "Prompt",TagString = "Tag".
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdAttribDef.ToString">
            <summary>
            Gets a System.String that represents the type of the vdAttribDef Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdAttribDef.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdAttribDef object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdAttribDef.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdAttribDef object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdAttribDef.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements the vdAttribDef object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdAttribDef.TextString">
            <summary>
            Gets the Value string of the vdAttribDef object.
            </summary>
            <remarks>
            Default value "Tag".
            This is used internally to draw the vdattrib as vdText object.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdAttribDef.IsConstant">
            <summary>
            Get/Set a value indicating if the Attribute Definition is constant.
            </summary>
            <remarks>
            If this value is true the vdAttrib objects get the value,position indicated
            from the attribute's definition of the block.Default value false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdAttribDef.IsLockedPosition">
            <summary>
            Get/Set a value indicating if the Attribute Definition of the object has Locked Position.
            </summary>
            <remarks>
            If this value is true the vdAttrib object does not show it's grip in any <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.GripBlock"/> value.
            Default value is true.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdAttribDef.InVisibleMode">
            <summary>
            Get/Set if the attributes will be visible or not.
            </summary>
            <remarks>
            Default value false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdAttribDef.ValueString">
            <summary>
            Get/Set the default value string of the vdAttribDef object.This value will get by default vdAttrib objects when inserted.
            </summary>
            <remarks>
            Default value "Value".
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdAttribDef.PromptString">
            <summary>
            Get/Set the prompt string.
            </summary>
            <remarks>
            You can use this value if you want a question to be made when this attribute will be inserted. 
            This question can use this string saved in the vdBlocks information.
            Default value "Prompt".
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdAttribDef.TagString">
            <summary>
            Get/Set the string which identifies each occurrence of the attribute.
            </summary>
            <remarks>
            Default value null.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="T:VectorDraw.Professional.Memory.vdMemory">
            <summary>
            Used for the Memory Garbage Collector.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Memory.vdMemory.Collect">
            <summary>
            Forces garbage collection of all generations.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.ObjectPosition">
            <summary>
            Internally used only for ModicationHistory of the collections ChangeOrder method.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.ObjectPosition.AddObjectPositionHistory(System.Object,System.Int32,VectorDraw.Professional.vdCollections.IvdObjectCollection)">
            <summary>
            Internally used only for ModicationHistory of the collections ChangeOrder method.
            </summary>
            <param name="item"></param>
            <param name="newpos"></param>
            <param name="collection"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.ObjectPosition.Invalidate">
            <summary>
            Internally used only for ModicationHistory of the collections ChangeOrder method.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.ObjectPosition.Position">
            <summary>
            Internally used only for ModicationHistory of the collections ChangeOrder method.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdInfinityLine">
            <summary>
            Implements the vdInfinityLine object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInfinityLine.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes a new instance of the vdInfinityLine object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInfinityLine.#ctor(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Professional.vdFigures.vdInfinityLine.InfinityTypes,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector)">
            <summary>
            Initializes a new instance of the vdInfinityLine object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <param name="infinitytype">The type of the infinity object.</param>
            <param name="basepoint">The base point of the infinity object.</param>
            <param name="direction">The direction vector of the infinity object.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInfinityLine.#ctor">
            <summary>
            Initializes a new instance of the vdInfinityLine object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInfinityLine.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector)">
            <summary>
            Initializes a new instance of the vdInfinityLine object.
            </summary>
            <param name="BasePoint">The Base point of the new created vdInfinityLine object.</param>
            <param name="Direction">The Direction of the new created vdInfinityLine object.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInfinityLine.Invalidate">
            <summary>
            Post a refresh in the object's area.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInfinityLine.TestOffsetSide(VectorDraw.Geometry.gPoint)">
            <summary>
            Tests if a point is left or right a vdInfinityLine object.
            </summary>
            <param name="pt">The point with which the test will be commited in World Coordinate System(WCS).</param>
            <returns>Returns 1.0 if the point pt is right from the line and -1.0 if the point is on the left side of the line.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInfinityLine.getOffsetCurve(System.Double)">
            <summary>
            Creates a new vdInfinityLine object at a specified distance from the existing object.
            </summary>
            <param name="offsetDist">The distance where the new vdInfinityLine object will be created.</param>
            <returns>The new created vdInfinityLine object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInfinityLine.PointOnCurve(VectorDraw.Geometry.gPoint,System.Boolean)">
            <summary>
            Returns if a point belongs to a vdInfinityLine object.
            </summary>
            <param name="pt">A point in WCS or ECS.</param>
            <param name="IsInECS">A boolean value indicating if the point is in ECS or WCS.</param>
            <returns>Returns true if the point belongs to the vdInfinityLine object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInfinityLine.IntersectWith(VectorDraw.Professional.vdPrimaries.vdFigure,VectorDraw.Professional.Constants.VdConstInters,VectorDraw.Geometry.gPoints)">
            <summary>
            Finds the intersection points of an object with another object.
            </summary>
            <param name="pEntity">The entity with which the intersection of the object will be done.</param>
            <param name="intersectOption"><see cref="T:VectorDraw.Professional.Constants.VdConstInters"/> constant</param>
            <param name="intPoints">A precreated gPoints collection in which the instersection points will be added.The points are returned in WCS.</param>
            <returns>True if at least one intersection point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInfinityLine.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInfinityLine.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)">
            <summary>
            <see cref="M:VectorDraw.Professional.vdPrimaries.vdFigure.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)"/>.
            </summary>
            <param name="object2viewcs"></param>
            <param name="mode"></param>
            <param name="pickPoi"></param>
            <param name="LastPoi"></param>
            <param name="SegCount"></param>
            <param name="osnaps"></param>
            <returns>True if at least one osnap point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInfinityLine.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)">
            <summary>
            This function is intended to be called during a grip edit of the vdLine object. 
            </summary>
            <param name="Indexes">Represents a zero based array of the grip indexes that will be moved.</param>
            <param name="dx">The dx distance that the grip is moved.</param>
            <param name="dy">The dy distance that the grip is moved.</param>
            <param name="dz">The dz distance that the grip is moved.</param>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdInfinityLine.GetGripPoints"/>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnMoveGripPointsAt"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInfinityLine.GetGripPoints">
            <summary>
            A function returning the grip points of the object.
            </summary>
            <returns>Returns a new instance of gpoints object containing the grip points of the object.</returns>
            <remarks>
            The returning points are in World coordinate system(WCS).
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetGripPoints"/> event.
            When implementing this method the <see cref="M:VectorDraw.Professional.vdFigures.vdInfinityLine.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)"/> must be also override according to the new selected grip points.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInfinityLine.GetSamplePoints(System.Int32,System.Double)">
            <summary>
            Returns a list of points on the vdCircle object from the start to the end point of the curve.
            </summary>
            <param name="CurveResolution">valid values (1 to 20000)</param>
            <param name="PixelSize">valid values possitive decimal ( &gt;=0)</param>
            <returns>A collection of points belonging to the vdArc in Entity Coordinate System(ECS).</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdCurve.GetSamplePoints(System.Int32,System.Double)"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInfinityLine.InitializeProperties">
            <summary>
            Resets the properties of the vdLine object to the Default values.
            </summary>
            <remarks>
            Default values:StartPoint = EndPoint = new created (0.0,0.0,0.0) gpoints objects.
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInfinityLine.ToString">
            <summary>
            Gets a System.String that represents the type of the vdLine Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInfinityLine.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInfinityLine.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Called in order to draw the object in a specified vdRender object.
            </summary>
            <param name="render">The vdRender object in which the object will be drawn.</param>
            <returns><see cref="T:VectorDraw.Render.vdRender.DrawStatus"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInfinityLine.Trim(VectorDraw.Professional.vdCollections.vdSelection,VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdFigures.vdCurve@)">
            <summary>
            Trim method is not supported for this object.
            </summary>
            <returns>Always False.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInfinityLine.Trim(VectorDraw.Professional.vdCollections.vdSelection,VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdFigures.vdCurve@,System.Boolean)">
            <summary>
            Trim method is not supported for this object.
            </summary>
            <returns>Always False.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInfinityLine.Extend(VectorDraw.Professional.vdCollections.vdSelection,VectorDraw.Geometry.gPoint)">
            <summary>
            Extend method is not supported for this object.
            </summary>
            <returns>Always False.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInfinityLine.Extend(VectorDraw.Professional.vdCollections.vdSelection,VectorDraw.Geometry.gPoint,System.Boolean)">
            <summary>
            Extend method is not supported for this object.
            </summary>
            <returns>Always False.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInfinityLine.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdInfinityLine object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInfinityLine.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdInfinityLine object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInfinityLine.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements the vdInfinityLine object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdInfinityLine.ECSMatrix">
            <summary>
            Gets the matrix which is used to transform vectors or points from the 
            object's object coordinate system (OCS) to the World Coordinate System (WCS).
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdInfinityLine.BoundingBox">
            <summary>
            Returns an infinity Box.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdInfinityLine.BasePoint">
            <summary>
            Get/Set the Base point of the vdInfinityLine object.
            </summary>
            <remarks>
            Default value (0.0,0.0,0.0).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdInfinityLine.InfinityType">
            <summary>
            Get/Set the type of the infinity line, can be RAY or XLINE.
            </summary>
            <remarks>
            Default value XLine.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdInfinityLine.Direction">
            <summary>
            Get/Set the Direction of the vdInfinityLine object.
            </summary>
            <remarks>
            Default value (1.0,0.0,0.0).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdInfinityLine.Draw3DFlag">
            <summary>
            InfinityLines are always excluded from VectorDraw lists since they need to be updated constantly.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdInfinityLine.InfinityTypes">
            <summary>
            Specifies the type of the infinity line.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdInfinityLine.InfinityTypes.Ray">
            <summary>
            The infinity line start from the BasePoint end extends to the direction's vector.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdInfinityLine.InfinityTypes.XLine">
            <summary>
            The infinity line extends in both directions.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.ActionInfinityLine">
            <summary>
            Implements the ActionLine object used when adding a line.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.ActionInfinityLine.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdPrimaries.vdLayout,System.Boolean)">
            <summary>
            Initializes the object with the given paramaters.
            </summary>
            <param name="reference">Start point of the line.</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
            /// <param name="isRay">A boolean value representing if the infinity line is an XRay or an XLine.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.ActionInfinityLine.OnMyPositionChanged(VectorDraw.Geometry.gPoint)">
            <summary>
            Called when the mouse position changes.Changes the end point of the created line entity to be drawn each time the mouse moves..
            </summary>
            <param name="newPosition">A gPoint representing the new mouse position in User Coordinate System.</param>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.ActionInfinityLine.HideRubberLine">
            <summary>
            Get a value that represents if the rubber line is drawn or not.Returns true since a rubber line is not needed.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.ActionInfinityLine.Entity">
            <summary>
            The entity which is currently selected for this action.Returns the created line.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.ActionInfinityLine.needUpdate">
            <summary>
            Get a value that represents if the entity should be updated after each position change.Returns true since an update is needed.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.IvdMappedImages">
            <summary>
            Provides the functionality for the vdMappedImages object.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdMappedImages">
            <summary>
            Implements all functionality of the vdMappedImages object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImages.#ctor">
            <summary>
            Initializes the vdMappedImages object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImages.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.
            User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImages.ToString">
            <summary>
            Gets a System.String that represents the count of the vdMappedImages collection Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImages.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImages.CopyFrom(VectorDraw.Professional.vdObjects.vdMappedImages)">
            <summary>
            Remove all items from this object and copies all items from the input vdMappedImages collection to this object.
            </summary>
            <param name="from">The object from which all items will be added.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImages.AddItem(VectorDraw.Professional.vdObjects.vdMappedImage)">
            <summary>
            Adds a vdMappedImage object to the vdMappedImages.
            </summary>
            <param name="item">A vdMappedImage object to be added to the end of the vdMappedImages.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImages.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImages.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImages.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
            <remarks>The remove information is not added in the Undo History.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImages.Update">
            <summary>
            Update all <see cref="T:VectorDraw.Professional.vdObjects.vdMappedImage"/> items in this collection, so the Binds will be re-calculated.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImages.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImages.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdMappedImages object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImages.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdMappedImages object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImages.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements all functionality of the vdMappedImages object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdMappedImages.Item(System.Int32)">
            <summary>
            Get a vdMappedImage object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The vdMappedImage object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdMappedImages.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.IvdMappedImage">
            <summary>
            Provides the functionality for the vdMappedImage object.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdMappedImage">
            <summary>
            Implements the vdMappedImage object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImage.clipbound(VectorDraw.Render.IBoundingBox)">
            <summary>
            Returns true if the mapped image intersect the passed entity bounding box
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImage.#ctor">
            <summary>
            Initializes the vdMappedImage object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImage.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImage.Finalize">
            <summary>
            object de-constructor
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImage.OnOwnerChanged">
            <summary>
            overrides the <see cref="M:VectorDraw.Professional.vdObjects.vdBaseObject.OnOwnerChanged"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImage.#ctor(VectorDraw.Professional.vdPrimaries.vdImageDef,VectorDraw.Geometry.Matrix)">
            <summary>
            Initializes the vdMappedImage object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImage.#ctor(VectorDraw.Professional.vdPrimaries.vdImageDef,VectorDraw.Geometry.Matrix,VectorDraw.Render.vdRectangle)">
            <summary>
            Initializes the vdMappedImage object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImage.#ctor(VectorDraw.Professional.vdPrimaries.vdImageDef,VectorDraw.Geometry.gPoint,System.Double,System.Double,VectorDraw.Render.vdRectangle)">
            <summary>
            Initializes the vdMappedImage object.
            </summary>
            <param name="materialimage">A <see cref="T:VectorDraw.Professional.vdPrimaries.vdImageDef"/> existing in document Images collection.</param>
            <param name="origin">The origin in World Coordinate System where the LowerLeft point of the image will be mapped to.</param>
            <param name="rotation">The rotation of the image in radians in Counter-Clockwise direction.</param>
            <param name="scale">The Scale of the Image.Represents the drawing units that width of SourceRect  will be mapped to.</param>
            <param name="sourceRect">The sub rectangle that is used to map the image over a surface or vdRectangle.Empty to map the whole image edge.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImage.#ctor(VectorDraw.Professional.vdPrimaries.vdImageDef,VectorDraw.Geometry.Box,VectorDraw.Render.vdRectangle)">
            <summary>
            Initializes the vdMappedImage object.
            </summary>
            <param name="materialimage">A <see cref="T:VectorDraw.Professional.vdPrimaries.vdImageDef"/> existing in document Images collection.</param>
            <param name="destRect">Destination boundary box in World coordinate system.</param>
            <param name="sourceRect">Source rectangle in pixels relative to the raster image boundary.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImage.#ctor(VectorDraw.Professional.vdPrimaries.vdImageDef,VectorDraw.Geometry.gPoint,System.Double,System.Double,System.Double,VectorDraw.Render.vdRectangle)">
            <summary>
            Initializes the vdMappedImage object.
            </summary>
            <param name="materialimage">A <see cref="T:VectorDraw.Professional.vdPrimaries.vdImageDef"/> existing in document Images collection.</param>
            <param name="origin">The origin in World Coordinate System where the LowerLeft point of the image will be mapped to.</param>
            <param name="rotation">The rotation of the image in radians in Counter-Clockwise direction.</param>
            <param name="scaleX">The Scale in X direction of the Image.Represents the drawing units that width of SourceRect  will be mapped to.</param>
            <param name="scaleY">The Scale in Y direction of the Image.</param>
            <param name="sourceRect">The sub rectangle that is used to map the image over a surface or vdRectangle.Empty to map the whole image edge.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImage.UpdateBinds(System.Boolean)">
            <summary>
            Update / Delete all image binds created for VectorDraw drawing context.
            </summary>
            <param name="isDisposing">If true then the exisiting binds will be deleted else they will mark to be re-created.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImage.GetBindPtr(VectorDraw.Render.vdRender)">
            <summary>
            Create an image structure used by <see cref="P:VectorDraw.Render.IRenderList.vdContext"/>
            </summary>
            <param name="render"><see cref="T:VectorDraw.Render.vdRender"/> object for which the image structure will be created.</param>
            <returns>An image structure used by <see cref="P:VectorDraw.Render.IRenderList.vdContext"/> </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImage.GetBitmap">
            <summary>
            Returns the selected image as a <see cref="T:System.Drawing.Bitmap"/> type object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImage.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImage.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)">
            <summary>
            Check if the table object is depend on this figure
            </summary>
            <param name="table">A Table object to be searched.</param>
            <returns>Returns true is this object is not deleted and have a property reference equal with table object.</returns>
            <remarks>Called when <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ExtendedDeletedCheck"/> is False.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImage.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.
            User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImage.Clone">
            <summary>
            Creates and returns a new vdMappedImage object as copy from this one.
            </summary>
            <returns>A new created object as copy of this vdMappedImage object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImage.CopyFrom(VectorDraw.Professional.vdObjects.vdMappedImage)">
            <summary>
            Copies all properties from a vdMappedImage object to this object.
            </summary>
            <param name="obj">The vdMappedImage object from which the properties will be taken.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImage.ToString">
            <summary>
            Gets a System.String that represents the name of the selected vdImageDef Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImage.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdMappedImage object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImage.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdMappedImage object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdMappedImage.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements the vdMappedImage object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdMappedImage.Deleted">
            <summary>
            Get/Set a property that marks the object as Deleted or not.
            </summary>
            <remarks>
            default value : false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdMappedImage.MaterialImage">
            <summary>
            Get/Set a <see cref="T:VectorDraw.Professional.vdPrimaries.vdImageDef"/> object(image) to be applied as material for this object.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdMappedImage.MaterialMatrix">
            <summary>
            Get/Set a Matrix used for transformations for the material(image) of the object.
            </summary>
            <remarks>
            Apply transformations in the following order: 
            1. scale(X,Y scales defines the width,height of image in drawing units)
            2. rotate(in counterclockwise direction)
            3. offset 
            4. invert the result matrix.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdMappedImage.SourceRectangle">
            <summary>
            Get/Set the sub rectangle that is used to map the image over a surface.
            </summary>
            <remarks>
            Defalt value is vdRectangle.Empty that means the whole image is mapped over the surface.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdMappedImage.ImageBind">
            <summary>
            Get the image object to be applied as material on a surface object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdMappedImage.Aspect">
            <summary>
            Returns the aspect ratio of selected image. The aspect ratio is the ratio of <see cref="P:VectorDraw.Render.ImageBind.Width"/>  to <see cref="P:VectorDraw.Render.ImageBind.Height"/>. 
            </summary>
        </member>
        <member name="T:VectorDraw.Render.BoundaryPoly">
            <summary>
            Internally used only for Polylines Boundary detection.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.BoundaryPoly.getBoundaryPoly(VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Professional.vdCollections.vdEntities,System.Double,System.Boolean,System.Windows.Forms.Keys)">
            <summary>
            Search the passed entities to find a closed perigram around the selected point.
            </summary>
            <param name="origin">The origin point in WCS which must be inside the desired closed path.</param>
            <param name="document">The vdDocument object where the action takes place.</param>
            <param name="entities">A collection of entities that will be used to define the boundary.</param>
            <param name="equality">A double representing the equality to be used in calculations(if this is equal to 0.0 the default = PixelSize * 1.4d is used).</param>
            <param name="IgnoreHatchedEntities">A boolean value that represents if hatched filled entities will be exluded from input entities.</param>
            <param name="CancelActionKey">A key value used to cancel the method.</param>
            <returns>A polyline that represents the closed perigram or null if a closed perigram was not found.</returns>
            <remarks>
            The return polyline has the active document default properties and it is not added in the active layout entities collection.</remarks>
            <remarks>The end points of seaching curves are compared with a default equality equal to (active render pixel size) * 1.4 if passed the parameter is 0.0.</remarks>
            <remarks>Only the 2d curves with  extrution vector 0,0,1 and in tha same elevation as the z of origin are taken into consideration.</remarks>
            <remarks>Only arcs , 2dpolylines , lines , circles, rectangles and ellipses, which are not filled are taken into consideration.</remarks>
            <remarks>Ellipses and polylines with spline flag are exploded into small segments depent on curveresolution.
            </remarks>
        </member>
        <member name="M:VectorDraw.Render.BoundaryPoly.getBoundaryPoly(VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Professional.vdCollections.vdEntities,System.Double,System.Boolean,System.Windows.Forms.Keys,System.Boolean)">
            <summary>
            Search the passed entities to find a closed perigram around the selected point.
            </summary>
            <param name="origin">The origin point in WCS which must be inside the desired closed path.</param>
            <param name="document">The vdDocument object where the action takes place.</param>
            <param name="entities">A collection of entities that will be used to define the boundary.</param>
            <param name="equality">A double representing the equality to be used in calculations(if this is equal to 0.0 the default = PixelSize * 1.4d is used).</param>
            <param name="IgnoreHatchedEntities">A boolean value that represents if hatched filled entities will be exluded from input entities.</param>
            <param name="CancelActionKey">A key value used to cancel the method.</param>
            <param name="Flat2d">Set it to true in order to include entities in any elevation.</param>
            <returns>A polyline that represents the closed perigram or null if a closed perigram was not found.</returns>
            <remarks>
            The return polyline has the active document default properties and it is not added in the active layout entities collection.</remarks>
            <remarks>The end points of seaching curves are compared with a default equality equal to (active render pixel size) * 1.4 if passed the parameter is 0.0.</remarks>
            <remarks>Only the 2d curves with  extrution vector 0,0,1 and in tha same elevation as the z of origin are taken into consideration.</remarks>
            <remarks>Only arcs , 2dpolylines , lines , circles, rectangles and ellipses, which are not filled are taken into consideration.</remarks>
            <remarks>Ellipses and polylines with spline flag are exploded into small segments depent on curveresolution.
            </remarks>
        </member>
        <member name="T:VectorDraw.Render.BoundingBoxRender">
            <summary>
            Render object that is used to calculate bounding box of drawing entities
            </summary>
        </member>
        <member name="M:VectorDraw.Render.BoundingBoxRender.#ctor(System.Double)">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.BoundingBoxRender.StartDraw(System.Boolean)">
            <summary>
            Starts drawing a new scene. Run After Init() and after seting the RenderMode.
            </summary>
            <remarks>
            Scene preperation like lights and materials.Matrix changes must run after StartDraw().Locks the MemoryBitmap.
            </remarks>
        </member>
        <member name="M:VectorDraw.Render.BoundingBoxRender.EndDraw">
            <summary>
            Ends the drawing of a scene. Run after StartDraw. Unlocks MemoryBitmap
            </summary>
        </member>
        <member name="M:VectorDraw.Render.BoundingBoxRender.PushClipPerigram(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.gPoints,VectorDraw.Geometry.GpcWrapper.ClippingOperation)">
            <summary>
            Internally use only
            </summary>
        </member>
        <member name="M:VectorDraw.Render.BoundingBoxRender.PopClipPerigram">
            <summary>
            Internally use only
            </summary>
        </member>
        <member name="M:VectorDraw.Render.BoundingBoxRender.IsBoundaryClip(VectorDraw.Geometry.Box)">
            <summary>
            Internally use only.Always return true.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.BoundingBoxRender.DrawLine(System.Object,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Draws a line in the vdRender object.
            </summary>
            <param name="sender">The object that called this function(for example a vdLine object),can be null.</param>
            <param name="sp">The first point of the line in World Coordinate System.</param>
            <param name="ep">The second point of the line in World Coordinate System.</param>
        </member>
        <member name="M:VectorDraw.Render.BoundingBoxRender.DrawPLine(System.Object,VectorDraw.Geometry.gPoints)">
            <summary>
            Draws a polyline specified by the passed points.
            </summary>
            <param name="sender">The object that called this function(for example a vdPolyline object),can be null.</param>
            <param name="points">A collection of gPoints in World Coordinate System.</param>
        </member>
        <member name="M:VectorDraw.Render.BoundingBoxRender.DrawPLine(System.Object,VectorDraw.Geometry.gPoints,System.Double,VectorDraw.Render.vdRender.PolylineFlag)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.DrawPLine(System.Object,VectorDraw.Geometry.gPoints,System.Double)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.BoundingBoxRender.DrawSolidBoundBox(System.Object,VectorDraw.Geometry.Box)">
            <summary>
            Draws a solid box to the vdRender object using the current penstyle color.
            </summary>
            <param name="sender">The object that called this function(for example a vdRect object),can be null.</param>
            <param name="box">The box to draw in World Coordinate System.</param>
        </member>
        <member name="M:VectorDraw.Render.BoundingBoxRender.DrawBoundBox(System.Object,VectorDraw.Geometry.Box)">
            <summary>
            Draws a non solid box to the vdRender object.
            </summary>
            <param name="sender">The object that called this function(for example a vdRect object),can be null.</param>
            <param name="box">The box to draw in World Coordinate System.</param>
        </member>
        <member name="M:VectorDraw.Render.BoundingBoxRender.DrawSolidPolygon(System.Object,VectorDraw.Geometry.gPoints,VectorDraw.Render.vdRender.PolygonType)">
            <summary>
            Fills the passed polygon using the current penstyle color.
            </summary>
            <param name="sender">The object that called this function(for example a vdPolyline object),can be null.</param>
            <param name="inpoints">A collection of gPoint of the polygon in World Coordinate System.</param>
            <param name="ptype">The fill type to be used.</param>
        </member>
        <member name="M:VectorDraw.Render.BoundingBoxRender.DrawPolyface(System.Object,VectorDraw.Geometry.Int32Array,VectorDraw.Geometry.gPoints)">
            <summary>
            Draws a polyface to the vdRender object.
            </summary>
            <param name="sender">The object that called this function(for example a vdPolyface object),can be null.</param>
            <param name="FaceList">A collection of integers that represents the facelist of the polyface object.</param>
            <param name="VertexList">A collection of gPoints representing the vertex list points of the polyface in World Coordinate System.</param>
            <returns>A value that represents the end status of the function.</returns>
        </member>
        <member name="M:VectorDraw.Render.BoundingBoxRender.DrawFace4(System.Object,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws a face to the vdRender object.
            </summary>
            <param name="sender">The object that called this function(for example a vd3DFace object),can be null.</param>
            <param name="p1">First point of the face in World Coordinate System.</param>
            <param name="p2">Second point of the face in World Coordinate System.</param>
            <param name="p3">Third point of the face in World Coordinate System.</param>
            <param name="p4">Fourth point of the face in World Coordinate System.</param>
            <param name="visible1">A boolean value representing if the p1-p2 line is visible.</param>
            <param name="visible2">A boolean value representing if the p2-p3 line is visible.</param>
            <param name="visible3">A boolean value representing if the p3-p4 line is visible.</param>
            <param name="visible4">A boolean value representing if the p4-p1 line is visible.</param>
        </member>
        <member name="M:VectorDraw.Render.BoundingBoxRender.DrawImage(System.Object,VectorDraw.Render.ImageBind,System.Double,System.Double)">
            <summary>
            Draws an image to the vdRender object.
            </summary>
            <param name="sender">The object that called this function(for example a vdImage object),can be null.</param>
            <param name="cImage">The image to be drawn.</param>
            <param name="cWidth">The width of the image in drawing units..</param>
            <param name="cHeight">The height of the image in drawing units.</param>
            <remarks>Before this call the ECS Matrix of the vdImage object must be assigned.</remarks>
        </member>
        <member name="M:VectorDraw.Render.BoundingBoxRender.DrawImagePolygon(System.Object,VectorDraw.Render.ImageBind,System.Double,System.Double,VectorDraw.Geometry.gPoints)">
            <summary>
            Fills a passed polygon with the specified image.
            </summary>
            <param name="sender">The object that called this function(for example a vdImage object),can be null.</param>
            <param name="cImage">The image to be drawn.</param>
            <param name="angle">Angle of the image.</param>
            <param name="scale">Scale of the image to be applied.</param>
            <param name="inpoints">A collection of gPoints of the polygon in World Coordinate System.</param>
        </member>
        <member name="M:VectorDraw.Render.BoundingBoxRender.DrawString(System.Object,VectorDraw.Render.grTextStyle,VectorDraw.Render.grTextStyleExtra,System.String,VectorDraw.Geometry.Box)">
            <summary>
            Draws a string to the vdRender object.
            </summary>
            <param name="sender">The object that called this function(for example a vdText object),can be null.</param>
            <param name="style">The style to use.</param>
            <param name="extra">The extra parameters to be used.</param>
            <param name="str">The string to draw.</param>
            <param name="textBox">The Box object containing the text.</param>
            <remarks>The string is drawn in the 0,0 position.Before this call the ECS Matrix of the vdText object must be assigned.</remarks>
        </member>
        <member name="M:VectorDraw.Render.BoundingBoxRender.DrawInfinityLine(System.Object,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector,System.Boolean)">
            <summary>
             Draws an Infinity line.
            </summary>
            <param name="sender">The object that called this function,can be null.</param>
            <param name="basept">the Base point of the Infinity line.</param>
            <param name="direction">the Direction of the Infinity object.</param>
            <param name="isRay">True if the infinity line start from the basept end extends to the direction's vector or false if extends in both directions.</param>
        </member>
        <member name="P:VectorDraw.Render.BoundingBoxRender.PixelSize">
            <summary>
            Get the size in Drawing Units of one(1) window pixel.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.BoundingBoxRender.BoundigBox">
            <summary>
            Gets the Bounding Box of the entities that was drawn using this object.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.BoundingBoxRender.Started">
            <summary>
            Overrides the <see cref="P:VectorDraw.Render.vdRender.Started"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.BoundingBoxRender.Display">
            <summary>
            Get/Set the display mode of the vdRender object.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.PrinterRender">
            <summary>
            Is the base class for implementing render formats.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.PrinterRender.Export(RenderFormats.RenderFormat,VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Professional.vdObjects.vdPrint,System.String)">
            <summary>
            Exports the layout  of a printer in a file.
            </summary>
            <param name="render">A render object to be used for the export.</param>
            <param name="document">The Document of the file to be exported.</param>
            <param name="printer">An vdPrinter object that is going to be used to the specified file format.</param>
            <param name="filename">The filename of the exported file format.</param>
            <returns>True if the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Render.PrinterRender.StreamExport(RenderFormats.RenderFormat,VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Professional.vdObjects.vdPrint,System.String)">
            <summary>
            Exports the layout  of a printer in a MemoryStream object.
            </summary>
            <param name="render">A render object to be used for the export.</param>
            <param name="document">The Document of the file to be exported.</param>
            <param name="printer">An vdPrinter object that is going to be used to the specified file format.</param>
            <param name="filePathname">Currently used only in SVG format. Specifies the path where the images of the svg will be saved. 
            For other formats (pdf, hpgl) use an empty string.
            </param>
            <returns>A MemoryStream containing the rendering format data.</returns>
        </member>
        <member name="M:VectorDraw.Render.PrinterRender.StreamExport_Internal(RenderFormats.RenderFormat,VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Professional.vdObjects.vdPrint,System.String)">
            <summary>
            Exports the layout  of a printer in a MemoryStream object.
            </summary>
            <param name="render">A render object to be used for the export.</param>
            <param name="document">The Document of the file to be exported.</param>
            <param name="printer">An vdPrinter object that is going to be used to the specified file format.</param>
            <param name="filePathname">Currently used only in SVG format. Specifies the path where the images of the svg will be saved. 
            For other formats (pdf, hpgl) use an empty string.
            </param>
            <returns>A Stream containing the rendering format data.</returns>
        </member>
        <member name="M:VectorDraw.Render.PrinterRender.ExportMultiPagePDF(RenderFormats.PdfRender,VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Professional.vdObjects.vdPrint[],System.String)">
            <summary>
            This method can be used in order to create multi page PDF files.
            </summary>
            <param name="render">A PdfRender object to be used for the export.</param>
            <param name="document">The Document of the file to be exported.</param>
            <param name="printers">An array of vdPrinter object that are going to be used for each page of the PDF.</param>
            <param name="filename">The filename of the exported PDF.</param>
            <returns>True if the operation was succesfull.</returns>
            <example><para>Saving each layout of a document in a separate page of a single pdf file.</para>
            <code>
                            int numprinters = doc.LayOuts.Count + 1;
                            vdPrint[] printers = new vdPrint[numprinters];
                            int i = 0;
                            //Select printer properties for first page which is displaying the Model space
                            printers[i] = doc.Model.Printer;
                            printers[i].PrintExtents();
                            printers[i].PrintScaleToFit();
                            i++;
                            //Print each layout in a separate page using its default printer properties
                            foreach (vdLayout layout in doc.LayOuts)
                            {
                                printers[i] = layout.Printer;
                                i++;
                            }
                            VectorDraw.Render.PrinterRender.ExportMultiPagePDF(new RenderFormats.PdfRender(), doc, printers, Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory) + @"\test.pdf");
            </code>
            </example>
            <example>
            <para> Save to a sigle multipage pdf file, model layout of a collection of documents fit in A4 paper size.</para>
            <code>
                            vdArray&lt;vdPrint&gt; printers = new vdArray&lt;vdPrint&gt;();
                            //an array of existing drawing file names.
                            string[] drawings = new string[] { "c:\\drawingpath\\drawing1.vdml", "c:\\drawingpath\\drawing2.dxf", "c:\\drawingpath\\drawing3.vdcl" };
                            //prepare the printers properties for each drawing model.
                            foreach (string drawing in drawings)
                            {
                                VectorDraw.Professional.Components.vdDocumentComponent doc_comp = new VectorDraw.Professional.Components.vdDocumentComponent();
                                if (!doc_comp.Document.Open(drawing)) continue;
                                vdPrint printer = new vdPrint(doc_comp.Document.Model.Printer);
                                printer.paperSize = new Rectangle(0, 0, 827, 1169);
                                printer.LandScape = false;
                                printer.PrintExtents();
                                printer.PrintScaleToFit();
                                printers.AddItem(printer);
                            }
                            //conver printers to a single array
                            vdPrint[] _printers = new vdPrint[printers.Count];
                            Array.Copy(printers.ArrayItems, _printers, printers.Count);
                            //export to pdf multi page file.
                            bool result = VectorDraw.Render.PrinterRender.ExportMultiPagePDF(new RenderFormats.PdfRender(), doc, _printers, "c:\\drawingpath\\multipage.pdf");
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Render.PrinterRender.StreamExportMultiPagePDF(RenderFormats.PdfRender,VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Professional.vdObjects.vdPrint[],System.String)">
            <summary>
            This method can be used in order to create multi page PDF in a Memory Stream.
            </summary>
            <param name="render">A PdfRender object to be used for the export.</param>
            <param name="document">The Document of the file to be exported.</param>
            <param name="printers">An array of vdPrinter object that are going to be used for each page of the PDF.</param>
            <param name="filePathname">Currently not used. Set it to empty string.</param>
            <returns>A MemoryStream containing the PDF data.</returns>
        </member>
        <member name="M:VectorDraw.Render.PrinterRender.StreamExportMultiPagePDF_Internal(RenderFormats.PdfRender,VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Professional.vdObjects.vdPrint[],System.String)">
            <summary>
            This method can be used in order to create multi page PDF in a Memory Stream.
            </summary>
            <param name="render">A PdfRender object to be used for the export.</param>
            <param name="document">The Document of the file to be exported.</param>
            <param name="printers">An array of vdPrinter object that are going to be used for each page of the PDF.</param>
            <param name="filePathname">Currently not used. Set it to empty string.</param>
            <returns>A Stream containing the PDF data.</returns>
        </member>
        <member name="T:VectorDraw.Render.PrimitivesExport">
            <summary>
            A static class that contains methods used to export a scene into simple primitive objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.PrimitivesExport.Export(VectorDraw.Professional.vdObjects.vdDocument,RenderFormats.PrimitiveRender3d.DrawFlags)">
            <summary>
            Generate an object that contains information about all drawn primitive objects(like triangles or mesh) penstyles with rgb color inforamtion and materials  , lights , sections and scene viewing information for visible entities of Model layout.
            </summary>
            <param name="document">A <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object from which the Model visible entities will be exported. </param>
            <param name="drawflags">Specifies if strings and / or lines will be exported into primitives collection.</param>
            <returns>An object that contains information about all drawn primitive objects(like triangles or mesh) penstyles with rgb color inforamtion and materials  , lights , sections and scene viewing information for visible entities of Model layout.</returns>
        </member>
        <member name="M:VectorDraw.Render.PrimitivesExport.Export3d(VectorDraw.Professional.vdObjects.vdDocument,RenderFormats.PrimitiveRender3d.DrawFlags)">
            <summary>
            Generate an object that contains information about all drawn primitive objects(like triangles or mesh) penstyles with rgb color inforamtion and materials  , lights , sections and scene viewing information for visible entities of Model layout.
            </summary>
            <param name="document">A <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object from which the Model visible entities will be exported. </param>
            <param name="drawflags">Specifies if strings and / or lines will be exported into primitives collection.</param>
            <returns>An object that contains information about all drawn primitive objects(like triangles or mesh) penstyles with rgb color inforamtion and materials  , lights , sections and scene viewing information for visible entities of Model layout.</returns>
        </member>
        <member name="M:VectorDraw.Render.PrimitivesExport.Export3d(VectorDraw.Professional.vdObjects.vdPalette,System.Drawing.Color,VectorDraw.Professional.vdPrimaries.vdView,VectorDraw.Professional.vdCollections.vdEntities,VectorDraw.Professional.vdCollections.vdSectionClips,VectorDraw.Professional.vdCollections.vdLights,VectorDraw.Render.vdRenderGlobalProperties,RenderFormats.PrimitiveRender3d.DrawFlags)">
            <summary>
            Generate an object that contains information about all drawn primitive objects(like triangles or mesh) penstyles with rgb color inforamtion and materials  , lights , sections and scene viewing information.
            </summary>
            <param name="palette">A <see cref="T:VectorDraw.Professional.vdObjects.vdPalette"/> that is used for color indexed with their RGB values and Material properties used by primitives.</param>
            <param name="background">The background color that will be used for the rendering scene.</param>
            <param name="view">A <see cref="T:VectorDraw.Professional.vdPrimaries.vdView"/>  object that contains information for viewing and projection transformations.</param>
            <param name="entities">That entities that will drawn on scene. </param>
            <param name="sections">A collection of <see cref="T:VectorDraw.Professional.vdObjects.vdSectionClip"/> objects that used to apply a section in a specific plane in order to display one part of the plane and hide the rest.</param>
            <param name="lights">A collection of <see cref="T:VectorDraw.Professional.vdFigures.vdLight"/> objects used to light the scene.</param>
            <param name="globalRenderProperties">A <see cref="T:VectorDraw.Render.vdRenderGlobalProperties"/> object that contains some properties used for rendering objects.</param>
            <param name="drawflags">Specifies if strings and / or lines will be exported into primitives collection.</param>
        </member>
        <member name="T:VectorDraw.Render.PrimitivesExport.RenderProperties">
            <summary>
            Defines an object that contains information about all drawn primitive objects , lights , sections and scene viewing information.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.PrimitivesExport.RenderProperties.#ctor(VectorDraw.Render.PrimitivesExport.RenderProperties,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Initialize a new instance of RenderProperties from an other instane of RenderProperties and with new camera and target positions.
            </summary>
            <param name="initialProperties">Object to match properties</param>
            <param name="cameraPosition">New camera position in world coordinate system</param>
            <param name="targetPosition">New target position in world coordinate system</param>
        </member>
        <member name="M:VectorDraw.Render.PrimitivesExport.RenderProperties.#ctor(RenderFormats.PrimitiveRender3d.PrimitivesRender,System.Boolean,System.Double,System.Double,System.Double,System.Double,System.Double,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Initialize a new instance of RenderProperties from the passing properties.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.PrimitivesExport.RenderProperties.#ctor(VectorDraw.Professional.vdPrimaries.vdView,RenderFormats.PrimitiveRender3d.PrimitivesRender)">
            <summary>
            Initialize a new instance of RenderProperties from the passing <see cref="T:VectorDraw.Professional.vdPrimaries.vdView"/> object .
            </summary>
        </member>
        <member name="M:VectorDraw.Render.PrimitivesExport.RenderProperties.GetWorld2ViewMatrix">
            <summary>
            Returns the selected viewing transformation.Depends on the <see cref="P:VectorDraw.Render.PrimitivesExport.RenderProperties.CameraPosition"/> <see cref="P:VectorDraw.Render.PrimitivesExport.RenderProperties.TargetPosition"/> and <see cref="P:VectorDraw.Render.PrimitivesExport.RenderProperties.TwistAngle"/>
            </summary>
            <returns>The selected viewing transformation.</returns>
        </member>
        <member name="M:VectorDraw.Render.PrimitivesExport.RenderProperties.GetEyeNearest">
            <summary>
            Returns the Z value of the drawing primitives in current View Plane that is the closest to the eye
            </summary>
            <returns>The Z value in current View Plane that is closest to the eye</returns>
            <remarks>
            Positive Z values have the direction from the target screen center to eye.</remarks>
            <remarks>Negative Z values have the direction from eye to the target screen center.
            </remarks>
        </member>
        <member name="M:VectorDraw.Render.PrimitivesExport.RenderProperties.GetEyeFarthest">
            <summary>
            Returns the Z value of the drawing primitives in current View Plane that is the Farthes from the eye
            </summary>
            <returns>The Z value of the drawing primitives in current View Plane that is the Farthes from the eye</returns>
             /// <remarks>
            Positive Z values have the direction from the target screen center to eye.</remarks>
            <remarks>Negative Z values have the direction from eye to the target screen center.
            </remarks>
        </member>
        <member name="M:VectorDraw.Render.PrimitivesExport.RenderProperties.GetCameraUpDirection">
            <summary>
            Returns the direction that described by the up vector projected onto the viewing plane and is mapped to the positive y-axis so that it points upward in the viewport
            </summary>
        </member>
        <member name="F:VectorDraw.Render.PrimitivesExport.RenderProperties.Primitives">
            <summary>
            Cantains all calculated primitive objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.PrimitivesExport.RenderProperties.NumPrimitives">
            <summary>
            Returns the number of all primitives for all PenStylePrimitiveObjects
            </summary>
            <returns>The number of all primitives for all PenStylePrimitiveObjects</returns>
        </member>
        <member name="M:VectorDraw.Render.PrimitivesExport.RenderProperties.GetAllTriangles(VectorDraw.Professional.Utilities.ProgressMeter)">
            <summary>
            Returns all triangle surfaces of selected primitives.
            </summary>
            <param name="meterprogress">Represents an object to handle the progress meter bar of the procedure. </param>
            <returns>An array of all triangle surfaces of selected primitives.</returns>
        </member>
        <member name="M:VectorDraw.Render.PrimitivesExport.RenderProperties.GetRenderingLineSegments(System.Boolean,System.Boolean,System.Boolean,VectorDraw.Professional.Utilities.ProgressMeter)">
            <summary>
            Get the rendering output of selected view , into sigle lines
            </summary>
            <param name="removeHiddenLines">If it is true then applies all section clips and removes hidden lines</param>
            <param name="clip2view">If it is true then all line segments are trim to object view box.</param>
            <param name="useOpenGL">Defines if opengl will be used for lines producing or VectorDraw rendering engine.</param>
            <param name="meterprogress">Represents an object to handle the progress meter bar of the procedure. </param>
            <returns>An array of single line segments for all drawing primitives.</returns>
        </member>
        <member name="P:VectorDraw.Render.PrimitivesExport.RenderProperties.ViewSize">
            <summary>
            The vertical size of the scene in drawing units.
            </summary>
            <remarks>
            If the <see cref="P:VectorDraw.Render.PrimitivesExport.RenderProperties.IsPerspective"/> is true then this value is calculated base on the <see cref="P:VectorDraw.Render.PrimitivesExport.RenderProperties.LensAngle"/> and <see cref="P:VectorDraw.Render.PrimitivesExport.RenderProperties.FocalLength"/>
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.PrimitivesExport.RenderProperties.AspectRatioX">
            <summary>
            Get/Set the aspect ratio that determines the field of view in the x-direction. 
            </summary>
            <remarks>
            The aspect ratio is the ratio of view width to view height.</remarks>
            <remarks>Default value is 1.0
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.PrimitivesExport.RenderProperties.FocalLength">
            <summary>
            This value is valid only when <see cref="P:VectorDraw.Render.PrimitivesExport.RenderProperties.IsPerspective"/> is true.
            Represents the distance between the "eye" and the center of the view in the current view direction plane.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.PrimitivesExport.RenderProperties.LensAngle">
            <summary>
            Represents the Lens Angle in degrees of the viewport.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.PrimitivesExport.RenderProperties.IsPerspective">
            <summary>
            Get/Set a value representing if the view is a perspective or an orthographic projection.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.PrimitivesExport.RenderProperties.TwistAngle">
            <summary>
            An angle in degrees that represent the rotation of the scene around the direction that defined from eyePosition to  TagetPoint in clockwise direction.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.PrimitivesExport.RenderProperties.CameraPosition">
            <summary>
            A point that represent the position of the camera.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.PrimitivesExport.RenderProperties.TargetPosition">
            <summary>
            A point that represent the target point.This will be the center of scene.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.PrimitivesExport.RenderProperties.EntityViewAreas">
            <summary>
            A collection of <see cref="T:VectorDraw.Render.PrimitivesExport.RenderProperties.EntityViewArea"/> type items.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.PrimitivesExport.RenderProperties.EntityViewAreas.Clear">
            <summary>
            Remove all items in the collection
            </summary>
        </member>
        <member name="M:VectorDraw.Render.PrimitivesExport.RenderProperties.EntityViewAreas.Area(System.Boolean)">
            <summary>
            Returns the area of all items in the collection.
            </summary>
            <param name="projection">
            If it is true returns the area of all entities surfaces that projected on the selected view.
            If it is false returns the visible area of all entities surfaces.
            </param>
        </member>
        <member name="M:VectorDraw.Render.PrimitivesExport.RenderProperties.EntityViewAreas.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.PrimitivesExport.RenderProperties.EntityViewAreas.Count">
            <summary>
            Get the number of items in the collection
            </summary>
        </member>
        <member name="P:VectorDraw.Render.PrimitivesExport.RenderProperties.EntityViewAreas.Item(System.Int32)">
            <summary>
            Get the <see cref="T:VectorDraw.Render.PrimitivesExport.RenderProperties.EntityViewArea"/> item at the specific index
            </summary>
        </member>
        <member name="P:VectorDraw.Render.PrimitivesExport.RenderProperties.EntityViewAreas.SquareRectSize">
            <summary>
            Returns the square rect size in Drawing units that used to calculate the grid points on each surface
            </summary>
            <remarks>Used by the <see cref="M:VectorDraw.Render.PrimitivesExport.RenderProperties.EntityViewAreas.Area(System.Boolean)"/> method .The area is calculate using the following formula: (number of grid points) * SquareRectSize * SquareRectSize = [area in square drawing unirs].</remarks>
        </member>
        <member name="T:VectorDraw.Render.PrimitivesExport.RenderProperties.EntityViewArea">
            <summary>
            Object that contains information about visible area of a drawing entity
            </summary>
        </member>
        <member name="M:VectorDraw.Render.PrimitivesExport.RenderProperties.EntityViewArea.Area(System.Boolean)">
            <summary>
            Returns the visible area of <see cref="P:VectorDraw.Render.PrimitivesExport.RenderProperties.EntityViewArea.Entity"/> object. 
            </summary>
            <param name="projection">
            If it is true returns the area of all surfaces that projected on the selected view.
            If it is false returns the visible area of all surfaces.
            </param>
            <remarks>
            The area is calculate using the following formula: (number of grid points) * SquareRectSize * SquareRectSize = [area in square drawing unirs]</remarks>
            <remarks>Where the SquareRectSize used is the owner's EntityViewAreas collection <see cref="P:VectorDraw.Render.PrimitivesExport.RenderProperties.EntityViewAreas.SquareRectSize"/> property.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.PrimitivesExport.RenderProperties.EntityViewArea.Entity">
            <summary>
            A vdFigure object that this object is reference to.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.PrimitivesExport.RenderProperties.EntityViewArea.TotalArea">
            <summary>
            Returns the total area of <see cref="P:VectorDraw.Render.PrimitivesExport.RenderProperties.EntityViewArea.Entity"/> object. 
            </summary>
        </member>
        <member name="T:VectorDraw.Render.PrimitivesExport.VisibleAreas">
            <summary>
            object that helps to get the visible areas of passed entities at any view direction
            It can be created by <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.GetVisibleAreas(VectorDraw.Professional.vdCollections.vdEntities,VectorDraw.Professional.vdCollections.vdSelection,System.Double,System.Int32)"/> method
            </summary>
        </member>
        <member name="M:VectorDraw.Render.PrimitivesExport.VisibleAreas.Finalize">
            <summary>
            Object deconstructor
            </summary>
        </member>
        <member name="M:VectorDraw.Render.PrimitivesExport.VisibleAreas.Dispose">
            <summary>
            Freeing, releasing, or resetting unmanaged resources.
            Always dispose immediately after you have finished with visible area jobs
            </summary>
        </member>
        <member name="M:VectorDraw.Render.PrimitivesExport.VisibleAreas.GetEntitiesArea(VectorDraw.Geometry.Vector)">
            <summary>
            Returns a <see cref="T:VectorDraw.Render.PrimitivesExport.RenderProperties.EntityViewAreas"/> collection that contains area information for each entity the area was calculated at the specified view direction
            </summary>
            <param name="view">Visible view direction of clip view plane in World Coordinate System(WCS).Defines the Vector from target to camera point.</param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Render.PrimitivesExport.VisibleAreas.GetEntitiesArea(VectorDraw.Geometry.Vector,VectorDraw.Professional.vdPrimaries.vdFigure)">
            <summary>
            Returns a <see cref="T:VectorDraw.Render.PrimitivesExport.RenderProperties.EntityViewAreas"/> collection that contains area information for each entity the area was calculated at the specified view direction
            </summary>
            <param name="view">Visible view direction of clip view plane in World Coordinate System(WCS).Defines the Vector from target to camera point.</param>
            <param name="figure">A vdFigure for which the visible area will be calculated in connection with the entire drawing.If it is null the visible area of passed entities will be calculated. </param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Render.PrimitivesExport.VisibleAreas.GetEntitiesArea(VectorDraw.Geometry.Vector,VectorDraw.Professional.vdCollections.vdSelection,System.Boolean)">
            <summary>
            Returns a <see cref="T:VectorDraw.Render.PrimitivesExport.RenderProperties.EntityViewAreas"/> collection that contains area information for each entity the area was calculated at the specified view direction
            </summary>
            <param name="view">Visible view direction of clip view plane in World Coordinate System(WCS).Defines the Vector from target to camera point.</param>
            <param name="subentities">A collection of vdFigures for which the visible area will be calculated in connection with the entire drawing.If it is null the visible area of passed entities will be calculated. </param>
            <param name="isInitialSelection">True if the subentities are the initial subentities that have been passed to the constructor.</param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdProxyClass">
            <summary>
            Represents a Proxy custom object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdProxyClass.#ctor">
            <summary>
            Initializes the vdProxyClass object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdProxyClass.#ctor(System.Byte,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes the ProxyClass object with its properties.
            </summary>
            <param name="proxytype">The type of the custom object.</param>
            <param name="CommonName">The name of the class object.</param>
            <param name="FullTypeName">The full name of the custom object(type and name).</param>
            <param name="DllName">The dll name.</param>
            <param name="DllFileName">The dll file name.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdProxyClass.Clone">
            <summary>
            Creates a clone of this object
            </summary>
            <returns>Returnes a clone of this object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdProxyClass.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdProxyClass object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdProxyClass.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdProxyClass object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdProxyClass.CommonName">
            <summary>
            The name of the class object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdProxyClass.FullTypeName">
            <summary>
            It is the full name of the custom object (type and name).
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdProxyClass.DllName">
            <summary>
            The name of the dll where the custom object is.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdProxyClass.DllFileName">
            <summary>
            Get/Set the proxy object's dll filename.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdProxyClass.ProxyType">
            <summary>
            The type of the custom object.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.vdTextstyles">
            <summary>
            Represents a collection of <see cref="T:VectorDraw.Professional.vdPrimaries.vdTextstyle"/> objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.AddResolveProperty(System.Object,System.String,System.String)">
            <summary>
            Adds the parameters to the resolve list of the collection.
            </summary>
            <param name="_ObjectOfProperty">The object with the property to set(for example a vdDimension object).</param>
            <param name="_PropertyName">A string representing the property name of the object(for example "Style")</param>
            <param name="_TableName">A string representing the table name.(for example "mystyle1").</param>
            <remarks>The resolve list of the collections is used to set to an object a property that is equal to 
            an item of the list which may not be added yet to the collection. This is usually used when opening a 
            format and you want to add a layer to a vdFigure and it is not certain that the layer is already added 
            to the document.Use resolve list at the end of an open procedure of a format to resolve these properties.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.ResolveProperties">
            <summary>
            Resolves all the properties added with the <see cref="M:VectorDraw.Professional.vdCollections.vdTextstyles.AddResolveProperty(System.Object,System.String,System.String)"/> function.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.getUniqueTableName(System.String)">
            <summary>
            Creates a unique string for use as name to a vdTextstyle object.
            </summary>
            <param name="prefix">A prefix string that will be present to the unique name.</param>
            <returns>Returns a unique string.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.GetNotDeletedItemsAndVisibleOnForms">
            <summary>
            Get all non deleted objects of the collection.
            </summary>
            <returns>
            Returns a new created collection of vdDimstyle objects that are not set as <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.Deleted"/> and also <see cref="P:VectorDraw.Professional.vdPrimaries.vdTextstyle.VisibleOnForms"/> is true. The array is sorted alphabetically by the name of the object.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.GetNotDeletedItems">
            <summary>
            Get all non deleted objects of the collection.
            </summary>
            <returns>
            Returns a new created collection of vdDimstyle objects that are not set as <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.Deleted"/>.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.IsDefault(VectorDraw.Professional.vdObjects.vdPrimary)">
            <summary>
            Checks if the parameter passed is the standard vdTextstyle object.
            </summary>
            <param name="obj">A vdPrimary object to be checked if it is equal referenced to the standard vdTextstyle object.</param>
            <returns>True if the passed object is equal referenced with the standard vdTextstyle object of the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.ToString">
            <summary>
            Gets a System.String that represents the count of the vdTextstyles collection Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.#ctor">
            <summary>
            Initializes the vdTextstyles collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.Purge">
            <summary>
            Sets as Deleted all vdTextstyle that are not being used in the Collection's Document.
            </summary>
            <returns>Returns the number of unused vdTextstyle objects that where set as Deleted.</returns>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnEraseObject"/> event for each deleted item.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.EnsureDefaults">
            <summary>
            Ensures the default values to the properties of the standard vdTextstyle object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.InitDefaults(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Ensures the existance of the standard vdTextstyle object and also sets the document parameter
            to be the document of the collection.
            </summary>
            <param name="document">The Document object of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.FindItem(VectorDraw.Professional.vdPrimaries.vdTextstyle)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">A vdTextstyle object to be checked if it exists in the collection</param>
            <returns>True if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.AddItem(VectorDraw.Professional.vdPrimaries.vdTextstyle)">
            <summary>
            Adds a vdTextstyle object to the collection.
            </summary>
            <param name="value">The vdTextstyle object to be added to the collection.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAddItem"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterAddItem"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
            <remarks>
            All vdTextstyle objects are removed even the standard.Call EnsureDefaults method in 
            order to create the standard vdTextstyle object after removing all the item's of the collection.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.RemoveItem(VectorDraw.Professional.vdPrimaries.vdTextstyle)">
            <summary>
            Removes a specific vdTextstyle object from the collection.
            </summary>
            <param name="Object">The vdTextstyle object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.RemoveAt(System.Int32)">
            <summary>
            Removes an object from the specified index of the collection.
            </summary>
            <param name="Index">The zero based index.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.InsertAt(System.Int32,VectorDraw.Professional.vdPrimaries.vdTextstyle)">
            <summary>
            Insert a vdTextstyle object to a specified index of the collection.
            </summary>
            <param name="Index">The zero based index of the collection where the object will be inserted.</param>
            <param name="Object">The vdTextstyle object which will be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.ChangeOrder(VectorDraw.Professional.vdPrimaries.vdTextstyle,System.Boolean)">
            <summary>
            Changes the position of a vdTextstyle object to the front or the end of the collection.
            </summary>
            <param name="Object">The vdTextstyle object.</param>
            <param name="ToBack">If true moves the object to the beginning of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.MakeIndexDictionary">
            <summary>
            Creates an Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must be followed by a <see cref="M:VectorDraw.Professional.vdCollections.vdTextstyles.ClearIndexDictionary"/> call when the search or swap is finished. </remarks>
            <example> For a code example please check topic <see cref="M:VectorDraw.Professional.vdCollections.vdTextstyles.swap(VectorDraw.Professional.vdPrimaries.vdTextstyle,VectorDraw.Professional.vdPrimaries.vdTextstyle)"/> Method. </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.ClearIndexDictionary">
            <summary>
            Clears the Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must follow a <see cref="M:VectorDraw.Professional.vdCollections.vdTextstyles.MakeIndexDictionary"/> call when the search or swap is finished. </remarks>
            <example> For a code example please check topic <see cref="M:VectorDraw.Professional.vdCollections.vdTextstyles.swap(VectorDraw.Professional.vdPrimaries.vdTextstyle,VectorDraw.Professional.vdPrimaries.vdTextstyle)"/> Method. </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.swap(VectorDraw.Professional.vdPrimaries.vdTextstyle,VectorDraw.Professional.vdPrimaries.vdTextstyle)">
            <summary>
            Swaps the position between two different vdTextstyle objects existing in the collection.
            </summary>
            <param name="Object1">first object needed.</param>
            <param name="Object2">second object needed.</param>
            <returns>True if the swap operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.InsertCopyOf(VectorDraw.Professional.vdPrimaries.vdTextstyle)">
            <summary>
            Adds a clone of the obj in the collection if it is not exist.
            </summary>
            <param name="obj">The object to be added.</param>
            <returns>The new added item.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.Add(System.String)">
            <summary>
            Creates and adds a vdTextstyle object to the collection with the specified name.
            </summary>
            <param name="Name">The name of the inserted vdDimstyle object.</param>
            <returns>Returns the added vdTextstyle object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.FindName(System.String)">
            <summary>
            Finds a vdTextstyle object with the specified name in the collection.
            </summary>
            <param name="Name">The name to search in the collection.</param>
            <returns>The found object else returns null if a vdTextstyle does not exist with this name.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdTextstyles object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdTextstyles object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.RemoveItem(System.Object)">
            <summary>
            Removes an object from the collection.
            </summary>
            <param name="item">The object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.AddItem(System.Object)">
            <summary>
            Adds an object to the collection.
            </summary>
            <param name="value">The object to be added.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.FindItem(System.Object)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">The object required for the search.</param>
            <returns>true if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.VectorDraw#Professional#vdCollections#IvdObjectCollection#Item(System.Int32)">
            <summary>
            Retreave a specific item placed at a specified index from the collection.
            </summary>
            <param name="Index">The index where the object is.</param>
            <returns>Returns the object at the specified index.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.GetObjectRealPosition(System.Object)">
            <summary>
            Find the index where a specified object is located in the list.
            </summary>
            <param name="item">The object to find.</param>
            <returns>Returns the index where the object is or -1 if the object is not in the list.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.InsertAt(System.Int32,System.Object)">
            <summary>
            Insert an object at a specified index.
            </summary>
            <param name="index">The index where the object will be inserted.</param>
            <param name="item">The object to be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdTextstyles.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Represents a collection of <see cref="T:VectorDraw.Professional.vdPrimaries.vdTextstyle"/> objects.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdTextstyles.ItemType">
            <summary>
            Returns the Type of Items in the collection
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdTextstyles.Standard">
            <summary>
            Get the standard vdTextstyle object existing to the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdTextstyles.ListPosition">
            <summary>
            Gets the <see cref="T:VectorDraw.Generics.IListPosition"/> interface object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdTextstyles.Item(System.Int32)">
            <summary>
            Get a vdTextstyle object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The vdTextstyle object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdTextstyles.Last">
            <summary>
            Returns the last item in the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdTextstyles.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.vdLights">
            <summary>
            Implements the vdLights collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLights.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Draw the <see cref="P:VectorDraw.Professional.vdCollections.vdLights.Default"/> and all <see cref="T:VectorDraw.Professional.vdFigures.vdLight"/> items in the collection if thier <see cref="P:VectorDraw.Professional.vdFigures.vdLight.Enable"/> property is true.
            </summary>
            <param name="render"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLights.GetNotDeletedItems">
            <summary>
            Get all non deleted objects of the collection.
            </summary>
            <returns>
            Returns a new created collection of vdLight objects 
            that are not set as <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.Deleted"/>.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLights.ToString">
            <summary>
            Gets a System.String that represents the count of the vdLights collection Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLights.#ctor">
            <summary>
            Initializes the vdLights collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLights.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes a new instance of the vdLights object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLights.InitDefaults(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Sets the document parameter to be the document of the collection.
            </summary>
            <param name="document">The Document object of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLights.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLights.FindItem(VectorDraw.Professional.vdFigures.vdLight)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">A vdLight object to be checked if it exists in the collection</param>
            <returns>True if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLights.getUniqueTableName(System.String)">
            <summary>
            Creates a unique string for use as name to an item of this collection.
            </summary>
            <param name="prefix">A prefix string that will be present to the unique name.</param>
            <returns>Returns a unique string.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLights.AddItem(VectorDraw.Professional.vdFigures.vdLight)">
            <summary>
            Adds a vdLight object to the collection.
            </summary>
            <param name="value">The vdLight object to be added to the collection.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAddItem"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterAddItem"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLights.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLights.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
            <remarks>
            All vdLight objects are removed even the standard.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLights.RemoveItem(VectorDraw.Professional.vdFigures.vdLight)">
            <summary>
            Removes a specific vdLight object from the collection.
            </summary>
            <param name="Object">The vdLight object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLights.RemoveAt(System.Int32)">
            <summary>
            Removes an object from the specified index of the collection.
            </summary>
            <param name="Index">The zero based index.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLights.ChangeOrder(VectorDraw.Professional.vdFigures.vdLight,System.Boolean)">
            <summary>
            Changes the position of a vdLight object to the front or the end of the collection.
            </summary>
            <param name="Object">The vdLight object.</param>
            <param name="ToBack">If true moves the object to the beginning of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLights.MakeIndexDictionary">
            <summary>
            Creates an Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must be followed by a <see cref="M:VectorDraw.Professional.vdCollections.vdLights.ClearIndexDictionary"/> call when the search or swap is finished. </remarks>
            <example> For a code example please check topic <see cref="M:VectorDraw.Professional.vdCollections.vdLights.swap(VectorDraw.Professional.vdFigures.vdLight,VectorDraw.Professional.vdFigures.vdLight)"/> Method. </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLights.ClearIndexDictionary">
            <summary>
            Clears the Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must follow a <see cref="M:VectorDraw.Professional.vdCollections.vdLights.MakeIndexDictionary"/> call when the search or swap is finished. </remarks>
            <example> For a code example please check topic <see cref="M:VectorDraw.Professional.vdCollections.vdLights.swap(VectorDraw.Professional.vdFigures.vdLight,VectorDraw.Professional.vdFigures.vdLight)"/> Method. </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLights.swap(VectorDraw.Professional.vdFigures.vdLight,VectorDraw.Professional.vdFigures.vdLight)">
            <summary>
            Swaps the position between two different vdLight objects existing in the collection.
            </summary>
            <param name="Object1">first object needed.</param>
            <param name="Object2">second object needed.</param>
            <returns>True if the swap operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLights.InsertAt(System.Int32,VectorDraw.Professional.vdFigures.vdLight)">
            <summary>
            Insert a vdLight object to a specified index of the collection.
            </summary>
            <param name="Index">The zero based index of the collection where the object will be inserted.</param>
            <param name="Object">The vdLight object which will be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLights.Add(System.String)">
            <summary>
            Creates and adds a vdLight object to the collection with the specified name.
            </summary>
            <param name="Name">The name of the inserted vdLight object.</param>
            <returns>Returns the added vdLight object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLights.FindName(System.String)">
            <summary>
            Finds a vdLight object with the specified name in the collection.
            </summary>
            <param name="Name">The name to search in the collection.</param>
            <returns>The found object else returns null if a vdLight does not exist with this name.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLights.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdLights object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLights.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdLghts object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLights.RemoveItem(System.Object)">
            <summary>
            Removes an object from the collection.
            </summary>
            <param name="item">The object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLights.AddItem(System.Object)">
            <summary>
            Adds an object to the collection.
            </summary>
            <param name="value">The object to be added.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLights.FindItem(System.Object)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">The object required for the search.</param>
            <returns>true if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLights.VectorDraw#Professional#vdCollections#IvdObjectCollection#Item(System.Int32)">
            <summary>
            Retreave a specific item placed at a specified index from the collection.
            </summary>
            <param name="Index">The index where the object is.</param>
            <returns>Returns the object at the specified index.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLights.GetObjectRealPosition(System.Object)">
            <summary>
            Find the index where a specified object is located in the list.
            </summary>
            <param name="item">The object to find.</param>
            <returns>Returns the index where the object is or -1 if the object is not in the list.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLights.InsertAt(System.Int32,System.Object)">
            <summary>
            Insert an object at a specified index.
            </summary>
            <param name="index">The index where the object will be inserted.</param>
            <param name="item">The object to be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLights.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements the vdLights collection object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLights.ItemType">
            <summary>
            Returns the Type of Items in the collection
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLights.Default">
            <summary>
            Get the default global vdLight object existing to the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLights.ListPosition">
            <summary>
            Gets the <see cref="T:VectorDraw.Generics.IListPosition"/> interface object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLights.Item(System.Int32)">
            <summary>
            Get a vdLight object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The vdLight object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLights.Last">
            <summary>
            Returns the last item in the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLights.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.vdImages">
            <summary>
            Implements the vdImages collection object used to store vdImageDef objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.AddResolveProperty(System.Object,System.String,System.String)">
            <summary>
            Adds the parameters to the resolve list of the collection.
            </summary>
            <param name="_ObjectOfProperty">The object with the property to set(for example a vdDimension object).</param>
            <param name="_PropertyName">A string representing the property name of the object(for example "Style")</param>
            <param name="_TableName">A string representing the table name.(for example "mystyle1").</param>
            <remarks>The resolve list of the collections is used to set to an object a property that is equal to 
            an item of the list which may not be added yet to the collection. This is usually used when opening a 
            format and you want to add a layer to a vdFigure and it is not certain that the layer is already added 
            to the document.Use resolve list at the end of an open procedure of a format to resolve these properties.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.ResolveProperties">
            <summary>
            Resolves all the properties added with the <see cref="M:VectorDraw.Professional.vdCollections.vdImages.AddResolveProperty(System.Object,System.String,System.String)"/> function.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.getUniqueTableName(System.String)">
            <summary>
            Creates a unique string for use as name to a vdImageDef object.
            </summary>
            <param name="prefix">A prefix string that will be present to the unique name.</param>
            <returns>Returns a unique string.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.ToString">
            <summary>
            Gets a System.String that represents the count of the vdImages collection Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.GetNotDeletedItemsAndVisibleOnForms">
            <summary>
            Get all non deleted objects of the collection.
            </summary>
            <returns>
            Returns a new created collection of vdImageDef objects that are not set as <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.Deleted"/>and also <see cref="P:VectorDraw.Professional.vdPrimaries.vdImageDef.VisibleOnForms"/> is true.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.GetNotDeletedItems">
            <summary>
            Get all non deleted objects of the collection.
            </summary>
            <returns>
            Returns a new created collection of vdImageDef objects that are not set as <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.Deleted"/>.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.#ctor">
            <summary>
            Initializes the vdImages collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.Purge">
            <summary>
            Sets as Deleted all vdImageDef objects that are not being used in the Collection's Document.
            </summary>
            <returns>Returns the number of unused vdImageDef objects that where set as Deleted.</returns>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnEraseObject"/> event for each deleted item.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.AddItem(VectorDraw.Professional.vdPrimaries.vdImageDef)">
            <summary>
            Adds a vdImageDef object to the collection.
            </summary>
            <param name="value">The vdImageDef object to be added to the collection.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAddItem"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterAddItem"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
            <remarks>
            All vdImageDef objects are removed from the collection.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.RemoveItem(VectorDraw.Professional.vdPrimaries.vdImageDef)">
            <summary>
            Removes a specific vdImageDef object from the collection.
            </summary>
            <param name="Object">The vdImageDef object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.RemoveAt(System.Int32)">
            <summary>
            Removes an object from the specified index of the collection.
            </summary>
            <param name="Index">The zero based index.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.FindItem(VectorDraw.Professional.vdPrimaries.vdImageDef)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">A vdImageDef object to be checked if it exists in the collection</param>
            <returns>True if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.InsertAt(System.Int32,VectorDraw.Professional.vdPrimaries.vdImageDef)">
            <summary>
            Insert a vdImageDef object to a specified index of the collection.
            </summary>
            <param name="Index">The zero based index of the collection where the object will be inserted.</param>
            <param name="Object">The vdImageDef object which will be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.ChangeOrder(VectorDraw.Professional.vdPrimaries.vdImageDef,System.Boolean)">
            <summary>
            Changes the position of a vdImageDef object to the front or the end of the collection.
            </summary>
            <param name="Object">The vdImageDef object.</param>
            <param name="ToBack">If true moves the object to the beginning of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.MakeIndexDictionary">
            <summary>
            Creates an Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must be followed by a <see cref="M:VectorDraw.Professional.vdCollections.vdImages.ClearIndexDictionary"/> call when the search or swap is finished. </remarks>
            <example> For a code example please check topic <see cref="M:VectorDraw.Professional.vdCollections.vdImages.swap(VectorDraw.Professional.vdPrimaries.vdImageDef,VectorDraw.Professional.vdPrimaries.vdImageDef)"/> Method. </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.ClearIndexDictionary">
            <summary>
            Clears the Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must follow a <see cref="M:VectorDraw.Professional.vdCollections.vdImages.MakeIndexDictionary"/> call when the search or swap is finished. </remarks>
            <example> For a code example please check topic <see cref="M:VectorDraw.Professional.vdCollections.vdImages.swap(VectorDraw.Professional.vdPrimaries.vdImageDef,VectorDraw.Professional.vdPrimaries.vdImageDef)"/> Method. </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.swap(VectorDraw.Professional.vdPrimaries.vdImageDef,VectorDraw.Professional.vdPrimaries.vdImageDef)">
            <summary>
            Swaps the position between two different vdImageDef objects existing in the collection.
            </summary>
            <param name="Object1">first object needed.</param>
            <param name="Object2">second object needed.</param>
            <returns>True if the swap operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.InsertCopyOf(VectorDraw.Professional.vdPrimaries.vdImageDef)">
            <summary>
            Adds a clone of the obj in the collection if it is not exist.
            </summary>
            <param name="obj">The object to be added.</param>
            <returns>The new added item.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.Add(System.String)">
            <summary>
            Creates and adds a vdImageDef object to the collection with the specified name.
            </summary>
            <param name="ImageName">The name of the inserted vdImageDef object.</param>
            <returns>Returns the added vdImageDef object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.Add(System.String,System.String)">
            <summary>
            Creates and adds a vdImageDef object to the collection with the specified name.
            </summary>
            <param name="ImageName">The name of the inserted vdImageDef object.</param>
            <param name="Filename">The name of the inserted vdImageDef object.</param>
            <returns>Returns the added vdImageDef object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.FindFullPathName(System.String)">
            <summary>
            Searches the collection for the given filename and returns the found vdImageDef object.
            </summary>
            <param name="ImageFileName">The Image File name without path,just name and extension.</param>
            <returns>Returns the vdImageDef object with the speciofied image file name or null if not found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.FindName(System.String)">
            <summary>
            Finds a vdImageDef object with the specified name in the collection.
            </summary>
            <param name="ImageName">The name to search in the collection.</param>
            <returns>The found object else returns null if a vdImageDef does not exist with this name.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdImages object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdImages object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.RemoveItem(System.Object)">
            <summary>
            Removes an object from the collection.
            </summary>
            <param name="item">The object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.AddItem(System.Object)">
            <summary>
            Adds an object to the collection.
            </summary>
            <param name="value">The object to be added.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.FindItem(System.Object)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">The object required for the search.</param>
            <returns>true if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.VectorDraw#Professional#vdCollections#IvdObjectCollection#Item(System.Int32)">
            <summary>
            Retreave a specific item placed at a specified index from the collection.
            </summary>
            <param name="Index">The index where the object is.</param>
            <returns>Returns the object at the specified index.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.GetObjectRealPosition(System.Object)">
            <summary>
            Find the index where a specified object is located in the list.
            </summary>
            <param name="item">The object to find.</param>
            <returns>Returns the index where the object is or -1 if the object is not in the list.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.InsertAt(System.Int32,System.Object)">
            <summary>
            Insert an object at a specified index.
            </summary>
            <param name="index">The index where the object will be inserted.</param>
            <param name="item">The object to be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdImages.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements the vdImages collection object used to store vdImageDef objects.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdImages.ItemType">
            <summary>
            Returns the Type of Items in the collection
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdImages.ListPosition">
            <summary>
            Gets the <see cref="T:VectorDraw.Generics.IListPosition"/> interface object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdImages.Item(System.Int32)">
            <summary>
            Get a vdImageDef object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The vdImageDef object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdImages.Last">
            <summary>
            Returns the last item in the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdImages.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.ImageDefTypeConverterNoExpand">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.ImageDefTypeConverterNoExpand.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.ImageDefTypeConverterNoExpand.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.ImageDefTypeConverterNoExpand.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.ImageDefTypeConverterNoExpand.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.ImageDefTypeConverter">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.ImageDefTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.ImageDefTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.ImageDefTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.ImageDefTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdImageDef">
            <summary>
            Implements all functionality for the vdImageDef object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdImageDef.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes the vdImageDef object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this constructor the is no need to call the SetUnRegisterDocument method in order to register the Document of this object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdImageDef.#ctor(VectorDraw.Professional.vdObjects.vdDocument,System.String)">
            <summary>
            Initializes the vdImageDef object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <param name="name">The name of the ImageDef object.</param>
            <remarks>Calling this constructor the is no need to call the SetUnRegisterDocument method in order to register the Document of this object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdImageDef.#ctor">
            <summary>
            Initializes the vdImageDef object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdImageDef.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.
            User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdImageDef.ApplyEffects(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            This method changes this vdImageDef's Bitmap by applying the passed effects controlled from the parameters. Note that after this call the Image will be Binded to the Document.
            </summary>
            <param name="Grayscale">A boolean value representing if a gray effect will be applied. Pass true in order to apply the Grayscale effect.</param>
            <param name="Sepia">A boolean value representing if a sepia effect will be applied. Pass true in order to apply the sepia effect.A standard value of 20 is used for this effect.</param>
            <param name="Invert">A boolean value representing is the colors of the Bitmap will be inverted. Pass true in order to Invert the colors.</param>
            <param name="brightness">An Integer value representing the Brightness to be applied to the Bitmap. Values should be from -255 to 255. Pass 0 to not apply any Brightness to the Bitmap.</param>
            <param name="contrast">An Integer value representing the Contrast to be applied to the Bitmap.Values should be from -100 to 100. Pass 0 to not apply any Contrast to the Bitmap.</param>
            <param name="ColorsRed">An Integer value representing the Red alteration of the Bitmap. Values should be from -255 to 255. Pass 0 to not apply any red effect to the Bitmap.</param>
            <param name="ColorsGreen">An Integer value representing the Green alteration of the Bitmap. Values should be from -255 to 255. Pass 0 to not apply any Green effect to the Bitmap.</param>
            <param name="ColorsBlue">An Integer value representing the Blue alteration of the Bitmap. Values should be from -255 to 255. Pass 0 to not apply any Blue effect to the Bitmap.</param>
            <param name="GammaRed">A double value that represents the Red Gamma effect to be applied. Valid values are from 0.2 to 5.0. Pass 1.0 to not apply any Red Gamma effect to the Bitmap.</param>
            <param name="GammaGreen">A double value that represents the Green Gamma effect to be applied. Valid values are from 0.2 to 5.0. Pass 1.0 to not apply any Green Gamma effect to the Bitmap.</param>
            <param name="GammaBlue">A double value that represents the Blue Gamma effect to be applied. Valid values are from 0.2 to 5.0. Pass 1.0 to not apply any Blue Gamma effect to the Bitmap.</param>
            <remarks>Note that after this call the Image will be Binded to the Document.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdImageDef.ApplyRotationFlip(VectorDraw.Render.vdRotateFlipTypeEnum)">
            <summary>
            This method changes this vdImageDef's Bitmap by applying the passed RotateFlipType Rotation and Flip.Note that after this call the Image will be Binded to the Document.
            </summary>
            <param name="type">A <seealso cref="T:VectorDraw.Render.vdRotateFlipTypeEnum"/> type to apply to this vdImageDef's Bitmap.</param>
            <remarks>Note that after this call the Image will be Binded to the Document.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdImageDef.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdImageDef.EmbedImage">
            <summary>
            Reads the selected image bytes and fill the <see cref="P:VectorDraw.Professional.vdPrimaries.vdImageDef.Bytes"/> property.
            </summary>
            <remarks>Embeded images are saved as byte array in the drawing.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdImageDef.GetPalette">
            <summary>
            Returns the Palette of the selected Bitmap or null if the bitmap is not ColorIndexed.
            </summary>
            <returns>The Palette of the selected Bitmap or null if the bitmap is not ColorIndexed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdImageDef.SelectPalette(System.Drawing.Color[])">
            <summary>
            Select a new palette for the selected image.
            </summary>
            <param name="colorPalette">An array of colors that defines the palette with length 2 or 16 or 256 or 0.</param>
            <returns>True if the palette of the image was changed.</returns>
            <remarks>The selected image must be a Systyem.Drawing.Bitmap object.
            After succesfully change of the image palette the image is bind using <see cref="M:VectorDraw.Professional.vdPrimaries.vdImageDef.EmbedImage"/> method.
            If the length of the colorPalette is 0 then the Image is converted to 24 bit format.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdImageDef.InternalSetBytes(VectorDraw.Geometry.ByteArray)">
            <summary>
            Sets the bytes for the image of the object.
            </summary>
            <param name="bytes">An array of bytes consisting an image.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdImageDef.InternalGetBytes">
            <summary>
            Returns an array of bytes containing the BITMAPFILEHEADER,BITMAPINFO and the image bytes.
            </summary>
            <returns>Returns an array of bytes containing the BITMAPFILEHEADER,BITMAPINFO and the image bytes.</returns>
            <remarks>This can be used with <see cref="M:VectorDraw.Professional.vdPrimaries.vdImageDef.InternalSetBytes(VectorDraw.Geometry.ByteArray)"/> in order to empended the image with the file.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdImageDef.GetHbitmap">
            <summary>
            Creates a GDI bitmap object from this System.Drawing.Bitmap.
            </summary>
            <returns>Returns a GDI bitmap object from this System.Drawing.Bitmap.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdImageDef.SetImageFromDataObject(System.Runtime.InteropServices.ComTypes.IDataObject)">
            <summary>
            Set Image from a DataObject.
            </summary>
            <param name="dataobject">A DataObject that contains an Image</param>
            <returns>True is success.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdImageDef.ImageAsDataObject">
            <summary>
            Create a DataObject that contain a copy of the Image.
            </summary>
            <returns>A DataObject that contain a copy of the Image.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdImageDef.ImageAsDataObject(System.Int32)">
            <summary>
            Creates a DataObject that contain a copy of the Image in 24 bit per pixel format and reducing the size of original image in depend of passed maxImageMemBytes.
            </summary>
            <param name="maxImageMemBytes">Maximum size in bytes of the return data object</param>
            <returns>A DataObject that contain a copy of the Image.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdImageDef.IsImageValid">
            <summary>
            Checks if the object's Image reference is valid.
            </summary>
            <returns>True if the object's Image reference is valid.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdImageDef.Save(System.String)">
            <summary>
            Saves this System.Drawing.Image to the specified file.
            </summary>
            <param name="filename">A string that contains the name of the file to which to save this System.Drawing.Image.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdImageDef.InitializeProperties">
            <summary>
            Resets the properties of the vdDimstyle object to the Default values.
            </summary>
            <remarks>
            Default Values:Transparency = Empty.
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdImageDef.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdImageDef.OnOwnerChanged">
            <summary>
            This method is called when the object's owner is changed.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdImageDef.ToString">
            <summary>
            Gets a System.String that represents the name of the vdImageDef Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdImageDef.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdImageDef object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdImageDef.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdImageDef object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdImageDef.Dispose">
            <summary>
            Releases all resources used by this image of the definition.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdImageDef.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements all functionality for the vdImageDef object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdImageDef.FileName">
            <summary>
            Get/Set the filename of the vdImageDef's image.
            </summary>
            <remarks>
            Default value "".
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdImageDef.Name">
            <summary>
            Get/Set the name of the object.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <exception cref="T:VectorDraw.Professional.Exceptions.InvalidTableNameException"></exception>
            <exception cref="T:VectorDraw.Professional.Exceptions.CannotRenameException">Thrown when cannot rename an object.</exception>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdImageDef.Width">
            <summary>
            Get the width of the image in pixels.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdImageDef.Height">
            <summary>
            Get the height of the image in pixels.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdImageDef.NumColors">
            <summary>
            Get the number of colors the image has.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdImageDef.Transparency">
            <summary>
            Get/Set the color to be used as transparent for the image.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdImageDef.InterpolationMode">
            <summary>
             specifies the algorithm that is used when images are scaled.
            </summary>
            <remarks>
            Default value is <see cref="F:VectorDraw.Render.ImageBind.ImageInterpolationMode.Bilinear"/>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdImageDef.Image">
            <summary>
            Get the ImageBind image object of the object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdImageDef.Bytes">
            <summary>
            Get an array of bytes that consist the image of the object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdImageDef.Deleted">
             <summary>
             Get/Set a property that marks the object as Deleted or not.
             </summary>
            <exception cref="T:VectorDraw.Professional.Exceptions.CannotDeleteException">Thrown when an object cannot be deleted.</exception>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdImageDef.VisibleOnForms">
            <summary>
            Get/Set a boolean value representing if the vdImageDef will be viewed in Vectordraw forms.
            </summary>
            <remarks>
            Default value is true.
            The ToString value of the vdImages also takes consideration this value and if it is false then the count returned does not contain these items.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdImageDef.FrameCount">
            <summary>
            Get the number of pages the image has.
            </summary>
            <remarks>Only some special TIFF files have multiple pages.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdImageDef.ActiveFrame">
            <summary>
            Get/Set the number of page the vdImageDef will be used when draw.
            </summary>
            <remarks>Only some special TIFF files have multiple pages.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdImageDef.IsEmbeded">
            <summary>
            Returns true is object contains a valid Image defined from a Byte array and not from a File name.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.vdDialogEditor">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.vdDialogEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.vdDialogEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.vdDialogEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.frmTextStyle">
            <summary>
            Implements The Textstyles manager.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmTextStyle.#ctor">
            <summary>
            Initializes the dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmTextStyle.InitializeExtra(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes The Textstyles manager.
            </summary>
            <param name="doc">The Document where the textstyles are.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmTextStyle.Show(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Used to show the dialog.
            </summary>
            <param name="doc">The Document where the textstyles are.</param>
            <returns>A DailogResult indicating the user's action.</returns>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmTextStyle.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmTextStyle.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmTextStyle.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmTextStyle.groupBox1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmTextStyle.buttonDelete">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmTextStyle.buttonRename">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmTextStyle.buttonNew">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmTextStyle.comboStyles">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmTextStyle.imageList1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmTextStyle.groupBox2">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmTextStyle.checkSHX">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmTextStyle.comboTTF">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmTextStyle.label1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmTextStyle.textHeight">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmTextStyle.label2">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmTextStyle.comboBF">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmTextStyle.groupBox3">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmTextStyle.checkOverLine">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmTextStyle.checkStrikeOut">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmTextStyle.checkUnderline">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmTextStyle.checkItalic">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmTextStyle.checkBold">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmTextStyle.groupBox4">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmTextStyle.buttonPreview">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmTextStyle.textPreview">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmTextStyle.picturePreview">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmTextStyle.buttonOK">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmTextStyle.buttonCancel">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmTextStyle.buttonMore">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmTextStyle.propertyStyle">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmTextStyle.formToolTip">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionHelix">
            <summary>
            Implements the ActionHelix object used when adding a vdHelix object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionHelix.#ctor(VectorDraw.Geometry.gPoint,System.Double,VectorDraw.Professional.vdPrimaries.vdLayout,System.Double,System.Double)">
            <summary>
            Initializes of the action with the passed parameters.
            </summary>
            <param name="BaseCenter">The center of the helix.</param>
            <param name="BaseRadius">The base radius of the helix.</param>
            <param name="layout">The layout where the action takes place.</param>
            <param name="SAngle">The start angle of the helix.</param>
            <param name="Turns">The turns of the helix.</param>
            <remarks>The user selects the top radius of the helix with this action.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionHelix.#ctor(VectorDraw.Geometry.gPoint,System.Double,VectorDraw.Professional.vdPrimaries.vdLayout,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Initializes of the action with the passed parameters.
            </summary>
            <param name="BaseCenter">The center of the helix.</param>
            <param name="BaseRadius">The base radius of the helix.</param>
            <param name="layout">The layout where the action takes place.</param>
            <param name="SAngle">The start angle of the helix.</param>
            <param name="Turns">The turns of the helix.</param>
            <param name="TopRadius">The Top radius of the helix.</param>
            <param name="SetHeight">A boolean value representing if the action will be used to select the height of the helix.</param>
            <remarks>The user selects the top radius of the helix with this action.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionHelix.OnMyPositionChanged(VectorDraw.Geometry.gPoint)">
            <summary>
            Called when the mouse position changes.Changes the created circle entity in order to be drawn each time the mouse moves.
            </summary>
            <param name="newPosition">A gPoint representing the new mouse position in User Coordinate System.</param>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionHelix.HideRubberLine">
            <summary>
            Get a value that represents if the rubber line is drawn or not.Returns false since a rubber line is needed.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionHelix.Entity">
            <summary>
            The entity which is currently selected for this action.Returns the created circle.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionHelix.needUpdate">
            <summary>
            Get a value that represents if the entity should be updated after each position change.Returns true since an update is needed.
            </summary>
        </member>
        <member name="M:RenderFormats.JavaScriptObjectWiter.SetDecimalPrecision(System.UInt32)">
            <summary>
            Get/Set the double precision used when saving double values. 
            </summary>
        </member>
        <member name="M:RenderFormats.JavaScriptObjectWiter.SaveDrawing(VectorDraw.Professional.vdObjects.vdDocument,System.String,System.Boolean,System.String[],VectorDraw.Professional.vdCollections.vdPrimariesList,System.UInt32,System.Char[],System.Boolean,System.String,System.Int32,System.Boolean,VectorDraw.Professional.vdObjects.vdDocument.ExportScriptFlags)">
            <summary>
            Returns an array of exported files names.The first is the basic drawing and the rest ones are the External references
            </summary>
        </member>
        <member name="M:RenderFormats.JavaScriptObjectWiter.ConvertPropertyValue(System.Object,System.String@,VectorDraw.Serialize.ScriptSerialize,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Changes property name that will be written , and returns a customized value or the same value if not changed.
            </summary>
        </member>
        <member name="P:RenderFormats.JavaScriptObjectWiter.DoublePrecisionFormat">
            <summary>
            Get the format precision string used for the ToString of the objects and for saving a double value.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDummyRectExpandableConverter">
            <summary>
            Dummy TypeConverter to hide Font expandable properties.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDummyRectExpandableConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDummyRectExpandableConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
             Internally used. 
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.PrinterSetupTypeEditor">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.PrinterSetupTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
             Internally used. 
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.PrinterSetupTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Internally used. 
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.PrinterScale">
            <summary>
            Implements an object for the printing scale of the vdPrint object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.PrinterScale.#ctor">
            <summary>
            Initializes the object with 1.0 value to the properties.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.PrinterScale.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="numerator">The numerator to set.</param>
            <param name="denumerator">The denumerator to set.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.PrinterScale.#ctor(VectorDraw.Professional.vdObjects.PrinterScale)">
            <summary>
            Initializes the object from another same type object.
            </summary>
            <param name="from">Another PrinterScale object.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.PrinterScale.FromString(System.String)">
            <summary>
            Sets the object's properties using a ToString string.
            </summary>
            <param name="str">The string to parse.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.PrinterScale.ToString(VectorDraw.Serialize.Serializer)">
            <summary>
            Represents the Numerator and Denumerator values to a string.
            </summary>
            <param name="serializer">the Serializer object where the object is going to be saved.</param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.PrinterScale.ToString">
            <summary>
            Represents the Numerator and Denumerator values to a string.
            </summary>
            <returns>A string that represents the object's properties.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.PrinterScale.Numerator">
            <summary>
            The number of millimeters in the printer paper.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.PrinterScale.Denumerator">
            <summary>
            Number of drawing units in printable drawing area.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.MARGINS">
            <summary>
            Implements an object used for printing paper MARGINS.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.MARGINS.#ctor">
            <summary>
            Initializes the MARGINS object with 0 values to it's properties.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.MARGINS.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="left">Left paper margin.</param>
            <param name="top">Top paper margin.</param>
            <param name="right">Right paper margin.</param>
            <param name="bottom">Bottom paper margin.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.MARGINS.SetFrom(VectorDraw.Professional.vdObjects.MARGINS)">
            <summary>
            Copies the passed values to this object.
            </summary>
            <param name="from">Another MARGINS object.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.MARGINS.FromString(System.String)">
            <summary>
            Sets the object's properties using a ToString string.
            </summary>
            <param name="str">The string to parse.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.MARGINS.ToString(VectorDraw.Serialize.Serializer)">
            <summary>
            A string that represents the Left,Top,Bottom,Right values.
            </summary>
            <param name="serializer">the Serializer object where the object is going to be saved.</param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.MARGINS.ToString">
            <summary>
            A string that represents the Left,Top,Bottom,Right values.
            </summary>
            <returns>A string that represents the object's properties.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.MARGINS.GetHashCode">
            <summary>
            Serves as a hash function for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.MARGINS.Equals(System.Object)">
            <summary>
            Checks if the properties of the passed object are equal to this object.
            </summary>
            <param name="obj">Another MARGINS object.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.MARGINS.Equals(VectorDraw.Professional.vdObjects.MARGINS)">
            <summary>
            Checks if the properties of the passed object are equal to this object.
            </summary>
            <param name="p">Another MARGINS object.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.MARGINS.op_Equality(VectorDraw.Professional.vdObjects.MARGINS,VectorDraw.Professional.vdObjects.MARGINS)">
            <summary>
            Implements the == operator for two MARGINS objects.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.MARGINS.op_Inequality(VectorDraw.Professional.vdObjects.MARGINS,VectorDraw.Professional.vdObjects.MARGINS)">
            <summary>
            Implements the != operator for two MARGINS objects.
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.MARGINS.Left">
            <summary>
            Left paper margin.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.MARGINS.Top">
            <summary>
            Top paper margin.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.MARGINS.Right">
            <summary>
            Right paper margin.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.MARGINS.Bottom">
            <summary>
            Bottom paper margin.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.SIZE">
            <summary>
            Implements an object that represents the printing paper.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.SIZE.Width">
            <summary>
            The width of the printing paper.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.SIZE.Height">
            <summary>
            The height of the printing paper.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.SIZE.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the object with the given parameters.
            </summary>
            <param name="width">The width to set.</param>
            <param name="height">The height to set.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.SIZE.ToString">
            <summary>
            A string that represents the Width and height values.
            </summary>
            <returns>A string that represents the object's properties.</returns>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdPrint">
            <summary>
            Implements the vdPrint object for printing a document.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.#ctor">
            <summary>
            Initializes the vdPrint object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.CopyFrom(VectorDraw.Professional.vdObjects.vdPrint)">
            <summary>
            Copies all printer's properties from the passed parameter.
            </summary>
            <param name="printer">The vdPrint object from which the properties are going to be copied from.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.#ctor(VectorDraw.Professional.vdObjects.vdPrint)">
            <summary>
            Initializes the vdPrint object matching the passed printer object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.WhitePaperHInch">
            <summary>
            The paper rectangle in hundrends of inches with hard and soft margins
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.PrintablePaperExMaringsHInch">
            <summary>
            The printable paper area in hundrends of inches without hard and soft margins
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.VdprintableRectHInch">
            <summary>
            The rectangle of the printable selected window in hundrends of inches relative to the printer paper 
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.PrintablePaperDU">
            <summary>
            Returns the rectanle in Drawing Units of Current View for the selected printer paper without the hard Margins.
            </summary>
            <returns>The rectanle in Drawing Units of Current View for the selected printer paper without the hard Margins.</returns>
            <example>
            get the printable area with out margins in Drawing units.
            <code>
                        vdLayout layout = doc.LayOuts.Add("Test");
                        doc.ActiveLayOut = layout;
                        layout.Printer.PrinterName = "system";
            
                        layout.Printer.paperSize = new Rectangle(0, 0, 827, 1169);//select A4 paper size
                        layout.Printer.PrintWindow = new Box(new gPoint(0,0),new gPoint(105,148));//select a print window that fits to A6 paper(note : scale of printer is 1:1)
            
                        //put some marging in hundrends of inches (10mm ,20mm,30mm,40mm)
                        layout.Printer.margins = new MARGINS((int)(10 * 100.0d / 25.4d), (int)(20 * 100.0 / 25.4d), (int)(30 * 100.0 / 25.4d), (int)(40 * 100.0 / 25.4d));
            
                        //represents the scaling from a printerpaper in hundrends of inches to drawing units on the vdraw screen
                        double PrinterHInch2DUScale = (Globals.INCH_MM / 100.0d) * (layout.Printer.PrintScale.Denumerator / layout.Printer.PrintScale.Numerator);
            
            
                        //get the the printable area in vectordraw drawing units with out hardware margings
                        Box b = layout.Printer.PrintablePaperDU();
            
                        //remove the software margins set above..
                        gPoint ul = b.UpperLeft + new gPoint(layout.Printer.margins.Left, -layout.Printer.margins.Top) * PrinterHInch2DUScale;
                        gPoint lr = b.LowerRight - new gPoint(layout.Printer.margins.Right, -layout.Printer.margins.Bottom) * PrinterHInch2DUScale; ;
                        //create a rect to show the result as a vdRect object.
                        Box rect = new Box(ul, lr);
                        layout.Entities.AddItem(new vdRect(doc, rect.Min, rect.Width, rect.Height, 0));
                        doc.Redraw(true);
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.PrintablePaperHInch">
            <summary>
            Returns the rectangle of the selected printer paper in hundrends of inches without the Hard Margins.
            </summary>
            <returns>The rectangle of the selected printer paper in hundrends of inches without the Hard Margins.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.VdprintableRectDU">
            <summary>
            Returns the rectangle in Drawing Units of Current View for the printable selected area.
            </summary>
            <returns>The rectangle in Drawing Units of Current View for the printable selected area.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.WhitePaperDU">
            <summary>
            Returns the rectangle in Drawing Units of Current View for the selected printer paper with the Margins.
            </summary>
            <returns>The rectangle in Drawing Units of Current View for the selected printer paper with the Margins.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.SetLayout(VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Select the passed vdLayout object for the vdPrint object.
            </summary>
            <param name="layout">A vdLayout object to be printed out.</param>       
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.RenderToGraphics(System.Drawing.Graphics)">
            <summary>
            Prints the into the passed Graphics device context.
            </summary>
            <param name="gr">A Graphics device context to be used as printing output.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.RenderToGraphics(System.Drawing.Graphics,System.Drawing.Color)">
            <summary>
            Prints the into the passed Graphics device context.
            </summary>
            <param name="gr">A Graphics device context to be used as printing output.</param>
            <param name="bkcolor">Color used to fill the background.Default value is Color.White .</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.ViewToPrinterPixels">
            <summary>
            Returns a <see cref="T:VectorDraw.Geometry.Matrix"/> used to convert from View coordinates of selected <see cref="P:VectorDraw.Professional.vdObjects.vdPrint.Layout"/> to output Pixels.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.InitializeProperties">
            <summary>
            Resets the properties of the vdPrint object to the Default values.
            </summary>
            <remarks>
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.ToString">
            <summary>
            Gets a System.String that represents the PrinterName of the vdPrint Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.PrintExtents">
            <summary>
            Changes the <see cref="P:VectorDraw.Professional.vdObjects.vdPrint.PrintWindow"/> property to the extends of the selected vdLayout for the vdPrint object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.UpsideDown">
            <summary>
            Inverts the <see cref="P:VectorDraw.Professional.vdObjects.vdPrint.margins"/> in order the print origin to be closer to LowerRight instead UperLeft or the opposit.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.CenterDrawingToPaper">
            <summary>
            Changes the Margins of the drawing forcing it to be printed out to the center of the drawing.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.PrintScaleToFit">
            <summary>
            Changes the <see cref="P:VectorDraw.Professional.vdObjects.vdPrint.PrintScale"/> property so the selected printing area fits to the printer paper.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.PrintablePaperExMaringsDU">
            <summary>
            The printable paper area in Drawing units without hard and soft margins
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.PrinterDialog">
            <summary>
            Get the frmPrintManager dialog object of the vdPrint object.
            </summary>
            <returns>Returns the frmPrintManager dialog.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.CreatePrintPageEvent(System.Drawing.Graphics,System.Drawing.Printing.PrintDocument)">
            <summary>
            Internally used only.
            </summary>
            <param name="gr"></param>
            <param name="printerDocument"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.UpdatePropertiesFromDefaultPrinter">
            <summary>
            Changes the properties of the vdPrint object using the system's default printer and its settings (paper, orientation etc).
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.UpdatePropertiesFromPrinter(System.Drawing.Printing.PrintDocument)">
            <summary>
            Changes the properties of the vdPrint object using the passed PrintDocument.
            </summary>
            <param name="printerDocument">A PrintDocument that represents a printer device.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.UpdatePrinterFromProperties">
            <summary>
            Passes the vdPrint properties to the selected printer.
            </summary>
            <returns>Returns the selected system printer with the macthed properties.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.SelectPaper(System.String)">
             <summary>
             Chenge the paper of the selected printer.
             </summary>
             <param name="Paper">A string value that represents a valid paper name for the selected printer.</param>
            <seealso cref="M:VectorDraw.Professional.vdObjects.vdPrint.GetPapers"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.GetPaper">
            <summary>
            Get the name of the selected paper.
            </summary>
            <returns>A string that represents the selected printer paper.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.GetPapers">
            <summary>
            Get all supported paper names for the selected printer.
            </summary>
            <returns>An array of strings representing all the supported papers from the selected printer.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.DrawToBitmap(System.Single,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Simulates the printing output to a bitmap to use to a print preview dialog.
            </summary>
            <param name="DpiY">The resolution to use.</param>
            <param name="BitmapRect">The printing rectangle to print out of the selected vdLayout object.</param>
            <param name="partial">If true then the objects are not drawn and only a rectangle is drawn to the bitmap paper showing the print out.This value is used for speed in generating the preview image.</param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.PrinterSetup">
            <summary>
            Shows a dialog to select a printer and modify it's properties.Also sets the selected printer's properties to the vdPrint object.
            </summary>
            <returns>A System.Windows.Forms.DialogResult representing the user's action.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.InitializePreviewFormProperties(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes The properties for the Printer dialog.
            </summary>
            <param name="Extends">If true initializes the dialog with extends else with window.</param>
            <param name="ScaleToFit">If true scales the drawing to fir to the printing paper.</param>
            <param name="inches">If true the measurements are in inches else they are in millimeters.</param>
            <param name="partial">Partial preview is initializes else full preview of the drawing.</param>
            <param name="PenAsigmentInches">True if you want the user to see the PenAsigment dialog in Inches.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.InitializePreviewFormProperties(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes The properties for the Printer dialog.
            </summary>
            <param name="Extends">If true initializes the dialog with extends else with window.</param>
            <param name="ScaleToFit">If true scales the drawing to fir to the printing paper.</param>
            <param name="inches">If true the measurements are in inches else they are in millimeters.</param>
            <param name="partial">Partial preview is initializes else full preview of the drawing.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.InitializePreviewFormProperties(System.Boolean,System.Boolean)">
            <summary>
            Initializes The properties for the Printer dialog.
            </summary>
            <param name="Extends">If true initializes the dialog with extends else with window.</param>
            <param name="ScaleToFit">If true scales the drawing to fir to the printing paper.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.DialogPreview">
            <summary>
            Shows the VectorDraw print preview dialog.
            </summary>
            <returns>True if the user presses ok(and the vdLayout object is printed out) and false if the user presses cancel.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.ExportToLines">
            <summary>
            Exports the printable view area into a vdDocument object that contains single lines for all drawing objects.
            </summary>
            <returns>A new a vdDocument object that contains single lines for all drawing objects.</returns>
            <remarks>
            Viewports of layouts are not exported.
            3d views are exported as <see cref="F:VectorDraw.Render.vdRender.Mode.Hide"/> rendering mode.
            Exported lines are cliped inside <see cref="P:VectorDraw.Professional.vdObjects.vdPrint.PrintWindow"/> area.
            Exported lines are tranformed relative to printer paper in milimiters with origin the UperLeft corner.
            All lines are added in the Model layout of the return document object and belongs to default Layer "0" with forground color.
            Expoting lines of a printer view into a vdcl file can be also done by seting the <see cref="P:VectorDraw.Professional.vdObjects.vdPrint.PrinterName"/> to an existing file with .vdcl extension.
            </remarks>
            <example>
            create a block of the model printer and add it into a new layout with name "model view"
            <code>
                            vdDocument blockDocument = doc.Model.Printer.ExportToLines();
                            vdBlock block = doc.Blocks.AddFromDocument("modelview", blockDocument, true);
                            vdLayout layout_with_modelview = doc.LayOuts.Add("model view");
                            vdInsert insert = new vdInsert(doc,block,new gPoint(0,0),0.0,1.0,1.0,1.0);
                            layout_with_modelview.Entities.AddItem(insert);
                            doc.ActiveLayOut = layout_with_modelview;
                            doc.CommandAction.Zoom("e", null, null);
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.PrintOutPage">
            <summary>
            Prints the selected vdLayout object to the selected printer device as a single page in a multi page printing operation.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.PrintOut">
            <summary>
            Prints the selected vdLayout object to the selected printer device.
            </summary>
            <returns>True if successfully printed.</returns>
            <remarks>
            PerspectiveMode scenes are always printed with Layout view area fit to printer paper.
            When exporting into an EMF file (PrinterName property is a file with full path which ends with .emf extension) then the EMF resolution gets the closest matching resolution of the default printer's resolutions with <see cref="P:VectorDraw.Professional.vdObjects.vdPrint.Resolution"/> property.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdPrint object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdPrint object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPrint.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements the vdPrint object for printing a document.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPrint.UseDefaultPrinterBkColor">
            <summary>
            Specifies if the <see cref="M:VectorDraw.Professional.vdObjects.vdPrint.PrintOut"/> will use the default printer background or keep the backround of the screen.
            </summary>
            <remarks>
            Defalt value is true. default printer background is White.
            This value is not saved to document and added to undo history.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPrint.DrawPaperHWMargins">
            <summary>
            et/Set the linetype that the printer's paper hardware margins are rendered.
            </summary>
            <remarks>
            Default value is dashed linetype.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPrint.Resolution">
            <summary>
            Get/Set the printer's resolution in Dot per inch.
            </summary>
            <remarks>
            Default value is 96 DPI.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPrint.AutoUpdate">
            <summary>
            Specifies whether the automatic update will be called in order, circles, arcs, ellipses make use of smaller line segments for better quality.
            </summary>
            <remarks>
            Default value is true.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPrint.Layout">
            <summary>
            Get the vdLayout object which entities will be printed out.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPrint.MaxBitmapSize">
            <summary>
            This property is no longer in used.Use vdDocument.GlobalRenderProperties.MaxBmpMemorySize property instead.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPrint.PrintAsAPIWhenPossible">
            <summary>
            Get/Set a boolean value representing the way to use when printing.
            </summary>
            <remarks>
            If this value is true then prints using direct windows API calls if posible else prints using a Bitmap.
            Default value true.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPrint.DisplayStatusDialog">
            <summary>
            Enable / Disable the printing status dialog.
            </summary>
            <remarks>Default value is false.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPrint.DocumentName">
            <summary>
            Get/Set a string value that represents the printing document name.
            </summary>
            <remarks>
            Default value is "VectorDraw Printing Document".
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPrint.ColorPalette">
            <summary>
             Get/Set the output color palette 
            </summary>
            <remarks>Deafault value <see cref="F:VectorDraw.Render.vdRender.ColorDisplay.TrueColor"/></remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPrint.OutInBlackWhite">
            <summary>
            Get/Set a value that represents if the output printing colors are all black.
            </summary>
            <remarks>
            Default value False.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPrint.Penwidth">
            <summary>
            Get/Set an array of doubles that represent the pen width for each color in the palette in millimeters.
            </summary>
            <remarks>
            By default this array is initialized as a 255 array of 0.0 values.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPrint.PrinterName">
            <summary>
            Get/Set the selected printer name.
            </summary>
            <remarks>
            Default value is an empty string "" which means that the default printer will be used to print out the document.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPrint.LandScape">
            <summary>
            Get/Set a boolean value representing the paper orientation.
            </summary>
            <remarks>
            Default value False which means Portrait.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPrint.paperSize">
            <summary>
            Get/Set a Rectangle object which represents the paper size in portrait orientation.
            WARNING! In case of raster type files you should keep in mind that the maximum size of bitmap advised
            is 1GB. This is a size of 16384 X 16384 pixels multiplied by 4 (all pixels consist of 4 bytes). 
            Papersize width and height are calculated by the formula width(or height) / 100 * resolution. Resolution is defined as pixels per inches.
            </summary>
            <remarks>
            This value is in hundrends of an inch and default value is (0, 0, 827, 1169).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPrint.margins">
            <summary>
            Get/Set the MARGINS of the vdPrint object in hundrends of inches.
            </summary>
            <remarks>
            MARGINS are in hundrends of inches and default values are :(0,0,0,0)
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPrint.Hardmargins">
            <summary>
            Get the hard paper margins of the selected printer in hundrends of inches in current orientation.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPrint.PrintableAreaMM">
            <summary>
            Get the printable area without hard margins in hundrends of millimeters in current orientation.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPrint.HardmarginsMM">
            <summary>
            Get the hard margins of selected printer in hundrends of millimeters in current orientation.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPrint.PrintScale">
            <summary>
            Get/Set the PrinterScale of the vdPrint object.
            </summary>
            <remarks>
            Default value is 1.0/1.0 .
            If PerspectiveMode of reference <see cref="P:VectorDraw.Professional.vdObjects.vdPrint.Layout"/> is <see cref="F:VectorDraw.Render.vdRender.VdConstPerspectiveMod.PerspectON"/> and RenderMode is 3d then always returns a Scale that Fit the PrintWindow to printer paper
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPrint.PrintWindow">
            <summary>
            Get/Set a Box that represents the drawing rectangle to be printed out.The Box is in drawing units in Current View Coordinate System.
            </summary>
            <remarks>
            By default returns the current display limits of the reference layout.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPrint.Copies">
            <summary>
            Get/Set the number of copies to be printed out.
            </summary>
            <remarks>
            Default value is 1.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPrint.PrinterHInch2DUScale">
            <summary>
            convert printer hinches to drawing units depend of printer scale
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPrint.IgnoreGradientBG">
             <summary>
            Enable / Disable the printing and the print preview of the background gradient color.
             </summary>
             <remarks>Default value is false. This applies ONLY for Model Space and Layouts and not for Vieports.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPrint.Document">
            <summary>
            Gets the vdDocument that the object belongs.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdPrint.DrawPaperHWMarginsEnum">
            <summary>
            Controls the linetype of the printer's Hardware Margins that are rendered on screen.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdPrint.DrawPaperHWMarginsEnum.Default">
            <summary>
            The Default way the Hardware Margins are rendered on screen. A dashed line is used for them.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdPrint.DrawPaperHWMarginsEnum.Solid">
            <summary>
            The Printer Herdware Margins are rendered with a solid line.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.vdDimstyles">
            <summary>
            Represents a collection of <see cref="T:VectorDraw.Professional.vdPrimaries.vdDimstyle"/> objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.AddResolveProperty(System.Object,System.String,System.String)">
            <summary>
            Adds the parameters to the resolve list of the collection.
            </summary>
            <param name="_ObjectOfProperty">The object with the property to set(for example a vdDimension object).</param>
            <param name="_PropertyName">A string representing the property name of the object(for example "Style")</param>
            <param name="_TableName">A string representing the table name.(for example "mystyle1").</param>
            <remarks>The resolve list of the collections is used to set to an object a property that is equal to 
            an item of the list which may not be added yet to the collection. This is usually used when opening a 
            format and you want to add a layer to a vdFigure and it is not certain that the layer is already added 
            to the document.Use resolve list at the end of an open procedure of a format to resolve these properties.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.ResolveProperties">
            <summary>
            Resolves all the properties added with the <see cref="M:VectorDraw.Professional.vdCollections.vdDimstyles.AddResolveProperty(System.Object,System.String,System.String)"/> function.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.getUniqueTableName(System.String)">
            <summary>
            Creates a unique string for use as name to a vdDimstyle object.
            </summary>
            <param name="prefix">A prefix string that will be present to the unique name.</param>
            <returns>Returns a unique string.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.GetNotDeletedItemsAndVisibleOnForms">
            <summary>
            Get all non deleted objects of the collection.
            </summary>
            <returns>
            Returns a new created collection of vdDimstyle objects that are not set as <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.Deleted"/>and also <see cref="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.VisibleOnForms"/> is true. The array is sorted alphabetically by the name of the object.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.GetNotDeletedItems">
            <summary>
            Get all non deleted objects of the collection.
            </summary>
            <returns>
            Returns a new created collection of vdDimstyle objects 
            that are not set as <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.Deleted"/>.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.IsDefault(VectorDraw.Professional.vdObjects.vdPrimary)">
            <summary>
            Checks if the parameter passed is the standard vdDimstyle object.
            </summary>
            <param name="obj">A vdPrimary object to be checked if it is equal referenced to the standard vdDimstyle object.</param>
            <returns>True if the passed object is equal referenced with the standard vdDimstyle object of the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.ToString">
            <summary>
            Gets a System.String that represents the count of the vdDimstyles collection Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.#ctor">
            <summary>
            Initializes the vdDimstyles object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.Purge">
            <summary>
            Sets as Deleted all vdDimstyles that are not being used in the Collection's Document.
            </summary>
            <returns>Returns the number of unused vdDimstyle objects that where set as Deleted.</returns>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnEraseObject"/> event for each deleted item.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.EnsureDefaults">
            <summary>
            Ensures the default values to the properties of the standard vdDimstyle object and it's vdFigure objects that contains.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.InitDefaults(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Ensures the existance of the standard vdDimstyle object and also sets the document parameter
            to be the document of the collection.
            </summary>
            <param name="document">The Document object of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.FindItem(VectorDraw.Professional.vdPrimaries.vdDimstyle)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">A vdDimstyle object to be checked if it exists in the collection</param>
            <returns>True if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.AddItem(VectorDraw.Professional.vdPrimaries.vdDimstyle)">
            <summary>
            Adds a vdDimstyle object to the collection.
            </summary>
            <param name="value">The vdDimstyle object to be added to the collection.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAddItem"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterAddItem"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
            <remarks>
            All vdDimstyles objects are removed even the standard.Call EnsureDefaults method in 
            order to create the standard vdDimstyle object after removing all the item's of the collection.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.RemoveItem(VectorDraw.Professional.vdPrimaries.vdDimstyle)">
            <summary>
            Removes a specific vdDimstyle object from the collection.
            </summary>
            <param name="Object">The vdDimstyle object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.RemoveAt(System.Int32)">
            <summary>
            Removes an object from the specified index of the collection.
            </summary>
            <param name="Index">The zero based index.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.InsertAt(System.Int32,VectorDraw.Professional.vdPrimaries.vdDimstyle)">
            <summary>
            Insert a vdDimension object to a specified index of the collection.
            </summary>
            <param name="Index">The zero based index of the collection where the object will be inserted.</param>
            <param name="Object">The vdDimension object which will be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.ChangeOrder(VectorDraw.Professional.vdPrimaries.vdDimstyle,System.Boolean)">
            <summary>
            Changes the position of a vdDimstyle object to the front or the end of the collection.
            </summary>
            <param name="Object">The vdDimstyle object.</param>
            <param name="ToBack">If true moves the object to the beginning of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.MakeIndexDictionary">
            <summary>
            Creates an Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must be followed by a <see cref="M:VectorDraw.Professional.vdCollections.vdDimstyles.ClearIndexDictionary"/> call when the search or swap is finished. </remarks>
            <example> For a code example please check topic <see cref="M:VectorDraw.Professional.vdCollections.vdDimstyles.swap(VectorDraw.Professional.vdPrimaries.vdDimstyle,VectorDraw.Professional.vdPrimaries.vdDimstyle)"/> Method. </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.ClearIndexDictionary">
            <summary>
            Clears the Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must follow a <see cref="M:VectorDraw.Professional.vdCollections.vdDimstyles.MakeIndexDictionary"/> call when the search or swap is finished. </remarks>
            <example> For a code example please check topic <see cref="M:VectorDraw.Professional.vdCollections.vdDimstyles.swap(VectorDraw.Professional.vdPrimaries.vdDimstyle,VectorDraw.Professional.vdPrimaries.vdDimstyle)"/> Method. </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.swap(VectorDraw.Professional.vdPrimaries.vdDimstyle,VectorDraw.Professional.vdPrimaries.vdDimstyle)">
            <summary>
            Swaps the position between two different vdDimstyle objects existing in the collection.
            </summary>
            <param name="Object1">first object needed.</param>
            <param name="Object2">second object needed.</param>
            <returns>True if the swap operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.InsertCopyOf(VectorDraw.Professional.vdPrimaries.vdDimstyle)">
            <summary>
            Adds a clone of the obj in the collection if it is not exist.
            </summary>
            <param name="obj">The object to be added.</param>
            <returns>The new added item.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.Add(System.String)">
            <summary>
            Creates and adds a vdDimstyle object to the collection with the specified name,if exists returns the existing.
            </summary>
            <param name="Name">The name of the inserted vdDimstyle object.</param>
            <returns>Returns the added vdDimstyle object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.FindName(System.String)">
            <summary>
            Finds a vdDimstyle object with the specified name in the collection.
            </summary>
            <param name="Name">The name to search in the collection.</param>
            <returns>The found object else returns null if a vdDimstyle does not exist with this name.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.ModifyDimTextHeight">
            <summary>
            Change the TextHeight for all dimensions and dimstyles to zero(0) in order to follow the Height of TextStyles.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdDimstyles object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdDimstyles object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.RemoveItem(System.Object)">
            <summary>
            Removes an object from the collection.
            </summary>
            <param name="item">The object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.AddItem(System.Object)">
            <summary>
            Adds an object to the collection.
            </summary>
            <param name="value">The object to be added.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.FindItem(System.Object)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">The object required for the search.</param>
            <returns>true if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.VectorDraw#Professional#vdCollections#IvdObjectCollection#Item(System.Int32)">
            <summary>
            Retreave a specific item placed at a specified index from the collection.
            </summary>
            <param name="Index">The index where the object is.</param>
            <returns>Returns the object at the specified index.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.GetObjectRealPosition(System.Object)">
            <summary>
            Find the index where a specified object is located in the list.
            </summary>
            <param name="item">The object to find.</param>
            <returns>Returns the index where the object is or -1 if the object is not in the list.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.InsertAt(System.Int32,System.Object)">
            <summary>
            Insert an object at a specified index.
            </summary>
            <param name="index">The index where the object will be inserted.</param>
            <param name="item">The object to be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDimstyles.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Represents a collection of <see cref="T:VectorDraw.Professional.vdPrimaries.vdDimstyle"/> objects.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdDimstyles.ItemType">
            <summary>
            Returns the Type of Items in the collection
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdDimstyles.Standard">
            <summary>
            Get the standard vdDimstyle object existing to the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdDimstyles.ListPosition">
            <summary>
            Gets the <see cref="T:VectorDraw.Generics.IListPosition"/> interface object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdDimstyles.Item(System.Int32)">
            <summary>
            Get a vdDimstyle object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The vdDimstyle object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdDimstyles.Last">
            <summary>
            Returns the last item in the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdDimstyles.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdHatchPropertiesEditor">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHatchPropertiesEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHatchPropertiesEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHatchPropertiesEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdHatchProperties">
            <summary>
            Implements all functionality for the vdHatchProperties object
            used to hatch vdFigure objects(like vdCircle,vdArc etc.).
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHatchProperties.#ctor">
            <summary>
            Initializes the vdHatchProperties object.
            </summary>
            <remarks>
            Default initial values: FillColor set as ByBlock,FillBkColor set as ByBlock,FillMode set as VdFillModeNone
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHatchProperties.#ctor(VectorDraw.Professional.Constants.VdConstFill)">
            <summary>
            Initializes the vdHatchProperties object.
            </summary>
            <remarks>
            Default initial values: FillColor set as ByBlock,FillBkColor set as ByBlock,FillMode set as fillmode
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHatchProperties.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHatchProperties.Clone">
            <summary>
            Returns a new created vdHatchProperties object as clone to this one.
            </summary>
            <returns>A new created vdHatchProperties object that has all values equal to this object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHatchProperties.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)">
            <summary>
            Check if the table object is depend on this figure
            </summary>
            <param name="table">A Table object to be searched.</param>
            <returns>Returns true is this object is not deleted and have a property reference equal with table object.</returns>
            <remarks>Called when <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ExtendedDeletedCheck"/> is False.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHatchProperties.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.
            User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHatchProperties.CopyFrom(VectorDraw.Professional.vdObjects.vdHatchProperties)">
            <summary>
            Copies all properties from a vdHatchProperties to this object.
            </summary>
            <param name="from">The vdHatchProperties object from which the properties will be copied.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHatchProperties.ToString">
            <summary>
            Gets a System.String that represents the Fillmode of the vdHatchProperties Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHatchProperties.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHatchProperties.Invalidate">
            <summary>
            Invalidate the owner of the object if exist.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHatchProperties.Transformby(System.Double,System.Double)">
            <summary>
            Transforms all the geometrical properties of the object with the specific rotation and scale.
            </summary>
            <param name="rotation">Rotation for the transormation.</param>
            <param name="scale">Scale for the transormation.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHatchProperties.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHatchProperties.Explode">
            <summary>
            Returns a collection of all hatch primitives sub entities.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHatchProperties.GetOutlineCountours(System.Int32,System.Double)">
            <summary>
            Returns an array of <see cref="T:VectorDraw.Geometry.gPoints"/> thta represent the outlines of hatch regions
            </summary>
            <param name="curveResolution">valid values (1 to 20000)</param>
            <param name="pixelSize">valid values possitive decimal ( &gt;=0)</param>
            <returns>An array of <see cref="T:VectorDraw.Geometry.gPoints"/> thta represent the outlines of hatch regions</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHatchProperties.GetFilledPolygons(System.Int32,System.Double)">
            <summary>
            Returns a collection of <see cref="T:VectorDraw.Geometry.gPoints"/> closed regions that is filled with selected <see cref="P:VectorDraw.Professional.vdObjects.vdHatchProperties.FillMode"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHatchProperties.GetFilledRegions(System.Int32,System.Double)">
            <summary>
            Returns a collection of <see cref="T:VectorDraw.Professional.vdFigures.vdPolyline"/> closed regions that is filled with selected <see cref="P:VectorDraw.Professional.vdObjects.vdHatchProperties.FillMode"/>
            </summary>
            <param name="curveResolution">valid values (1 to 20000).Used to divide a region into small line segments.</param>
            <param name="pixelSize">valid values possitive decimal ( &gt;=0).Used to divide a region into small line segments.</param>
            <remarks>
            The greater the curveResolution the biggest the number of segments that the curve is 
            divided in(The Smoother the curve).The greater PixelSize the smallest the 
            number of curves that the curve is divided in(which means bigger segments).
            Usually it is used to draw the curve into small polygon segments.
            If you want to devide the curve into a specific number of segments then use pixelsize=0 and curveresolution = number of segments.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHatchProperties.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdHatchProperties object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHatchProperties.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdHatchProperties object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHatchProperties.OnOwnerChanged">
            <summary>
            This method is called when the object's owner is changed.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHatchProperties.OnDocumentSelected(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            This method is called when the object is inserted in a Document for the first time.
            </summary>
            <param name="document">The document where the object is inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdHatchProperties.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements all functionality for the vdHatchProperties object
            used to hatch vdFigure objects(like vdCircle,vdArc etc.).
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdHatchProperties.BlockOffsetXdir">
            <summary>
            Controls the X offset of each blockreference for block hatch pattern generation.
            </summary>
            <remarks>
            Set it to 0 in order to use the block bounding box width.Default value is 0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdHatchProperties.BlockOffsetYdir">
            <summary>
            Controls the Y offset of each blockreference for block hatch pattern generation.
            </summary>
            <remarks>
            Set it to 0 in order to use the block bounding box height.Default value is 0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdHatchProperties.HatchOrigin">
            <summary>
            Controls the starting location in World Coordinate System for hatch pattern generation.
            </summary>
            <remarks>Default value is 0,0,0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdHatchProperties.HatchMode">
            <summary>
            Controls the hatching in special occasions.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdHatchProperties.gradientTypeProp">
            <summary>
            Get/Set the gradient fill type.
            </summary>
            <remarks>
            default value : None.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdHatchProperties.gradientColor2">
            <summary>
            Get/Set the gradient ending color.
            </summary>
            <remarks>
            default value : ByBlock
            If this color is ByBlock or ByLayer then the background color of the render is used.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdHatchProperties.gradientAngle">
            <summary>
            Get/Set the gradient direction angle in radians.
            </summary>
            <remarks>
            default value : 0 degrees
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdHatchProperties.Solid2dTransparency">
            <summary>
            Get/Set a value representing the transparency when the fillmode is solid and when the Document is rendered in Wire2d using GdiPlus API.
            </summary>
            <remarks>
            default value : 255 means no transparency.0 means full transparent.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdHatchProperties.DrawBoundary">
            <summary>
            Get/Set a boolean value representing if the boundary of the hatch will be drawn.
            </summary>
            <remarks>
            default value : true.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdHatchProperties.FillBkColor">
            <summary>
            Get/Set the fill back color of the hatch.
            </summary>
            <remarks>
            default value : <see cref="F:VectorDraw.Professional.vdObjects.vdColor.ColorType.ByBlock"/>
            The values <see cref="F:VectorDraw.Professional.vdObjects.vdColor.ColorType.ByBlock"/> and <see cref="F:VectorDraw.Professional.vdObjects.vdColor.ColorType.ByLayer"/> are ignored and no backround fill is applied.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdHatchProperties.FillColor">
            <summary>
            Get/Set the fill color of the hatch.
            </summary>
            <remarks>
            default value : index 6 foreground.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdHatchProperties.FillMode">
            <summary>
            Get/Set the fill mode of the object.
            </summary>
            <remarks>
            default value : VdFillModeNone.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdHatchProperties.HatchBlock">
            <summary>
            Get/Set the hatch block used when fill mode is VdFillModeHatchBlock.
            </summary>
            <remarks>
            default value : null.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdHatchProperties.HatchScale">
            <summary>
            Get/Set the hatch scale of the object.
            </summary>
            <remarks>
            default value : 1.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdHatchProperties.HatchAngle">
            <summary>
            Get/Set the hatch angle of the object.
            </summary>
            <remarks>
            default value : 0.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdHatchProperties.HatchImage">
            <summary>
            Get/Set the Hatch Image of the object when fillmode is VdFillModeImage.
            </summary>
            <remarks>
            default value : null.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdHatchProperties.HatchPattern">
            <summary>
            Get/Set the hatch pattern when fillmode is VdFillModePattern.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdInsert">
            <summary>
            Implements all functionality for the vdInsert object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInsert.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes a new instance of the vdInsert object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInsert.#ctor(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Professional.vdPrimaries.vdBlock,VectorDraw.Geometry.gPoint,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the vdInsert object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <param name="block">The block of the insert object.</param>
            <param name="insertionpoint">The insertion point of the insert object.</param>
            <param name="rotation">The rotation of the insert object.</param>
            <param name="xscale">The x scale of the insert object.</param>
            <param name="yscale">The y scale of the insert object.</param>
            <param name="zscale">The z scale of the insert object.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInsert.#ctor">
            <summary>
            Initializes the vdInsert object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInsert.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInsert.GetClipPoints">
            <summary>
            Returns an array of <see cref="T:VectorDraw.Geometry.gPoint"/> in WCS that defines a boundary curve that will clip the vdInsert object and only the inside of the curve will be drawn.
            </summary>
            <returns>An array of <see cref="T:VectorDraw.Geometry.gPoint"/> in WCS that defines a boundary curve that will clip the vdInsert object and only the inside of the curve will be drawn.</returns>
            <seealso cref="P:VectorDraw.Professional.vdFigures.vdInsert.ClipBoundary"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInsert.Invalidate">
            <summary>
            Invalidates the object's Bounding Box and causes the control to be redrawn in this region.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInsert.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.
            User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInsert.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)">
            <summary>
            <see cref="M:VectorDraw.Professional.vdPrimaries.vdFigure.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)"/>.
            </summary>
            <param name="object2viewcs"></param>
            <param name="mode"></param>
            <param name="pickPoi"></param>
            <param name="LastPoi"></param>
            <param name="SegCount"></param>
            <param name="osnaps"></param>
            <returns>True if at least one osnap point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInsert.IntersectWith(VectorDraw.Professional.vdPrimaries.vdFigure,VectorDraw.Professional.Constants.VdConstInters,VectorDraw.Geometry.gPoints)">
            <summary>
            Finds the intersection points of a vdInsert object with another object.
            </summary>
            <param name="pEntity">The entity with which the intersection of the object will be done.</param>
            <param name="intersectOption"><see cref="T:VectorDraw.Professional.Constants.VdConstInters"/> constant</param>
            <param name="intPoints">A precreated gPoints collection in which the instersection points will be added.The points are returned in WCS.</param>
            <returns>True if at least one intersection point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInsert.Explode">
            <summary>
            Returns a collection of the entities the vdBlock of the vdInsert object has.
            </summary>
            <returns>A collection of vdFigures. Note that the objects are not added to the Document.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInsert.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInsert.GetGripPoints">
            <summary>
            A function returning the grip points of the object.
            </summary>
            <returns>Returns a new instance of gpoints object containing the grip points of the object.</returns>
            <remarks>
            The returning points are in World coordinate system(WCS).
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetGripPoints"/> event.
            When implementing this method the <see cref="M:VectorDraw.Professional.vdFigures.vdInsert.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)"/> must be also override according to the new selected grip points.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInsert.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)">
            <summary>
            This function is intended to be called during a grip edit of the vdInsert object. 
            </summary>
            <param name="Indexes">Represents a zero based array of the grip indexes that will be moved.</param>
            <param name="dx">The dx distance that the grip is moved.</param>
            <param name="dy">The dy distance that the grip is moved.</param>
            <param name="dz">The dz distance that the grip is moved.</param>
            <seealso cref="M:VectorDraw.Professional.vdPrimaries.vdFigure.GetGripPoints"/>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnMoveGripPointsAt"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInsert.InitializeProperties">
            <summary>
            Resets the properties of the vdInsert object to the Default values.
            </summary>
            <remarks>
            Default values:Set InsertionPoint to new (0.0,0.0,0.0) gpoint object,Xscale=Yscale=Zscale = 1,
            Rotation=rows=columns=rowdist=columndist=0.
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInsert.ToString">
            <summary>
            Gets a System.String that represents the type and the Block's Name of the vdInsert Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInsert.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInsert.CreateDefaultAttributes">
            <summary>
            Creates an attribute for every attribute definition that the block of the insert has.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInsert.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInsert.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Called in order to draw the object in a specified vdRender object.
            </summary>
            <param name="render">The vdRender object in which the object will be drawn.</param>
            <returns><see cref="T:VectorDraw.Render.vdRender.DrawStatus"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInsert.SetAttribValue(System.String,System.String)">
            <summary>
            Sets a value to an existing attribute of the insert's block.
            </summary>
            <param name="TagString">The tag string of an existing value.</param>
            <param name="ValueString">The value to be set.</param>
            <returns>True if the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInsert.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdInsert object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInsert.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdInsert object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInsert.ShouldBeTransformed(VectorDraw.Professional.vdCollections.vdSelection,System.Boolean)">
            <summary>
            This method is used in order to determine what should happen when a transformBy occurs in a collection.
            </summary>
            <param name="selset">The selection of entities that is going to be transformed.</param>
            <param name="Disconnect">A boolean value representing if the object should disconnect from it's reference , referenceobj = null</param>
            <returns>True if the transform should occur or false if not.</returns>
            <remarks>
            This method is used for example in the iteration of the CmdScale, when the user selects entities to scale then this method will return false if the reference object is also chosen in the selection so the Dimension is not transformed because it will apply the changes when the reference object is scaled.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInsert.OnOwnerChanged">
            <summary>
            This method is called when the object's owner is changed.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInsert.OnDocumentSelected(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            This method is called when the object is inserted in a Document for the first time.
            </summary>
            <param name="document">The document where the object is inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdInsert.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements all functionality for the vdInsert object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdInsert.FadeEffect">
            <summary>
            Get/Set the color Fading effect percentage close to the background color of output rendering.
            </summary>
            <remarks>
            Valid range between 0 and 90.Value is limited to 90 percent to avoid of hidden the entity.
            Default value is 0 for no fading.
            If the value is 0 and the figure is inside a vdBlock and the insert (vdInsert object) that reference 
            this block has FadeEffect bigger than 0 then the figure is faded as the vdInsert. In other case (the figure has FadeEffect
            greater than 0 then the vdInsert's FadeEffect is ignored for this object.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdInsert.AlignToView">
            <summary>
            A boolean value that defines if the plane of the object is relative to the current view.
            </summary>
            <remarks>
            Default value is False.
            Please note that when AlignToView is true the extrusion vector of the object is relative to Current view coordinative system and not to World as the default behaviour is.
            Also the Rotation property when AlignToView is true is relative and counterclockwise from axis X of current view coordinative system.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdInsert.AlignToViewSize">
            <summary>
            Get/Set the height of the object in output Device millimeters for positive or hundreds of millimeters for negative.
            </summary>
            <remarks>
            If  value is not 0 then the height of the object will be the same independently of current zoom.
            If value = 0 height is relative to Drawing Units.
            Negative values are in hundreds of millimeters of output device (screen/printer etc). For example, in order the object to have 1.5 millimeters height you must set it to -150 (means 150/100 millimeters).
            Default value = 0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdInsert.BoundingBox">
            <summary>
            Gets the Bounding Box of the vdInsert object in WorldCoordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdInsert.ExtrusionVector">
            <summary>
            Get/Set the the 3D Vector extrusion direction of the vdInsert object.
            </summary>
            <remarks>
            Default value (0.0,0.0,1.0).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdInsert.InsertionPoint">
            <summary>
            Get/Set the Insertion Point of the vdInsert object in World Coordinative System.
            </summary>
            <remarks>
            Default value (0.0,0.0,0.0).
            The InsertionPoint of all non constant attributes is also changed.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdInsert.Xscale">
            <summary>
            Get/Set the X Scale Factor of the vdInsert object.
            </summary>
            <remarks>
            Default value 1.0.
            All non constant attributes are also Scalled.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdInsert.Yscale">
            <summary>
            Get/Set the Y Scale Factor of the vdInsert object.
            </summary>
            <remarks>
            Default value 1.0.
            All non constant attributes are also Scalled.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdInsert.Zscale">
            <summary>
            Get/Set the Z Scale Factor of the vdInsert object.
            </summary>
            <remarks>
            Default value 1.0.
            All non constant attributes are also Scalled.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdInsert.Rotation">
            <summary>
            Get/Set the Rotation of the vdInsert object in Radians.
            </summary>
            <remarks>
            Default value 0.0.
            All non constant attributes are also Rotated.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdInsert.Block">
            <summary>
            Get/Set the vdBlock object which refers to the vdInsert object.
            </summary>
            <remarks>
            Default value null.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdInsert.Attributes">
            <summary>
            Represents the Attributes collection of the vdInsert object.
            </summary>
            <remarks>
            Default value is a new empty created attributes collection.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdInsert.Rows">
            <summary>
            Get/Set the number of Rows that the vdInsert object will be copied.
            </summary>
            <remarks>
            Default value 1.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdInsert.Columns">
            <summary>
            Get/Set the number of Columns that the vdInsert object will be copied.
            </summary>
            <remarks>
            Default value 1.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdInsert.ColumnDist">
            <summary>
            Get/Set The Column Distance between the copied vdInsert objects.
            </summary>
            <remarks>
            Default value 0.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdInsert.RowDist">
            <summary>
            Get/Set The Row Distance between the copied vdInsert objects.
            </summary>
            <remarks>
            Default value 0.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdInsert.ClipBoundary">
            <summary>
            A boundary curve that will clip the vdInsert object and only the inside of the curve will be drawn.
            </summary>
            <remarks>Note that only top level clips supported. This means that if there is a vdInsert inside a vdInsert which contains a clipboundary
            object, it won't work. Only the clipboundary of the top vdInsert will work as expected. Also, vdInsert clipping does not work for OpenGL
            rendering, PDF and SVG export.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdInsert.ECSMatrix">
            <summary>
            Gets the matrix which is used to transform vectors or points from the 
            object's object coordinate system (OCS) to the World Coordinate System (WCS).
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdInsert.Draw3DFlag">
            <summary>
            Get/Set a property value used when drawing an object in 3d.
            </summary>
            <remarks>
            vdInsert objects that reference an ExternalReference Block are always ExcludeFromList.
            Set it to <see cref="F:VectorDraw.Render.Draw3DFlagEnum.ExcludeFromList"/> in order not to include the object in rendering 3d display lists,
            when the vdDocument.GlobalRenderProperties.CustomRenderTypeName = "VectorDraw.Render.opengllist#VectorDraw.Professional.dll"
            Default value is <see cref="F:VectorDraw.Render.Draw3DFlagEnum.Default"/> and the object is included in rendering 3d display lists.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdInsert.ReferenceObj">
            <summary>
            The reference Object of the vdDimension
            </summary>
            <remarks>
            This property is internally used currently.
            It supports vdCircle and vdArc objects in order to associate a Radial or Diameter Dimension with these objects.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdInsert.param1">
            <summary>
            This is not used for this object
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.SelectedObjectArray">
            <summary>
            Implements a collection that contains <see cref="T:VectorDraw.Professional.vdObjects.SelectedObject"/> type objects used for selection test purposes.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.SelectedObjectArray.GetTransformedSelectedObjects(VectorDraw.Professional.vdCollections.vdEntities,VectorDraw.Geometry.Box,VectorDraw.Render.vdRender,VectorDraw.Professional.vdCollections.vdSectionClips,System.Boolean,System.Boolean)">
            <summary>
             Gets a collection of <see cref="T:VectorDraw.Professional.vdObjects.SelectedObject"/> type object that represents all the primitives figures that belongs to input enities and passing through a rectangle in View Co-ordinate system of the RenderingContext.
            </summary>
            <param name="entities">The collection that will search to find the entities pass through the given bounding box.</param>
            <param name="SelectionViewBox">A bounding box in View Co-ordinate system of the RenderingContext.</param>
            <param name="RenderingContext">A context that represents the active output render for the input objects.</param>
            <param name="sectionClips">A collection of <see cref="T:VectorDraw.Professional.vdObjects.vdSectionClip"/> applied to the entities.</param>
            <param name="IgnoreLockLayers">A boolean value that represents if the entities in lock layer will be taken in consideration or not.</param>
            <param name="BreakOnMessage">If this is true then and a windows message exists in the windows que then the searching will stop.</param>
            <returns>
            A collection of the Selected entities that passing through the input bounding box in the order from the last in the entities collection to the first.
            </returns>
            <example>
            A C# Example that print all the primitives figures throws a view rectangle.
            <code>
                    Box rc;
                    //prompt the user to pick a rectangle that will be used to select the entities.
                    doc.Prompt("Pick a rectangle for crossing window entities select");
                    StatusCode sc = doc.Model.ActionUtility.getUserRectViewCS(null, out rc);
                    doc.Prompt(null);
                    if ( sc == StatusCode.Success)
                    {
                        SelectedObjectArray obs = SelectedObjectArray.GetTransformedSelectedObjects(doc.ActiveLayOut.LayoutOrViewPortEntities(), rc, doc.ActiveLayOut.ActiveRender, doc.GetActiveSections(), false, false);
                        //display the results into commandline
                        doc.Prompt(string.Format("\r\nNumber of Selected objects : {0}", obs.Count)); doc.Prompt(null);
                        foreach (SelectedObject item in obs)
                        {
                            //foreach selected object displays the object type and a matrix that tranforms the object into world Co-ordinate system.
                            doc.Prompt(string.Format("\r\n{0}, object2world matrix = {1}", item.SelectedEntity.Entity, item.SelectedEntity.ObjectToWorldMatrix)); doc.Prompt(null);
                            //dispalys the owners tree for the selected object from inner to outer.
                            string tabs = "\t";
                            foreach (TransformedFigure owner in item.Owners)
                            {
                                doc.Prompt(string.Format("\r\n{0}Owner: {1}, object2world matrix = {2}", tabs,owner.Entity, owner.ObjectToWorldMatrix)); doc.Prompt(null);
                                tabs += "\t";
                            }
                        }
                    }
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.SelectedObjectArray.GetTransformedSelectedObjects(VectorDraw.Professional.vdCollections.vdEntities,VectorDraw.Geometry.gPoints,System.Boolean,VectorDraw.Render.vdRender,VectorDraw.Professional.vdCollections.vdSectionClips,System.Boolean,System.Boolean)">
            <summary>
             Gets a collection of <see cref="T:VectorDraw.Professional.vdObjects.SelectedObject"/> type object that represents all the primitives figures that belongs to input entities and passing through a region in View Co-ordinate system of the RenderingContext.
            </summary>
            <param name="entities">The collection that will search to find the entities pass through the given bounding box.</param>
            <param name="SelectionViewPolygon">An array of gPoints in View Co-ordinate system of the RenderingContext.</param>
            <param name="isCrossing">Set it to true in order the objects that also intersect the input region will added to the return collection.</param>
            <param name="RenderingContext">A context that represents the active output render for the input objects.</param>
            <param name="sectionClips">A collection of <see cref="T:VectorDraw.Professional.vdObjects.vdSectionClip"/> applied to the entities.</param>
            <param name="IgnoreLockLayers">A boolean value that represents if the entities in lock layer will be taken in consideration or not.</param>
            <param name="BreakOnMessage">If this is true then and a windows message exists in the windows que then the searching will stop.</param>
            <returns>
            A collection of the Selected entities that passing through the input region in the order from the last in the entities collection to the first.
            </returns>
            <example>
            A C# Example that select inner entities inside a view box and add them to active layout entities.
            <code>
                            Box rect = null;
                            bool isCrossing = false;
                            //prompts the user so pick a box in current view 
                            doc.Prompt("Select objects:");
                            doc.ActionUtility.getUserRectViewCS(null,true, out rect, out isCrossing);
                            doc.Prompt(null);
                            if (rect == null) return;
                            //returns all inner entities that include in the selected box.
                            //if the last pickking corner of the selection box is Left than the first one then also returns and the entities that intersect the rect(crossing mode = true)
                            SelectedObjectArray obarr = SelectedObjectArray.GetTransformedSelectedObjects(doc.ActiveLayOut.Entities, rect.TogPoints(), isCrossing, doc.ActiveLayOut.Render, doc.ActiveLayOut.Sections, false, false);
                            //obarr contains a list of inner entities in the reverse order that they are in the passed entities collection
                            //Lasted draw item is first in the list
                            foreach (SelectedObject item in obarr)
                            {
                                //get a clone of the inner item
                                vdFigure clone = item.SelectedEntity.Entity.Clone(null) as vdFigure;
                                clone.PenColor = new vdColor(Color.Red);
                                clone.LineWeight = VectorDraw.Professional.Constants.VdConstLineWeight.LW_200;
                                //transform the item with the proper matrix so it can be added alone in the top entities collection with the same display geometry
                                clone.Transformby(clone.ECSMatrix.GetInvertion() * item.SelectedEntity.ObjectToWorldMatrix);
                                //add the clonable item at the start of the active layout entities collection
                                doc.ActiveLayOut.Entities.AddItem(clone);
                                doc.ActiveLayOut.Entities.ChangeOrder(clone, true);
                                
                                //highlight the original item
                                item.SelectedEntity.Entity.HighLight = true;
                            }
                            //redraw the client area of the active control window.
                            doc.Redraw(true);
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.SelectedObjectArray.GetTransformedSelectedObjectsFence(VectorDraw.Professional.vdCollections.vdEntities,VectorDraw.Geometry.gPoints,VectorDraw.Render.vdRender,VectorDraw.Professional.vdCollections.vdSectionClips,System.Boolean,System.Boolean)">
            <summary>
             Gets a collection of <see cref="T:VectorDraw.Professional.vdObjects.SelectedObject"/> type object that represents all the primitives figures that belongs to input entities and passing through a region in View Co-ordinate system of the RenderingContext.
            </summary>
            <param name="entities">The collection that will search to find the entities pass through the given bounding box.</param>
            <param name="SelectionViewPolygon">An array of gPoints in View Co-ordinate system of the RenderingContext.</param>
            <param name="RenderingContext">A context that represents the active output render for the input objects.</param>
            <param name="sectionClips">A collection of <see cref="T:VectorDraw.Professional.vdObjects.vdSectionClip"/> applied to the entities.</param>
            <param name="IgnoreLockLayers">A boolean value that represents if the entities in lock layer will be taken in consideration or not.</param>
            <param name="BreakOnMessage">If this is true then and a windows message exists in the windows que then the searching will stop.</param>
            <returns>
            A collection of the Selected entities that pass through the input region in the order from the last in the entities collection to the first.
            Fence selecting mode is used.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.SelectedObjectArray.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.SelectedObjectArray.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.SelectedObjectArray.Item(System.Int32)">
            <summary>
            Get an item at the specified index.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.TransformedFigureArray">
            <summary>
            Implements a collection that contains <see cref="T:VectorDraw.Professional.vdObjects.TransformedFigure"/> type objects used by <see cref="T:VectorDraw.Professional.vdObjects.SelectedObject"/> class object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.TransformedFigureArray.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.TransformedFigureArray.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.TransformedFigureArray.Item(System.Int32)">
            <summary>
            Get an item at the specified index.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.TransformedFigure">
            <summary>
            Implements an object that contains a <see cref="T:VectorDraw.Professional.vdPrimaries.vdFigure"/> type object and its matrix used to draw the object in the default World Co-ordinate system.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.TransformedFigure.ToString">
            <summary>
            Returns a System.String that represents the object.
            </summary>
            <returns>A System.String that represents the object.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.TransformedFigure.Entity">
            <summary>
            Returns the selected <see cref="T:VectorDraw.Professional.vdPrimaries.vdFigure"/> object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.TransformedFigure.ObjectToWorldMatrix">
            <summary>
            Returns a <see cref="T:VectorDraw.Geometry.Matrix"/> used to draw the <see cref="P:VectorDraw.Professional.vdObjects.TransformedFigure.Entity"/> in the default World Co-ordinate system.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.SelectedObject">
            <summary>
            Implements an object that contains a reference to a <see cref="T:VectorDraw.Professional.vdObjects.TransformedFigure"/> type object and the owners that it belongs, to from the Inner to the Outer.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.SelectedObject.ToString">
            <summary>
            Returns a System.String that represents the object.
            </summary>
            <returns>A System.String that represents the object.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.SelectedObject.SelectedEntity">
            <summary>
            Returns the selected <see cref="T:VectorDraw.Professional.vdObjects.TransformedFigure"/> object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.SelectedObject.Owners">
            <summary>
            Returns the Owners that <see cref="P:VectorDraw.Professional.vdObjects.SelectedObject.SelectedEntity"/> belongs, to from the Inner to the Outer.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.SelectedObject.TopOwner">
            <summary>
            Returns the Outer most owner of the <see cref="P:VectorDraw.Professional.vdObjects.SelectedObject.SelectedEntity"/>
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.OnFigureDrawStackChangedDelegate">
            <summary>
            Is used in order to filter out the entites that are drawn.See OnFigureDrawStackChanged event
            </summary>
            <param name="drawFigList"></param>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdLayersGroup">
            <summary>
            Implements the vdGroup object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersGroup.#ctor">
            <summary>
            Initializes the vdLayersGroup collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersGroup.#ctor(VectorDraw.Professional.vdObjects.vdDocument,System.String)">
            <summary>
            Initializes the vdLayersGroup collection object with the passed name.
            </summary>
            <param name="name">The name of the object.</param>
            <param name="Document">The Document where the object will be used.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersGroup.RemoveAll">
            <summary>
            Removes all items from the group.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersGroup.AddItem(VectorDraw.Professional.vdPrimaries.vdLayer)">
            <summary>
            Adds a vdLayer object to the group.
            </summary>
            <param name="value">The vdLayer object to be added to the group.</param>
            <returns>True if the object was succesfully added to the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersGroup.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersGroup.AddRange(VectorDraw.Professional.vdPrimaries.vdLayersGroup)">
            <summary>
            Adds all vdLayer objects from the passed group to this group.
            </summary>
            <param name="group">Another vdLayersGroup collection from which the vdFigure objects will be added to this group.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersGroup.RemoveAt(System.Int32)">
            <summary>
            Removes an object from the specified index of the group.
            </summary>
            <param name="Index">The zero based index.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersGroup.RemoveItem(VectorDraw.Professional.vdPrimaries.vdLayer)">
            <summary>
            Removes a specific vdLayer object from the group.
            </summary>
            <param name="Object">The vdLayer object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersGroup.FindItem(VectorDraw.Professional.vdPrimaries.vdLayer)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">A vdLayer object to be checked if it exists in the collection</param>
            <returns>True if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersGroup.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matching properties between vdLayersGroup objects is not supported.
            </summary>
            <param name="_from"></param>
            <param name="thisdocument"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersGroup.InitializeProperties">
            <summary>
            Resets the properties of the vdLayersGroup object to the Default values.
            </summary>
            <remarks>
            Default values:Remove all Entities. Name = "Unonymus".
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersGroup.ToString">
            <summary>
            Gets a System.String description of the vdLayersGroup Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersGroup.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersGroup.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdLayersGroup object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayersGroup.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdLayersGroup object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayersGroup.Name">
            <summary>
            Get/Set the name of the vdLayersGroup object
            </summary>
            <remarks>
            Default value : "Unonymus".
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <exception cref="T:VectorDraw.Professional.Exceptions.InvalidTableNameException"></exception>
            <exception cref="T:VectorDraw.Professional.Exceptions.CannotRenameException">Thrown when cannot rename an object.</exception>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayersGroup.Count">
            <summary>
            Get the number of entities of the group.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayersGroup.VisibleOnForms">
            <summary>
            Get/Set a boolean value representing if the vdLayersGroup will be viewed in Vectordraw forms.
            </summary>
            <remarks>
            Default value is true.
            The ToString value of the vdLayersGroup also takes consideration this value and if it is false then the count returned does not contain these items.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayersGroup.Item(System.Int32)">
            <summary>
            Gets an item from the collection from a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The vdLayer object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayersGroup.GroupOwner">
            <summary>
            Get/Set the vdLayersGroup owner.This owner can be another vdLayersGroup or null.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColorSelectionControl.#ctor(VectorDraw.Professional.vdObjects.vdColor,System.Windows.Forms.Design.IWindowsFormsEditorService,System.Boolean)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <param name="editorService"></param>
            <param name="layerBlock">A boolean value representing if the ByLayer and ByBlock buttons are going to be hiden.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColorSelectionControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdColorEditor">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColorEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColorEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColorEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdColorEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            Internally used.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdColorEditor.IsDropDownResizable">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.FollowMode">
            <summary>
            Represents a value that used to lock or not the user entities movement command action.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.CommandActions.FollowMode.None">
            <summary>
            Default value that allow the entities to be placed anywhere in the screen.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.CommandActions.FollowMode.LockOnRegionPoints">
            <summary>
            Lock the placement of entities on a specific boundary region.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.CommandActions.FollowMode.LockInsideRegionBounding">
            <summary>
            Lock the placement of entities always to be inside a rectangle boundary of a specific region.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.CommandActions.FollowMode.AllowLockOutSideScreen">
            <summary>
            Allow the entities to be placed any where in the screen when the selected region is outside the screen.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionTransformParameter">
            <summary>
            Represents the tranform action taken.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.CommandActions.ActionTransformParameter.Translation">
            <summary>
            Translation being commited.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.CommandActions.ActionTransformParameter.ScaleX">
            <summary>
            X scale commited.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.CommandActions.ActionTransformParameter.ScaleY">
            <summary>
            Y scale commited.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.CommandActions.ActionTransformParameter.ScaleXY">
            <summary>
            X and Y scale commited.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.CommandActions.ActionTransformParameter.Rotation">
            <summary>
            Rotation commited.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.CommandActions.ActionTransformParameter.Mirror">
            <summary>
            Mirror tranformation commited.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.CommandActions.ActionTransformParameter.Rotation3d">
            <summary>
            3D rotation commited.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.CommandActions.ActionTransformParameter.Direction">
            <summary>
            Direction angle commited.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.CommandActions.ActionTransformParameter.RotationRef">
            <summary>
            Rotation with reference angle commited.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionGetTranfromSelection">
            <summary>
            Represents the action taken when a selection of entities is transformed(rotated,mirror,scale).
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionGetTranfromSelection.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdPrimaries.vdLayout,VectorDraw.Professional.vdCollections.vdSelection,VectorDraw.Professional.CommandActions.ActionTransformParameter,System.Double)">
            <summary>
            Initializes the action with the given parameters.
            </summary>
            <param name="referencept">Start reference point of the action in User Coordinate System.</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
            <param name="selection">The collection of entities that is transformed.</param>
            <param name="param">The transform action taken.</param>
            <param name="RefAngle">This vector is used when RotateRef action is taken and represents the reference rotation angle.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionGetTranfromSelection.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdPrimaries.vdLayout,VectorDraw.Professional.vdCollections.vdSelection,VectorDraw.Professional.CommandActions.ActionTransformParameter,VectorDraw.Geometry.Vector)">
            <summary>
            Initializes the action with the given parameters.
            </summary>
            <param name="referencept">Start reference point of the action in User Coordinate System.</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
            <param name="selection">The collection of entities that is transformed.</param>
            <param name="param">The transform action taken.</param>
            <param name="axis">This vector is used when Rotate3D action is taken and represents the axis from which the entities are rotated around.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionGetTranfromSelection.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdPrimaries.vdLayout,VectorDraw.Professional.vdCollections.vdSelection,VectorDraw.Professional.CommandActions.ActionTransformParameter)">
            <summary>
            Initializes the action with the given parameters.
            </summary>
            <param name="referencept">Start reference point of the action in User Coordinate System..</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
            <param name="selection">The collection of entities that is transformed.</param>
            <param name="param">The transform action taken.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionGetTranfromSelection.Parse(System.String,VectorDraw.Geometry.Matrix,VectorDraw.Geometry.LUnits,VectorDraw.Geometry.AUnits)">
            <summary>
            Parses the user input string.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="user2world">The active user to world Matrix.</param>
            <param name="lunits">LUnits object to use when parsing.</param>
            <param name="aunits">AUnits object to use when parsing.</param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionGetTranfromSelection.GetMatrix">
            <summary>
            Calculates the Matrix needed for the transformation taking into consideration the transform action taken.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionGetTranfromSelection.PureDraw">
            <summary>
            Makes the necessary rendering for the action.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionGetTranfromSelection.OnIdle">
            <summary>
            Commited when the mouse is idle.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionGetTranfromSelection.applyFigMatrix(VectorDraw.Professional.vdPrimaries.vdFigure)">
            <summary>
            return true if the figure must be cloned and call the tranfromby, or false in case no clone of vdfigure and just call the render.push/pop matrix which is faster and uses less memory.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionGetTranfromSelection.OnPositionChanged(VectorDraw.Geometry.gPoint)">
            <summary>
            Called when the mouse position changes.
            </summary>
            <param name="newPosition">A gPoint representing the new mouse position in World Coordinate System.</param>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionGetTranfromSelection.Value">
            <summary>
            Get the user's imput value.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionGetTranfromSelection.Layout">
            <summary>
            The vdLayout object where the action takes place.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionGetTranfromSelection.HideRubberLine">
            <summary>
            Get a value that represents if the rubber line is drawn or not.Returns false since a rubber line is needed.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionGetTranfromSelection.ValuePointCS">
            <summary>
            Get a value that represents the coordinate system of the <see cref="P:VectorDraw.Actions.BaseAction.Value"/> property.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionGetTranfromSelection.ScaleModeFlag">
            <summary>
            Controls  the way that user scale action is applied.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.CommandActions.ActionGetTranfromSelection.ScaleModeFlag.Default">
            <summary>
            The result scaling is equal to distance between reference point and mouse location in drawing units.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.CommandActions.ActionGetTranfromSelection.ScaleModeFlag.FitToBounds">
            <summary>
            The result scaling is divided by the bounding box size of the selected entities. This will make the result scaling to be fit inside the the selection bounds.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.TextstyleTypeConverterNoExpand">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.TextstyleTypeConverterNoExpand.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.TextstyleTypeConverterNoExpand.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.TextstyleTypeConverterNoExpand.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.TextstyleTypeConverterNoExpand.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.TextstyleTypeConverter">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.TextstyleTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.TextstyleTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.TextstyleTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.TextstyleTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdTextstyle">
            <summary>
            Represents a specific set parameters such as FontFile, Height, etc. used to display <see cref="T:VectorDraw.Professional.vdFigures.vdText"/> and <see cref="T:VectorDraw.Professional.vdFigures.vdMText"/> entities.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdTextstyle.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes the vdTextstyle object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this constructor the is no need to call the SetUnRegisterDocument method in order to register the Document of this object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdTextstyle.#ctor(VectorDraw.Professional.vdObjects.vdDocument,System.String)">
            <summary>
            Initializes the vdTextstyle object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <param name="name">The name of the textstyle object.</param>
            <remarks>Calling this constructor the is no need to call the SetUnRegisterDocument method in order to register the Document of this object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdTextstyle.#ctor">
            <summary>
            Initializes the vdTextstyle object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdTextstyle.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.
            User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdTextstyle.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdTextstyle.InitializeProperties">
            <summary>
            Resets the properties of the vdTextstyle object to the Default values.
            </summary>
            <remarks>
            Default values:Height = 1, WidthFactor = 1,Flag = LEFTTORIGHT.
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdTextstyle.ToString">
            <summary>
            Gets a System.String that represents the name of the vdTextstyle Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdTextstyle.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdTextstyle.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdTextstyle.OnOwnerChanged">
            <summary>
            Overrides the <see cref="M:VectorDraw.Professional.vdObjects.vdBaseObject.OnOwnerChanged"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdTextstyle.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdTextstyle object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdTextstyle.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdTextstyle object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdTextstyle.CompareTo(System.Object)">
            <summary>
                Compares the current instance with another object of the same type and returns
                an integer that indicates whether the current instance precedes, follows,
                or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns> 
                A 32-bit signed integer that indicates the relative order of the objects
                being compared. The return value has these meanings: Value Meaning Less than
                zero This instance precedes obj in the sort order. Zero This instance occurs
                in the same position in the sort order as obj. Greater than zero This instanceG
                follows obj in the sort order.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdTextstyle.FontFile">
            <summary>
            Get/Set the font file of the textstyle.
            </summary>
            <remarks>
            Default value :"Arial".
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
             <para>
            The <see cref="P:VectorDraw.Professional.vdPrimaries.vdTextstyle.DrawOutline"/> in wire2D mode is enabled ONLY when value is true and the FontFile has the
            fullpath and filename of the TTF font, like : "C:\MyApp\Fonts\arialbd.ttf". If the FontFile property has a 
            value like "Arial Bold" and not "..path..\arialbd.ttf" then DrawOutline is ignored.
            </para>
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdTextstyle.BigFontFile">
            <summary>
            Get/Set the Big font file of the textstyle.
            </summary>
            <remarks>
            Default value "".
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdTextstyle.Name">
            <summary>
            Get/Set the name of the textstyle.
            </summary>
            <remarks>
            Default value "Anonymous".
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <exception cref="T:VectorDraw.Professional.Exceptions.InvalidTableNameException"></exception>
            <exception cref="T:VectorDraw.Professional.Exceptions.CannotRenameException">Thrown when cannot rename an object.</exception>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdTextstyle.Height">
            <summary>
            Get/Set the Height for the textstyle.
            </summary>
            <remarks>
            Default value 1.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdTextstyle.WidthFactor">
            <summary>
            Get/Set a value used to stretch the vdText object by changing it's width.
            </summary>
            <remarks>
            Default value 1.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdTextstyle.Extra">
            <summary>
            Get/Set some extra drawing properties for the textstyle.
            </summary>
            <remarks>
            Default value None.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdTextstyle.ObliqueAngle">
            <summary>
            Oblique angle for all text in this style in degrees.
            </summary>
            <remarks>
            Default value 0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdTextstyle.IsItalic">
            <summary>
            Get/Set if the <see cref="P:VectorDraw.Render.grTextStyleExtra.IsItalic"/> property is enabled.
            </summary>
            <remarks>
            Default value false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdTextstyle.IsOverLine">
            <summary>
            Get/Set if the <see cref="P:VectorDraw.Render.grTextStyleExtra.IsOverLine"/> property is enabled.
            </summary>
            <remarks>
            Default value false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdTextstyle.IsUnderLine">
            <summary>
            Get/Set if the <see cref="P:VectorDraw.Render.grTextStyleExtra.IsUnderLine"/> property is enabled.
            </summary>
            <remarks>
            Default value false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdTextstyle.IsStrikeOut">
            <summary>
            Get/Set if the <see cref="P:VectorDraw.Render.grTextStyleExtra.IsStrikeOut"/> property is enabled.
            </summary>
            <remarks>
            Default value false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdTextstyle.Bold">
            <summary>
            Get/Set if the <see cref="P:VectorDraw.Render.grTextStyleExtra.Bold"/> property is enabled.
            </summary>
            <remarks>
            Default value false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdTextstyle.DrawOutline">
            <summary>
            Get/Set if the <see cref="P:VectorDraw.Render.grTextStyleExtra.DrawOutline"/> property is enabled.
            </summary>
            <remarks>
            Default value false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            <para>
            The DrawOutline in Wire2D mode is enabled ONLY when this value is true and the <see cref="P:VectorDraw.Professional.vdPrimaries.vdTextstyle.FontFile"/> has the
            fullpath and filename of the TTF font, like : "C:\Windows\Fonts\arialbd.ttf". If the FontFile property has a 
            value like "Arial Bold" and not "..path..\arialbd.ttf" then DrawOutline is ignored.
            </para>
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdTextstyle.Flag">
            <summary>
            Get/Set extra draw properties for the textstyle. 
            </summary>
            <remarks>
            Default value LEFTTORIGHT.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdTextstyle.Deleted">
             <summary>
             Get/Set a property that marks the object as Deleted or not.
             </summary>
            <exception cref="T:VectorDraw.Professional.Exceptions.CannotDeleteException">Thrown when an object cannot be deleted.</exception>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdTextstyle.VisibleOnForms">
            <summary>
            Get/Set a boolean value representing if the vdTextstyle will be viewed in Vectordraw forms.
            </summary>
            <remarks>
            Default value is true.
            The ToString value of the vdTexstyles also takes consideration this value and if it is false then the count returned does not contain these items.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdTextstyle.GrTextStyle">
            <summary>
            Get the geometrical information of the Textstyle's font file. 
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdTextstyle.CodePage">
            <summary>
            Get/Set the CodePage used from this Textstyle.If this property has value "DrawingDefault" then the Textstyle gets the Document's codepage.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.vdSelections">
            <summary>
            The collection of all selection sets in the active drawing. 
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelections.getUniqueTableName(System.String)">
            <summary>
            Creates a unique string for use as name to a vdSelection object.
            </summary>
            <param name="prefix">A prefix string that will be present to the unique name.</param>
            <returns>Returns a unique string.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelections.#ctor">
            <summary>
            Initializes the vdSelections collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelections.ToString">
            <summary>
            Gets a System.String that represents the count of the vdSelections collection Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelections.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelections.FindItem(VectorDraw.Professional.vdCollections.vdSelection)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">A vdSelection object to be checked if it exists in the collection</param>
            <returns>True if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelections.AddItem(VectorDraw.Professional.vdCollections.vdSelection)">
            <summary>
            Adds a vdSelection object to the collection.
            </summary>
            <param name="value">The vdSelection object to be added to the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelections.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelections.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelections.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelections.RemoveItem(VectorDraw.Professional.vdCollections.vdSelection)">
            <summary>
            Removes a specific vdSelection object from the collection.
            </summary>
            <param name="Object">The vdSelection object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelections.ChangeOrder(VectorDraw.Professional.vdCollections.vdSelection,System.Boolean)">
            <summary>
            Changes the position of a vdSelection object to the front or the end of the collection.
            </summary>
            <param name="Object">The vdSelection object.</param>
            <param name="ToBack">If true moves the object to the beginning of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelections.swap(VectorDraw.Professional.vdCollections.vdSelection,VectorDraw.Professional.vdCollections.vdSelection)">
            <summary>
            Swaps the position between two different vdDimstyle objects existing in the collection.
            </summary>
            <param name="Object1">first object needed.</param>
            <param name="Object2">second object needed.</param>
            <returns>True if the swap operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelections.RemoveAt(System.Int32)">
            <summary>
            Removes an object from the specified index of the collection.
            </summary>
            <param name="Index">The zero based index.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelections.InsertAt(System.Int32,VectorDraw.Professional.vdCollections.vdSelection)">
            <summary>
            Insert a vdSelection object to a specified index of the collection.
            </summary>
            <param name="Index">The zero based index of the collection where the object will be inserted.</param>
            <param name="Object">The vdSelection object which will be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelections.Add(System.String)">
            <summary>
            Creates and adds a vdSelection object to the collection with the specified name.
            </summary>
            <param name="Name">The name of the inserted vdSelection object.</param>
            <returns>Returns the added vdSelection object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelections.FindName(System.String)">
            <summary>
            Finds a vdSelection object with the specified name in the collection.
            </summary>
            <param name="Name">The name to search in the collection.</param>
            <returns>The found object else returns null if a vdSelection does not exist with this name.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelections.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdSelections object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelections.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdSelections object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdSelections.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            The collection of all selection sets in the active drawing. 
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdCollections.vdSelections.OnRemoveAllItems">
            <summary>
            Occurs after removing all items from the collection.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdCollections.vdSelections.OnRemoveItem">
            <summary>
            Occurs after removing an item from the collection.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdCollections.vdSelections.OnAddItem">
            <summary>
            Occurs before adding one item to the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdSelections.ListPosition">
            <summary>
            Gets the <see cref="T:VectorDraw.Generics.IListPosition"/> interface object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdSelections.Item(System.Int32)">
            <summary>
            Get a vdSelection object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The vdSelection object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdSelections.Last">
            <summary>
            Returns the last item in the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdSelections.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdFilterObject">
            <summary>
            Implements the vdFilterObject object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdFilterObject.#ctor">
            <summary>
            Initializes the vdFilterObject object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdFilterObject.IsNestedFigure(VectorDraw.Professional.vdPrimaries.vdFigure)">
            <summary>
            Checks if a vdFigure object is nested or it belongs to a Layout.
            </summary>
            <param name="obj">The vdFigure object to be checked.</param>
            <returns>Returnes false if the object belongs to a layout or it's owner is null.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdFilterObject.Matches(VectorDraw.Professional.vdPrimaries.vdFigure)">
            <summary>
            Checkes the vdFigure depending the parameters of the vdFilterObject.
            </summary>
            <param name="obj">The vdFigure object to be checked from the filter.</param>
            <returns>True if it passes the filter.</returns>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdFilterObject.FilterProperty">
             <summary>
             Fires foreach for all selected objects after all other filters are applied.
             </summary>
             <example>
             <code>
             vdFilterObject fo = new vdFilterObject();                
             fo.FilterProperty += new vdFilterObject.FilterPropertyEventHandler(fo_FilterProperty);
             vdSelection set = new vdSelection();
             set.SetUnRegisterDocument(doc);
             int ctime = Environment.TickCount;
             set.FilterSelect(fo);
             MessageBox.Show("Time: " + (Environment.TickCount - ctime).ToString() + " - Items = " + set.Count.ToString()); 
            
             void fo_FilterProperty(object sender, vdFigure fig, ref bool AddTo)
             {
                 if (fig.Owner != doc.Model.Entities) AddTo = false;//Εάν το AddTo γίνει false, τότε το fig εξαιρείται από το φιλτράρισμα.
                 else if (fig.LineWeight != VectorDraw.Professional.Constants.VdConstLineWeight.LW_211) AddTo = false;
             }
             </code>
             </example>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFilterObject.LayOuts">
            <summary>
            A string array of the names of Layouts.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFilterObject.Layers">
            <summary>
            A string array of the names of Layers.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFilterObject.Types">
            <summary>
            A string array of the names of figure types.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFilterObject.Labels">
            <summary>
            A string array of the labels.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFilterObject.TextStyles">
            <summary>
            A string array of the names of Textstyles.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFilterObject.DimStyles">
            <summary>
            A string array of the names of Dimstyles.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFilterObject.Blocks">
            <summary>
            A string array of the names of Blocks.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFilterObject.PenStyles">
            <summary>
            A string array of the names of Penstyles.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFilterObject.PenColors">
            <summary>
            A string array of representations of color.ToString.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFilterObject.XProperties">
            <summary>
            A string array of the names of X properties.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFilterObject.NestedObjects">
            <summary>
            Get/Set a boolean value representing if the search should include all vdFigure objects(true)
            or just these at the entities collection of a vdlayout(false).
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFilterObject.Visible">
            <summary>
            Valid values are -1, 0 and 1. Default value is -1.
            When is -1 then it doesn't check for the visibility. 
            When is 0 then it filters/select the invisible objects. 
            When is 1 then it filters/select the visible objects.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFilterObject.Deleted">
            <summary>
            Valid values are -1, 0 and 1. Default value is -1.
            When is -1 then it doesn't check for the deleted property. 
            When is 0 then it filters/select the non deleted objects. 
            When is 1 then it filters/select the deleted objects.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdFilterObject.FilterPropertyEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdFilterObject.FilterProperty"/> event.
            </summary>
            <param name="sender">The <see cref="T:VectorDraw.Professional.vdObjects.vdFilterObject"/> that fires the event</param>
            <param name="fig">The object that will be filter.</param>
            <param name="AddTo">Set it to false in order the object sender to be excluded.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.DimstyleTypeConverterNoExpand">
            <summary>
            Provides functionality to display vdDimstyles to the property list.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.DimstyleTypeConverterNoExpand.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used to display vdDimstyles to the property list.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.DimstyleTypeConverterNoExpand.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Internally used to display vdDimstyles to the property list.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.DimstyleTypeConverterNoExpand.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Internally used to display vdDimstyles to the property list.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.DimstyleTypeConverterNoExpand.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used to display vdDimstyles to the property list.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.DimstyleTypeConverter">
            <summary>
            Provides functionality to display vdDimstyles to the property list.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.DimstyleTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used to display vdDimstyles to the property list.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.DimstyleTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Internally used to display vdDimstyles to the property list.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.DimstyleTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Internally used to display vdDimstyles to the property list.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.DimstyleTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used to display vdDimstyles to the property list.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdDimstyle">
            <summary>
            Contains the information necessary to generate a specific appearance (such as, text position, arrow blocks at the end of the dimension line, etc.) for a <see cref="T:VectorDraw.Professional.vdFigures.vdDimension"/> entitity that reference it.
            </summary>
            <remarks>
            All <see cref="T:VectorDraw.Professional.vdFigures.vdDimension"/> objects have a dimstyle from which they get default drawing values.
            The dimension can have ovewrite values to suppress th dimension's style value.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdDimstyle.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes the vdDimstyle object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this constructor the is no need to call the SetUnRegisterDocument method in order to register the Document of this object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdDimstyle.#ctor(VectorDraw.Professional.vdObjects.vdDocument,System.String)">
            <summary>
            Initializes the vdDimstyle object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <param name="name">The name of the dimstyle object.</param>
            <remarks>Calling this constructor the is no need to call the SetUnRegisterDocument method in order to register the Document of this object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdDimstyle.#ctor">
            <summary>
            Initializes the vdDimstyle object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdDimstyle.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.
            User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdDimstyle.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdDimstyle.InitializeProperties">
            <summary>
            Resets the properties of the vdDimstyle object to the Default values.
            </summary>
            <remarks>
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdDimstyle.ToString">
            <summary>
            Gets a System.String that represents the name of the vdDimstyle Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdDimstyle.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdDimstyle object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdDimstyle.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdDimstyle object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdDimstyle.CompareTo(System.Object)">
            <summary>
                Compares the current instance with another object of the same type and returns
                an integer that indicates whether the current instance precedes, follows,
                or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns> 
                A 32-bit signed integer that indicates the relative order of the objects
                being compared. The return value has these meanings: Value Meaning Less than
                zero This instance precedes obj in the sort order. Zero This instance occurs
                in the same position in the sort order as obj. Greater than zero This instanceG
                follows obj in the sort order.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdDimstyle.OnOwnerChanged">
            <summary>
            This method is called when the object's owner is changed.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdDimstyle.OnDocumentSelected(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            This method is called when the object is inserted in a Document for the first time.
            </summary>
            <param name="document">The document where the object is inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdDimstyle.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Contains the information necessary to generate a specific appearance (such as, text position, arrow blocks at the end of the dimension line, etc.) for a <see cref="T:VectorDraw.Professional.vdFigures.vdDimension"/> entitity that reference it.
            </summary>
            <remarks>
            All <see cref="T:VectorDraw.Professional.vdFigures.vdDimension"/> objects have a dimstyle from which they get default drawing values.
            The dimension can have ovewrite values to suppress th dimension's style value.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.Name">
            <summary>
            Represents the name of the vdDimstyle object.
            </summary>
            <remarks>
            Default value "Unonymus".
            if you try to set a name and this name is not valid Exceptions are thrown.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <exception cref="T:VectorDraw.Professional.Exceptions.InvalidTableNameException"></exception>
            <exception cref="T:VectorDraw.Professional.Exceptions.CannotRenameException">Thrown when cannot rename an object.</exception>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.ArrowBlock">
            <summary>
            Get/Set the vdBlock object of the dimension style.
            </summary>
            <remarks>
            Default value null and VDDIM_DEFAULT when initialized in a Document.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.ArrowBlock2">
            <summary>
            Get/Set the second vdBlock object of the dimension style. If set to null the <see cref="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.ArrowBlock"/> object will be used.
            </summary>
            <remarks>
            Default value null and VDDIM_DEFAULT when initialized in a Document.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.ArrowSize">
            <summary>
            Get/Set the arrow size of the dimension style.
            </summary>
            <remarks>
            Default value 0.2.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.TextStyle">
            <summary>
            Get/Set the vdTextstyle object of the dimension style.
            </summary>
            <remarks>
            Default value the standard Document's Textstyle or null if no Document is present.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.TextHeight">
            <summary>
            Get/Set the Dimension's text height in drawing units using this dimension style.
            </summary>
            <remarks>
            Default value 1.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.TextDist">
            <summary>
            Get/Set the distance around the dimension's text using this dimension style.
            </summary>
            <remarks>
            Default value 0.09.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.TextVerJust">
            <summary>
            Get/Set the vertical justification of the dimension style.
            </summary>
            <remarks>
            Default value DIMTEXT_ABOVE.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.TextHorRotation">
            <summary>
            Get/Set the position of dimension text inside the extension lines(aligned or horizontal).
            </summary>
            <remarks>
            Default value DIMTEXT_ALIGN.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.TextColor">
            <summary>
            Get/Set the dimension's text color of the dimension style.
            </summary>
            <remarks>
            Default value a color with index 7.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.TextMovement">
            <summary>
            Get/Set a value that represents how the dimension will change according to the dimension's text position change.
            </summary>
            <remarks>
            Default value KeepDimLineWithText.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.ExtLineColor">
            <summary>
            Get/Set the dimension's style extension lines color.
            </summary>
            <remarks>
            Default value a color with index 7.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.ExtLineDist1">
            <summary>
            Get/Set how far to extend the extension lines beyond the dimension line in drawing units.
            </summary>
            <remarks>
            Only positive values are accepted.
            Default value 0.2.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.ExtLineDist2">
            <summary>
            Get/Set how far extension lines are offset from origin points in drawing units.
            </summary>
            <remarks>
            Only positive values are accepted.
            Default value 0.05.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.ExtLineVisible">
            <summary>
            Get/Set a boolean value indicating the display of the extension lines.
            </summary>
            <remarks>
            Default value true.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.ScaleFactor">
            <summary>
            Get/Set the scale factor of the dimension style.
            </summary>
            <remarks>
            Default value 1.0.
            This scale factor influences the arrows,lines and text not the length of the dimension.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.DecimalPrecision">
            <summary>
            Get/Set the number of decimal places displayed in default dimension text.
            </summary>
            <remarks>
            Default value 4.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.LinearScaleFactor">
            <summary>
            Get/Set the scale factor for dimensioning by which the default dimension Length is multiplyed.
            </summary>
            <remarks>
            Default value 1.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.LineForced">
            <summary>
            Get/Set the visibility of extension lines between extensions viable only for radial and diameter dimensions.
            </summary>
            <remarks>
            Default value false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.LineIsInvisible">
            <summary>
            Get/Set the visibility of dimension base line.
            </summary>
            <remarks>
            Default value false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.DimAunit">
            <summary>
            Get/Set the units mode for angular dimensions.
            </summary>
            <remarks>
            Default value au_Degrees.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.DimAdec">
            <summary>
            Get/Set the number of decimal places for angular dimensions.
            </summary>
            <remarks>
            Default value 4.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.DimLunit">
            <summary>
            Get/Set the Units mode for linear dimensions.
            </summary>
            <remarks>
            Default value lu_Decimal.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.DimTol">
            <summary>
            Appends tolerances to dimension text.
            </summary>
            <remarks>
            Default value false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.DimTp">
            <summary>
            Specifies the tolerance limit for dimension text.
            </summary>
            <remarks>
            Default value 1.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.DimZin">
            <summary>
            Get/Set a value representing the suppression of zeros in the default dimension text value.
            </summary>
            <remarks>
            Default value LZeroSuppression.None.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.DimaZin">
            <summary>
            Controls the suppression of zeros in the default dimension text value for Angular dimensions.
            </summary>
            <remarks>
            Default value AZeroSuppression.None.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.DimTm">
            <summary>
            Specifies the tolerance lower limit for dimension text.
            </summary>
            <remarks>
            Default value 1.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.PostString">
            <summary>
            Specifies a text prefix or suffix (or both) to the dimension measurement.
            </summary>
            <remarks>
            Default value "".
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.DiameterSymbol">
            <summary>
            Specifies a text prefix symbol for a diameter dimension.
            </summary>
            <remarks>
            Default value "D".
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.RadialSymbol">
            <summary>
            Specifies a text prefix symbol for a radial dimension.
            </summary>
            <remarks>
            Default value "R".
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.DimLineColor">
            <summary>
            Represents the color of dimension lines and arrowheads.
            </summary>
            <remarks>
            Default value a clolor with index 7.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.Deleted">
             <summary>
             Get/Set a property that marks the object as Deleted or not.
             </summary>
            <exception cref="T:VectorDraw.Professional.Exceptions.CannotDeleteException">Thrown when an object cannot be deleted.</exception>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdDimstyle.VisibleOnForms">
            <summary>
            Get/Set a boolean value representing if the vdDimstyle will be viewed in Vectordraw forms.
            </summary>
            <remarks>
            Default value is true.
            The ToString value of the vdDimstyles also takes consideration this value and if it is false then the count returned does not contain these items.
            </remarks>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdImage">
            <summary>
            Implements the vdImage object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdImage.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes a new instance of the vdImage object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdImage.#ctor(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Professional.vdPrimaries.vdImageDef,VectorDraw.Geometry.gPoint,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the vdImage object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <param name="imagedefinition">The ImageDefinition object that is associated with this vdImage object.</param>
            <param name="insertionpoint">The insertion point of the vdImage object.</param>
            <param name="imagescale">The scale of the vdImage object.</param>
            <param name="rotation">The rotation of the image object.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdImage.#ctor">
            <summary>
            Initializes a new instance of the vdImage object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdImage.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdImage.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.
            User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdImage.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdImage.InitializeProperties">
            <summary>
            Resets the properties of the vdImage object to the Default values.
            </summary>
            <remarks>
            Default values:Display = VdImageShowAll,ImageScale = 1, and also remove all ClipBoundary points.
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdImage.ToString">
            <summary>
            Gets a System.String that represents the type and the name(if is not null)
            of the vdImage Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdImage.PixelToECSMatrix">
            <summary>
            Returns a Matrix that tranform a pixel point relative to selected Bitmap Rectangle into <see cref="P:VectorDraw.Professional.vdPrimaries.vdFigure.ECSMatrix"/> of this object.
            </summary>
            <returns>A Matrix that tranform a pixel point relative to selected Bitmap Rectangle into <see cref="P:VectorDraw.Professional.vdPrimaries.vdFigure.ECSMatrix"/> of this object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdImage.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Called in order to draw the vdImage object in a specified vdRender object.
            </summary>
            <param name="render">The vdRender object in which the object will be drawn.</param>
            <returns><see cref="T:VectorDraw.Render.vdRender.DrawStatus"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdImage.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdImage.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdImage object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdImage.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdImage object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdImage.OnOwnerChanged">
            <summary>
            This method is called when the object's owner is changed.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdImage.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements the vdImage object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdImage.BoundingBox">
            <summary>
            Gets the Bounding Box of the vdImage object in WorldCoordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdImage.ImageDefinition">
            <summary>
            Get/Set the <see cref="T:VectorDraw.Professional.vdPrimaries.vdImageDef"/> object of the image indicating the Image Definition of the object.
            </summary>
            <remarks>
            Default value null.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdImage.ImageBinding">
            <summary>
            Get the ImageBind image object of the <see cref="P:VectorDraw.Professional.vdFigures.vdImage.ImageDefinition"/> property.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdImage.Display">
            <summary>
            Get/Set the Display property of the vdImage object.
            </summary>
            <remarks>Default value <see cref="F:VectorDraw.Professional.Constants.VdConstImg.VdImageShowAll"/>.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <seealso cref="T:VectorDraw.Professional.Constants.VdConstImg"/>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdImage.ImageScale">
            <summary>
            Get/Set the image scale.
            </summary>
            <remarks>
            Default value 1.0 .
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdImage.ClipBoundary">
            <summary>
            Get/Set a collection of points indicating a boundary to clip the image.
            </summary>
            <remarks>
            Default value an empty collection of gPoints,No clipping boundary.
            The points are in pixels relative to the upper left corner of the image.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdImage.Width">
            <summary>
            Get/Set the width of the vdImage object in Drawing units.
            </summary>
            <remarks>
            Default value 1.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdImage.Height">
            <summary>
            Get/Set the height of the vdImage object in Drawing units.
            </summary>
            <remarks>
            Default value 1.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdImage.HatchProperties">
            <summary>
            This property will not effect the vdImage object.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdTemporaryDownloadedFilesCollection">
            <summary>
            Internally used.
            </summary>
            <remarks>A Collection of all Temporary Internet Files Downloaded from VectorDraw components.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdTemporaryDownloadedFilesCollection.ClearCache">
            <summary>
            Internally used.
            </summary>
            <remarks>Delete all Temporary Internet Files Downloaded from VectorDraw components.</remarks>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.ListViewItemComparer">
            <summary>
            Implementation of ListViewItemComparer for custom indexing.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.StringArray">
            <summary>
            Implements all functionality for the string collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.StringArray.ToString">
            <summary>
            Gets a System.String that represents the count of the StringArray collection Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.StringArray.#ctor">
            <summary>
            Initializes the StringArray collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.StringArray.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the object and adds the passed items at the end of this collection.
            </summary>
            <param name="items">An array of <see cref="T:System.String"/> objects.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.StringArray.EnsureCapacity(System.Int32)">
            <summary>
            Changes the capacity of the collection to the given value if the existing capacity is less than this value.
            </summary>
            <param name="capacity">A value representing the new capacity of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.StringArray.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.StringArray.AddSplit(System.String,System.String)">
            <summary>
            Add a string array that contains the substrings in value string that are
            delimited by elements of a specified splitstr string 
            </summary>
            <param name="value">A string that will be split into substrings. </param>
            <param name="splitstr">A string that delimit the substrings in value string.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.StringArray.AddItem(System.String)">
            <summary>
            Adds a string to the collection.
            </summary>
            <param name="value">The string object to be added to the collection</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.StringArray.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.StringArray.RemoveAll">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.StringArray.AddRange(VectorDraw.Professional.vdCollections.StringArray)">
            <summary>
            Adds the items from a collection to this collection.
            </summary>
            <param name="c">The collection from which the items will be retrieved.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.StringArray.AddRange(VectorDraw.Professional.vdCollections.StringArray,System.Boolean,System.Boolean)">
            <summary>
            Adds items from a collection by checking(case sensitive or not) if the item already exists.
            </summary>
            <param name="c">The collection from which the items will be retrieved.</param>
            <param name="ignoreDublicateValues">If false all items will be inserted.</param>
            <param name="ignoreCase">A System.Boolean indicating a case-sensitive or insensitive comparison. (true indicates a case-insensitive comparison.) </param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.StringArray.RemoveItem(System.String)">
            <summary>
            Removes a specified object from the list.
            </summary>
            <param name="item">The object to be removed from the collection.</param>
            <returns>True if the object was removed and false if the object was not found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.StringArray.Clone">
            <summary>
            Creates a new collection with the same items as this.
            </summary>
            <returns>Returns a new created collection containing all items from this collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.StringArray.Contains(System.String,System.Boolean)">
            <summary>
            Checks if an item exists in the collection.
            </summary>
            <param name="value">The item to check if exists in the collection.</param>
            <param name="ignoreCase">A System.Boolean indicating a case-sensitive or insensitive comparison. (true indicates a case-insensitive comparison.) </param>
            <returns>Returns true if the item exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.StringArray.GetValue(System.String,System.Boolean,System.String)">
            <summary>
            Checks if a value item exists in the collection, and return the item.
            </summary>
            <param name="value">The item to check if exists in the collection.</param>
            <param name="ignoreCase"> System.Boolean indicating a case-sensitive or insensitive comparison. (true indicates a case-insensitive comparison.)</param>
            <param name="defaultValue">The value to be return if item do not exist.</param>
            <returns>A string value that exist in the collection, else the defaultValue.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.StringArray.ToStringArray">
            <summary>
            Returns a string[] array filled with the collection's objects.
            </summary>
            <returns>A string[] array object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.StringArray.SetValue(System.Int32,System.Object)">
            <summary>
            Set the passed value to the specified index.
            </summary>
            <param name="Index">A zero based index of the collection.</param>
            <param name="item">The value to set to the specified index.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.StringArray.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the StringArray object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.StringArray.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the StringArray object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.StringArray.Item(System.Int32)">
            <summary>
            Gets an item from the collection from a specified index.
            </summary>
            <param name="index">The index where the object is.</param>
            <returns>Returns the object from the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.StringArray.Count">
            <summary>
            Get the count of items in the collection.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Resources.toolboximage">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.SystemColorEditorWithRedraw">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.SystemColorEditorWithRedraw.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdPalette">
            <summary>
            Implements all functionality of the vdPalette object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPalette.#ctor">
            <summary>
            Initializes the vdPalette object and adds to the collection the default colors.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPalette.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.
            User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPalette.AsGdiPalette">
            <summary>
            Returns a new array of 256 System.Drawing.Color with RGB values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPalette.AsSystemPalette">
            <summary>
            A palette used in vdRender engine.
            </summary>
            <returns>Returns a compatible vdRender palette.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPalette.ToString">
            <summary>
            Gets a System.String that represents the count of the vdPalette Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPalette.AddSystemColorItem(System.Drawing.Color)">
            <summary>
            Adds a system color to the palette.
            </summary>
            <param name="value">A system color to be added to the end of the palette.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPalette.AddItem(VectorDraw.Professional.vdObjects.vdColor)">
            <summary>
            Adds a vdColor object to the palette.
            </summary>
            <param name="item">A vdColor object to be added to the end of the palette.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPalette.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPalette.RemoveAll">
            <summary>
            Removes all items from the palette.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPalette.SetDefault">
            <summary>
            Initializes the vdPalette by adding all default 255 colors and also a black background..
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPalette.SetBkColorFixForground(System.Drawing.Color)">
            <summary>
            Sets the background color and also fixes the foreground color to be the opposite.
            </summary>
            <param name="incolor">A system color to be set as background.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPalette.SetForgroundFixBkColor(System.Drawing.Color)">
            <summary>
            Sets the foreground color and also fixes the background color to be the opposite.
            </summary>
            <param name="incolor">A system color to be set as foreground.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPalette.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPalette.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdPalette object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPalette.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdPalette object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdPalette.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements all functionality of the vdPalette object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPalette.ItemType">
            <summary>
            Returns the Type of Items in the collection
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPalette.Item(System.Int32)">
            <summary>
            Get a vdColor object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The vdColor object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPalette.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPalette.Forground">
            <summary>
            Get/Set the Foreground color which is the color with index 6 as system color.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdPalette.Background">
            <summary>
            Get/Set the color used for background.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdPolyface">
            <summary>
            Implements all functionality for the vdPolyface object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes a new instance of the vdPolyface object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.#ctor(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Geometry.gPoints,VectorDraw.Geometry.Int32Array)">
            <summary>
            Initializes a new instance of the vdPolyface object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <param name="vertexlist">The vertexlist of the polyface object.</param>
            <param name="facelist">The facelist of the polyface object.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.#ctor(VectorDraw.Geometry.gPoints,VectorDraw.Geometry.Int32Array)">
            <summary>
            Initializes a new instance of the vdPolyface object.
            </summary>
            <param name="vertexlist">The vertexlist of the polyface object.</param>
            <param name="facelist">The facelist of the polyface object.</param>
            <remarks>This Constructor does not register the object to the Document.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.#ctor">
            <summary>
            Initializes the vdPolyface object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.Triangulate(System.UInt16)">
            <summary>
             Triangulates the <see cref="P:VectorDraw.Professional.vdFigures.vdPolyface.VertexList"/> points using Delaunay algorithm and change the <see cref="P:VectorDraw.Professional.vdFigures.vdPolyface.FaceList"/> with calculated triangles.
            </summary>
            <param name="precision">The decimal precision for the passed points.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.ToPolylines(System.Double,System.Boolean,VectorDraw.Professional.Utilities.ProgressMeter)">
            <summary>
            Calculate all the closed vdPolyline regions each one contains all triangles belongs to the same plane.
            </summary>
            <param name="PointEquality">Equality used to compare <see cref="T:VectorDraw.Geometry.gPoint"/> properties.</param>
            <param name="RemoveInLinePoints">If passed true then method calls the <see cref="M:VectorDraw.Geometry.Vertexes.RemoveInLinePoints"/> method so the polyline(s) produced are simpler.</param>
            <param name="progress">Set it to <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.MeterProgress"/> in order to get information about the progress percentage</param>
            <returns>A <see cref="T:VectorDraw.Professional.vdCollections.vdEntities"/> collection of closed solid fill vdPolyline objects each one contains all triangles belongs to the same plane.</returns>
            <example>
            Prompt the user to select one or more vdPolyface objects.
            Calculate all the closed vdPolyline regions each one contains all triangles belongs to the same plane.
            and add them to ActiveLayout Entities collection.
            The created polylines have the same PenColor , Layer as their vdPolyface object.
            <code>
                            double PointEquality = Globals.VD_ZERO8;
                            doc.Prompt("Select polyface object(s): ");
                            vdSelection set = doc.ActionUtility.getUserSelection();
                            doc.Prompt(null);
                            if (set == null) return;
                            //create a new collection to hold all created polylines for all selected polyfaces.
                            vdEntities ret = new vdEntities();
                            foreach (vdFigure item in set)
                            {
                                if (item is vdPolyface)
                                {
                                    vdEntities curves = ((vdPolyface)item).ToPolylines(PointEquality, true, doc.MeterProgress);
                                    foreach (vdFigure curve in curves) ret.AddItem(curve);
                                }
                            }
                      
                            //add the caclulated polylines to active layout entities collection.
                            doc.UndoHistory.StoreUndoGroup(true);
                            foreach (vdFigure item in ret)doc.ActiveLayOut.Entities.AddItem(item);
                            doc.UndoHistory.StoreUndoGroup(false);
                            doc.Redraw(true);
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.FixPolyface(System.Double,VectorDraw.Professional.Utilities.ProgressMeter)">
            <summary>
            Changes this polyface and tries to reduce/fix it's faces.
            </summary>
            <param name="PointEquality">Equality used to compare <see cref="T:VectorDraw.Geometry.gPoint"/> properties.</param>
            <param name="progress">Set it to <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.MeterProgress"/> in order to get information about the progress percentage</param>
            <remarks> This method uses a combination of ToPolylines and triangulation of gPoints in order to make this polyface with less faces.
            You can use this method after a cut/slice to make the polyface a little better.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.MergeTriangles(VectorDraw.Geometry.gTriangles)">
            <summary>
            Adds a collection of triangles  to this polyface.
            </summary>
            <param name="triangles">A collection of triangles to be added to this polyface.</param>
            <returns>True if the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.GetTriangles">
            <summary>
            Returns all triangle surfaces that consist the object.
            </summary>
            <returns>All triangle surfaces that consist the object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.Slice(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector)">
            <summary>
            Changes the vertexlist and facelist of the polyface in order to be sliced using a plane from the passed parameters.
            </summary>
            <param name="origin">A point needed to determine the slice plane.</param>
            <param name="direction">A Vector that is perpendicular to the plane and specifies the direction of the eliminated portion of the polyface.</param>
            <returns>True if the operation was succesfull.False is returned if none face is being Sliced.</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdPolyface.FixPolyface(System.Double,VectorDraw.Professional.Utilities.ProgressMeter)"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.Slice(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector,System.Boolean,System.Boolean)">
            <summary>
            Changes the vertexlist and facelist of the polyface in order to be sliced using a plane from the passed parameters.
            </summary>
            <param name="origin">A point needed to determine the slice plane.</param>
            <param name="direction">A Vector that is perpendicular to the plane and specifies the direction of the eliminated portion of the polyface.</param>
            <param name="CreateCoverFaces">A boolean value representing if extra faces will be added in order to cover the cutted edges.</param>
            <param name="CreatedFacesEdgesVisibility">A boolean value representing the edges visibility of the created cover faces.</param>
            <returns>True if the operation was succesfull.False is returned if none face is being Sliced.</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdPolyface.FixPolyface(System.Double,VectorDraw.Professional.Utilities.ProgressMeter)"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.Slice(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector,System.Boolean,System.Boolean,VectorDraw.Professional.vdFigures.vdPolyface)">
            <summary>
            Changes the vertexlist and facelist of the polyface in order to be sliced using a plane from the passed parameters.
            </summary>
            <param name="origin">A point needed to determine the slice plane.</param>
            <param name="direction">A Vector that is perpendicular to the plane and specifies the direction of the eliminated portion of the polyface.</param>
            <param name="CreateCoverFaces">A boolean value representing if extra faces will be added in order to cover the cutted edges.</param>
            <param name="CreatedFacesEdgesVisibility">A boolean value representing the edges visibility of the created cover faces.</param>
            <param name="RejectedPolyface">If it is a newlly created polyface then here will be added the rejected faces of the operation , can be null so the faces are not added.</param>
            <returns>True if the operation was succesfull.False is returned if none face is being Sliced.</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdPolyface.FixPolyface(System.Double,VectorDraw.Professional.Utilities.ProgressMeter)"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.Cut(VectorDraw.Professional.vdFigures.vdCurve,VectorDraw.Geometry.gPoint,System.Boolean,System.Boolean)">
            <summary>
            Cuts this polyface using the passed vdCurve object.
            </summary>
            <param name="curve">A vdCurve object to be used in order to cut the polyface. You can use a circle , rect , ellipse , polyline and cut a polyface object.</param>
            <param name="sideToKeep">A gPoint in WCS that represents the side of the polyface to keep.This point is relative to the vdCurve object.</param>
            <param name="CreateCoverFaces">A boolean value representing if extra faces will be added in order to cover the cutted edges.</param>
            <param name="CreatedFacesEdgesVisibility">A boolean value representing the edges visibility of the created cover faces.</param>
            <returns>True if the command was succesfull.</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdPolyface.FixPolyface(System.Double,VectorDraw.Professional.Utilities.ProgressMeter)"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.Cut(VectorDraw.Professional.vdFigures.vdCurve,VectorDraw.Geometry.gPoint,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Cuts this polyface using the passed vdCurve object.
            </summary>
            <param name="curve">A vdCurve object to be used in order to cut the polyface. You can use a circle , rect , ellipse , polyline and cut a polyface object.</param>
            <param name="sideToKeep">A gPoint in WCS that represents the side of the polyface to keep.This point is relative to the vdCurve object.</param>
            <param name="CreateCoverFaces">A boolean value representing if extra faces will be added in order to cover the cutted edges.</param>
            <param name="CreatedFacesEdgesVisibility">A boolean value representing the edges visibility of the created cover faces.</param>
            <param name="KeepFacesVisibility">True if the user wants to keep the faces visibility as the original polyface.</param>
            <returns>True if the command was succesfull.</returns>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdPolyface.FixPolyface(System.Double,VectorDraw.Professional.Utilities.ProgressMeter)"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.Generate3dPathSection(VectorDraw.Geometry.gPoints,VectorDraw.Generics.vdArray{VectorDraw.Geometry.gPoints},VectorDraw.Geometry.gPoint,System.Double,System.Double,VectorDraw.Geometry.Vector,VectorDraw.Geometry.Vector,System.Boolean,System.Boolean)">
            <summary>
            Modify a vdPolyface object following a given path and drawing a given section
            </summary>
            <param name="section2d">Array of one or more closed 2d sections </param>
            <param name="sectionBasePoint2d">A 2d point relative to sections array that defines the origin of sections. This point will run over the path line</param>
            <param name="path">An array of points in real world Coordinate System</param>
            <param name="SectionAngle">Angle in radians that sections will be rotated around base point before they mapped on the path line.</param>
            <param name="SectionScale">The ending scale of the section object(the section object will start following the path with scale=1.0 and will end with scale=SectionScale).Set it to 1 for no scale.</param>
            <param name="StartVector">The extrution vector of the plane of the start section.If it is null the vector of the start segment is used. </param>
            <param name="EndVector">The extrution vector of the plane of the end section.If it is null the vector of the end segment is used.</param>
            <param name="TopBottomFaces">Defines if the start and end caps of the path will be filled.</param>
            <param name="ClearVerts">True in order to clear all vertecies that are used twice from the object's vertexlist at the end of procedure.</param>
            <returns>True if successed.</returns>
            <example>
            <para>Create a rectangle Frame of 10 x 10 size in drawing units with a rectangle section 1 x 1 size. </para>
            <code>
                            vdDocument doc =  vdFramedControl.BaseControl.ActiveDocument;
                            //create and display the result Frame Rectangle as a PolyFace object.
                            vdPolyface face = new vdPolyface();
                            face.SetUnRegisterDocument(doc);
                            face.setDocumentDefaults();
                            
                            gPoints Pathpoints = new gPoints(new gPoint[] { new gPoint(0, 0), new gPoint(10, 0), new gPoint(10, 10), new gPoint(0, 10), new gPoint(0, 0) });
                            gPoints Sectionpoints = new gPoints(new gPoint[] { new gPoint(0, 0), new gPoint(1, 0), new gPoint(1, 1), new gPoint(0, 1), new gPoint(0, 0) });
                            gPoint sectionOrigin = new gPoint(0.5, 0.5);
                            vdArray&lt;gPoints&gt;  Sections = new vdArray&lt;gPoints&gt;(new gPoints[] { Sectionpoints });
                            suc = face.Generate3dPathSection(Pathpoints, Sections, sectionOrigin, 0.0, 1.0,null,null, true, true);
                      
                            if (suc)
                            {
                                doc.Model.Entities.AddItem(face);
                                face.Invalidate();
                            }
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.Generate3dPathSection(VectorDraw.Professional.vdFigures.vdCurve,VectorDraw.Professional.vdFigures.vdCurve,VectorDraw.Geometry.gPoint,System.Int32,System.Double,VectorDraw.Geometry.Vector,VectorDraw.Geometry.Vector)">
            <summary>
            Modify a vdPolyface object following a given path and drawing a given section
            </summary>
            <param name="path">A vdCurve object where the polyface will be drawn. </param>
            <param name="section">A vdCurve object </param>
            <param name="sectionBase">A point in relation to the section (in WCS) indicating the point that will follow the path and draw the section object.</param>
            <param name="CurveResolution">This parameter infects the smoothness of the polyface.</param>
            <param name="sectionscale">The ending scale of the section object(the section object will start following the path with scale=1.0 and will end with scale=SectionScale).Default value=1.</param>
            <param name="StartVector">The extrution vector of the plane of the start section.If it is null the vector of the start segment is used. </param>
            <param name="EndVector">The extrution vector of the plane of the end section.If it is null the vector of the end segment is used.</param>
            <returns>True if successed.</returns>
            <remarks>
             If CurveResolution equals to 0 the polyface uses the default CurveResolution of the control, else this value represents the number of the segments of the path( the bigger this value is , the smoother the polyface will be). 
             The section must be in WCS with extrution 0,0,1
             if section is a polyline then the points of pline must be in the same plane(they must have z value == 0.0)
             path,section can be circle arc polyline ellipse rectangle line 
             if path is a polyline then the points of pline must be in the same plane
            </remarks>
            <example>
            <para>Create a rectangle Frame of 1.2 x 2.1 size in drawing units with a rectangle section 0.1 x 0.05 size. </para>
            <code>
                            //create the section rectangle object
                            vdRect rcSection = new vdRect();
                            rcSection.SetUnRegisterDocument(doc);
                            rcSection.setDocumentDefaults();
                            rcSection.Width = 0.10d;
                            rcSection.Height = 0.05d;
                            //create the path where the section will be applied
                            vdRect rcPath = new vdRect();
                            rcPath.SetUnRegisterDocument(doc);
                            rcPath.setDocumentDefaults();
                            rcPath.Width = 1.2d;
                            rcPath.Height = 2.10d;
            
                            //create and display the result Frame Rectangle as a PolyFace object.
                            vdPolyface face = new vdPolyface();
                            face.SetUnRegisterDocument(doc);
                            face.setDocumentDefaults();
                            bool suc = face.Generate3dPathSection(rcPath, rcSection, rcSection.InsertionPoint, 0, 1.0d, null, null);//new Vector(1, 0, 0), new Vector(1, 0, 0));
                            if (suc)
                            {
                                doc.Model.Entities.AddItem(face);
                                face.Invalidate();
                            }
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.Generate3dPathSection(VectorDraw.Professional.vdFigures.vdCurve,VectorDraw.Professional.vdFigures.vdCurve,VectorDraw.Geometry.gPoint,System.Int32,System.Double)">
            <summary>
            Modify a vdPolyface object following a given path and drawing a given section
            </summary>
            <param name="path">A vdCurve object where the polyface will be drawn. </param>
            <param name="section">A vdCurve object </param>
            <param name="sectionBase">A point in relation to the section (in WCS) indicating the point that will follow the path and draw the section object.</param>
            <param name="CurveResolution">This parameter infects the smoothness of the polyface.</param>
            <param name="sectionscale">The ending scale of the section object(the section object will start following the path with scale=1.0 and will end with scale=SectionScale).Default value=1.</param>
            <returns>True if successed.</returns>
            <remarks>
             If CurveResolution equals to 0 the polyface uses the default CurveResolution of the control, else this value represents the number of the segments of the path( the bigger this value is , the smoother the polyface will be). 
             The section must be in WCS with extrution 0,0,1
             if section is a polyline then the points of pline must be in the same plane(they must have z value == 0.0)
             path,section can be circle arc polyline ellipse rectangle line 
             if path is a polyline then the points of pline must be in the same plane
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.Generate3dPathSection(VectorDraw.Professional.vdFigures.vdCurve,VectorDraw.Professional.vdFigures.vdCurve,VectorDraw.Geometry.gPoint,System.Int32,System.Double,VectorDraw.Geometry.Vector,VectorDraw.Geometry.Vector,System.Boolean)">
            <summary>
            Modify a vdPolyface object following a given path and drawing a given section
            </summary>
            <param name="path">A vdCurve object where the polyface will be drawn. </param>
            <param name="section">A vdCurve object </param>
            <param name="sectionBase">A point in relation to the section (in WCS) indicating the point that will follow the path and draw the section object.</param>
            <param name="CurveResolution">This parameter infects the smoothness of the polyface.</param>
            <param name="sectionscale">The ending scale of the section object(the section object will start following the path with scale=1.0 and will end with scale=SectionScale).Default value=1.</param>
            <param name="StartVector">The extrution vector of the plane of the start section.If it is null the vector of the start segment is used. </param>
            <param name="EndVector">The extrution vector of the plane of the end section.If it is null the vector of the end segment is used.</param>
            <param name="ClearVerts">True in order to clear all vertecies that are used twice from the object's vertexlist at the end of procedure.</param>
            <returns>True if successed.</returns>
            <remarks><seealso cref="M:VectorDraw.Professional.vdFigures.vdPolyface.Generate3dPathSection(VectorDraw.Professional.vdFigures.vdCurve,VectorDraw.Professional.vdFigures.vdCurve,VectorDraw.Geometry.gPoint,System.Int32,System.Double,VectorDraw.Geometry.Vector,VectorDraw.Geometry.Vector)"/></remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.Generate3dPathSection(VectorDraw.Professional.vdFigures.vdCurve,VectorDraw.Professional.vdFigures.vdPolyhatch,VectorDraw.Geometry.gPoint,System.Int32,System.Double,VectorDraw.Geometry.Vector,VectorDraw.Geometry.Vector)">
            <summary>
            Modify a vdPolyface object following a given path and drawing a given <see cref="T:VectorDraw.Professional.vdFigures.vdPolyhatch"/> section
            </summary>
            <param name="path">A vdCurve object where the polyface will be drawn. </param>
            <param name="section">A <see cref="T:VectorDraw.Professional.vdFigures.vdPolyhatch"/> object </param>
            <param name="sectionBase">A point in relation to the section (in WCS) indicating the point that will follow the path and draw the section object.</param>
            <param name="CurveResolution">This parameter infects the smoothness of the polyface.</param>
            <param name="sectionscale">The ending scale of the section object(the section object will start following the path with scale=1.0 and will end with scale=SectionScale).Default value=1.</param>
            <param name="StartVector">The extrution vector of the plane of the start section.If it is null the vector of the start segment is used. </param>
            <param name="EndVector">The extrution vector of the plane of the end section.If it is null the vector of the end segment is used.</param>
            <returns>True if successed.</returns>
            <remarks>
             If CurveResolution equals to 0 the polyface uses the default CurveResolution of the control, else this value represents the number of the segments of the path( the bigger this value is , the smoother the polyface will be). 
             The section must be in WCS with extrution 0,0,1
             path can be circle arc polyline ellipse rectangle line 
             section is <see cref="T:VectorDraw.Professional.vdFigures.vdPolyhatch"/> object.
             if path is a polyline then the points of pline must be in the same plane
            </remarks>
            <example>
            <p>Create a rectangle Frame of 1.2 x 2.1 size in drawing units with a circular hole, along  a path. </p>
            <code>
                            //create a vdPolyhatch section object
                            vdPolyhatch rcSection = new vdPolyhatch();
            
                            //add a rect in polyhatch curves
                            rcSection.PolyCurves.Add(new vdCurves(new vdCurve[] { new vdRect(doc, new gPoint(), 0.1, 0.1, 0.0) }));
                            //add a circle inside the rect
                            rcSection.PolyCurves.Add(new vdCurves(new vdCurve[] { new vdCircle(doc, new gPoint(0.05, 0.05), 0.03) }));
                            //set polyhatch fill on in order start and end caps of the path to be filled.
                            rcSection.HatchProperties = new vdHatchProperties(VdConstFill.VdFillModeSolid);
            
                            //create the path where the section will be applied
                            vdPolyline rcPath = new vdPolyline(doc, new gPoints(new gPoint[] { new gPoint(0, 0), new gPoint(1.2, 0), new gPoint(1.2, 2.1), new gPoint(0, 2.1) }));
            
                            //create and display the result Frame Rectangle as a PolyFace object.
                            vdPolyface face = new vdPolyface();
                            face.SetUnRegisterDocument(doc);
                            face.setDocumentDefaults();
            
                            
                            bool suc = face.Generate3dPathSection(rcPath, rcSection, new gPoint(), 0, 1.0d, null, null);//new Vector(1, 0, 0), new Vector(1, 0, 0));
                            if (suc)
                            {
                                doc.Model.Entities.AddItem(face);
                                face.Invalidate();
                            }
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.Generate3dPathSection(VectorDraw.Professional.vdFigures.vdCurve,VectorDraw.Professional.vdFigures.vdPolyhatch,VectorDraw.Geometry.gPoint,System.Int32,System.Double)">
            <summary>
            Modify a vdPolyface object following a given path and drawing a given <see cref="T:VectorDraw.Professional.vdFigures.vdPolyhatch"/> section
            </summary>
            <param name="path">A vdCurve object where the polyface will be drawn. </param>
            <param name="section">A <see cref="T:VectorDraw.Professional.vdFigures.vdPolyhatch"/> object </param>
            <param name="sectionBase">A point in relation to the section (in WCS) indicating the point that will follow the path and draw the section object.</param>
            <param name="CurveResolution">This parameter infects the smoothness of the polyface.</param>
            <param name="sectionscale">The ending scale of the section object(the section object will start following the path with scale=1.0 and will end with scale=SectionScale).Default value=1.</param>
            <returns>True if successed.</returns>
            <remarks>
             If CurveResolution equals to 0 the polyface uses the default CurveResolution of the control, else this value represents the number of the segments of the path( the bigger this value is , the smoother the polyface will be). 
             The section must be in WCS with extrution 0,0,1
             path can be circle arc polyline ellipse rectangle line 
             section is <see cref="T:VectorDraw.Professional.vdFigures.vdPolyhatch"/> object.
             if path is a polyline then the points of pline must be in the same plane
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.Generate3dPathSection(VectorDraw.Professional.vdFigures.vdCurve,VectorDraw.Professional.vdFigures.vdPolyhatch,VectorDraw.Geometry.gPoint,System.Int32,System.Double,VectorDraw.Geometry.Vector,VectorDraw.Geometry.Vector,System.Boolean)">
            <summary>
            Modify a vdPolyface object following a given path and drawing a given <see cref="T:VectorDraw.Professional.vdFigures.vdPolyhatch"/> section
            </summary>
            <param name="path">A vdCurve object where the polyface will be drawn. </param>
            <param name="section">A <see cref="T:VectorDraw.Professional.vdFigures.vdPolyhatch"/> object </param>
            <param name="sectionBase">A point in relation to the section (in WCS) indicating the point that will follow the path and draw the section object.</param>
            <param name="CurveResolution">This parameter infects the smoothness of the polyface.</param>
            <param name="sectionscale">The ending scale of the section object(the section object will start following the path with scale=1.0 and will end with scale=SectionScale).Default value=1.</param>
            <param name="StartVector">The extrution vector of the plane of the start section.If it is null the vector of the start segment is used. </param>
            <param name="EndVector">The extrution vector of the plane of the end section.If it is null the vector of the end segment is used.</param>
            <param name="ClearVerts">True in order to clear all vertecies that are used twice from the object's vertexlist at the end of procedure.</param>
            <returns>True if successed.</returns>
            <remarks><seealso cref="M:VectorDraw.Professional.vdFigures.vdPolyface.Generate3dPathSection(VectorDraw.Professional.vdFigures.vdCurve,VectorDraw.Professional.vdFigures.vdPolyhatch,VectorDraw.Geometry.gPoint,System.Int32,System.Double,VectorDraw.Geometry.Vector,VectorDraw.Geometry.Vector)"/> </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.CreateSphere(VectorDraw.Geometry.gPoint,System.Double,System.Int32,System.Int32)">
            <summary>
            Creates a sphere to this polyface.
            </summary>
            <param name="p1">The center of the sphere.</param>
            <param name="rad">The radius of the sphere</param>
            <param name="lon">Segment number controling how smooth the sphere will be.</param>
            <param name="lat">Segment number controling how smooth the sphere will be.</param>
            <returns>True if the sphere was succesfully created.</returns>
            <remarks>Updates the VertexList and the FaceList of this object on order to create a sphere. </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.CreateTorus(VectorDraw.Geometry.gPoint,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Creates s Torus using the passed parameters to this polyface.
            </summary>
            <param name="center">The Center of the Torus in World Coordinate System.</param>
            <param name="MainRad">The Main Radius of the torus.</param>
            <param name="TorusRad">The Secondary Radius of the torus.</param>
            <param name="CurveResolution">If equals to 0 the default Curveresolution is used else you can specify a curve resolution.</param>
            <param name="SecondaryCurveResolution">If equals to 0 the default Curveresolution is used else you can specify a curve resolution for the Torus.</param>
            <returns>True if the operation was succesfull.</returns>
            <remarks>If the Secondary Radius is bigger than the Main radius then a sphere is created using the secondary radius.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.CreateCone(VectorDraw.Geometry.gPoint,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Creates a cone to this polyface.
            </summary>
            <param name="p1">The center of the base circle of the cone.</param>
            <param name="BaseRadius">The radius of the base.</param>
            <param name="TopRadius">The radius of the top.</param>
            <param name="hei">The height of the cone.</param>
            <param name="num">Segment number controling how smooth the cone will be.</param>
            <returns>True if the cone was succesfully created.</returns>
            <remarks>Updates the VertexList and the FaceList of this object on order to create a cone. </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.CreateBox(VectorDraw.Geometry.gPoint,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a Box to this polyface.
            </summary>
            <param name="p1">Insertion point of the box.</param>
            <param name="len">Length of the box.</param>
            <param name="wid">Width of the box.</param>
            <param name="hei">Height of the box.</param>
            <param name="rot">Rotation angle of the box.</param>
            <returns>True if the box was succesfully created.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.MergePolyface(VectorDraw.Professional.vdFigures.vdPolyface)">
            <summary>
            Adds to this polyface the passed polyface.
            </summary>
            <param name="polyface">A polyface to be added to this polyface.</param>
            <returns>True if the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.GetPlineRegion">
            <summary>
            If all points of the polyface belong to the same plane and the polyface can be represented as a closed filled polyline then a vdPolyline object is calculated and returned.
            </summary>
            <returns>The vdPolyline solid filled object representing the boundary of the vdPolyface object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.ClearVerticies">
            <summary>
            Clears all vertecies that are used twice from the object's vertexlist.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.ClearUnusedVerticies">
            <summary>
            Clears the vertexlist from unused vertices.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.Explode">
            <summary>
            Explodes the vdPolyface object into a vd3DFace objects.
            </summary>
            <returns>A collection containing vd3DFace objects created from the explode method.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.
            User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)">
            <summary>
            This function is intended to be called during a grip edit of the object. 
            </summary>
            <param name="Indexes">Represents a zero based array of the grip indexes that will be moved.</param>
            <param name="dx">The dx distance that the grip is moved.</param>
            <param name="dy">The dy distance that the grip is moved.</param>
            <param name="dz">The dz distance that the grip is moved.</param>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdPolyface.GetGripPoints"/>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnMoveGripPointsAt"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.GetGripPoints">
            <summary>
            A function returning the grip points of the object.
            </summary>
            <returns>Returns a new instance of gpoints object containing the grip points of the object.</returns>
            <remarks>
            The returning points are in World coordinate system(WCS).
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetGripPoints"/> event.
            When implementing this method the <see cref="M:VectorDraw.Professional.vdFigures.vdPolyface.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)"/> must be also override according to the new selected grip points.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.InitializeProperties">
            <summary>
            Resets the properties of the vdPolyface object to the Default values.
            </summary>
            <remarks>
            Default values:Clear both lists : VertexList and FaceList.
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.AddFaceItem(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a face to the facelist of the object.
            </summary>
            <param name="Index1">First index of the face.</param>
            <param name="Index2">Second index of the face.</param>
            <param name="Index3">Third index of the face.</param>
            <param name="Index4">Fourth index of the face.</param>
            <param name="color">Fifth index of the face corresponding to it's color.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.Add3dFace(VectorDraw.Professional.vdFigures.vd3DFace,System.Boolean)">
            <summary>
            Adds to the current vdPolyface object the passed face
            </summary>
            <param name="face">The vd3dFace object to be added to the current polyface.</param>
            <param name="CheckExistingVertex">If true then a check is made for existing vertexes and are not passed again to the VectexList collection. If not then the points of the 3dFace are directly added to the vertexlist without any check.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)">
            <summary>
            <see cref="M:VectorDraw.Professional.vdPrimaries.vdFigure.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)"/>.
            </summary>
            <param name="object2viewcs"></param>
            <param name="mode"></param>
            <param name="pickPoi"></param>
            <param name="LastPoi"></param>
            <param name="SegCount"></param>
            <param name="osnaps"></param>
            <returns>True if at least one osnap point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Called in order to draw the object in a specified vdRender object.
            </summary>
            <param name="render">The vdRender object in which the object will be drawn.</param>
            <returns><see cref="T:VectorDraw.Render.vdRender.DrawStatus"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.Area">
            <summary>
            Calculates the enclosed area of the vdPolyface object in Drawing Units.
            </summary>
            <returns>Returns the enclosed area.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.isPointInside(VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates if a point is inside a closed polyface.
            </summary>
            <param name="point">A point in World Coordinate System.</param>
            <returns>True if the point is inside the polyface.</returns>
            <remarks>The polyface must be a closed solid polyface. If it is not closed then the result may not be accurate.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.GetPolylineSlice(VectorDraw.Geometry.Vector,VectorDraw.Geometry.gPoint)">
            <summary>
            Get a collection of entities(polylines) that intersect this polyface with a plane.
            </summary>
            <param name="V">The direction of the plane.</param>
            <param name="origin">The origin point of the plane.</param>
            <returns>A collection of Polylines that represents the intersection of this polyface with the passed plane.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.GetPolylineSlices(System.Double,System.Int32,VectorDraw.Geometry.Vector,VectorDraw.Geometry.gPoint)">
            <summary>
            Generates Slice polylines from a polyface.
            </summary>
            <param name="precision"></param>
            <param name="sectionvector"></param>
            <param name="V"></param>
            <param name="origin"></param>
            <returns></returns>
            <remarks>
            If V and origin are null then all the "Volume" Slices are being returned depending the precision and the sectionvector.
            If V is not null then it is used with origin in order to return only one slice.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.InternalVolume(System.Double,System.Int32,System.Double@,System.Boolean,VectorDraw.Geometry.gPoint@)">
            <summary>
            Calculates an Approximation of the Volume of the polyface object.Note that the vdPolyface must be closed in order to calculate the volume or the result will not be accurate.
            </summary>
            <param name="precision">A double value to be used as precision.</param>
            <param name="sectionvector">1 for axis x , 2 for axis y , 3 for axis z , other so the minimum size will be chosen.</param>
            <param name="Volume">A double value where the volume is going to be returned.</param>
            <param name="CalculateCenter">A boolean value representing if the centerofvolume is going to be calculated.</param>
            <param name="CenterOfVolume">A gPoint object where it is going to be calculated and returned the center of volume of the object.</param>
            <returns>True if the process ended succesfully or false if the calculation failed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.Volume(System.Double,System.Double@,VectorDraw.Geometry.gPoint@)">
            <summary>
            Calculates an Approximation of the Volume of the polyface object.Note that the vdPolyface must be closed in order to calculate the volume or the result will not be accurate.
            </summary>
            <param name="precision">A double value to be used as precision.If precision 0.0 is passed then a default 100 slices precision is being used.</param>
            <param name="volume">A double value where the volume is going to be returned.</param>
            <param name="CenterOfVolume">A gPoint object where it is going to be calculated and returned the center of volume of the object.</param>
            <returns>True if the process ended succesfully or false if the calculation failed.</returns>
            <remarks>The method calculates the smallest size of the bounding box of the object and performs perpedicular slices calculating the small volumes that are produced. The total Volume of the object is the sum of these volumes. The precision is the step of the slices. If 0.0 precision is passed then 100 slices are performed.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.Volume(System.Double,System.Double@)">
            <summary>
            Calculates an Approximation of the Volume of the polyface object.Note that the vdPolyface must be closed in order to calculate the volume or the result will not be accurate.
            </summary>
            <param name="precision">A double value to be used as precision.If precision 0.0 is passed then a default 100 slices precision is being used.</param>
            <param name="volume">A double value where the volume is going to be returned.</param>
            <returns>True if the process ended succesfully or false if the calculation failed.</returns>
            <remarks>The method calculates the smallest size of the bounding box of the object and performs perpedicular slices calculating the small volumes that are produced. The total Volume of the object is the sum of these volumes. The precision is the step of the slices. If 0.0 precision is passed then 100 slices are performed.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.GetNormals(VectorDraw.Render.vdRender,VectorDraw.Geometry.Vector[]@,VectorDraw.Geometry.Vector[]@,VectorDraw.Geometry.Int32Array@)">
             <summary>
            Internally used.
            Calculate VertexNormals, FaceNormals and OrientedFaceList in order to be used from render.
            Values are saved to this object and recalculated on Update.
             </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.GetNumMappedImages">
            <summary>
            Returns the Number of IBindMappedImage
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.GetMappedImageAt(System.Int32)">
            <summary>
            Returns the <see cref="T:VectorDraw.Render.IBindMappedImage"/> at the specified index.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.GetMappedImages">
            <summary>
            Returns an array of Images and their matrixes that applied over the Polyface object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdPolyface object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdPolyface object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.GetIntersectionPoints(VectorDraw.Professional.vdFigures.vdPolyface,VectorDraw.Professional.vdFigures.vdPolyface)">
            <summary>
            Get the intersection gPoints collection where two closed polyfaces intersect.
            </summary>
            <param name="A">First Polyface</param>
            <param name="B">Second Polyface</param>
            <returns>A collection of gPoints that represent the intersection lines of the two polyfaces.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.CombinePolyfaces(VectorDraw.Professional.vdFigures.vdPolyface,VectorDraw.Professional.vdFigures.vdPolyface,VectorDraw.Professional.vdFigures.BooleanOperation)">
            <summary>
            Combines two polyfaces using the passed operation
            </summary>
            <param name="A">A polyface object.</param>
            <param name="B">A polyface object.</param>
            <param name="operation">Can be Union , Substraction , ReverseSubsctraction or Intersection. <see cref="T:VectorDraw.Professional.vdFigures.BooleanOperation"/></param>
            <returns>A collection of the triangles from the combination.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.CombinePolyfacesEx(VectorDraw.Professional.vdFigures.vdPolyface,VectorDraw.Professional.vdFigures.vdPolyface,VectorDraw.Professional.vdFigures.BooleanOperation)">
            <summary>
            Combines two polyfaces using the passed operation
            </summary>
            <param name="A">A polyface object.</param>
            <param name="B">A polyface object.</param>
            <param name="operation">Can be Union , Substraction , ReverseSubsctraction or Intersection. <see cref="T:VectorDraw.Professional.vdFigures.BooleanOperation"/></param>
            <remarks>The result of the operation goes to this object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.PushPull(VectorDraw.Professional.vdFigures.vdCurve,System.Double)">
            <summary>
            Combines this polyface with the passed curve and it's thickness.
            </summary>
            <param name="curve">The curve to extrude.</param>
            <param name="Thickness">The thickness to use.</param>
            <returns>Returns true if the operation was succesfull.</returns>
            <remarks>
            Please note that the curve must be on the polyface. There is no check for the curve in this method so the result depends on the imput mainly.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdPolyface.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements all functionality for the vdPolyface object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdPolyface.SmoothAngle">
            <summary>
            Get/Set the angle in degrees between 0 and 90 used to calculate normals for each vertex in each face when rendering a polyface object.
            Defines the maximun angle which is compared with the angles between the planes of neighboring faces in order to filter out the normals of the planes that will added in the average calculation.
            </summary>
            <remarks>
            Set it to -1 in order the normals to be smoothing according to the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.SmoothAngle"/> property.
            Set it to 0 in order the normals not to be smoothing.
            Set it to 90 in order the normal of each vertex to be calculated as the average value with all the neighboring faces normals.
            Default value is -1.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdPolyface.GradientColors">
            <summary>
             Get/Set an array of elevations with their colors used for gradient rendering.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdPolyface.MappedImages">
            <summary>
            Get/Set the mapped images of the object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdPolyface.SelectingMode">
            <summary>
            Get/Set the selecting method of the polyface when you click either inside of a face or to the wireframe of the polyface.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdPolyface.BoundingBox">
            <summary>
            Gets the Bounding Box of the vdPolyface object in WorldCoordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdPolyface.VertexList">
            <summary>
            A collection of all points of the vdPolyface object in World Coordinate System(WCS).
            </summary>
            <remarks>
            Default value a new empty created collection of gPoints.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdPolyface.FaceList">
            <summary>
            A collection of integers indicating for each face four edges that rest on each of the face's 4 points. Also the color the face has (the
            fifth value of every face, if -1 the object's color is used). If any of the four edge values is negative, this edge is not drawn
            (the face is drawn normally).
            </summary>
            <remarks>
            If a vdPolyface object has 4 faces then the facelist count should be 20.
            Default value a new created empty collection of integers.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdPolyface.CombineCuttedEdgesVisibility">
            <summary>
            Get/Set a boolean value that represents the visibility of the cutted edges when combining (boolean operations) vdPolyfaces.
            </summary>
            <remarks>
            Default value is true so the edges are visible.
            Note that this is a static property internally so if changed it is applied to all boolean operations of the control.
            </remarks>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.BooleanOperation">
            <summary>
            Used in Boolean operationd between polyfaces.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.BooleanOperation.Union">
            <summary>
            Determines the union of the two polyfaces. The result is an object that contains both polyfaces.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.BooleanOperation.Substraction">
            <summary>
            Determines the subscractions of polyface A from polyface B. The result is the polyface A not having the polyface B inside it.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.BooleanOperation.Intersection">
            <summary>
            Determines the intersection of the two polyfaces.The result is the common triangles of the two polyfaces.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.BooleanOperation.ReverseSubsctraction">
            <summary>
            Determines the reverse subsctraction of the two polyfaces. The result is the opposite of the Subscraction operation.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vd3pTriangle">
            <summary>
            This Triangle class is used for Polyface hard calculations
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vd3pTriangle.Visibility12">
            <summary>
            Visibility of section P1 - P2
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vd3pTriangle.Visibility23">
            <summary>
            Visibility of section P2 - P3
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vd3pTriangle.Visibility31">
            <summary>
            Visibility of section P3 - P1
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vd3pTriangle.Deleted">
            <summary>
            True if the item is deleted and should not be taken into consideration.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vd3pTriangle.Color">
            <summary>
            A short value representing the palette color to use or -1 to take the owner's color.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vd3pTriangle.mCuttedEdgesVisibility">
            <summary>
            A boolean value representing the visibility of the edges where they will be cut.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vd3pTriangle.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vd3pTriangle.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Boolean,System.Boolean,System.Boolean,System.Int16,System.Boolean)">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="P1">First point of the triangle.</param>
            <param name="P2">Second point of the triangle</param>
            <param name="P3">Third point of the triangle.</param>
            <param name="vis12">Visibility of P1-P2 line segment.</param>
            <param name="vis23">Visibility of P2-P3 line segment.</param>
            <param name="vis31">Visibility of P3-P1 line segment.</param>
            <param name="color">Color of the triangle if used in a polyface or drawn.</param>
            <param name="deleted">True if the triangle is deleted and should not taken into consideration.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vd3pTriangle.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Boolean,System.Boolean,System.Boolean,System.Int16)">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="P1">First point of the triangle.</param>
            <param name="P2">Second point of the triangle</param>
            <param name="P3">Third point of the triangle.</param>
            <param name="vis12">Visibility of P1-P2 line segment.</param>
            <param name="vis23">Visibility of P2-P3 line segment.</param>
            <param name="vis31">Visibility of P3-P1 line segment.</param>
            <param name="color">Color of the triangle if used in a polyface or drawn.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vd3pTriangle.Clone">
            <summary>
            Returns a new created vd3pface object as clone to this one.
            </summary>
            <returns>A new created vd3pface object that has all P1,P2,P3,Visibility12,Visibility23,Visibility31,Color values equal to this object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vd3pTriangle.CreateFromPolyface(VectorDraw.Professional.vdFigures.vdPolyface)">
            <summary>
            Get a collection of vd3pTriangle that represent the passed polyface.
            </summary>
            <param name="pface">The polyface from which the collection of vd3pface will be created.</param>
            <returns>Returns a collection of vd3pface that represent the passed polyface.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vd3pTriangle.CreateFromPolyface(VectorDraw.Professional.vdFigures.vdPolyface,System.Boolean)">
            <summary>
            Get a collection of vd3pTriangle that represent the passed polyface.
            </summary>
            <param name="pface">The polyface from which the collection of vd3pface will be created.</param>
            <param name="KeepFacevisibility">True if the user wants the result to have the same edges visibility as the original polyface.</param>
            <returns>Returns a collection of vd3pface that represent the passed polyface.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vd3pTriangle.CreatePolyface(VectorDraw.Professional.vdFigures.vdPolyface,VectorDraw.Geometry.gTriangles)">
            <summary>
            Create/Merge a polyface from the passed collection of triangles
            </summary>
            <param name="pface">The polyface object where the triangles are going to be added.</param>
            <param name="triangles">The triangles to add. This is a collection of vd3pTriangle objects.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vd3pTriangle.IspointInside(VectorDraw.Geometry.gTriangles,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Box,VectorDraw.Geometry.gPoints)">
            <summary>
            
            </summary>
            <param name="triangles"></param>
            <param name="point"></param>
            <param name="bbox"></param>
            <param name="vlist"></param>
            <returns>
            0 not inside
            1 is inside
            2 is on top of a triangle
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vd3pTriangle.CutWithClosedCurve(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Geometry.gTriangles,VectorDraw.Professional.vdFigures.vdCurve,VectorDraw.Geometry.gPoint,System.Boolean,System.Boolean,VectorDraw.Geometry.gTriangles@)">
            <summary>
            Cuts the passed triangles with the passed curve
            </summary>
            <param name="doc">The Document where the command takes place.</param>
            <param name="triangles">The triangles to cut</param>
            <param name="curve">A vdCurve object to cut the triangles.</param>
            <param name="sideToKeep">A point in WCS representing the side to keep in relative to the passed vdCurve object.</param>
            <param name="CreateCoverFaces">A boolean value that represents if the result will have cover faces at the cut sections.</param>
            <param name="CreatedFacesEdgesVisibility">The visibility opf the cover face objects.</param>
            <param name="ResultTriangles">A collection of triangles that is the result of the command.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vd3pTriangle.CutWithClosedCurve(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Geometry.gTriangles,VectorDraw.Professional.vdFigures.vdCurve,VectorDraw.Geometry.gPoint,System.Boolean,System.Boolean,VectorDraw.Geometry.gTriangles@,System.Boolean)">
            <summary>
            Cuts the passed triangles with the passed curve
            </summary>
            <param name="doc">The Document where the command takes place.</param>
            <param name="triangles">The triangles to cut</param>
            <param name="curve">A vdCurve object to cut the triangles.</param>
            <param name="sideToKeep">A point in WCS representing the side to keep in relative to the passed vdCurve object.</param>
            <param name="CreateCoverFaces">A boolean value that represents if the result will have cover faces at the cut sections.</param>
            <param name="CreatedFacesEdgesVisibility">The visibility of the cover face objects.</param>
            <param name="ResultTriangles">A collection of triangles that is the result of the command.</param>
            <param name="KeepFacesVisibility">True if the user wants the result edges visibility to be the same as the original polyface.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vd3DFace">
            <summary>
            Implements the vd3Dface object.
            This object is drawn as a closed polyline and is shown solid after render
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vd3DFace.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes a new instance of the vd3DFace object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vd3DFace.#ctor(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Initializes a new instance of the vd3DFace object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <param name="p1">First point of the vd3DFace object</param>
            <param name="p2">Second point of the vd3DFace object</param>
            <param name="p3">Third point of the vd3DFace object</param>
            <param name="p4">Fourth point of the vd3DFace object</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vd3DFace.#ctor(VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32)">
            <summary>
            Initializes a new instance of the vd3DFace object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <param name="p1">First point of the vd3DFace object</param>
            <param name="p2">Second point of the vd3DFace object</param>
            <param name="p3">Third point of the vd3DFace object</param>
            <param name="p4">Fourth point of the vd3DFace object</param>
            <param name="edgeVisibility">Set the <see cref="P:VectorDraw.Professional.vdFigures.vd3DFace.EdgeVisibility"/> of 4 sides of 3dface object(1,2,4,8).</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vd3DFace.#ctor">
            <summary>
            Initializes a new instance of the vd3DFace object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vd3DFace.Reverse">
            <summary>
            Reverse the order of the <see cref="P:VectorDraw.Professional.vdFigures.vd3DFace.VertexList"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vd3DFace.OverlapVertex">
            <summary>
            Returns the one(1) base index of overlap vertex for a face that consists from four(4) points.
            </summary>
            <returns>The one(1) base index of overlap vertex for a face or 0 if no overlapping points.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vd3DFace.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)">
            <summary>
            <see cref="M:VectorDraw.Professional.vdPrimaries.vdFigure.getOsnapPoints(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32,VectorDraw.Geometry.OsnapPoints)"/>.
            </summary>
            <param name="object2viewcs"></param>
            <param name="mode"></param>
            <param name="pickPoi"></param>
            <param name="LastPoi"></param>
            <param name="SegCount"></param>
            <param name="osnaps"></param>
            <returns>True if at least one osnap point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vd3DFace.IntersectWith(VectorDraw.Professional.vdPrimaries.vdFigure,VectorDraw.Professional.Constants.VdConstInters,VectorDraw.Geometry.gPoints)">
            <summary>
            Finds the intersection points of an object with another object.
            </summary>
            <param name="pEntity">The entity with which the intersection of the object will be done.</param>
            <param name="intersectOption"><see cref="T:VectorDraw.Professional.Constants.VdConstInters"/> constant</param>
            <param name="intPoints">A precreated gPoints collection in which the instersection points will be added.The points are returned in WCS.</param>
            <returns>True if at least one intersection point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vd3DFace.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vd3DFace.Explode">
            <summary>
            Explodes the vd3Dface object into subentity vdPolyline.
            </summary>
            <returns>A collection containing a closed vdPolyline object is returned.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vd3DFace.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)">
            <summary>
            This function is intended to be called during a grip edit of the object. 
            </summary>
            <param name="Indexes">Represents a zero based array of the grip indexes that will be moved.</param>
            <param name="dx">The dx distance that the grip is moved.</param>
            <param name="dy">The dy distance that the grip is moved.</param>
            <param name="dz">The dz distance that the grip is moved.</param>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vd3DFace.GetGripPoints"/>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnMoveGripPointsAt"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vd3DFace.GetGripPoints">
            <summary>
            A function returning the grip points of the object.
            </summary>
            <returns>Returns a new instance of gpoints object containing the grip points of the object.</returns>
            <remarks>
            The returning points are in World coordinate system(WCS).
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetGripPoints"/> event.
            When implementing this method the <see cref="M:VectorDraw.Professional.vdFigures.vd3DFace.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)"/> must be also override according to the new selected grip points.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vd3DFace.InitializeProperties">
            <summary>
            Resets the properties of the vd3DFace object to the Default values.
            </summary>
            <remarks>
            Adds 4 new created gpoint objects(0.0,0.0,0.0) to the vd3DFace VertexList.
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vd3DFace.ToString">
            <summary>
            Gets a System.String that represents the type the vd3DFace Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vd3DFace.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vd3DFace.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vd3DFace.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Called in order to draw the object in a specified vdRender object.
            </summary>
            <param name="render">The vdRender object in which the object will be drawn.</param>
            <returns><see cref="T:VectorDraw.Render.vdRender.DrawStatus"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vd3DFace.Area">
            <summary>
            Calculates the enclosed area of the vdRect object in Drawing Units.
            </summary>
            <returns>Returns the enclosed area.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vd3DFace.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vd3DFace object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vd3DFace.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vd3DFace object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vd3DFace.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements the vd3Dface object.
            This object is drawn as a closed polyline and is shown solid after render
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vd3DFace.BoundingBox">
            <summary>
            Gets the Bounding Box of the 3dFace object in WorldCoordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vd3DFace.VertexList">
            <summary>
            Get/Set the vertex list of the vd3DFace object.
            </summary>
            <remarks>
            vd3DFace's vertex list is a collection of <see cref="T:VectorDraw.Geometry.gPoint"/> objects in World Coordinate System(WCS).
            Default value a collection with 4 gPoints (0.0,0.0,0.0).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vd3DFace.EdgeVisibility">
            <summary>
            Get/Set the visibilty of 4 sides of 3dface object(1,2,4,8).
            </summary>
            <remarks>
            Default value 0.
            Bitwise and one of the following:
            0 : all sides are visible
            1 : first side is invisible
            2 : second side is invisible
            4 : third side is invisible
            8 : fourth side is invisible
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.IReadProxy">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.ReadProxy">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.ReadProxy.ExplodeProxies(System.Byte[],VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Professional.vdPrimaries.vdFigure)">
            <summary>
            Internally used only.
            </summary>
            <param name="bytes"></param>
            <param name="document"></param>
            <param name="matchPropertiesFig"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.ReadProxy.explodeProxies(System.String,VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Professional.vdPrimaries.vdFigure)">
            <summary>
            Internally used only.
            </summary>
            <param name="hexbytes"></param>
            <param name="document"></param>
            <param name="matchPropertiesFig"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.ReadProxy.explodeProxies(System.Byte[],VectorDraw.Professional.vdObjects.vdDocument,VectorDraw.Professional.vdPrimaries.vdFigure)">
            <summary>
            Internally used only.
            </summary>
            <param name="bytes"></param>
            <param name="document"></param>
            <param name="matchPropertiesFig"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.ReadProxy.proxyType">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_EXTENTS">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_CIRCLE">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_CIRCLE3PT">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_CIRCARC">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_CIRCARC3PT">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_POLYLINE">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_POLYLGON">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_MESH">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_SHELL">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_TEXT">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_TEXT2">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_XLINE">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_RAY">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_COLOR">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_LAYER">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_LINETYPE">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_MARKER">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_FILLON">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_TRUECOLOR">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_LNWEIGHT">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_LTSCALE">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_THICKNESS">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_PLSTNAME">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_PUSH_CLIP">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_POP_CLIP">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_PUSH_MODELXFORM">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_PUSH_MODELXFORM2">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_POP_MODELXFORM">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_UNICODETEXT">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_LAYER_NAME">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_LINETYPE_NAME">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_PFACE">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_ELLIPSEARC">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.ReadProxy.proxyType.POXY_NURB_CONTROLPOINTS">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Dialogs.frmDimStyle">
            <summary>
            Implements the Dimstyle manager.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmDimStyle.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmDimStyle.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmDimStyle.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmDimStyle.propertyStyle">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmDimStyle.comboStyles">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmDimStyle.label1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmDimStyle.imageList1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmDimStyle.buttonNew">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmDimStyle.buttonDelete">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmDimStyle.splitContainer1">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmDimStyle.label2">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmDimStyle.picturePreview">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmDimStyle.buttonOK">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmDimStyle.buttonCancel">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmDimStyle.buttonRename">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Dialogs.frmDimStyle.formToolTip">
            <summary>
            Used for distribution of the forms for globilization.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmDimStyle.#ctor">
            <summary>
            Initializes the dialog.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmDimStyle.InitializeExtra(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes the Dimstyle manager.
            </summary>
            <param name="currentDocument">The Document where the Dimstyles belong to.</param>
        </member>
        <member name="M:VectorDraw.Professional.Dialogs.frmDimStyle.Show(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Used to Show the dialog.
            </summary>
            <param name="currentDocument">The vdDocument object where the collection is.</param>
            <returns>A DialogResult indicating how the form was closed.</returns>
        </member>
        <member name="P:VectorDraw.Professional.Dialogs.frmDimStyle.vdFormSize">
            <summary>
            Get/Set the size of the form used when loading the form. This value is stored when the form is closed in order to be used the next time the form is loaded. 
            </summary>
            <remarks>The default value is -1,-1.</remarks>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionDimension">
            <summary>
            Implements the ActionDimension object which is used when adding a dimension.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionDimension.#ctor(VectorDraw.Professional.Constants.VdConstDimType,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Double,VectorDraw.Professional.vdPrimaries.vdLayout,System.Boolean)">
            <summary>
            Initializes the action with the passed parameters.
            </summary>
            <param name="type">The type of the dimension to be added.</param>
            <param name="p1">First point needed for the dimension.</param>
            <param name="p2">Second point needed for the dimension.</param>
            <param name="p3">Third point of the dimension,can be null.</param>
            <param name="rotation">Rotation of the dimension.</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
            <param name="isAutoRot">If this is true then the dimension's rotation is calculated by the mouse position and the rotation specified is ignored.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionDimension.OnMyPositionChanged(VectorDraw.Geometry.gPoint)">
            <summary>
            Called when the mouse position changes.Changes the created dimension entity in order to be drawn each time the mouse moves.
            </summary>
            <param name="newPosition">A gPoint representing the new mouse position in User Coordinate System.</param>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionDimension.HideRubberLine">
            <summary>
            Get a value that represents if the rubber line is drawn or not.Returns false since a rubber line is needed.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionDimension.Entity">
            <summary>
            The entity which is currently selected for this action.Returns the created dimension.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionDimension.needUpdate">
            <summary>
            Get a value that represents if the entity should be updated after each position change.Returns true since an update is needed.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.LayoutTypeConverterNoExpand">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.LayoutTypeConverterNoExpand.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.LayoutTypeConverterNoExpand.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.LayoutTypeConverterNoExpand.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.LayoutTypeConverterNoExpand.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.LayoutTypeConverter">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.LayoutTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.LayoutTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.LayoutTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.LayoutTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.LayoutTypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdLayout">
            <summary>
            Implements all functionality for the vdLayout object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.ActionAdd(VectorDraw.Actions.BaseAction)">
            <summary>
            Adds the specified BaseAction to the layout object.
            </summary>
            <param name="action">A base action to be added to the action list of the layout.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.Refresh">
            <summary>
            Refreshes the graphics by drawing the memory bitmap of the render into the control device.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.Select3d(System.Boolean,VectorDraw.Professional.vdCollections.vdEntities,System.Drawing.Point,System.Int32,System.Boolean,VectorDraw.Render.RenderSelect.RenterSelectObjectArray@)">
            <summary>
            Use this method to select entities from a collection of entities.
            </summary>
            <param name="FindInner">A boolean value representing if the </param>
            <param name="entities">The collection of entities to search in.</param>
            <param name="pt">The centsrpoint of the box to select in View Coordinate system.</param>
            <param name="picksize">The picksize of the box to select in DU.</param>
            <param name="BreakOnMessage">A boolean value that represents if the method is goi8ng to run until the end or stop if a windows message appears.</param>
            <param name="selectedEntities">The result of the search.</param>
            <returns>Returns a <see cref="T:VectorDraw.Render.vdRender.DrawStatus"/> that represents how the method ended.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.HandleDestroyed(System.Object,System.EventArgs)">
            <summary>
            Internally used to connect the vdLayout object with a control component.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.EnsureControl(System.Object)">
            <summary>
            Internally used to connect the vdLayout object with a control component.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.WndProc(VectorDraw.WinMessages.MessageManager.MSG)">
            <summary>
            This is used internally for translating windows messages.
            </summary>
            <param name="m">The windows message to be translated.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.Paint(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Internally used to connect the vdLayout object with a control component.
            </summary>
            <param name="control"></param>
            <param name="e"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.Invalidated(System.Object,System.Drawing.Rectangle)">
            <summary>
            Internally used to connect the vdLayout object with a control component.
            </summary>
            <param name="sender">Control which is send the event.</param>
            <param name="InvalidRect">The <see cref="T:System.Drawing.Rectangle"/> that contains the invalidated window area.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.OnIdle(System.Object)">
            <summary>
            Internally used to connect the vdLayout object with a control component.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.MouseHover(System.Object,System.EventArgs)">
            <summary>
            Internally used to connect the vdLayout object with a control component.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.DragDrop(System.Object,System.Windows.Forms.DragEventArgs)">
            <summary>
            Internally used to connect the vdLayout object with a control component.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.DragEnter(System.Object,System.Windows.Forms.DragEventArgs)">
            <summary>
            Internally used to connect the vdLayout object with a control component.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.DragLeave(System.Object,System.EventArgs)">
            <summary>
            Internally used to connect the vdLayout object with a control component.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.DragOver(System.Object,System.Windows.Forms.DragEventArgs)">
            <summary>
            Internally used to connect the vdLayout object with a control component.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.GotFocus(System.Object,System.EventArgs)">
            <summary>
            Internally used to connect the vdLayout object with a control component.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.LostFocus(System.Object,System.EventArgs)">
            <summary>
            Internally used to connect the vdLayout object with a control component.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Internally used to connect the vdLayout object with a control component.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Internally used to connect the vdLayout object with a control component.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internally used to connect the vdLayout object with a control component.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internally used to connect the vdLayout object with a control component.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internally used to connect the vdLayout object with a control component.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Internally used to connect the vdLayout object with a control component.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.MouseClick(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internally used to connect the vdLayout object with a control component.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.MouseDoubleClick(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internally used to connect the vdLayout object with a control component.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.MouseEnter(System.Object,System.EventArgs)">
            <summary>
            Internally used to connect the vdLayout object with a control component.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.MouseLeave(System.Object,System.EventArgs)">
            <summary>
            Internally used to connect the vdLayout object with a control component.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.MouseWheel(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internally used to connect the vdLayout object with a control component.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.Resize(System.Windows.Forms.Control)">
            <summary>
            Internally used to connect the vdLayout object with a control component.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.UpdateActionControl(System.Windows.Forms.Control)">
            <summary>
            Called by the Container in order to determine the Control Window 
            which is used to capture windows messages.
            </summary>
            <param name="control">The Control Window where the Actions take place.</param>
            <remarks >
            This is used in the vdLayout,vdViewport objects to enable the user Actions.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.LayoutOrViewPortEntities">
            <summary>
            Get the entities of the layout.
            </summary>
            <returns>Returns a collection of entities.If there is an active viewport at the layout then the model entities are returned else the layout entities are returned.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.GetMouseOrthoPoint(VectorDraw.Actions.BaseAction,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="Action"></param>
            <param name="OldMousePos">I current UserCS matrix</param>
            <param name="referencePoint">I current UserCS matrix</param>
            <param name="OrthoFixed"></param>
            <returns>I current UserCS matrix</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.getGripIndexes(VectorDraw.Professional.vdPrimaries.vdFigure,VectorDraw.Geometry.Box)">
            <summary>
            Get the grips of a vdFigure object that are inside a box.
            </summary>
            <param name="fig">The vdFigure object that has the requested grips.</param>
            <param name="box">The box in View Coordinate System.</param>
            <returns>An array of integers representing the grips of the figure that are inside the box.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.getGripIndexes(VectorDraw.Professional.vdPrimaries.vdFigure,VectorDraw.Geometry.gPoints)">
            <summary>
            Gets the grips of a vdFigure object that are inside a polygon.
            </summary>
            <param name="fig">The vdFigure object that has the requested grips.</param>
            <param name="points">The gPoints object defining the polygon in the View Coordinate System.</param>
            <returns>An array of integers representing the grips of the figure that are inside the polygon.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.SetDisableScreenPaint(System.Boolean)">
            <summary>
            Disable/ Enable the Screen paint that is called after after all rendering procedures.
            </summary>
            <param name="bvalue">True to Disable all screen draw procedures</param>
            <returns>The previous selected value.</returns>
            <remarks>
            By default the screen paint is enabled and calls all active <see cref="M:VectorDraw.Actions.BaseAction.ScreenPaint(VectorDraw.Actions.ActionWrapperRender)"/> overrides
            By default it also draw the blue grip boxes.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.CCS_CursorPos">
            <summary>
            Get the cursor's porition in active User Coordinate System.
            </summary>
            <returns>A gpoint representing the cursor's position in active User Coordinate System.This function takes into consideration osnap points and orthomode and polar track.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.CursorPosCCS(System.Drawing.Point)">
            <summary>
            Get the cursor's position in active User Coordinate System.
            </summary>
            <param name="gdilocation">The cursor's position in pixels.</param>
            <returns>A gPoint representing the cursor's position in active User Coordinate System.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.CursorPos(System.Drawing.Point)">
            <summary>
            Get the cursor's position in World Coordinate System.
            </summary>
            <param name="gdilocation">The cursor's position in pixels.</param>
            <returns>A gPoint representing the cursor's position in Woordl Coordinate System.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.CurrentCursorPosInWCS">
            <summary>
            Internally used in actions to get the cursor position at the begining of the action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.DrawCCSAxis(VectorDraw.Render.vdRender,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            This function is used in the Document's OnDrawOverAll event to draw the Axis.
            </summary>
            <param name="render">The ActiveActionRender of the Document.</param>
            <param name="DrawXAxis">A boolean value representing if the x axis will be drawn.</param>
            <param name="DrawYaxis">A boolean value representing if the y axis will be drawn.</param>
            <param name="DrawZaxis">A boolean value representing if the z axis will be drawn.</param>
            <param name="DrawStrings">A boolean value representing if the strings will be drawn.</param>
            <param name="XAxisColor">A System.Color indicating the color of the x axis. </param>
            <param name="YAxisColor">A System.Color indicating the color of the y axis.</param>
            <param name="ZAxisColor">A System.Color indicating the color of the z axis.</param>
            <param name="showUserCS">A boolean value representing is the axis will be drawn relative to User Coordinate System or WorldCS.</param>
            <param name="showOnOrigin">A boolean value representing is the axis will be drawn on the origin of selected Coordinate System on on the LowerLeft conrer of the screen.</param>
            <remarks>Default width is 5, Default length is 40 pixels.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.DrawCCSAxis(VectorDraw.Render.vdRender,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Boolean,System.Double,System.Double)">
            <summary>
            This function is used in the Document's OnDrawOverAll event to draw the Axis.
            </summary>
            <param name="render">The ActiveActionRender of the Document.</param>
            <param name="DrawXAxis">A boolean value representing if the x axis will be drawn.</param>
            <param name="DrawYaxis">A boolean value representing if the y axis will be drawn.</param>
            <param name="DrawZaxis">A boolean value representing if the z axis will be drawn.</param>
            <param name="DrawStrings">A boolean value representing if the strings will be drawn.</param>
            <param name="XAxisColor">A System.Color indicating the color of the x axis. </param>
            <param name="YAxisColor">A System.Color indicating the color of the y axis.</param>
            <param name="ZAxisColor">A System.Color indicating the color of the z axis.</param>
            <param name="showUserCS">A boolean value representing if the axis will be drawn relative to User Coordinate System or WorldCS.</param>
            <param name="showOnOrigin">A boolean value representing if the axis will be drawn on the origin of selected Coordinate System on on the LowerLeft conrer of the screen.</param>
            <param name="axiswidth">The width of the axis in pixels. The default VectorDraw axis is 5.0 pizels.</param>
            <param name="axislength">The length of the axis in pixels. The default VectorDraw axis is 40.0 pizels.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.DrawCCSAxis(VectorDraw.Render.vdRender,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Boolean,System.Double,System.Double)">
            <summary>
            This function is used in the Document's OnDrawOverAll event to draw the Axis.
            </summary>
            <param name="render">The ActiveActionRender of the Document.</param>
            <param name="DrawXAxis">A boolean value representing if the x axis will be drawn.</param>
            <param name="DrawYaxis">A boolean value representing if the y axis will be drawn.</param>
            <param name="DrawZaxis">A boolean value representing if the z axis will be drawn.</param>
            <param name="DrawStrings">A boolean value representing if the strings will be drawn.</param>
            <param name="StringsColor">The color of the X,Y,Z strings</param>
            <param name="XAxisColor">A System.Color indicating the color of the x axis. </param>
            <param name="YAxisColor">A System.Color indicating the color of the y axis.</param>
            <param name="ZAxisColor">A System.Color indicating the color of the z axis.</param>
            <param name="showUserCS">A boolean value representing if the axis will be drawn relative to User Coordinate System or WorldCS.</param>
            <param name="showOnOrigin">A boolean value representing if the axis will be drawn on the origin of selected Coordinate System on on the LowerLeft conrer of the screen.</param>
            <param name="axiswidth">The width of the axis in pixels. The default VectorDraw axis is 5.0 pizels.</param>
            <param name="axislength">The length of the axis in pixels. The default VectorDraw axis is 40.0 pizels.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.DrawCCSAxis(VectorDraw.Render.vdRender,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            This function is used in the Document's OnDrawOverAll event to draw the Axis.
            </summary>
            <param name="render">The ActiveActionRender of the Document.</param>
            <param name="DrawXAxis">A boolean value representing if the x axis will be drawn.</param>
            <param name="DrawYaxis">A boolean value representing if the y axis will be drawn.</param>
            <param name="DrawZaxis">A boolean value representing if the z axis will be drawn.</param>
            <param name="DrawStrings">A boolean value representing if the strings will be drawn.</param>
            <param name="XAxisColor">A System.Color indicating the color of the x axis. </param>
            <param name="YAxisColor">A System.Color indicating the color of the y axis.</param>
            <param name="ZAxisColor">A System.Color indicating the color of the z axis.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes the vdLayout object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this constructor the is no need to call the SetUnRegisterDocument method in order to register the Document of this object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.#ctor(VectorDraw.Professional.vdObjects.vdDocument,System.String)">
            <summary>
            Initializes the vdLayout object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <param name="name">The name of the layout object.</param>
            <remarks>Calling this constructor the is no need to call the SetUnRegisterDocument method in order to register the Document of this object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.#ctor">
            <summary>
            Initializes the vdLayout object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.OnOwnerChanged">
            <summary>
            This method is called when the object's owner is changed.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.Dispose">
            <summary>
            Performs tasks associated with freeing, releasing, or resetting the necessary memory objects.
            After calling this method the object is not available.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.
            User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.GetOsnapPoints(System.Drawing.Point,System.Int32,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.OsnapPoint,System.Boolean)">
            <summary>
            Get all Osnap points from all the entities that pass from a rectangle with a given center point and size.
            </summary>
            <param name="Pt">The center of the rectangle in pixels.</param>
            <param name="SelectingSize">The size of the rectangle in pixels.</param>
            <param name="pickpoi">The mouse location in current view coordinate system.</param>
            <param name="LastPoi">The reference point of the action in current view coordinate system.This value can be null.</param>
            <param name="mode">Defines which type of osnaps will be returned.</param>
            <param name="ApparentEntitity">An osnap point of APPARENTINT type used to find intersection osnaps.This value can be null.</param>
            <param name="BreakOnMessage">If this is true then and a windows message exists in the windows que then the searching will stop.</param>
            <returns>Returns a collection of the osnap points found in the current view coordinate system.These points are sorted regarding the distance from the pickpoi parameter.</returns>
            <remarks>Entities in lock layers are not returned if <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethod"/> does not contain the value of <see cref="F:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum.EnableGetObjectSnap"/>.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.GetOsnapPoints(System.Drawing.Point,System.Int32,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.OsnapPoint,System.Boolean,VectorDraw.Actions.BaseAction,System.Boolean)">
            <summary>
            Get all Osnap points from all the entities that pass from a rectangle with a given center point and size.
            </summary>
            <param name="Pt">The center of the rectangle in pixels relative to the UpperLeft of Active Layout.</param>
            <param name="SelectingSize">The size of the rectangle in pixels.</param>
            <param name="pickpoi">The mouse location in current view coordinate system.</param>
            <param name="LastPoi">The reference point of the action in current view coordinate system.This value can be null.</param>
            <param name="mode">Defines which type of osnaps will be returned.</param>
            <param name="ApparentEntitity">An osnap point of APPARENTINT type used to find intersection osnaps.This value can be null.</param>
            <param name="BreakOnMessage">If this is true then and a windows message exists in the windows que then the searching will stop.</param>
            <param name="Action">The active BaseAction that holds the osnap points.</param>
            <param name="isIdle">True if the method is called from Idle timer</param>
            <returns>Returns a collection of the osnap points found in the current view coordinate system.These points are sorted regarding the distance from the pickpoi parameter.</returns>
            <remarks>Entities in lock layers are not returned if <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethod"/> does not contain the value of <see cref="F:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum.EnableGetObjectSnap"/>.
            Maximun number of osnap points are limit to 50.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.GetToolTipFigure(System.Drawing.Point,System.Int32,System.Boolean,System.Boolean@)">
            <summary>
            Returns the first figure found in a rectangle with a given center and size that has a tooltip or URL.
            </summary>
            <param name="Pt">The center of the rectangle in pixels.</param>
            <param name="SelectingSize">The size of the rectangle in pixels.</param>
            <param name="BreakOnMessage">If this is true then and a windows message exists in the windows que then the searching will stop.</param>
            <param name="AllObjectsAreSearched">Returns true if the function did not break cause of the BreakOnMessage parameter and all figures where searched.</param>
            <returns>Returns the vdFigure object that has a tooltip or a URL.</returns>
            <remarks>
            If <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.EnableToolTips"/> and <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.EnableUrls"/> are false then null is returned.
            This function also returns an inner entity of an insert object.
            Entities in lock layers are not returned if <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethod"/> does not contain the value of <see cref="F:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum.EnableShowObjectToolTip"/>.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.Select3d(System.Drawing.Point,System.Int32,System.Boolean)">
            <summary>
            Selects entities at a given point and a given box size.Returning items are sorted depend of their depth form current eye view from nearest to farest.
            </summary>
            <param name="pt">A point in Pixels.</param>
            <param name="picksize">In drawing units the size of a square where the entities inside will be returned.</param>
            <param name="BreakOnMessage">If this is true then and a windows message exists in the windows que then the searching will stop.</param>
            <returns>A collection of entities located at the specified point.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.Select3d(System.Boolean,System.Drawing.Point,System.Int32,System.Boolean,VectorDraw.Professional.vdCollections.vdEntities@)">
            <summary>
            Selects entities at a given point and a given box size.Returning items are sorted depend of their depth form current eye view from nearest to farest.
            </summary>
            <param name="FindInner"></param>
            <param name="pt">A point in Pixels.</param>
            <param name="picksize">In drawing units the size of a square where the entities inside will be returned.</param>
            <param name="BreakOnMessage">If this is true then and a windows message exists in the windows que then the searching will stop.</param>
            <param name="selectedEntities">reference to an output collection of entities that will filled with entities located at the specified point.</param>
            <returns>Returns a selecting status code.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.GetEntityFromPoint(System.Drawing.Point,System.Int32,System.Boolean,VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum)">
            <summary>
            Gets an entity passing through a rectangle with center a given point and given size.
            </summary>
            <param name="Pt">The point in pixels.</param>
            <param name="SelectingSize">Represents a rectangle size where the vdFigure entity passes from.</param>
            <param name="BreakOnMessage">If this is true then and a windows message exists in the windows que then the searching will stop.</param>
            <param name="locklayerMethod">The method to be used in combination with active <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethod"/> property value, to test if entities belonging in locked layers are accepted.</param>
            <returns>The vdFigure object that passes from this point or null if none is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.GetEntityFromPoint(System.Drawing.Point,System.Int32,System.Boolean,VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum,System.Int32,VectorDraw.Professional.vdPrimaries.vdFigure@)">
            <summary>
            Gets an entity passing through a rectangle with center a given point and given size.
            </summary>
            <param name="Pt">The point in pixels.</param>
            <param name="SelectingSize">Represents a rectangle size where the vdFigure entity passes from.</param>
            <param name="BreakOnMessage">If this is true then and a windows message exists in the windows que then the searching will stop.</param>
            <param name="locklayerMethod">The method to be used in combination with active <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethod"/> property value, to test if entities belonging in locked layers are accepted.</param>
            <param name="k">Indexed selected figure.</param>
            <param name="fig">reference to an output entitity that passes from this point.</param>
            <returns>Returns a selecting status code.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.GetViewportFromPoint(System.Drawing.Point)">
            <summary>
            Returns a viewport that passed throw the given point in pixels relative to VectorDraw render window.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.GetEntityFromPoint(System.Drawing.Point,System.Int32,System.Boolean)">
            <summary>
            Gets an entity passing through a rectangle with center a given point and given size.
            </summary>
            <param name="Pt">The point in pixels.</param>
            <param name="SelectingSize">Represents a rectangle size where the vdFigure entity passes from.</param>
            <param name="BreakOnMessage">If this is true then and a windows message exists in the windows que then the searching will stop.</param>
            <returns>The vdFigure object that passes from this point or null if none is found.</returns>
            <remarks>Entities in lock layers are not returned if <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethod"/> does not contain the value of <see cref="F:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum.EnableGetEntityFromPoint"/>.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.GetTransformedSelectedObjects(VectorDraw.Geometry.Box)">
            <summary>
            Gets a collection of <see cref="T:VectorDraw.Professional.vdObjects.SelectedObject"/> type object that represents all the primitives figures that belongs to this layout and passing through a rectangle in current View Co-ordinate system.
            </summary>
            <param name="SelectionViewBox">A bounding box in current View Co-ordinate system.</param>
            <returns> A collection of the Selected entities that passing through the input bounding box in the order from the last in the entities collection to the first.</returns>
            <example>
            A C# Example that print all the primitives figures of ActiveLayout that throws a view rectangle.
            <code>
                    Box rc;
                    //prompt the user to pick a rectangle that will be used to select the entities.
                    doc.Prompt("Pick a rectangle for crossing window entities select");
                    StatusCode sc = doc.Model.ActionUtility.getUserRectViewCS(null, out rc);
                    doc.Prompt(null);
                    if ( sc == StatusCode.Success)
                    {
                        SelectedObjectArray obs = doc.ActiveLayOut.GetTransformedSelectedObjects(rc);
                        //display the results into commandline
                        doc.Prompt(string.Format("\r\nNumber of Selected objects : {0}", obs.Count)); doc.Prompt(null);
                        foreach (SelectedObject item in obs)
                        {
                            //foreach selected object displays the object type and a matrix that tranforms the object into world Co-ordinate system.
                            doc.Prompt(string.Format("\r\n{0}, object2world matrix = {1}", item.SelectedEntity.Entity, item.SelectedEntity.ObjectToWorldMatrix)); doc.Prompt(null);
                            //dispalys the owners tree for the selected object from inner to outer.
                            string tabs = "\t";
                            foreach (TransformedFigure owner in item.Owners)
                            {
                                doc.Prompt(string.Format("\r\n{0}Owner: {1}, object2world matrix = {2}", tabs,owner.Entity, owner.ObjectToWorldMatrix)); doc.Prompt(null);
                                tabs += "\t";
                            }
                        }
                    }
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.GetTransformedSelectedObjects(VectorDraw.Geometry.gPoints,System.Boolean)">
             <summary>
             Gets a collection of <see cref="T:VectorDraw.Professional.vdObjects.SelectedObject"/> type object that represents all the primitives figures that belongs to this layout and passing through a region in current View Co-ordinate system.
             </summary>
             <param name="SelectionViewPolygon">A <see cref="T:VectorDraw.Geometry.gPoints"/> collection that defines a region in current View Co-ordinate system.</param>
             <param name="isCrossing">Set it to true in order the objects that also intersect the input region will added to the return collection.</param>
             <returns> A collection of the Selected entities that passing through the input region in the order from the last in the entities collection to the first.</returns>
             <example>
            A C# Example that select inner entities inside a view box and add them to active layout entities.
             <code>
                            Box rect = null;
                            bool isCrossing = false;
                            //prompts the user so pick a box in current view 
                            doc.Prompt("Select objects:");
                            doc.ActionUtility.getUserRectViewCS(null,true, out rect, out isCrossing);
                            doc.Prompt(null);
                            if (rect == null) return;
                            //returns all inner entities that include in the selected box.
                            //if the last pickking corner of the selection box is Left than the first one then also returns and the entities that intersect the rect(crossing mode = true)
                            SelectedObjectArray obarr = doc.ActiveLayOut.GetTransformedSelectedObjects(rect.TogPoints(), isCrossing);
                            //obarr contains a list of inner entities in the reverse order that they are in the passed entities collection
                            //Lasted draw item is first in the list
                            foreach (SelectedObject item in obarr)
                            {
                                //get a clone of the inner item
                                vdFigure clone = item.SelectedEntity.Entity.Clone(null) as vdFigure;
                                clone.PenColor = new vdColor(Color.Red);
                                clone.LineWeight = VectorDraw.Professional.Constants.VdConstLineWeight.LW_200;
                                //transform the item with the proper matrix so it can be added alone in the top entities collection with the same display geometry
                                clone.Transformby(clone.ECSMatrix.GetInvertion() * item.SelectedEntity.ObjectToWorldMatrix);
                                //add the clonable item at the start of the active layout entities collection
                                doc.ActiveLayOut.Entities.AddItem(clone);
                                doc.ActiveLayOut.Entities.ChangeOrder(clone, true);
                                
                                //highlight the original item
                                item.SelectedEntity.Entity.HighLight = true;
                            }
                            //redraw the client area of the active control window.
                            doc.Redraw(true);
                  
             </code>
            A C# Example getting all entities and subentities that are passed throw a window or crossing polygon and change some of their properties
             <code>
            
                            bool crossing = true;
                            doc.Prompt("Select region");
                            gPoints pts = doc.ActionUtility.getUserPerigramViewCS(true, crossing);
                            doc.Prompt(null);
                            if (pts != null)
                            {
                                //Get the selected subentities
                                SelectedObjectArray ret = doc.ActiveLayOut.GetTransformedSelectedObjects(pts, crossing);
                                vdSelection set = new vdSelection();
                                foreach (SelectedObject item in ret) set.AddItem(item.SelectedEntity.Entity, true, vdSelection.AddItemCheck.Nochecking);
                                //Change the color of selected entities to red.
                                foreach (vdFigure item in set)
                                {
                                    item.PenColor = new vdColor(Color.Red);
                                    item.Update();
                                }
                                //Redraws the client area of the active control window.
                                doc.Redraw(true);
            
                            }
                  
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.GetTransformedSelectedObjectsFence(VectorDraw.Geometry.gPoints)">
            <summary>
            Gets a collection of <see cref="T:VectorDraw.Professional.vdObjects.SelectedObject"/> type object that represents all the primitives figures that belongs to this layout and passing through a region in current View Co-ordinate system.
            </summary>
            <param name="SelectionViewPolygon">A <see cref="T:VectorDraw.Geometry.gPoints"/> collection that defines a region in current View Co-ordinate system.</param>
            <returns> 
            A collection of the Selected entities that passing through the input region in the order from the last in the entities collection to the first.
            Fence selecting mode is used.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.GetInnerEntitiesListFromPoint(VectorDraw.Professional.vdCollections.vdEntities,System.Drawing.Point,System.Int32,VectorDraw.Generics.vdArray{VectorDraw.Professional.vdPrimaries.vdFigure}@,VectorDraw.Generics.vdArray{VectorDraw.Geometry.Matrix}@,System.Boolean,VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum)">
            <summary>
             Gets the inner entities of the first figure passing through a rectangle with center a given point and given size.
            </summary>
            <param name="entities">The collection that will search to find the entities pass through the given point.If it is null LayoutOrViewPortEntities is used.</param>
            <param name="Pt">The point in pixels.</param>
            <param name="SelectingSize">The size of the rectangle where the figure must pass through.</param>
            <param name="InnerEntities">Returns an array of inner entites from most inner to outer most order.</param>
            <param name="InnerMatrixList">Returns an array of inner entites matrix in same order, that if applied to the returned figure it will be transformed to World coordinate system.</param>
            <param name="BreakOnMessage">If this is true then and a windows message exists in the windows que then the searching will stop.</param>
            <param name="locklayerMethod">The method to be used in combination with active <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethod"/> property value, to test if entities belonging in locked layers are accepted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.GetInnerEntitiesListFromPoint(VectorDraw.Professional.vdCollections.vdEntities,System.Drawing.Point,System.Int32,VectorDraw.Generics.vdArray{VectorDraw.Professional.vdPrimaries.vdFigure}@,VectorDraw.Generics.vdArray{VectorDraw.Geometry.Matrix}@,System.Boolean)">
            <summary>
             Gets the inner entities passing through a rectangle with center a given point and given size.
            </summary>
            <param name="entities">The collection that will search to find the entities pass through the given point.If it is null LayoutOrViewPortEntities is used.</param>
            <param name="Pt">The point in pixels.</param>
            <param name="SelectingSize">The size of the rectangle where the figure must pass through.</param>
            <param name="InnerEntities">Returns an array of inner entites from most inner to outer most order.</param>
            <param name="InnerMatrixList">Returns an array of inner entites matrix in same order, that if applied to the returned figure it will be transformed to World coordinate system.</param>
            <param name="BreakOnMessage">If this is true then and a windows message exists in the windows que then the searching will stop.</param>
            <remarks>Entities in lock layers are not returned if <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethod"/> does not contain the value of <see cref="F:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum.EnableGetEntityFromPoint"/>.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.GetInnerEntityFromPoint(VectorDraw.Geometry.Matrix@,VectorDraw.Professional.vdPrimaries.vdFigure@,System.Drawing.Point,System.Int32,System.Boolean)">
            <summary>
            Gets the most inner entity passing through a rectangle with center a given point and given size.
            </summary>
            <param name="EcsToWorld">Returns a matrix that if applied to the returned figure it will be transformed to World coordinate system.</param>
            <param name="outermost">Is the outer figure where the returned entity belongs.</param>
            <param name="Pt">The point in pixels.</param>
            <param name="SelectingSize">The size of the rectangle where the figure must pass through.</param>
            <param name="BreakOnMessage">If this is true then and a windows message exists in the windows que then the searching will stop.</param>
            <returns>The inner most vdFigure object that is located in that point and it is DocumentRegister.</returns>
            <remarks>This function is very usefull for searching figures inside vdInsert objects.
            Entities in lock layers are not returned if <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethod"/> does not contain the value of <see cref="F:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum.EnableGetEntityFromPoint"/>.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.MatchPropertiesWithoutEntities(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from a vdLayout and sets them to this object without the
            references of the Entities.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.InitializeProperties">
            <summary>
            Resets the properties of the vdLayout object to the Default values.
            </summary>
            <remarks>
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.ToString">
            <summary>
            Gets a System.String that represents the name of the vdLayout Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.Invalidate">
            <summary>
            Post a refresh in the bounding area of the control.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.Update">
            <summary>
            Updates the objects of the vdLayout after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.RefreshGraphicsControl(System.Windows.Forms.Control)">
            <summary>
            Refreshes the graphics by drawing the memory bitmap of the render into the control device.
            </summary>
            <param name="control">The control to be refreshed.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.SetRenderingSize(System.Drawing.Size)">
            <summary>
            Select a new Size in pixels for the Active Render
            </summary>
            <param name="newsize">New Width and Height for Active Render</param>
            <returns>The previous selecting size.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.RenderToGraphics(System.Drawing.Graphics,VectorDraw.Geometry.Box,System.Int32,System.Int32)">
            <summary>
            Renders a rectangular area in a different graphics with specified size. 
            </summary>
            <param name="gr">The graphics device where the rendering done.</param>
            <param name="RenderingArea">A rectangle are in View Coordinate represending the entities area which will be drawn.If this parameter is null then the display area is rendered.</param>
            <param name="destWidthPix">Width of rendering device in pixels</param>
            <param name="destHeightPix">Height of rendering device in pixels</param>
            <seealso cref="M:VectorDraw.Professional.vdPrimaries.vdLayout.RenderToGraphics(System.Drawing.Graphics,VectorDraw.Geometry.Box,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.RenderToBitmap(System.Drawing.Bitmap)">
            <summary>
            Render the scene to the passed Bitmap object using this Layout view properties
            </summary>
            <remarks>For faster rendering the passed Bitmap must have been created with VectorDraw.Render.BitmapWrapper.DefaultPixelFormat </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.RenderToGraphics(System.Drawing.Graphics,VectorDraw.Geometry.Box,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Renders a rectangular area in a different graphics with specified size. 
            </summary>
            <param name="gr">The graphics device where the rendering done.</param>
            <param name="RenderingArea">A rectangle are in View Coordinate represending the entities area which will be drawn.If this parameter is null then the display area is rendered.</param>
            <param name="graphicsXorigin">The x coordinate of the upper left origin of the graphics device in pixels.</param>
            <param name="graphicsYorigin">The y coordinate of the upper left origin of the graphics device in pixels.</param>
            <param name="destWidthPix">Width of rendering device in pixels</param>
            <param name="destHeightPix">Height of rendering device in pixels</param>
            <param name="SplitSize">
            The maximun size in pixels of width and height can be used to render a sub rectangle on the selected graphics device.
            Useful to be used when destWidthPix and destHeightPix are too large.
            This will split the rendering in number of rows and columns recrtangles depend of the destWidthPix , destHeightPix and SplitSize.
            For example if destWidthPix = 8000 and destHeight = 8000 and SplitSize = 1000 it will split the render in 8x8 rendering images
            Set it to 0 for rendering at once in one single rectangle.
            </param>
            <remarks>
            VectorDraw automatically centers and fits the rendering area to the specified image size.
            You can control the output quality using the following properties with gr passed parameter
            <see cref="P:System.Drawing.Graphics.CompositingMode"/> 
            <see cref="P:System.Drawing.Graphics.PixelOffsetMode"/> 
            <see cref="P:System.Drawing.Graphics.SmoothingMode"/> 
            <see cref="P:System.Drawing.Graphics.CompositingQuality"/> 
            <see cref="P:System.Drawing.Graphics.InterpolationMode"/> 
            <see cref="P:System.Drawing.Graphics.TextRenderingHint"/> 
            <see cref="M:VectorDraw.Render.vdRender.PrepareGraphicsHighQuality(System.Drawing.Graphics)"/>
            <see cref="M:VectorDraw.Render.vdRender.PrepareGraphicsHighSpeed(System.Drawing.Graphics)"/>
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.Draw(VectorDraw.Render.vdRender,System.Drawing.Graphics,System.Drawing.Bitmap,System.Boolean,System.Boolean)">
            <summary>
            Draws all entities of the layout in a specified graphics device.
            </summary>
            <param name="render"></param>
            <param name="gr">The graphics device.</param>
            <param name="MemBmp">A bitmap which is selected for the graphic device.This value can be null for non memory graphics.</param>
            <param name="InitTimer">Set this parameter FALSE.</param>
            <param name="FireMeterProgress">If true then progress meter events are fired.</param>
            <returns><see cref="T:VectorDraw.Render.vdRender.DrawStatus"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.UCS(System.String)">
            <summary>
            Changes the User coordinate system.
            </summary>
            <param name="ucsType">A string that represents the User coordinate system to take place.valid values:"WORLD" for World Coordinate System,"VIEW" for View Coordinate System,"PREV" for the previous Coordinate System.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.UCS(VectorDraw.Geometry.Matrix)">
            <summary>
            Set the active User Coordinate System using a given matrix.
            </summary>
            <param name="mat">A matrix to be used.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.UCS(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Set the active User Coordinate System using a point and x,y directions.
            </summary>
            <param name="origin">A gPoint representing the origin point in World Coordinate System.</param>
            <param name="xdir">A gPoint representing the x direction in World Coordinate System.</param>
            <param name="ydir">A gPoint representing the y direction in World Coordinate System.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.UCSPrevious">
            <summary>
            Set the previous used User Coordinate System.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.UCS(VectorDraw.Professional.vdPrimaries.vdNamedUCS)">
            <summary>
            Set the Current UCS from the passed parameter.
            </summary>
            <param name="NamedUCS">A vdNamedUCS object from which the MAtrix is going to be used as World2User Matrix.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.AddCurentZoomToHistory">
            <summary>
            Add the current zoom (ViewCenter , ViewSize and World2ViewMatrix) in object zoom history in order to reset it with <see cref="M:VectorDraw.Professional.vdPrimaries.vdLayout.ZoomPrevious"/> method
            </summary>
            <remarks>By default user command actions: pan , scroll , dynamic 3d rotation  and vdCommandAction methods view3d, lookat are added to zoom history.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.AddCurentZoomToHistory(System.String)">
            <summary>
            Add the current zoom (ViewCenter , ViewSize and World2ViewMatrix) in object zoom history in order to reset it with <see cref="M:VectorDraw.Professional.vdPrimaries.vdLayout.ZoomPrevious"/> method
            </summary>
            <param name="commandid">Internally used only.Pass empty string.</param>
            <remarks>By default user command actions: pan , scroll , dynamic 3d rotation  and vdCommandAction methods view3d, lookat are added to zoom history.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.ZoomPrevious">
            <summary>
            Zooms the drawing area to the previous used zoom saved by <see cref="M:VectorDraw.Professional.vdPrimaries.vdLayout.AddCurentZoomToHistory"/> method.
            </summary>
            <returns>False if the zoom stack is empty -or- true otherwise.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.ZoomWindow(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Zooms the drawing area to a specified window.
            </summary>
            <param name="w1">A gPoint representing the first corner of the window in View Coordinates.</param>
            <param name="w2">A gPoint representing the opposite corner of the window in View Coordinates.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.ZoomScale(System.Double)">
            <summary>
            Zooms the drawing area using a given scale factor.
            </summary>
            <param name="scalefactor">A double value representing the scale factor.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.ZoomAll">
            <summary>
            Zooms all drawing area.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.ZoomExtents">
            <summary>
            Zooms the drawing area so all drawing extends are visible.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.SetFromView(VectorDraw.Professional.vdPrimaries.vdView)">
            <summary>
            Sets the layout's properties equal to the passed vdView object.
            </summary>
            <param name="view">A vdView object from which the view properties are going to be copied from.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.GetScrollingProperties(VectorDraw.Professional.vdPrimaries.vdLayout.ScrollPropereties@,VectorDraw.Professional.vdPrimaries.vdLayout.ScrollPropereties@)">
            <summary>
            Utility method to calculate the horizontal and vertical scroll properties depend of the active view and drawing limits
            </summary>
            <param name="horizontal">Gets the horizontal scroll properties.</param>
            <param name="vertical">Gets the vertical scroll properties.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdLayout object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdLayout object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.GetExtents">
            <summary>
            Gets the Bounding Box that completely encloses all visible Figure.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayout.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements all functionality for the vdLayout object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.Actions">
            <summary>
            A Stack of all actions that are active at the layout.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.ActiveAction">
            <summary>
            Gets the active action of the layout.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.SelectionPreview">
            <summary>
            Get/Set the preview method <see cref="T:VectorDraw.Render.vdRenderGlobalProperties.SelectionPreviewFlags"/> of entities that are over the mouse position when an action waiting to select an entity.
            </summary>
            <remarks>Default value is <see cref="F:VectorDraw.Render.vdRenderGlobalProperties.SelectionPreviewFlags.DEFAULT"/> </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.MemoryGraphics">
            <summary>
            Get the Graphics where the rendering takes place.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.MemoryBitmap">
            <summary>
            Get the Bitmap of the memory graphics where the rendering takes place.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.NeedRedraw">
            <summary>
            Get a value that represents is the Layout needs to be redrawn.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.MouseElevation">
            <summary>
            Get/Set a value in Drawing Units used to add a Zvalue to mouse position relative to Current UCS.
            </summary>
            <remarks>Default value is 0.0 </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.ActionUtility">
            <summary>
            Get the Utility object of the Layout.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.IsActive">
            <summary>
            Returns true if this object is reference equals with the Document.ActiveLayout 
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.FreezeActions">
            <summary>
            Get/Set a boolean value representing if user actions can take place to the layout.Freeze user actions if you don't interact with the user to increase component's speed.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.ActiveRender">
            <summary>
            Get the active vdRender object of the layout(viewport's if active or layout's vdRender).
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.ActiveActionRender">
            <summary>
            Get the active action render object of the layout(viewport's if active or layout's action render).
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.OverAllActiveActions">
            <summary>
            Get the stack of the active layout actions.If there is a viewport active then the viewport's actions are returned instead.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.OverAllActiveAction">
            <summary>
            Get the active action of the layout.If there is an active viewport then the viewport's active action is returned instead.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.GridStyle">
            <summary>
            Get/Set the style that used to draw the grid.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.GridMeasure">
            <summary>
            Get the <see cref="T:VectorDraw.Professional.vdObjects.GridMeasured"/> object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.RenderStatus">
            <summary>
            Returns an OpenGL status code for diagnostic purposes.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.IsModel">
            <summary>
            Returns true if this object is reference equal with Document.Model
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.Entities">
            <summary>
            Get the collection of vdFigures drawn in this layout.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.ShowUCSAxis">
            <summary>
            Get/Set a value representing if the axis will be drawn.
            </summary>
            <remarks>
            Default value :true.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.ViewSize">
            <summary>
            Get/Set the view size of View Window in D.U.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.ColorPalette">
            <summary>
             Get/Set the output Color palette 
            </summary>
            <remarks>
            Deafault value <see cref="F:VectorDraw.Render.vdRender.ColorDisplay.TrueColor"/>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.ViewCenter">
            <summary>
            Get/Set the coordinates of the center point of view in Current View Coordinate System.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.RenderMode">
            <summary>
            Get/Set a value representing the render mode of the layout object(Wire 2d, render 3d etc...).
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.World2ViewMatrix">
            <summary>
            Get/Set the matrix used for transformations between World Coordinate System(WCS)
            and View Coordinate System(VCS).
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.DisplayWidth">
            <summary>
            Get the width of the layout's rendering device in pixels.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.DisplayHeight">
            <summary>
            Get the height of the layout's rendering device in pixels.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.ViewDir">
            <summary>
            Get a vector object representing the view direction of the layout.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.TwistAngle">
            <summary>
            Get the angle relative to the world to view plane.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.BkColorEx">
            <summary>
            Get/Set the background color of the vdLayout object.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.BkGradientColor">
            <summary>
            Get/Set the second color for gradient fading effect of the background.
            </summary>
            <remarks>Default value is Color.Empty which means no gradient color effect.
            When this property is not empty then the Background is drawn gradient using the BkColor 
            fading in to this color.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.BkGradientAngle">
            <summary>
            Get/Set the background gradient direction angle in radians.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.CurveResolution">
            <summary>
            Get/Set the curve resolution of the vdLayout object.
            </summary>
            <remarks>
            Controls the appearance of circles, arcs, and ellipses using short vectors (value range 1-20000). Default value : 500.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.PixelSize">
            <summary>
            Get the size in Drawing Units of one(1) window pixel.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.LensAngle">
            <summary>
            Represents the Lens Angle in degrees of the vdLayout object.
            </summary>
            <remarks>
            Default value 60.0 .Typical values range from 60 to 30 degrees.This value is valid only when perspective mode is on.A wide angle lens means a wide field of view.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.FocalLength">
            <summary>
            Get/Set the focal length of the layout.
            </summary>
            <remarks>
            This value is valid only when perspective mode is on.Represents the distance between the "eye" and the center of the view in the current view direction plane.Default value is 0.05.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.PerspectiveMod">
            <summary>
            Get/Set the perspective mode of the layout.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.Render">
            <summary>
            Get the vdRender object of the layout.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.World2UserMatrix">
            <summary>
            Get/Set the matrix used for trasformations between world and user coordinate system.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.Pixel2ViewMatrix">
            <summary>
            Get the matrix used for transformations between pixels and view coordinate system.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.User2WorldMatrix">
            <summary>
            Get the matrix used for transformations between user and world coordinate system.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.View2WorldMatrix">
            <summary>
            Get the matrix used for transformations between view and world coordinate system.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.SnapStyle">
            <summary>
            Get/Set the snap style of the layout.The snap style affects the cursor-axis display.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.SnapIso">
            <summary>
            Get/Set the snap iso for the vdlayout object. The snap iso affects the cursor-axis display.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.SnapAngle">
            <summary>
            Get/Set the snap angle of the vdlayout object.The snap angle affectes the grid angle and also the cursor-axis display angle.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.DisableShowPrinterPaper">
            <summary>
            Get/Set if the default paper printer will be drawn .
            </summary>
            <remarks>Default value :false(the printer paper will be drawn).</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.Name">
            <summary>
            Get/Set the unique name of the vdlayout object.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <exception cref="T:VectorDraw.Professional.Exceptions.InvalidTableNameException"></exception>
            <exception cref="T:VectorDraw.Professional.Exceptions.CannotRenameException">Thrown when cannot rename an object.</exception>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.ActiveViewPort">
            <summary>
            Get/Set the active viewport of the vdlayout object.
            </summary>
            <remarks>
            If active viewport is not null then all actions take place in the active viewport.If this value is null then PAPER_SPACE mode is activated and all actions take place to the layout.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.SpaceMode">
            <summary>
            Get/Set the space mode of the layout.
            </summary>
            <remarks>
            If space mode is set to PAPER then all actions take place to the layout. If it is set to MODEL then all actions take place to the active viewport (if not exist the first viewport is activated).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.Limits">
            <summary>
            Get/Set a box representing the lower-left and upper-right limits of drawing for grid displaying in UCS.
            </summary>
            <remarks>
            Default value is Lower Left : 0.0,0.0 and Upper Right : 12 , 9.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.OrthoMode">
            <summary>
            Get/Set a boolean value that if is true constrains cursor movement to the perpendicular.
            </summary>
            <remarks>
            Default value false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.OrthoModeAxis">
            <summary>
            Defines the axis where the Ortho is limited on when <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.OrthoMode"/> is true.
            </summary>
            <remarks>
            By default ortho is limited on x , y and z axis.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.PolarTrackLock">
            <summary>
            Get/Set the polar track lock property .If true constrains cursor movement only to the <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.PolarTrackAngle"/> direction.
            </summary>
            <remarks>
            Default value false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.PolarTrackInfinityLineDraw">
            <summary>
            Get/Set the draw of the infinity line. If true the infinity line will be rendered.
            </summary>
            <remarks>
            Default value true.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.PolarTrack">
            <summary>
            Get/Set a boolean value that enables/disables the <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.PolarTrackAngle"/> functionality.
            </summary>
            <remarks>
            Default value false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.PolarTrackActionFlag">
            <summary>
            Get/Set additional flags that controls the PolarTrack with user actions.
            </summary>
            <remarks>
            Default value is <see cref="F:VectorDraw.Professional.Actions.PolarTrackActionFlags.None"/>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.PolarTrackAngle">
            <summary>
            Get/Set the polar track angle in radians.
            </summary>
            <remarks>
            Default value Globals.HALF_PI / 2.0d which is 90 degrees.
            If PolarTrack is true then as you move your cursor to specify points, and a user action is open waiting a reference point, a dotted polar tracking line appears at the tracking angles you specified with PolarTrackAngle property. Also A text tool tip display the polar coordinates. 
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.GridSpaceX">
            <summary>
            Get/Set the space between the grid dots in the x direction.
            </summary>
            <remarks>
            Default value is 1.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.GridSpaceY">
            <summary>
            Get/Set the space between the grid dots in the y direction.
            </summary>
            <remarks>
            Default value is 1.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.GridMode">
            <summary>
            Get/Set a boolean value representing the display of the grid dots.
            </summary>
            <remarks>
            Default value is false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.SnapMode">
            <summary>
            Get/Set a boolean value that enables/disables the mouse movement snaping.
            </summary>
            <remarks>
            Default value is false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.SnapSpaceX">
            <summary>
            Get/Set the distance that the mouse snaps in x direction.
            </summary>
            <remarks>
            Default value is 1.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.SnapSpaceY">
            <summary>
            Get/Set the distance that the mouse snaps in y direction.
            </summary>
            <remarks>
            Default value is 1.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.SnapBase">
            <summary>
            Get/Set the snap base point.
            </summary>
            <remarks>
            Default value is 0.0,0.0,0.0 .
            This property defines a point (origin) that the Snap and Grid will pass from it.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.Printer">
            <summary>
            Get the vdPrinter object of the layout.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.ShowHidenEdges">
            <summary>
            Get/Set a boolean value representing if the edges of the 3dFace object will be shown.
            </summary>
            <remarks>
            If this value is true then all edges of the 3dFace object will be shown ( even if they are invisible).
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.EdgeColor">
            <summary>
            Get/Set the display color for edges of all faces when rendering in 3d.(when RenderMode is Wire3d ,Hide or ShadeOn)
            </summary>
            <remarks>
            Default value is Color.Empty and the edges keep their entity color.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.ViewportLTScale">
            <summary>
            Controls the scaling of linetypes drawn inside a viewport.
            </summary>
            <remarks>Default value is <see cref="F:VectorDraw.Render.vdRender.ViewportLTScaleFlag.ViewportBased"/></remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.Sections">
            <summary>
            Get the sections clipping collection of the layout.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.Deleted">
             <summary>
             Get/Set a property that marks the layout as Deleted or not.
             </summary>
            <exception cref="T:VectorDraw.Professional.Exceptions.CannotDeleteException">Thrown when an object cannot be deleted.</exception>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.VisibleOnForms">
            <summary>
            Get/Set a boolean value representing if the vdLayout will be viewed in Vectordraw forms. This takes place to the tab bar of the vdScrollable/vdFramedControl.
            </summary>
            <remarks>
            Default value is true.
            The ToString value of the vdLayouts also takes consideration this value and if it is false then the count returned does not contain these items.
            If this value is false then the layout tab will not show this layout.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.PrintScaleValue">
            <summary>
            Get the PrinterScale of the vdPrint object.Is defined as the ratio of the number of millimeters in the printer paper to the number of drawing units in printable drawing area.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.IsModelLayout">
            <summary>
            Returns true if this object is reference equal with Document.Model
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.IsViewPort">
            <summary>
            Returns false. This is the implementation of the IgrPrinterProperties Interface used mainly in vdRender object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.ContainsViewPorts">
            <summary>
            Get a boolean value that represents if the layout contains any non deleted viewport.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayout.DocProperties">
            <summary>
            This Interface is used to pass Document's properties to the Actions dll.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdLayout.ScrollPropereties">
            <summary>
            Contains information of a Scroll bar.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdLayout.ScrollPropereties.Minimum">
            <summary>
            Gets or sets the lower limit of values of the scrollable range
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdLayout.ScrollPropereties.Maximum">
            <summary>
            Gets or sets the upper limit of values of the scrollable range.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdLayout.ScrollPropereties.LargeChange">
            <summary>
             Gets or sets a value to be added to or subtracted from the System.Windows.Forms.ScrollBar.Value
                property when the scroll box is moved a large distance.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdLayout.ScrollPropereties.SmallChange">
            <summary>
             Gets or sets the value to be added to or subtracted from the System.Windows.Forms.ScrollBar.Value
                property when the scroll box is moved a small distance.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdLayout.ScrollPropereties.Value">
            <summary>
            Gets or sets a numeric value that represents the current position of the
                scroll box on the scroll bar control.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdLayoutSplit">
            <summary>
            This layout is designed to support multiview viewports.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.#ctor">
            <summary>
            Empty constructor of the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Create the vdLayoutSplit using the passed Document.
            </summary>
            <param name="doc">The Document to be used for SetUnRegisterDocument method.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.#ctor(VectorDraw.Professional.vdObjects.vdDocument,System.String)">
            <summary>
            Create the vdLayoutSplit using the passed parameters.
            </summary>
            <param name="doc">The Document to be used for SetUnRegisterDocument method.</param>
            <param name="name">The name of the LayoutSplit.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.#ctor(VectorDraw.Professional.vdObjects.vdDocument,System.String,VectorDraw.Professional.vdPrimaries.vdLayoutSplit.SplitStyleEnum)">
            <summary>
            Create the vdLayoutSplit using the passed parameters.
            </summary>
            <param name="doc">The Document to be used for SetUnRegisterDocument method.</param>
            <param name="name">The name of the LayoutSplit.</param>
            <param name="vportsStyle">The Style of the viewports to be used.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdViewport object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdViewport object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.ConvertToSingleLayout">
            <summary>
            replace this split layout with a simple layout in the Layouts Collection and returns the new simple layout having the viewports that the splitlayout has.
            </summary>
            <returns>A newly created layout that contains viewports.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Internally used to connect the vdLayout object with a control component.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.MouseDoubleClick(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Default doubleclick action.Doubleclick will maximize the current viewport and a second double click will return the layoutsplit to it's default view.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Default MouseDown action.Clicking on the split of the viewports will start the action where a resize of the viewports is possible.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.MouseEnter(System.Object,System.EventArgs)">
            <summary>
            Internally used to connect the vdLayout object with a control component.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.MouseLeave(System.Object,System.EventArgs)">
            <summary>
            Internally used to connect the vdLayout object with a control component.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Default MouseMove action. While pressing the split of the viewports resize of the viewports is possible.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            This layout is designed to support multiview viewports.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.NumViewPorts">
            <summary>
            Get the number of the viewports that the vdLayoutSplit is showing.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.ActiveViewPortId">
            <summary>
            The number of the activeviewport. You can use this id to get the actual viewport from the entities of the viewport.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.SplitStyle">
            <summary>
            Get/Set the standard viewport style of the layout..
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.SplitWindowSize">
            <summary>
            Get/Set the size of the basic viewport 'this(0)' relative to the screen size.
            valid range between 0-0.9.Default 0 and uses the half screen size.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.Item(System.Int32)">
            <summary>
            Get the viewport from the id.
            </summary>
            <param name="index">The index of the viewport.</param>
            <returns>The viewport entity.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.Entities">
            <summary>
            Get the entities of the viewport , always has 4 viewports visible or not.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.SpaceMode">
            <summary>
            In a vdLayoutSplit will return SPACEMOD_PAPER if is in action or SPACEMOD_MODEL in a non action view.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.ActiveViewPort">
            <summary>
            Returns the Active viewport of this layout.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.GridMode">
            <summary>
            Returns false for this layout since it is not supported.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.GridMeasure">
            <summary>
            It is not supported to this layout.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.SplitStyleEnum">
            <summary>
            The type of the LayoutSplit that determines the number and the position of the viewports.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.SplitStyleEnum.Single">
            <summary>
            One maximized viewport that covers all the LayoutSplit.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.SplitStyleEnum.Two_Vertical">
            <summary>
            Two vertical viewports.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.SplitStyleEnum.Two_Horizontal">
            <summary>
            Two horizontal viewports.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.SplitStyleEnum.Three_Right">
            <summary>
            One big viewport on the left and two viewports right.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.SplitStyleEnum.Three_Left">
            <summary>
            One big viewport on the right and two viewports left.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.SplitStyleEnum.Three_Above">
            <summary>
            One big viewport on the bottom and two viewports above.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.SplitStyleEnum.Three_Below">
            <summary>
            One big viewport above and two viewports below.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.SplitStyleEnum.Three_Vertical">
            <summary>
            Three vertical equal viewports.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.SplitStyleEnum.Three_Horizontal">
            <summary>
            Three horizontal equal viewports.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.SplitStyleEnum.Four_Equal">
            <summary>
            Four equal viewports.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.SplitStyleEnum.Four_Right">
            <summary>
            Four viewports , three on the right.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdPrimaries.vdLayoutSplit.SplitStyleEnum.Four_Left">
            <summary>
            Four viewports , three on the left.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument">
            <summary>
            The main object that stores the objects and entities that make up a drawing.
            It is created by the <see cref="T:VectorDraw.Professional.Components.vdDocumentComponent"/> Component
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.FILENOTFOUND">
            <summary>
            "File not found" string value. 
            </summary>
            <seealso cref="E:VectorDraw.Professional.vdObjects.vdDocument.GenericError"/>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.UNSUPPORTEDFORMAT">
            <summary>
            "FileUnsupported File Format" string value.
            </summary>
            <seealso cref="E:VectorDraw.Professional.vdObjects.vdDocument.GenericError"/>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.EMPTYFILENAME">
            <summary>
            "Empty FileName" string value.
            </summary>
            <seealso cref="E:VectorDraw.Professional.vdObjects.vdDocument.GenericError"/>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.UNSUPPORTEDVERSION">
            <summary>
            "Usupported file version" string value.
            </summary>
            <seealso cref="E:VectorDraw.Professional.vdObjects.vdDocument.GenericError"/>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.MISSINGLIBRARIES">
            <summary>
            "Missing Libraries" string value.
            </summary>
            <seealso cref="E:VectorDraw.Professional.vdObjects.vdDocument.GenericError"/>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.GENERICIOERROR">
            <summary>
            "Generic IO Error" string value. This error is used for errors occuring inside methods and is a general error message.
            </summary>
            <seealso cref="E:VectorDraw.Professional.vdObjects.vdDocument.GenericError"/>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.LOCKENTITYMODIFYERROR">
            <summary>
            "Cannot modify lock entities." string value.
            </summary>
            <seealso cref="E:VectorDraw.Professional.vdObjects.vdDocument.GenericError"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.RaiseLoadUnknownObjects(VectorDraw.Professional.vdObjects.LoadUnknownObjectsEventArgs)">
            <summary>
            Raise the LoadUnknownObjects event.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.RaiseGenericError(System.String,System.String)">
            <summary>
            Raise the GenericError event.
            </summary>
            <param name="membername">Name of the method where the error occured.</param>
            <param name="errormessage">Description the the error.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.RaiseGetPassWord(System.String,System.String@)">
            <summary>
            Opens a dialog to request a password for a password protected file.
            </summary>
            <param name="drawingname">The protected drawing</param>
            <param name="password">The password given by the user.</param>
            <returns>True if the password is correct.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ShowToolTip(System.Boolean)">
            <summary>
            Shows/Hide the the tooltip from the screen.
            </summary>
            <param name="bShow">True to show , False to hide.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.RaiseActionStart(System.String)">
            <summary>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> event with passed action command name
            </summary>
            <param name="actionName">The command name that is going to be started.</param>
            <returns>False if the cancel parameter of an ovveride of <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> event  was set to false.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.RaiseActionEnd(System.String)">
            <summary>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/> event with passed action command name
            </summary>
            <param name="actionName">The name of the command that was succesfully finished.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.RaiseActionError(System.String)">
            <summary>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> event with passed action command name
            </summary>
            <param name="actionName">The name of the command that was failed.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.RaiseOnAfterOpenDocument(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Raise the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterOpenDocument"/>
            </summary>
            <param name="document">The document object which is opening a drawing.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.RaiseOnAfterNewDocument(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Raise the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterNewDocument"/>
            </summary>
            <param name="document">The vdDocument object which calls the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.New"/> method.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.StartThread(System.String)">
            <summary>
            Mast be called at the start of a method that supports multi-thread
            </summary>
            <remarks>
            WARNING!!!! There is problem with multi-thread rendering of vfFigure.Draw and with fields (mDrawCount ,mListCount , mList inside PrepareBeforeDraw, AfterDraw, ListStart,ListEnd)</remarks>
            <remarks>        Except if we use lock{} in vdFigure.Draw</remarks>
            <remarks>        Generally vdFigures are calculate some properties inside Draw(like list - samplePoints penstyle etc, so they can not be called multi times and they must be inside lock.</remarks>
            <remarks>        Also the same problem is for vdFigure.BoundingBox get{} it must also be inside lock{}</remarks>
            <remarks>Create new object references for properties that shared.</remarks>
            <remarks>For multi-thread rendering the vdRender object must be new and not one of Layout default render properties.</remarks>
            <remarks>Must be careful with reference values that used duting multi-thread call so not to be share.If we can not create new reference for these values we must use them inside the lock{}
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.EndThread">
            <summary>
            Mast be called at the end of a method that previous call a <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.StartThread(System.String)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.PushMatchXproperties(VectorDraw.Professional.vdObjects.vdDocument.MatchXpropertiesFlag)">
            <summary>
            Select a different <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.MatchXproperties"/> logic as active.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.PopMatchXproperties">
            <summary>
            Restore previous <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.PushMatchXproperties(VectorDraw.Professional.vdObjects.vdDocument.MatchXpropertiesFlag)"/> change.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.Prompt(System.String)">
            <summary>
            Adds a new string to the prompt stack.
            </summary>
            <param name="str">If this value is null then pop the previous prompt message.</param>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnPrompt"/> event.
            <para>Every Prompt with a no null string must be followed with a Prompt with null string.</para>
            <para>If the vdCommandLine control is visible then it displays the string in the command edit box.</para>
            <para>When the passed string is null then the command box is cleared and the previous prompt string is moved to the vdCommandLine History box.</para>
            <para>All passed strings are translated before they displayed throw <see cref="F:VectorDraw.Serialize.GlobalizedDictionary.Dictionary"/></para>
            </remarks>
            <example>
            The following example prompt the user to pick a point on VectorDraw graphics area.
            <code>
            vdDocument doc = vdFramedControl.BaseControl.ActiveDocument;
            doc.Prompt("Pick a point");//Display a string on the command line box of vdCommandLine control.
            gPoint p1 = doc.ActionUtility.getUserPoint() as gPoint;
            doc.Prompt(null);
            </code>
            A string can be also displayed on the vdCommandLine History box without waiting a user action as the following example.
            In that case the string must begin with '\r\n'
            <code>
            vdDocument doc = vdFramedControl.BaseControl.ActiveDocument;
            doc.Prompt("\r\nNumber of Entities in Active Model = " + doc.ActiveLayOut.Entities.Count.ToString());
            //Display a string on the command line box of vdCommandLine control.
            doc.Prompt(null);
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.Finalize">
            <summary>
            object de-constructor
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.Dispose">
            <summary>
            Performs tasks associated with freeing, releasing, or resetting the necessary memory objects.
            After calling this method the vdDocument object is not available.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.RaiseProgressEx(System.Int32,System.String)">
            <summary>
            Internally used only.Raise the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnProgress"/>
            </summary>
            <param name="percent">The current percent.</param>
            <param name="jobDescription">A string representing the job taken.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.RaiseProgress(System.Int64,System.String)">
            <summary>
            Raise the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnProgress"/>
            </summary>
            <param name="percent">The current percent.</param>
            <param name="jobDescription">A string representing the job taken.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.SetActiveLayer(VectorDraw.Professional.vdPrimaries.vdLayer)">
            <summary>
            Set the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayer"/> property with a new value and returns the old one.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.SetActiveLineType(VectorDraw.Professional.vdPrimaries.vdLineType)">
            <summary>
            Set the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLineType"/> property with a new value and returns the old one.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.SetActiveTextStyle(VectorDraw.Professional.vdPrimaries.vdTextstyle)">
            <summary>
            Set the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveTextStyle"/> property with a new value and returns the old one.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.SetActiveLineWeight(VectorDraw.Professional.Constants.VdConstLineWeight)">
            <summary>
            Set the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLineWeight"/> property with a new value and returns the old one.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.SetActivePenWidth(System.Double)">
            <summary>
            Set the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActivePenWidth"/> property with a new value and returns the old one.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.SetActivePenColor(VectorDraw.Professional.vdObjects.vdColor)">
            <summary>
            Set the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActivePenColor"/> property with a new value and returns the old one.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.SetActiveHatchProperties(VectorDraw.Professional.vdObjects.vdHatchProperties)">
            <summary>
            Set the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveHatchProperties"/> property with a new value and returns the old one.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetExternalReferences">
            <summary>
            Gets the external references of the document.
            </summary>
            <returns>Returns an array of vdDocument objects of all external references of this document.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ActionOsnapMode(System.Object)">
            <summary>
            Internally used. Returns the osnap mode used by the passed BaseAction object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.SelectActivelayout(VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Select the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/> for the Document object.
            </summary>
            <param name="layout">A <see cref="T:VectorDraw.Professional.vdPrimaries.vdLayout"/> object from the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.LayOuts"/> collection or the default <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.Model"/> layout.</param>
            <remarks>
            Cancel all the actions of de-activated layout and raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionLayoutActivated"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.PostCommandActionString(System.Windows.Forms.Control,System.String)">
            <summary>
            Posts a string which will be translated by the given Control and will be parsed by the active Action.
            </summary>
            <param name="control">The Control where the string will be translated.</param>
            <param name="String">The string to be translated.</param>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionParse"/> event when the message is translated.
            </remarks>
            <example>
            <code>
            vdFramedControl.BaseControl.ActiveDocument.PostCommandActionString(vdFramedControl.BaseControl, "");
            vdFramedControl.BaseControl.ActiveDocument.PostCommandActionString(vdFramedControl.BaseControl, "10.0,10.0,0.0");
            vdFramedControl.BaseControl.ActiveDocument.PostCommandActionString(vdFramedControl.BaseControl, "0,0,0");
            vdFramedControl.CommandLine.ExecuteCommand("Line");
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.SendCommandActionString(System.String)">
            <summary>
            The <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.ActiveAction"/> of the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/> parses the given string immediately.
            </summary>
            <param name="String">The string to be parsed.</param>
            <returns>True if the string was succesfully parsed.</returns>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionParse"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.WndProc(VectorDraw.WinMessages.MessageManager.MSG)">
            <summary>
            This is used internally for translating windows messages.
            </summary>
            <param name="m">The windows message to be translated.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.Invalidate">
            <summary>
            Post a refresh in the bounding area of the control.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.Invalidate(System.Drawing.Rectangle)">
            <summary>
            Post a refresh in a given rectangle of the control.
            </summary>
            <param name="rc">The given rectangle to be refreshed.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.Invalidate(VectorDraw.Geometry.Box,System.Double)">
            <summary>
            Post a refresh in the bounding area of the specified box.
            </summary>
            <param name="box">A box in World Coordinate System(WCS).</param>
            <param name="additionalWidth">Additional width is added to the box and is in View Coordinate System(VCS)</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.Invalidate(VectorDraw.Geometry.Box)">
            <summary>
            Post a refresh in the bounding area of the specified box.
            </summary>
            <param name="box">A box in World Coordinate System(WCS).</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ActionAdd(VectorDraw.Actions.BaseAction)">
            <summary>
            Adds the specified <see cref="T:VectorDraw.Actions.BaseAction"/> to the /<see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/> (model or layout).
            </summary>
            <param name="action">A base action to be added to the action list of the active layout.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ActionRemoveAll(System.Boolean)">
            <summary>
            Remove all actions from the model,all layouts and all viewports.
            </summary>
            <param name="KeepBaseAction">
            If this value is true the base action is not removed from the model,layouts and viewports.Base action controls tooltips, cursor and other vital actions for the control. If is removed the cursor will not appear and the control will not take user actions.
            </param>
            <remarks>
            Internally called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.New"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Open(System.String)"/> , <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.Cancel"/> methods
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ActionRemoveAll(System.Boolean,System.Boolean)">
            <summary>
            Remove all actions from the model,all layouts and all viewports.
            </summary>
            <param name="KeepBaseAction">
            If this value is true the base action is not removed from the model,layouts and viewports.Base action controls tooltips, cursor and other vital actions for the control. If is removed the cursor will not appear and the control will not take user actions.
            </param>
            <param name="ClearGrips">If this value is true  the slected grip of entities are also cleared.</param>
            <remarks>
            Internally called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.New"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Open(System.String)"/> , <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.Cancel"/> methods
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ActionRemoveLast(System.Boolean)">
            <summary>
            Removes the last action submitted to the <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.ActiveViewPort"/>(if exist) or the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/>(model or any layout).
            </summary>
            <param name="removeOnlyUserWaiting">Set it to true in order to remove only the <see cref="T:VectorDraw.Actions.BaseAction"/> that <see cref="P:VectorDraw.Actions.BaseAction.UserWaiting"/> property is true. </param>
            <remarks>Internally called by <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.Cancel1"/> method</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.InitBaseAction(System.Object,VectorDraw.Actions.BaseAction@)">
            <summary>
            Fires the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnInitBaseAction"/> event.
            </summary>
            <param name="sender">A vdLayout object where the action is added.</param>
            <param name="action">The BaseAction reference object that will be added.</param>
            <remarks>
            By default this method is internally called by VectorDraw passing a reference of a <see cref="T:VectorDraw.Professional.Actions.ActionManager"/> object which is the default Action implementation  for all Layouts and viewport objects.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.CreateFromSelection(VectorDraw.Professional.vdCollections.vdSelection)">
            <summary>
            Creates and returns a new <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> contaning all vdFigure objects from a vdSelection object.
            </summary>
            <param name="set">The vdSelection collection from which the vdFigure objects will be taken from.</param>
            <returns>A new created vdDocument containing at it's model all the vdFigure objects of the passed vdSelection object.</returns>
            <remarks>
            All table dependecies such as <see cref="T:VectorDraw.Professional.vdPrimaries.vdTextstyle"/> , <see cref="T:VectorDraw.Professional.vdPrimaries.vdBlock"/>, <see cref="T:VectorDraw.Professional.vdPrimaries.vdLayer"/>, <see cref="T:VectorDraw.Professional.vdPrimaries.vdLineType"/>, <see cref="T:VectorDraw.Professional.vdPrimaries.vdImageDef"/>, <see cref="T:VectorDraw.Professional.vdPrimaries.vdDimstyle"/> objects that reference figures in the selection are also added in the document object.
            </remarks>
            <seealso cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeSelection(VectorDraw.Professional.vdCollections.vdSelection)"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.MergeSelection(VectorDraw.Professional.vdCollections.vdSelection)">
            <summary>
            Add a copy of the entities and all table dependecies of the selection in ActiveLayout
            </summary>
            <param name="set">A selection set of entities belong in an other Document</param>
            <returns>True if the operation was succesfull.</returns>
            <remarks>
            <para>Group tables are not matched.</para>
            <para>All table dependecies such as <see cref="T:VectorDraw.Professional.vdPrimaries.vdTextstyle"/> , <see cref="T:VectorDraw.Professional.vdPrimaries.vdBlock"/>, <see cref="T:VectorDraw.Professional.vdPrimaries.vdLayer"/>, <see cref="T:VectorDraw.Professional.vdPrimaries.vdLineType"/>, <see cref="T:VectorDraw.Professional.vdPrimaries.vdImageDef"/>, <see cref="T:VectorDraw.Professional.vdPrimaries.vdDimstyle"/> objects that reference figures in the selection are also merged in the document object.</para>
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)">
            <summary>
            Merges all tables (table objects like layers, blocks, textstyles etc.) from another document to this document.
            </summary>
            <param name="document">The document from where the tables will be copied.</param>
            <param name="mergeLayouts">If this value is true then Model and all Layouts of document will be copied.</param>
            <param name="replaceExist">If this value is true then for example if a layer has the same name with one to this document then this layer will be replaced from the parameter's layer.</param>
            <returns>True if the operation was succesfull.</returns>
            <remarks> Group tables are not matched.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetUsedMultiLineStyles">
            <summary>
            Get all <see cref="T:VectorDraw.Professional.vdPrimaries.vdMultilineStyle"/> objects that are used in the document.
            </summary>
            <returns>A collection of vdMultilineStyle objects that are used in the document.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetUsedLayers">
            <summary>
            Get all <see cref="T:VectorDraw.Professional.vdPrimaries.vdLayer"/> objects that are used in the document.
            </summary>
            <returns>A collection of vdLayer objects that are used in the document.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetUsedBlocks">
            <summary>
            Get all <see cref="T:VectorDraw.Professional.vdPrimaries.vdBlock"/> objects that are used in the document.
            </summary>
            <returns>A collection of vdBlock objects that are used in the document.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetUsedDimStyles">
            <summary>
            Get all <see cref="T:VectorDraw.Professional.vdPrimaries.vdDimstyle"/> objects that are used in the document.
            </summary>
            <returns>A collection of vdDimstyle objects that are used in the document.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetUsedLineTypes">
            <summary>
            Get all <see cref="T:VectorDraw.Professional.vdPrimaries.vdLineType"/> objects that are used in the document.
            </summary>
            <returns>A collection of vdLineType objects that are used in the document.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetUsedTextStyles">
            <summary>
            Get all <see cref="T:VectorDraw.Professional.vdPrimaries.vdTextstyle"/> objects that are used in the document.
            </summary>
            <returns>A collection of vdTextStyle objects that are used in the document.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetUsedImages">
            <summary>
            Get all <see cref="T:VectorDraw.Professional.vdPrimaries.vdImageDef"/> objects that are used in the document.
            </summary>
            <returns>A collection of vdImageDef objects that are used in the document.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetUsedPatterns">
            <summary>
            Get all <see cref="T:VectorDraw.Professional.vdPrimaries.vdHatchPattern"/> objects that are used in the document.
            </summary>
            <returns>A collection of vdHatchPattern objects that are used in the document.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.IsObjectDependOn(VectorDraw.Professional.vdObjects.vdBaseObject,VectorDraw.Professional.vdObjects.vdPrimary)">
            <summary>
            Checks if a <see cref="T:VectorDraw.Professional.vdObjects.vdPrimary"/> object is used-depended in a vdBaseObject.
            </summary>
            <param name="outer">A <see cref="T:VectorDraw.Professional.vdObjects.vdBaseObject"/> for example a vdDocument object.</param>
            <param name="obj">A <see cref="T:VectorDraw.Professional.vdObjects.vdPrimary"/> object for example a vdLayer object.</param>
            <returns>Returns true if the vdPrimary object is depended-used to the vdBaseObject.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)">
            <summary>
            Checks if a <see cref="T:VectorDraw.Professional.vdObjects.vdPrimary"/> is depended-used in the document.
            </summary>
            <param name="obj">A <see cref="T:VectorDraw.Professional.vdObjects.vdPrimary"/> object.</param>
            <returns>True if the object is depended-used in the document.</returns>
            <seealso cref="P:VectorDraw.Professional.vdObjects.vdDocument.ExtendedDeletedCheck"/> 
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.Purge">
            <summary>
            Deletes all unused table objects such as <see cref="T:VectorDraw.Professional.vdPrimaries.vdLayer"/>, <see cref="T:VectorDraw.Professional.vdPrimaries.vdBlock"/>, <see cref="T:VectorDraw.Professional.vdPrimaries.vdDimstyle"/>, <see cref="T:VectorDraw.Professional.vdPrimaries.vdLineType"/>, <see cref="T:VectorDraw.Professional.vdPrimaries.vdTextstyle"/>, <see cref="T:VectorDraw.Professional.vdPrimaries.vdImageDef"/> and <see cref="T:VectorDraw.Professional.vdPrimaries.vdHatchPattern"/> objects from the document.
            </summary>
            <returns>The count of unused objects that where deleted.</returns>
            <remarks>
            <para>Used in order to make the drawing size smaller.</para>
            <para>Searches the following tables:layers,blocks,dimstyles,linetypes,textstyles,Imagedefs,hatch patterns.</para>
            <para>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnEraseObject"/> event for each deleted item.</para>
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.DeleteUnusedTables(VectorDraw.Professional.vdCollections.vdLayers,VectorDraw.Professional.vdCollections.vdBlocks,VectorDraw.Professional.vdCollections.vdDimstyles,VectorDraw.Professional.vdCollections.vdLineTypes,VectorDraw.Professional.vdCollections.vdTextstyles,VectorDraw.Professional.vdCollections.vdImages,VectorDraw.Professional.vdCollections.vdHatchPatterns)">
            <summary>
            This method should be used in order to delete multiple primaries objects. It is much faster than setting Deleted = true to the primary directly.
            </summary>
            <param name="layers">A <see cref="T:VectorDraw.Professional.vdCollections.vdLayers"/> collection that contains the layers to be deleted or null if layers are not needed to be checked.</param>
            <param name="blocks">A <see cref="T:VectorDraw.Professional.vdCollections.vdBlocks"/> collection that contains the blocks to be deleted or null if blocks are not needed to be checked.</param>
            <param name="dimstyles">A <see cref="T:VectorDraw.Professional.vdCollections.vdDimstyles"/> collection that contains the dimstyles to be deleted or null if dimstyles are not needed to be checked.</param>
            <param name="linetypes">A <see cref="T:VectorDraw.Professional.vdCollections.vdLineTypes"/> collection that contains the linetypes to be deleted or null if linetypes are not needed to be checked.</param>
            <param name="textstyles">A <see cref="T:VectorDraw.Professional.vdCollections.vdTextstyles"/> collection that contains the textstyles to be deleted or null if textstyles are not needed to be checked.</param>
            <param name="images">A <see cref="T:VectorDraw.Professional.vdCollections.vdImages"/> collection that contains the images to be deleted or null if Image definitions are not needed to be checked.</param>
            <param name="hatchpatterns">A <see cref="T:VectorDraw.Professional.vdCollections.vdHatchPatterns"/> collection that contains the hatchpatterns to be deleted or null if hatch patterns are not needed to be checked.</param>
            <example>
            Delete all layers with their entities that start with name VULCAN 
            <code>
                        vdDocument doc = vdFramedControl.BaseControl.ActiveDocument;
                        doc.UndoHistory.StoreUndoGroup(true);
                        vdLayers layers = new vdLayers();
                        foreach (vdLayer layer in doc.Layers)
                        {
                            if (!layer.Name.StartsWith("VULCAN")) continue;
                            foreach (vdFigure fig in layer.GetReferenceObjects()) fig.Deleted = true;
                            layers.AddItem(layer);
                        }
                        doc.DeleteUnusedTables(layers, null, null, null, null, null, null);
                        doc.UndoHistory.StoreUndoGroup(false);
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetUnUsedTables(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) that have no references. 
            </summary>
            <param name="tableArgs">A <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> that contains all table type collections.</param>
            <example>
            Get all the table object that have no references and can be deleted.
            <code>
                        vdDocument doc = vdFramedControl.BaseControl.ActiveDocument;
                        vdTableDependeciesArgs args = new vdTableDependeciesArgs(null, vdTableDependeciesArgs.TableTypes.All);
                        GetUnUsedTables(args);
                       //args.Layers , args.Blocks ,args.DimStyles ,args.LineTypes ,args.TextStyles ,args.ImageDefs ,args.HatchPatterns collections contains all table objects that have references and can be deleted.
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetUnUsedTables(VectorDraw.Professional.vdCollections.vdLayers,VectorDraw.Professional.vdCollections.vdBlocks,VectorDraw.Professional.vdCollections.vdDimstyles,VectorDraw.Professional.vdCollections.vdLineTypes,VectorDraw.Professional.vdCollections.vdTextstyles,VectorDraw.Professional.vdCollections.vdImages,VectorDraw.Professional.vdCollections.vdHatchPatterns)">
            <summary>
            Fills the passed parameters collections with the unused items of the document of each type.
            </summary>
            <param name="layers">A <see cref="T:VectorDraw.Professional.vdCollections.vdLayers"/> collection to be filled or null if layers are not needed to be checked.</param>
            <param name="blocks">A <see cref="T:VectorDraw.Professional.vdCollections.vdBlocks"/> collection to be filled or null if blocks are not needed to be checked.</param>
            <param name="dimstyles">A <see cref="T:VectorDraw.Professional.vdCollections.vdDimstyles"/> collection to be filled or null if dimstyles are not needed to be checked.</param>
            <param name="linetypes">A <see cref="T:VectorDraw.Professional.vdCollections.vdLineTypes"/> collection to be filled or null if linetypes are not needed to be checked.</param>
            <param name="textstyles">A <see cref="T:VectorDraw.Professional.vdCollections.vdTextstyles"/> collection to be filled or null if textstyles are not needed to be checked.</param>
            <param name="images">A <see cref="T:VectorDraw.Professional.vdCollections.vdImages"/> collection to be filled or null if Image definitions are not needed to be checked.</param>
            <param name="hatchpatterns">A <see cref="T:VectorDraw.Professional.vdCollections.vdHatchPatterns"/> collection to be filled or null if hatch patterns are not needed to be checked.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetUsedTables(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) that have references at least to one object . 
            </summary>
            <param name="args">A <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> that contains all table type collections.</param>
            <remarks>
            The default table object are also included in the args parameter 
            vdLayers.<see cref="M:VectorDraw.Professional.vdCollections.vdLayers.IsDefault(VectorDraw.Professional.vdObjects.vdPrimary)"/> ,
            vdBlocks.<see cref="M:VectorDraw.Professional.vdCollections.vdBlocks.IsDefault(VectorDraw.Professional.vdObjects.vdPrimary)"/> ,
            vdDimstyles.<see cref="M:VectorDraw.Professional.vdCollections.vdDimstyles.IsDefault(VectorDraw.Professional.vdObjects.vdPrimary)"/> ,
            vdLineTypes.<see cref="M:VectorDraw.Professional.vdCollections.vdLineTypes.IsDefault(VectorDraw.Professional.vdObjects.vdPrimary)"/> ,
            vdMultilineStyles.<see cref="M:VectorDraw.Professional.vdCollections.vdMultilineStyles.IsDefault(VectorDraw.Professional.vdObjects.vdPrimary)"/> ,
            vdTextstyles.<see cref="M:VectorDraw.Professional.vdCollections.vdTextstyles.IsDefault(VectorDraw.Professional.vdObjects.vdPrimary)"/> ,
            vdHatchPatterns.<see cref="M:VectorDraw.Professional.vdCollections.vdHatchPatterns.IsDefault(VectorDraw.Professional.vdObjects.vdPrimary)"/> 
            </remarks>
            <example>
            Get all the table object that have references and can not be deleted.
            <code>
                        vdDocument doc = vdFramedControl.BaseControl.ActiveDocument;
                        vdTableDependeciesArgs args = new vdTableDependeciesArgs(null, vdTableDependeciesArgs.TableTypes.All);
                        GetUsedTables(args);
                       //args.Layers , args.Blocks ,args.DimStyles ,args.LineTypes ,args.TextStyles ,args.ImageDefs ,args.HatchPatterns collections contains all table objects that have references and can not be deleted.
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetUsedTables(VectorDraw.Professional.vdCollections.vdLayers,VectorDraw.Professional.vdCollections.vdBlocks,VectorDraw.Professional.vdCollections.vdDimstyles,VectorDraw.Professional.vdCollections.vdLineTypes,VectorDraw.Professional.vdCollections.vdTextstyles,VectorDraw.Professional.vdCollections.vdImages,VectorDraw.Professional.vdCollections.vdHatchPatterns)">
            <summary>
            Fills the passed parameters collections with the used items of the document of each type.
            </summary>
            <param name="layers">A <see cref="T:VectorDraw.Professional.vdCollections.vdLayers"/> collection to be filled or null if layers are not needed to be checked.</param>
            <param name="blocks">A <see cref="T:VectorDraw.Professional.vdCollections.vdBlocks"/> collection to be filled or null if blocks are not needed to be checked.</param>
            <param name="dimstyles">A <see cref="T:VectorDraw.Professional.vdCollections.vdDimstyles"/> collection to be filled or null if dimstyles are not needed to be checked.</param>
            <param name="linetypes">A <see cref="T:VectorDraw.Professional.vdCollections.vdLineTypes"/> collection to be filled or null if linetypes are not needed to be checked.</param>
            <param name="textstyles">A <see cref="T:VectorDraw.Professional.vdCollections.vdTextstyles"/> collection to be filled or null if textstyles are not needed to be checked.</param>
            <param name="images">A <see cref="T:VectorDraw.Professional.vdCollections.vdImages"/> collection to be filled or null if Image definitions are not needed to be checked.</param>
            <param name="hatchpatterns">A <see cref="T:VectorDraw.Professional.vdCollections.vdHatchPatterns"/> collection to be filled or null if hatch patterns are not needed to be checked.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) that have references at least to one object . 
            </summary>
            <param name="args">A <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> that contains all table type collections.</param>
            <remarks>
            Called by <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.GetUsedTables(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)"/> and <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.Select3d(System.Drawing.Point,System.Int32)">
            <summary>
            Selects entities at a given point and a given box size.Returning items are sorted depend of their depth form current eye view from nearest to farest.
            </summary>
            <param name="pt">A point in Pixels.</param>
            <param name="picksize">In drawing units the size of a square where the entities inside will be returned.</param>
            <returns>A collection of entities located at the specified point.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.Select3d(System.Drawing.Point,System.Int32,System.Boolean)">
            <summary>
            Selects entities at a given point and a given box size.Returning items are sorted depend of their depth form current eye view from nearest to farest.
            </summary>
            <param name="pt">A point in Pixels.</param>
            <param name="picksize">In drawing units the size of a square where the entities inside will be returned.</param>
            <param name="BreakOnMessage">If this is true then and a windows message exists in the windows que then the searching will stop.</param>
            <returns>A collection of entities located at the specified point.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetGripFromPoint(VectorDraw.Geometry.gPoint,System.Int32@)">
            <summary>
            Gets the grip point from an entity at a specified location.
            </summary>
            <param name="ptViewCS">A point in View Coordinate System(VCS).</param>
            <param name="index">A reference integer where it is returned the index of the grip point if found.</param>
            <returns>A vdFigure object that has a grip point located at the passed point.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetModel2dProjection(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector,System.Double)">
            <summary>
            returns a collection of line segments that represents the 2d projection of the clipping for all objects in the Model Layout.
            </summary>
            <param name="ViewOrigin">Origin point in World Coordinate System(WCS) of clip view plane.</param>
            <param name="VisibleDirection">Visible view direction of clip view plane in World Coordinate System(WCS).</param>
            <param name="twistAngle">An angle in radians that represent the rotation of the scene around the direction in clockwise direction.</param>
            <returns>A collection of line segments that represents the 2d projection of the clipping for all objects in the Model Layout.</returns>
            <remarks>Use the <see cref="P:VectorDraw.Render.vdRenderGlobalProperties.Model2dProjectionSize"/> property of <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.GlobalRenderProperties"/> in order to control the export quality.</remarks>
            <example>
            prompts the user for a new section clip
            generates a 2d projection line segments and add them into a new layout
            <code>
                        doc.Prompt("section origin");
                        gPoint origin = doc.ActionUtility.getUserPoint() as gPoint;
                        doc.Prompt(null);
                        if(origin == null) return;
                        doc.Prompt("section view direction");
                        gPoint dir = doc.ActionUtility.getUserRefPoint(origin) as gPoint;
                        doc.Prompt(null);
                        doc.GlobalRenderProperties.Model2dProjectionSize = 4096;
                        linesegments segs = doc.GetModel2dProjection(origin,new Vector(origin, dir),0.0);
                        vdLayout layout = doc.LayOuts.Add("section_2d_projection");
                        layout.Entities.RemoveAll();
                        foreach (linesegment line in segs)
                        {
                             layout.Entities.AddItem(new vdLine(doc, line.StartPoint, line.EndPoint));
                        }
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetVisibleAreas(VectorDraw.Professional.vdCollections.vdEntities,VectorDraw.Professional.vdCollections.vdSelection,System.Double,System.Int32)">
            <summary>
            Create a <see cref="T:VectorDraw.Render.PrimitivesExport.VisibleAreas"/> object that is used to get the visible areas of passed entities at any view direction
            </summary>
            <param name="entities">A collection of objects that make up the entire drawing.</param>
            <param name="subentities">A collection of vdFigures for which the visible area will be calculated in connection with the entire drawing.If it is null the visible area of passed entities will be calculated. </param>
            <param name="SquareRectSize">Defines the size of small square in Drawing units that each surface is divided. Smaller values gets more time to calculate.</param>
            <param name="RenderingSize">The size of the temporary rendering context used to calculate the visible areas.Higher values require more time and offer better precision.Valid values between 640 , 2048.</param>
            <returns>An array of <see cref="T:VectorDraw.Render.PrimitivesExport.RenderProperties.EntityViewAreas"/> object type that contains information about the area of each passed vdFigure object in each view.</returns>
            <example>
            Get the projection areas of the given views collection of all grip selected entities in Model Layout.
            If there are no grip selected entities the visible area of all entities in model layout is calculated.
            Note: set the SquareRectSize to 0.01 that is 1 square centimeter in case we assume that 1 DrawingUnit represents 1 meter.
                  The return area values will be in square Drawing Units (square meters in this case)
            <code>
                     vdSelection set = doc.GetGripSelection();
                     if (set != null  &amp;&amp; set.Count == 0) set = null;
                     VectorDraw.Render.PrimitivesExport.VisibleAreas va = doc.GetVisibleAreas(doc.Model.Entities, set, 0.01, 1024);
                     for (int i = 0; i &lt; 360; i += 36)
                     {
                          double x = Math.Cos(Globals.DegreesToRadians(i));
                          double y = Math.Sin(Globals.DegreesToRadians(i));
                          Vector v = new Vector(x, y, 1);
            
                          VectorDraw.Render.PrimitivesExport.RenderProperties.EntityViewAreas viewarea = va.GetEntitiesArea(v);
                          double surfacesVisibleArea = viewarea.Area(false); //get the visible area of all entities surfaces in specific view.
                          double ProjectionToViewArea = viewarea.Area(true); //get the area that projected on the specific view.
                      }
                      va.Dispose(); //Always dispose immediately after you have finished with visible area jobs
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetVisibleAreas(VectorDraw.Professional.vdCollections.vdEntities,VectorDraw.Professional.vdCollections.vdSelection,System.Double)">
            <summary>
            Create a <see cref="T:VectorDraw.Render.PrimitivesExport.VisibleAreas"/> object that is used to get the visible areas of passed entities at any view direction
            </summary>
            <param name="entities">A collection of objects that make up the entire drawing.</param>
            <param name="subentities">A collection of vdFigures for which the visible area will be calculated in connection with the entire drawing.If it is null the visible area of passed entities will be calculated. </param>
            <param name="SquareRectSize">Defines the size of small square in Drawing units that each surface is divided. Smaller values gets more time to calculate.</param>
            <returns>An array of <see cref="T:VectorDraw.Render.PrimitivesExport.RenderProperties.EntityViewAreas"/> object type that contains information about the area of each passed vdFigure object in each view.</returns>
            <seealso cref="M:VectorDraw.Professional.vdObjects.vdDocument.GetVisibleAreas(VectorDraw.Professional.vdCollections.vdEntities,VectorDraw.Professional.vdCollections.vdSelection,System.Double,System.Int32)"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetVisibleArea(VectorDraw.Professional.vdCollections.vdEntities,VectorDraw.Professional.vdCollections.vdSelection,VectorDraw.Geometry.Vector,System.Double)">
            <summary>
            Get the visible area of passed entities at the specified view direction
            </summary>
            <param name="entities">A collection of objects that make up the entire drawing.</param>
            <param name="subentities">A collection of vdFigures for which the visible area will be calculated in connection with the entire drawing.If it is null the visible area of passed entities will be calculated. </param>
            <param name="VisibleDirection">Visible view direction of clip view plane in World Coordinate System(WCS).Defines the Vector from target to camera point.</param>
            <param name="SquareRectSize">Defines the size of small square in Drawing units that each surface is divided. Smaller values gets more time to calculate.</param>
            <returns>A collection of <see cref="T:VectorDraw.Render.PrimitivesExport.RenderProperties.EntityViewArea"/> object type that contains information about the area of each passed vdFigure object.</returns>
            <example>
            Get the projection area in active View of all grip selected entities in Model Layout.
            If there are no grip selected entities the visible area of all entities in model layout is calculated.
            Note: set the SquareRectSize to 0.01 that is 1 square centimeter in case we assume that 1 DrawingUnit represents 1 meter.The return area value will be in square Drawing Units (square meters in this case)
            <code>
                        vdSelection set = doc.GetGripSelection();
                        if (set != null &amp;&amp; set.Count == 0) set = null;
                        VectorDraw.Render.PrimitivesExport.RenderProperties.EntityViewAreas ret =document.GetVisibleArea(document.Model.Entities, set, doc.Model.Render.ViewDir, 0.01);
                        double surfacesVisibleArea = ret.Area(false); //get the visible area of all entities surfaces.
                        double ProjectionToViewArea = ret.Area(true); //get the area that projected on the selected view.
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetVisibleArea(VectorDraw.Professional.vdCollections.vdEntities,VectorDraw.Geometry.Vector,System.Double)">
            <summary>
            Get the visible area of passed entities at the specified view direction
            </summary>
            <param name="entities">A collection of vdFigures for which the visible area will be calculated.</param>
            <param name="VisibleDirection">Visible view direction of clip view plane in World Coordinate System(WCS).Defines the Vector from target to camera point.</param>
            <param name="SquareRectSize">Defines the size of small square in Drawing units that each surface is divided. Smaller values gets more time to calculate.</param>
            <returns>A collection of <see cref="T:VectorDraw.Render.PrimitivesExport.RenderProperties.EntityViewArea"/> object type that contains information about the area of each passed vdFigure object.</returns>
            <example>
            Get the projection area in Front View of all entities in Model Layout
            Note: set the SquareRectSize to 0.01 that is 1 square centimeter in case we assume that 1 DrawingUnit represents 1 meter.The return area value will be in square Drawing Units (square meters in this case)
            <code>
                        VectorDraw.Render.PrimitivesExport.RenderProperties.EntityViewAreas ret =document.GetVisibleArea(document.Model.Entities, new Vector(0,-1,0), 0.01);
                        double surfacesVisibleArea = ret.Area(false); //get the visible area of all entities surfaces.
                        double ProjectionToViewArea = ret.Area(true); //get the area that projected on the selected view.
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetGripSelection">
            <summary>
            Returns a selection  with all visible entities that have <see cref="P:VectorDraw.Professional.vdPrimaries.vdFigure.ShowGrips"/> property true.
            </summary>
            <returns>A selection  with all visible entities that have <see cref="P:VectorDraw.Professional.vdPrimaries.vdFigure.ShowGrips"/> property true.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetEnvironmentVariable(System.String)">
            <summary>
            Retrieves the value of an environment variable from the current process.
            </summary>
            <param name="variable">
            The name of the environment variable.
             If variable = "LITECONVERTER" return value can be 0 the File Converter is not installed and 1 if it is installed.
            </param>
            <returns>The value of the environment variable specified by variable, or "" if the environment variable is not found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.DrawScreenTemporary(VectorDraw.Professional.vdCollections.vdSelection)">
            <summary>
            Temporary draw entities on the screen. It is not necessary to add to the document Layout Entities collection the vdFigures that are passed to this method.
            </summary>
            <param name="entities">A selection of vdFigure to be drawn.</param>
            <remarks>
            <para>If a redraw is called after calling this method, entities disapear from screen.</para>
            <para>It is useful when you want temporary draw entities inside a timer, in order to show their changed position or properties.</para>
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ActionDrawFigure(VectorDraw.Professional.vdPrimaries.vdFigure)">
            <summary>
            Draw a vdFigure object in ActiveRender and in ScreenRender
            </summary>
            <param name="fig"><see cref="T:VectorDraw.Professional.vdPrimaries.vdFigure"/> object to be drawn.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ActionDrawFigure(VectorDraw.Professional.vdPrimaries.vdFigure,System.Boolean)">
            <summary>
            Draw a vdFigure object in ActiveRender and in ScreenRender
            </summary>
            <param name="fig"><see cref="T:VectorDraw.Professional.vdPrimaries.vdFigure"/> object to be drawn.</param>
            <param name="useLists">A boolean value that represents if lists are being used.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetActiveSections">
            <summary>
            Get all active <see cref="T:VectorDraw.Professional.vdCollections.vdSectionClips"/> at the active viewport(if exist) or at the active layout(model or layout).
            </summary>
            <returns>Returns a collection of section clips that are active.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.UCS(System.String)">
            <summary>
            Sets the user coordinate system of the active layout.
            </summary>
            <param name="ucsType">A string representing the Coordinate System(valid values:"WORLD","VIEW","PREV")</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.UCS(VectorDraw.Geometry.Matrix)">
            <summary>
            Sets the user coordinate system of the active layout.
            </summary>
            <param name="mat">A <see cref="T:VectorDraw.Geometry.Matrix"/> used to set the coordinate system.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.UCS(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Sets the user coordinate system of the active layout.
            </summary>
            <param name="origin">An origin point given in World Coordinate system.</param>
            <param name="xdir">The x direction given in world coordinate system.</param>
            <param name="ydir">The y direction given in world coordinate system.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.UCSPrevious">
            <summary>
            Seta to the active layout the previous User Coordinate System(UCS).
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ZoomPrevious">
            <summary>
            Zooms the drawing area to the previous used zoom of the active layout.
            </summary>
            <returns>False if the zoom stack is empty -or- true otherwise.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ZoomWindow(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Zooms the drawing area to a specified window of the active layout.
            </summary>
            <param name="w1">A gPoint representing the first corner of the window in View coordinate system.</param>
            <param name="w2">A gPoint representing the opposite corner of the window in View coordinate system.</param>
            <remarks>
            If there is an active viewport then this action will take place to the viewport.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ZoomScale(System.Double)">
            <summary>
            Zooms the drawing area using a given scale factor of the active layout.
            </summary>
            <param name="scalefactor">A double value representing the scale factor.</param>
            <remarks>
            If there is an active viewport then this action will take place to the viewport.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ZoomAll">
            <summary>
            Zooms all drawing area including the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.Limits"/> of the active layout.
            </summary>
            <remarks>
            If there is an active viewport then this action will take place to the viewport.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ZoomExtents">
            <summary>
            Zooms the drawing area  of the active layout so all drawing extends are visible.
            </summary>
            <remarks>
            If there is an active viewport then this action will take place to the viewport.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.AddCurentZoomToHistory">
            <summary>
            Add the current zoom (ViewCenter , ViewSize and World2ViewMatrix) in object zoom history in order to reset it with <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.ZoomPrevious"/> method
            </summary>
            <remarks>By default user command actions: pan , scroll , dynamic 3d rotation  and vdCommandAction methods View3d, LookAt are added to zoom history.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.CCS_CursorPos">
            <summary>
            Get the cursor's porition in active User Coordinate System.
            </summary>
            <returns>A gpoint representing the cursor's position in active User Coordinate System.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.CursorPosCCS(System.Drawing.Point)">
            <summary>
            Get the cursor's position in active User Coordinate System.
            </summary>
            <param name="gdilocation">The cursor's position in pixels.</param>
            <returns>A gPoint representing the cursor's position in active User Coordinate System.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.CursorPos(System.Drawing.Point)">
            <summary>
            Get the cursor's position in World Coordinate System.
            </summary>
            <param name="gdilocation">The cursor's position in pixels.</param>
            <returns>A gPoint representing the cursor's position in Woordl Coordinate System.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetTTFFileNames">
            <summary>
            Returns a dictionary containing TrueType Font names and their .ttf fontfile
            </summary>
            <returns>Returns a dictionary containing TrueType Font names and their .ttf font files</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetTTFFileName(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Returns the font file for a specific TTF Font name.
            </summary>
            <param name="TTFFontName">A TrueType font face name as it used in TextStyles Fontfile property.</param>
            <param name="TTFdict">A dictionary previous calculated from <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.GetTTFFileNames"/> method.</param>
            <returns>Returns the font file for a specific TTF Font name.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetTTFFontName(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Returns the font name for a specific TTF Filename.
            </summary>
            <param name="TTFFileName">A TrueType font filename name as it used in TextStyles Fontfile property.</param>
            <param name="TTFdict">A dictionary previous calculated from <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.GetTTFFileNames"/> method.</param>
            <returns>Returns the font name for a specific TTF Font filename.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetTTFFonts">
            <summary>
            Gets all TTF fonts installed to the system in a <see cref="T:VectorDraw.Professional.vdCollections.StringArray"/> collection.
            </summary>
            <returns>A collection of all names of the TTF fonts.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetSHXFonts">
            <summary>
            Get all SHX fonts existing in the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.SupportPath"/> directory.
            </summary>
            <returns>A collection of all names of the SHX fonts existing to the system.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetBigSHXFonts">
            <summary>
            Get all big SHX fonts existing in the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.SupportPath"/> directory.
            </summary>
            <returns>A collection of all names of the big SHX fonts existing to the system.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.Redraw(System.Boolean)">
            <summary>
            Redraws the client area of the active control window.
            </summary>
            <param name="doitNow">If this value is false then the redraw will be posted to the windows message loop,else it will take place before the function returns.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ScrollActiveActionRenderView(System.Double,System.Double,System.Boolean)">
            <summary>
            Scrolls the view of the Active Action Render by cx and cy.
            </summary>
            <param name="cx">The x distance in drawing units.</param>
            <param name="cy">The y distance in drawing units.</param>
            <param name="scrollDC">If this value is true then the bitmap of the graphics device is scrolled and redraws only the remaining section.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ToString">
            <summary>
            Gets a System.String that represents the type name of this object and the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.FileName"/> property.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetAllXpropertiesNames">
            <summary>
            Searches all Xproperty names from all vdPrimary objects of the document.
            </summary>
            <returns>Returns <see cref="T:VectorDraw.Professional.vdCollections.StringArray"/> collection containing all XProperty names of all vdPrimary objects of the document.Duplicate names and Upper/Lower Case names are being added once(ignore duplicates).</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ClearAll">
            <summary>
            Clears everything (tables , active properties , entities collections etc...) from the document. 
            Call <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.EnsureDefaults"/> method to initialize the document again.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ClearAll(System.Boolean)">
            <summary>
            Clears everything (tables , active properties , entities collections etc...) from the document. 
            Call <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.EnsureDefaults"/> method to initialize the document again.
            </summary>
            <param name="initializeNew">If it is true the initialize default field variables else set them to null.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.EnsureDefaults">
            <summary>
            Ensures the existance of the necessary objects for the Document.
            </summary>
            <remarks>
            This method ensure that <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.LineTypes"/> , <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.HatchPatterns"/>, <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.Blocks"/>, <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.Layers"/>, <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.TextStyles"/>, <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.DimStyles"/>, <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.Lights"/> and <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.Selections"/> contains their default items
            used in order the document component to work properly.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.New">
            <summary>
            Clears the Document and initializes default values.
            </summary>
            <remarks>
            The <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.EnsureDefaults"/> is also called.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.Init">
            <summary>
            Clears the Document and initializes default values.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ReloadExternalReferences">
            <summary>
            Reloads all external References of the Drawing from their existing path.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.Update">
            <summary>
            Updates the objects and collections of the vdDocument object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method 
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.FindFile(System.String,System.Boolean,System.String@)">
            <summary>
            Finds the specified filename and returns the path where the file is.
            </summary>
            <param name="filename">The filename with the extension to be searched.</param>
            <param name="searchResourcesDirectory">Set to true in order to search also in path return by VectorDraw.Serialize.Activator.GetResourcesDirectory() method.</param>
            <param name="retFileName">The filename with it's path where it is located.</param>
            <returns>True if the file was found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.FindFile(System.String,System.String@)">
            <summary>
            Finds the specified filename and returns the path where the file is.
            </summary>
            <param name="filename">The filename with the extension to be searched.</param>
            <param name="retFileName">The filename with it's path where it is located.</param>
            <returns>True if the file was found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.FindFile(System.String,System.String@,System.Boolean,System.Boolean)">
            <summary>
            Finds the specified filename and returns the path where the file is.
            </summary>
            <param name="filename">The filename with the extension to be searched.</param>
            <param name="retFileName">The filename with it's path where it is located.</param>
            <param name="ReturnFromExistingListIfExist">Set it to true in order the path of a previous call with same filename argument to be returned.</param>
            <param name="searchResourcesDirectory">Set it to true in order to seach the VectorDraw.Serialize.Activator.GetResourcesDirectory also</param>
            <returns>True if the file was found.</returns>
            <remarks><para>
            Each file that exist is placed into an existing fullpathNames collection which is used to return the file from a later call if the  ReturnFromExistingListIfExist parameter is true.</para>
            <para>Open , New and RegenAll or <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Update"/> commands clear the existing list of files.</para>
            <para>Search for the file in the following order.</para>
            <list type="bullet">   
                <item><description>The path of the passed filename.</description></item>
                <item><description>The <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.SupportPath"/> folders with their order </description></item>
                <item><description>The folder of the open <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.FileName"/></description></item>
                <item><description>The folder of the  <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.FileName"/> of <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.TopMostDocumet"/> if this document is a part of an External Reference</description></item>
                <item><description>The statup path of the Application</description></item>
                <item><description>The path of the Application</description></item>
             </list> 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.RegisterObjectHandle(VectorDraw.Professional.vdObjects.vdObject,VectorDraw.Professional.vdObjects.vdHandle)">
            <summary>
            Registeres a handle to an object.
            </summary>
            <param name="obj">The object that needs a handle.</param>
            <param name="handle">The handle to be registered.If this value is null or 0 then a new handle is created for the object.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.AddObjectHandleToTable(VectorDraw.Professional.vdObjects.vdObject)">
            <summary>
            Creates a new handle for the object(if it's handle is 0) and registeres this object to the document.
            </summary>
            <param name="obj">The object to be registered to the document.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.CreateNewHandle">
            <summary>
            Creates and returns a new handle taken into consideration the current maximum handle of the document.The <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.HandleCurrent"/> is taking the return value.
            </summary>
            <returns>A new valid handle value.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetNextValidHandle">
            <summary>
            Returns the Next handle that is going to be generated from CreateNewHandle()
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetSortedHandleTable">
            <summary>
            Returns a copy of handle table in ascending order
            </summary>
            <returns>A copy of handle table</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.SetCurrentHandle(System.UInt64)">
            <summary>
            Sets the current handle to be used to the next inserted object.
            </summary>
            <param name="value">A handle value to be set as maximum handle.If this value is less that the current maximum handle then the value is not taken into consideration.</param>
            <remarks>
            If the passed value is smaller than <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.HandleCurrent"/> then the HandleCurrent is returning.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetPrimaries(System.Boolean)">
            <summary>
            Get all vdPrimary objects from the document.
            </summary>
            <param name="ignoreDeleted">If true objects with property <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.Deleted"/> true are ignored.</param>
            <returns>A <see cref="T:VectorDraw.Professional.vdCollections.vdPrimariesList"/> collection of <see cref="T:VectorDraw.Professional.vdObjects.vdPrimary"/> objects existing in the document.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.FindFromHandle(VectorDraw.Professional.vdObjects.vdHandle,System.Type)">
            <summary>
            Finds a <see cref="T:VectorDraw.Professional.vdObjects.vdObject"/> belonging to the Document from a specified Handle.
            </summary>
            <param name="value">The handle of the object.</param>
            <param name="type">The Type of the vdObject(for example vdLine,vdObject etc...)If vdObject is used then a vdLine object will still be returned since vdLine is a Subclass of vdObject.</param>
            <returns>The found vdObject or null.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.XrefAttach(System.String,VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdCollections.vdEntities)">
            <summary>
            Inserts a new External Reference Block.
            </summary>
            <param name="filename">The filename of the external reference.</param>
            <param name="insertionpoint">The insertion point in World Coordinate System.</param>
            <param name="EntitiesCollectionToAdd">The collection where the vdInsert object will be added(usually Layout.Entities collection).</param>
            <returns>The created vdInsert object or null if the function failed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetImageFromFile(System.String)">
            <summary>
            Get the preview of a file.The file can be either an supported image(JPG,BMP etc...) or vdml,vdcl.
            </summary>
            <param name="filename">The filename of the file.</param>
            <returns>An Image object that has the preview of the file.</returns>
            <remarks>
            If the file is an unsupported format then raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetFileImagePreview"/> event so the user can provide his own preview.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetOpenFileNameDlg(System.Int16,System.String,System.Int16,System.Windows.Forms.Control)">
            <summary>
            Displays the OpenFile dialog with a preview image.
            </summary>
            <param name="DefExt">A zero based index representing the drawing filetype.</param>
            <param name="FileName">The default filename to be used to the dialog or an empty string.</param>
            <param name="MultiSelect">0 or 1 for multiselect.</param>
            <param name="parent">A control used as parent for the form.</param>
            <returns>Returns null if the dialog was canceled by the user.Returns a string object if MultiSelect is 0 or a StringArray if MultiSelect is 1.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetOpenFileNameDlg(System.Int16,System.String,System.Int16)">
            <summary>
            Displays the OpenFile dialog with a preview image.
            </summary>
            <param name="DefExt">A zero based index representing the drawing filetype.</param>
            <param name="FileName">The default filename to be used to the dialog or an empty string.</param>
            <param name="MultiSelect">0 or 1 for multiselect.</param>
            <returns>Returns null if the dialog was canceled by the user.Returns a string object if MultiSelect is 0 or a StringArray if MultiSelect is 1.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetOpenImageFileDlg">
            <summary>
            Displayes The OpenFile dialog to select the supported image raster formats.
            </summary>
            <returns>The filename of the selected image.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetSaveFileNameDlg(System.String,System.String@)">
            <summary>
            Displays the SaveFile dialog so the user can pick a filename.
            </summary>
            <param name="defaultFileName">The default filename to be used from the dialog or an empty string.</param>
            <param name="version">The version the user selected.</param>
            <returns>The filename the user selected.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.IsvalidOpenRasterFormat(System.String)">
            <summary>
            Checks if an image is supported from VectorDraw.
            </summary>
            <param name="filename">The filename of the image.</param>
            <returns>Returns true if the given image filename is supported from the control.</returns>
            <remarks>
            VectorDraw supports raster images with following extensions: (bmp, gif, jpg, png, tif, ico)
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.IsvalidSaveFormat(System.String)">
            <summary>
            Checks if the filename extension is supported for save in VectorDraw.
            </summary>
            <param name="filename">The filename to be saved.</param>
            <returns>True if the filename extension is supported for saving.</returns>
            <remarks>
            <para> This method is internally called by <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.SaveAs(System.String)"/> and <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.ExportToFile(System.String)"/> methods.</para>
            <para>VectorDraw supports saving/export to the following extensions: (vdml, vdcl, svg, pdf, hpg, bmp, gif, jpg, png, tif, ico)</para>
            <para>If the extension of the passed filename is different than the above then the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetSaveFileFilterFormat"/> event raised.</para>
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.IsvalidOpenFormat(System.String)">
            <summary>
            Checks if the filename extension is supported for open in VectorDraw.
            </summary>
            <param name="filename">The filename to be opened.</param>
            <returns>True if the filename extension is supported for open in VectorDraw.</returns>
            <remarks>
            <para>This method is internally called by <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Open(System.String)"/> and <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.ImportFromFile(System.String)"/> methods.</para>
            <para>VectorDraw supports open/import to the following extensions: (vdml, vdcl, bmp, gif, jpg, png, tif, ico)</para>
            <para>If the extension of the passed filename is different than the above then the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnIsValidOpenFormat"/> event raised.</para>
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GarbageCollector">
            <summary>
            Clears the memory from the garbage objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ClearEraseItems">
            <summary>
            Clears the undo history and all primary items marked as deleted from their collections.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ClearLayoutEntities(VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Removes ALL the entities from a layout. Also clears the undo history.
            </summary>
            <param name="layout">The layout from which all entities will be removed</param>
            <remarks >Note that ALL the entities will be removed from the layouts collection , they will NOT be simply flagged as Deleted but instead they will be completely lost.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ImportFromFile(System.String)">
            <summary>
            Imports a file to the vdDocument object.
            </summary>
            <param name="filename">The full path filename of the file to be imported.</param>
            <returns>True if the file was succesfully opened.</returns>
            <remarks>
            <para>The <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.FindFile(System.String,System.String@)"/> is called with the passed filename  in order to use an exisiting file.</para>
            <para>Calling the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Open(System.String)"/> method have the same result.</para>
            </remarks>
            <seealso cref="M:VectorDraw.Professional.vdObjects.vdDocument.IsvalidOpenFormat(System.String)"/>
            <seealso cref="M:VectorDraw.Professional.vdObjects.vdDocument.Open(System.String)"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ExportToFile(System.String)">
            <summary>
            Saves the drawing into a filename.
            </summary>
            <param name="filename">The filename of the file to be saved</param>
            <returns>True if the operation was succesfull.</returns>
            <remarks>Calling the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.SaveAs(System.String)"/> method have the same result.</remarks>
            <seealso cref="M:VectorDraw.Professional.vdObjects.vdDocument.IsvalidSaveFormat(System.String)"/>
            <seealso cref="M:VectorDraw.Professional.vdObjects.vdDocument.SaveAs(System.String)"/>
            <seealso cref="P:VectorDraw.Professional.vdObjects.vdDocument.BackupOnSave"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ExportDistributionFiles(VectorDraw.Professional.vdCollections.StringArray@,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Saves and returns all the necessary file dependecies of the drawing.(Images,FontFiles,External reference drawings). 
            </summary>
            <param name="retFiles">A precreated reference to a StringArray where the filenames of the created files will be added.</param>
            <param name="FolderName">Is an existing folder where the necessary files will be copied.</param>
            <param name="FileExtension">The extension of the necessary drawing files that will be saved at the above folder.Images and Fond files will be saved with the extension that they already have.</param>
            <param name="version">An empty string for the default version or specify the required version depending the file extension.</param>
            <param name="OverwriteExisting">If true then existing files will be ovewriten.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ExportDistributionFiles(VectorDraw.Professional.vdCollections.StringArray@,System.String,System.String,System.String,VectorDraw.Render.RasterImageType,System.Boolean)">
            <summary>
            Saves and returns all the necessary file dependecies of the drawing.(Images,FontFiles,External reference drawings). 
            </summary>
            <param name="retFiles">A precreated reference to a StringArray where the filenames of the created files will be added.</param>
            <param name="FolderName">Is an existing folder where the necessary files will be copied.</param>
            <param name="FileExtension">The extension of the necessary drawing files that will be saved at the above folder.Images and Fond files will be saved with the extension that they already have.</param>
            <param name="version">An empty string for the default version or specify the required version depending the file extension.</param>
            <param name="imageformat">Specifies the exported image definition format and color data for each pixel in the image.</param>
            <param name="OverwriteExisting">If true then existing files will be ovewriten.</param>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.ClipboardVDMLFormat">
            <summary>
            Specifies a vdml Memory stream Clipboard format
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.ClipboardVDMLBytesFormat">
            <summary>
            Specifies a vdml byte array Clipboard format
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.LoadFromClipboard">
            <summary>
            Loads a Document from  Clipboard data.
            </summary>
            <returns>True if the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.LoadFromMemory(System.IO.Stream)">
            <summary>
            Loads a Document from a stream.
            </summary>
            <param name="stream">The stream from where the objects are.</param>
            <returns>True if the operation was succesfull.</returns>
            <seealso cref="M:VectorDraw.Professional.vdObjects.vdDocument.ToStream(System.Boolean)"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetFileObjectType(System.Type,System.String)">
            <summary>
            Gets an object from a supported file.
            </summary>
            <param name="type">The type of the object to search for.</param>
            <param name="fileName">The filename of the file.</param>
            <returns>Returns the found object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetFileActivator(System.String)">
            <summary>
            Gets the <see cref="T:VectorDraw.Serialize.Activator"/> of a (vdml or vdcl) supported file.
            </summary>
            <param name="fileName">The filename of the file.Must be a .vdml or .vdcl file type.</param>
            <returns>Returns a <see cref="T:VectorDraw.Serialize.Activator"/> object of the given file.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.GetFileProperties(System.String)">
            <summary>
            Gets the FileProperties of a (vdml or vdcl) supported file.
            </summary>
            <param name="fileName">The filename of the file.Must be a .vdml or .vdcl file type.</param>
            <returns>Returns a vdFileProperties object contaning the properties of the given file.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.TryOpen(System.String)">
            <summary>
            Opens the file into a temporary document object and if succesfull then loads this temporary document to the current.
            </summary>
            <param name="fileName">The filename of the file.</param>
            <returns>True if the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.Open(System.String)">
            <summary>
            Opens the given supported file
            </summary>
            <param name="fileName">The full path filename of the file to be opened.</param>
            <returns>True if the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ExportScript(System.String,System.Object,System.Object)">
            <summary>
            Converts and exports the document to the appropriate format in order to be opened by the
            vdWeb library.
            </summary>
            <param name="filename">The full filename where the document will be exported to, normally ending
            in a .vds suffix.</param>
            <param name="lics">An Arrray of strings containing the licvals to be used with the exported file.
            These licval codes are used to define the location from where the files will be loaded. For more info
            contact support@vdraw.com</param>
            <param name="parameters"><para>An object Array that defines various parameters used to specify properties of the 
            exportation. Null can be used and default properties will be used (for the whole parameter or specific elements of the array).</para>
            <para>Position 0 of parameters Array is a vdPrimariesList object defining objects from the document that normally 
            would be purged, but the user wants to keep (such as empty layers).</para>
            <para>Position 1 is the decimal precision, meaning an integer value defining how many decimal points will
            be considered for equality comparisons. Also this many digits after the comma will be saved for
            every decimal value, in the document.</para>
            <para>Position 2 is a char Array object defining characters the user wants to use (in a form for example)
            that are not already present in the document. If this list is not populated, certain characters may
            be not able to draw properly</para>
            <para>Position 3 is a boolean value indicating whether font files should be embedded in the exported file,
            or simply copied separately to the destination folder.</para>
            <para>Position 4 is a string object that contains a path where additional files (e.g font files) needed for
            the export can be found.</para></param>
            <returns>True if the command was successfuly completed.</returns>
            <seealso cref="M:VectorDraw.Professional.vdObjects.vdDocument.ExportScript(System.String,System.Boolean,System.String[],System.Object[],System.String[]@)"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ExportScript(System.String,System.String[],System.Object[])">
            <summary>
            Converts and exports the document to the appropriate format in order to be opened by the
            vdWeb library.
            </summary>
            <param name="filename">The full filename where the document will be exported to, normally ending
            in a .vds suffix.</param>
            <param name="lics">An Arrray of strings containing the licvals to be used with the exported file.
            These licval codes are used to define the location from where the files will be loaded. For more info
            contact support@vdraw.com</param>
            <param name="parameters"><para>An object Array that defines various parameters used to specify properties of the 
            exportation. Null can be used and default properties will be used (for the whole parameter or specific elements of the array).</para>
            <para>Position 0 of parameters Array is a vdPrimariesList object defining objects from the document that normally 
            would be purged, but the user wants to keep (such as empty layers).</para>
            <para>Position 1 is the decimal precision, meaning an integer value defining how many decimal points will
            be considered for equality comparisons. Also this many digits after the comma will be saved for
            every decimal value, in the document.</para>
            <para>Position 2 is a char Array object defining characters the user wants to use (in a form for example)
            that are not already present in the document. If this list is not populated, certain characters may
            be not able to draw properly</para>
            <para>Position 3 is a boolean value indicating whether font files should be embedded in the exported file,
            or simply copied separately to the destination folder.</para>
            <para>Position 4 is a string object that contains a path where additional files (e.g font files) needed for
            the export can be found.</para>
            <para>Position 5 is an integer that controls the maximum possible value of an image's bitmap (width x height). Default value is 552960 (a resolution of 768 * 720); 
            If an image (width x height) is larger than this value then the image is scaled down to a value smaller or equal in order to keep the aspect ratio.
            Set it to 0 in order the default value to be used.</para></param>
            <returns>True if the command was successfuly completed.</returns>
            <seealso cref="M:VectorDraw.Professional.vdObjects.vdDocument.ExportScript(System.String,System.Boolean,System.String[],System.Object[],System.String[]@)"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ExportScript(System.String,System.Boolean,System.String[],System.Object[],System.String[]@)">
             <summary>
             Converts and exports the document to the appropriate format in order to be opened by the
             vdWeb library.
             </summary>
             <param name="filename">The full filename where the document will be exported to, normally ending
             in a .vds suffix.</param>
             <param name="ExportExternalReferences">Set it to true in order all external references of this document also to be exported.</param>
             <param name="lics">An Arrray of strings containing the licvals to be used with the exported file.
             These licval codes are used to define the location from where the files will be loaded. For more info
             contact support@vdraw.com</param>
             <param name="parameters"><para>An object Array that defines various parameters used to specify properties of the 
             exportation. Null can be used and default properties will be used (for the whole parameter or specific elements of the array).</para>
             <para>Position 0 of parameters Array is a vdPrimariesList object defining objects from the document that normally 
             would be purged, but the user wants to keep (such as empty layers).</para>
             <para>Position 1 is the decimal precision, meaning an integer value defining how many decimal points will
             be considered for equality comparisons. Also this many digits after the comma will be saved for
             every decimal value, in the document.</para>
             <para>Position 2 is a char Array object defining characters the user wants to use (in a form for example)
             that are not already present in the document. If this list is not populated, certain characters may
             be not able to draw properly</para>
             <para>Position 3 is a boolean value indicating whether font files should be embedded in the exported file,
             or simply copied separately to the destination folder.</para>
             <para>Position 4 is a string object that contains a path where additional files (e.g font files) needed for the export can be found.</para>
             <para>Position 5 is an integer that controls the maximum possible value of an image's bitmap (width x height). Default value is 552960 (a resolution of 768 * 720); </para>
             <para>If an image (width x height) is larger than this value then the image is scaled down to a value smaller or equal in order to keep the aspect ratio.
             Set it to 0 in order the default value to be used.</para>
             </param>
             <param name="ExportedFileNames">Contrains the list of exported file names.The first one is the basic drawing and the others are external reference scripts</param>
             <returns>True if successfully exported.</returns>
             <remarks>
             The following <see cref="T:VectorDraw.Professional.vdPrimaries.vdFigure"/> types are fully supported
             
             <see cref="T:VectorDraw.Professional.vdFigures.vdLine"/>
             <see cref="T:VectorDraw.Professional.vdFigures.vdText"/>
             <see cref="T:VectorDraw.Professional.vdFigures.vdRect"/>
             <see cref="T:VectorDraw.Professional.vdFigures.vdCircle"/>
             <see cref="T:VectorDraw.Professional.vdFigures.vdEllipse"/>
             <see cref="T:VectorDraw.Professional.vdFigures.vdArc"/>
             <see cref="T:VectorDraw.Professional.vdFigures.vdImage"/>
             <see cref="T:VectorDraw.Professional.vdFigures.vdInsert"/>
             <see cref="T:VectorDraw.Professional.vdFigures.vd3DFace"/>
             <see cref="T:VectorDraw.Professional.vdFigures.vdPolyface"/>
             <see cref="T:VectorDraw.Professional.vdFigures.vdAttrib"/>
             <see cref="T:VectorDraw.Professional.vdFigures.vdAttribDef"/>
             <see cref="T:VectorDraw.Professional.vdFigures.vdInfinityLine"/>
             <see cref="T:VectorDraw.Professional.vdFigures.vdPoint"/>
             
             The following <see cref="T:VectorDraw.Professional.vdPrimaries.vdFigure"/> types are limited supported
             
             <see cref="T:VectorDraw.Professional.vdFigures.vdPolyline"/> when HasWidths is exploded to sub entities <see cref="M:VectorDraw.Professional.vdFigures.vdPolyline.Explode"/> and converted to <see cref="T:VectorDraw.Professional.vdPrimaries.vdProxyFigure"/>
             <see cref="P:VectorDraw.Professional.vdFigures.vdPolyhatch.PolyCurves"/> are reconstructed to their filled regions defining them as array of sample points <see cref="M:VectorDraw.Professional.vdObjects.vdHatchProperties.GetOutlineCountours(System.Int32,System.Double)"/>
             <see cref="T:VectorDraw.Professional.vdFigures.vdMText"/> if it is contains character instructions is exploded to sub entities <see cref="M:VectorDraw.Professional.vdFigures.vdMText.Explode"/> and converted to <see cref="T:VectorDraw.Professional.vdPrimaries.vdProxyFigure"/>
             <see cref="T:VectorDraw.Professional.vdFigures.vdViewport"/> is exported as a single rectangle the <see cref="P:VectorDraw.Professional.vdFigures.vdViewport.ClipObj"/>is not supported.
             <see cref="T:VectorDraw.Professional.vdFigures.vdHelix"/> , <see cref="T:VectorDraw.Professional.vdFigures.vdMultiline"/> , <see cref="T:VectorDraw.Professional.vdFigures.vdArcAlignedText"/> , <see cref="T:VectorDraw.Professional.vdFigures.vdDimension"/> , <see cref="T:VectorDraw.Professional.vdFigures.vdGroundSurface"/> , <see cref="T:VectorDraw.Professional.vdFigures.vdLeader"/> and
             user custom objects <see cref="T:VectorDraw.Professional.vdPrimaries.vdProxyFigure"/> are exploded to sub entities <see cref="M:VectorDraw.Professional.vdPrimaries.vdFigure.Explode"/> and converted to <see cref="T:VectorDraw.Professional.vdPrimaries.vdProxyFigure"/>
             
            The <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.DimStyles"/> , <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.MultilineStyles"/> , <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.Groups"/> , <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.UserTables"/> , <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.NamedUCSs"/> , <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.Views"/> , <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ProxyClasses"/>
             </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ExportScript(System.String,VectorDraw.Professional.vdObjects.vdDocument.ExportScriptFlags,System.UInt32,System.Char[],System.Int32,VectorDraw.Professional.vdCollections.vdPrimariesList)">
            <summary>
            Converts and exports the document to the appropriate format in order to be opened by the vdWeb library.
            </summary>
            <param name="filename">The full filename where the document will be exported to, normally ending in a .vds suffix.</param>
            <param name="flags"><see cref="T:VectorDraw.Professional.vdObjects.vdDocument.ExportScriptFlags"/> that controls some exported parameters</param>
            <param name="decimalPrecision">
            the decimal precision, meaning an integer value defining how many decimal points will
            be considered for equality comparisons. Also this many digits after the comma will be saved for every decimal value, in the document.
            </param>
            <param name="ExtraUsedChars">
            A char Array object defining characters, that are not already present in the document, and the user wants to use in the javascript webcontrol when adding new text objects.
            </param>
            <param name="maxImageSize">
            An integer that controls the maximum possible value of an image's bitmap (width x height). Default value is 552960 (a resolution of 768 * 720); 
            If an image (width x height) is larger than this value then the image is scaled down to a value smaller or equal in order to keep the aspect ratio.
            Set it to 0 in order the default value to be used.
            </param>
            <param name="extraKeepPrimaries">
            A <see cref="T:VectorDraw.Professional.vdCollections.vdPrimariesList"/> collection contains objects from the document that normally 
            would be purged, but the user wants to keep, such as empty layers or no used blocks.
            </param>
            <returns>True if successfully exported.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ImportScript(System.String)">
            <summary>
            Import a .vds web format
            </summary>
            <param name="filename">An existing filename</param>
            <returns>True is the file was succesfully opened.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.SaveAs(System.String)">
            <summary>
            Saves the Document into the specified filename.
            </summary>
            <param name="fileName">The filename of the destination file.</param>
            <returns>True if the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.SaveAs(System.String,System.Drawing.Image,System.String)">
            <summary>
            Saves the Document into a destination filename with a specified image preview and version.
            </summary>
            <param name="fileName">The destination filename.</param>
            <param name="PreviewImage">A preview Image to be saved with the file.</param>
            <param name="version">The version to use while saving.</param>
            <returns>True if the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.SaveAs(System.String,System.Drawing.Image)">
            <summary>
            Saves the Document into a destination filename with a specified image preview.
            </summary>
            <param name="fileName">The destinatioin filename.</param>
            <param name="PreviewImage">A preview Image to be saved with the file.</param>
            <returns>True if the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ToStream(System.Boolean)">
            <summary>
            Saves and returns a Memory Stream containing all objects of the document.
            </summary>
            <param name="compress">Set it to true in order to Compress the memory stream.</param>
            <returns>A System.IO.MemoryStream containing all objects of the document.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.LoadFromMemory(System.IO.Stream,System.Boolean)">
            <summary>
            Loads a Document from a stream.
            </summary>
            <param name="stream">The stream from where the objects are.</param>
            <param name="iscompressed">Set it to true if the stream is compressed</param>
            <returns>True if the operation was succesfull.</returns>
            <seealso cref="M:VectorDraw.Professional.vdObjects.vdDocument.ToStream(System.Boolean)"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ToStream">
            <summary>
            Saves and returns a Memory Stream containing all objects of the document.
            </summary>
            <returns>A System.IO.MemoryStream containing all objects of the document.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdDocument object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdDocument object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.SetXrefLayerProperties(System.String,System.Boolean,System.Boolean,VectorDraw.Professional.vdPrimaries.vdLineType,VectorDraw.Professional.vdObjects.vdColor,VectorDraw.Professional.Constants.VdConstLineWeight)">
            <summary>
            Change the properties of an External Reference Layer.
            </summary>
            <param name="XrefBlockAndlayerName">Formating Layer name:External Reference Block Name + "|" + Layer name of the Same External Reference document. </param>
            <param name="isfrozen">New Frozen property for the Layer.</param>
            <param name="islock">New Lock property for the Layer.</param>
            <param name="linetype">New Linetype property for the Layer.</param>
            <param name="pencolor">New PenColor property for the Layer.</param>
            <param name="lineweight">New LineWeight property for the Layer.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.UpdateAllDocumentLayersProperties">
            <summary>
            Copy all Layer properties of TopMostDocument  to ExternalReferences Documents Layers.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnFilterOsnap">
            <summary>
            Fired before an <see cref="T:VectorDraw.Geometry.OsnapPoint"/> added into the active selected Osnap collection.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnRequestLicVal">
            <summary>
            Fired after downloading a url file and before open it.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnObjectHandleChanged">
            <summary>
            Fired after a dublicate handle of an object is changed
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.GenericError">
            <summary>
            Fires when an error occurs in a method or property.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.GetPassWord">
            <summary>
            Fires before open a password protected drawing.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnPrompt">
            <summary>
            Fires when a <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Prompt(System.String)"/> method is called.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnIsValidOpenFormat">
            <summary>
            Fires before <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Open(System.String)"/> method and when the file's extendion is not implmented from VectorDraw.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetFileImagePreview">
            <summary>
            Fires when the opendialog is called in order to display a preview image of a file that is not supported.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetOpenFileFilterFormat">
            <summary>
            Fires before the open dialog in order to filter the supported open extensions.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetSaveFileFilterFormat">
            <summary>
            Fires before the open dialog in order to filter the supported save extensions.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnUndoStoreValue">
            <summary>
            Fires before a property of an object is stored in the undo-redo stack.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterUndoStoreValue">
            <summary>
            Fires after a property of an object is stored in the undo-redo stack.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnInitBaseAction">
            <summary>
            Fires before the default BaseAction is added to the action stack of the document.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnLoadUnknownFileName">
            <summary>
            Fires When an unsupported file extension is opened.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnSaveUnknownFileName">
            <summary>
            Fires When an unsupported file extension is saved.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnProgress">
            <summary>
            Fires when a progress operation is changed.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnProgressStart">
            <summary>
            Fires when the Progresses meter initialize.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnProgressStop">
            <summary>
            Fires when the Progresses meter terminated.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeOpenDocument">
            <summary>
            Fires before opening a file.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterOpenDocument">
            <summary>
            Fires after opening a file.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterNewDocument">
            <summary>
            Fires after the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.New"/> method.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnDrawFigure">
            <summary>
            Fires before a vdFigure is drawn.
            </summary>
            <remarks>
            The value at the top of <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.FreezeEntityDrawEvents"/> must be false
            </remarks>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnDrawAfterFigure">
            <summary>
            Fires after a vdFigure is drawn.
            </summary>
            <remarks>
            The value at the top of <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.FreezeEntityDrawEvents"/> must be false
            </remarks>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetGripPoints">
            <summary>
            Fires before <see cref="M:VectorDraw.Professional.vdPrimaries.vdFigure.GetGripPoints"/> method.
            </summary>
            <seealso cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnMoveGripPointsAt"/>
            <remarks>When override this method the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnMoveGripPointsAt"/> must be also override according to the new selected grip points.</remarks>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnMoveGripPointsAt">
            <summary>
            Fires when a default move of a grip point of a vdFigure object.
            </summary>
            <seealso cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetGripPoints"/>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnAddItem">
            <summary>
            Fires before an object register with the vdDocument is added to a collection.
            </summary>
            <remarks>
            The value at the top of <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.FreezeModifyEvents"/> must be false
            </remarks>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterAddItem">
            <summary>
            Fires after an object  register with the vdDocument is added to a collection.
            </summary>
            <remarks>
            The value at the top of <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.FreezeModifyEvents"/> must be false
            </remarks>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnEraseObject">
            <summary>
            Fires before an object is set as deleted.
            </summary>
            <remarks>
            The value at the top of <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.FreezeModifyEvents"/> must be false
            </remarks>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject">
            <summary>
            Fires before a change to a property of an object.
            </summary>
            <remarks>
            The value at the top of <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.FreezeModifyEvents"/> must be false
            </remarks>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject">
            <summary>
            Fires after a change to a property of an object.
            </summary>
            <remarks>
            The value at the top of <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.FreezeModifyEvents"/> must be false
            </remarks>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnFilterFigure">
            <summary>
            Fires when an object is inserted into a collection.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnDrawAfter">
            <summary>
            Fires after all figures are drawn.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnDrawBackground">
            <summary>
            Fires before the draw of the background.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnDraw">
            <summary>
            Fires before all figures are drawn.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnDrawOverAll">
            <summary>
            Fires after all entities was drawn and before the coordinate axis is drawn and the graphics updated on screen.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnFigureDrawGrips">
            <summary>
            Fires before the draw of the grip points of a vdFigure object.
            </summary>
            <remarks>
            The value at the top of <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.FreezeEntityDrawEvents"/> must be false
            </remarks>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnOpenUrl">
            <summary>
            Fires before the default execution of the explorer opening a URL.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnNoFileFind">
            <summary>
            Fires when a file is not found to the support path.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnActionDrawOsnap">
            <summary>
            Fires before the osnaps are drawn.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnResizeControlWindow">
            <summary>
            Fires when the control is resized.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnScroll">
            <summary>
            Fires when a scrolling action is commited.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnActionDraw">
            <summary>
            Fires before the active action is drawn.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnActionJobLoop">
            <summary>
            Fires Continually when an action is active and started .
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnActionJobLoopEx">
            <summary>
            Fires Continually when an action is active and started .
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.GripSelectionModified">
            <summary>
            Fires when vdFigure objects are added or removed in the active grip selection.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.ActionLayoutActivated">
            <summary>
            Fires after <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/> property is changed.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.ActionLayoutBeforeDeActivated">
            <summary>
            Fires before <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/> property is de-activated.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.ActionFinish">
            <summary>
            Fires when a BaseAction is finished.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.FilterActionPoint">
            <summary>
            Fires after an action waiting a point is finished.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.GetDimensionText">
            <summary>
            Fires before the dimension's text is calculated
            </summary>
            <remarks>
            The value at the top of <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.FreezeEntityDrawEvents"/> must be false.
            </remarks>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError">
            <summary>
            Fires when an command action is canceled with an error.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd">
            <summary>
            Fires when a command action is finished.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart">
            <summary>
            Fires before a command action is started.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.ActionAdded">
            <summary>
            Fires just after a BaseAction  is added to active actions stack.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnPolarTrackToolTip">
            <summary>
            Fires before the PolarTrack Tooltip display.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnPolarTrackAngleValidate">
            <summary>
            Fires when the PolarTrack angle need validation and the PolarTrack is set to true.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.ActionParse">
            <summary>
            Fires before a user string is parsed from the active action.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnCommandExecute">
            <summary>
            Fires when application runs under Mono and after a <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.PostCommandActionString(System.Windows.Forms.Control,System.String)"/> or <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.SendCommandActionString(System.String)"/> call and the active Action does not Parse.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.LoadUnknownObjects">
            <summary>
            Fires when an Unknown objects is loaded from a document after an open command.
            </summary>
            <remarks>Currently is raised only for DXF files and for objects that are not supported from VectorDraw.</remarks>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnActionMouseMove">
            <summary>
            Fires after a Mouse move operation of active action is finished.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnFigureMouseOver">
            <summary>
            Event fired when the mouse is over an entity.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnDrawScene">
            <summary>
            Fires when drawing the entire scene.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnExportedExtraFiles">
            <summary>
            Fires when a drawing is saved and additional needed files was created.For example when expoting to SVG file.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.GripSelectionBeforeModify">
            <summary>
            Occurs before an item is added or remove from the default active gripSelection, in case the<see cref="P:VectorDraw.Professional.vdObjects.vdDocument.EnableAutoGripOn"/>  is true.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnSelectionsAddItem">
            <summary>
            Occurs before adding one item to the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.Selections"/>.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnSelectionsRemoveItem">
            <summary>
            Occurs after removing an item from the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.Selections"/>.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnSelectionsRemoveAllItems">
            <summary>
            Occurs before removing all items from the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.Selections"/>.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ToolTipText">
            <summary>
            Get/Set a string representing the Tooltip of the object.
            </summary>
            <remarks>
            When the mouse pointer is over the graphics screen then the tooltip string is shown.
            Note that <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.EnableToolTips"></see> must be set true.
            Property is not saved by document and not added into undo history.
            </remarks>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnThreadFinished">
            <summary>
            Fires when a <see cref="T:VectorDraw.Professional.vdObjects.vdDocument.IvdThread"/> thread is finished.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.CheckLayerPlot">
            <summary>
            0 does not check layer's plot value , 1 checks.
            This value is enabled before printing , print preview or pdf export in order to enable plot checking to figure's layer.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.MatchXproperties">
            <summary>
            Returns the active <see cref="T:VectorDraw.Professional.vdObjects.vdDocument.MatchXpropertiesFlag"/> logic.
            </summary>
            <remarks>
            Default value is <see cref="F:VectorDraw.Professional.vdObjects.vdDocument.MatchXpropertiesFlag.All"/>
            <seealso cref="M:VectorDraw.Professional.vdObjects.vdDocument.PushMatchXproperties(VectorDraw.Professional.vdObjects.vdDocument.MatchXpropertiesFlag)"/> and <seealso cref="M:VectorDraw.Professional.vdObjects.vdDocument.PopMatchXproperties"/>
            </remarks>
        </member>
        <member name="E:VectorDraw.Professional.vdObjects.vdDocument.OnTimer">
            <summary>
            Occurs when the specified <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.TimerInterval"/> has elapsed and the timer is enabled.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.HandleTableGuid">
            <summary>
            Returns the table that Keep all Vdraw Objects assigned with a unique Guid .
            In order to work the vdDocument.FileProperties.UseGuidHandleTable must be set to true.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.TimerInterval">
            <summary>
            Gets or sets the time, in milliseconds, before the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnTimer"/> event is raised relative to the last occurrence of the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnTimer"/>  event
            </summary>
            <remarks>
            Default value is 200 milliseconds. The value cannot be less than one.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.SmoothAngle">
            <summary>
            Get/Set the angle in degrees between 0 and 90 used to calculate normals for each vertex in each face when rendering a polyface object.
            Defines the maximun angle which is compared with the angles between the planes of neighboring faces in order to filter out the normals of the planes that will added in the average calculation.
            </summary>
            <remarks>
            Set it to 0 in order the normals not to be smoothing.</remarks>
            <remarks>Set it to 90 in order the normal of each vertex to be calculated as the average value with all the neighboring faces normals.</remarks>
            <remarks>Default value is 0 for no smoothing
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.DisableExternalReferencesLoad">
            <summary>
            Enable/Disable load of External References.
            </summary>
            <remarks>Default value is false.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ViewportLTScale">
            <summary>
            Controls the scaling of linetypes drawn inside a viewport of <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/> object.
            </summary>
            <remarks>Default value is <see cref="F:VectorDraw.Render.vdRender.ViewportLTScaleFlag.ViewportBased"/></remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.MouseLogic">
            <summary>
            Gets or sets the <see cref="T:VectorDraw.Professional.vdObjects.vdDocument.MouseLogicEnum"/> of mouse button clicks.
            </summary>
            <remarks>
            The value is reference to a static field and applies with the same value to all <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> objects of the application.  Default value is <see cref="F:VectorDraw.Professional.vdObjects.vdDocument.MouseLogicEnum.Default"/>
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.XrefFadeEffect">
            <summary>
            Get/Set the color Fading effect percentage for all External reference drawings, close to the background color of output rendering.
            </summary>
            <remarks>
            Property is not saved by the drawing and not added in the undo history.</remarks>
            <remarks>The value references a static field and applies with the same value to all <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> objects of the application.</remarks>
            <remarks>Default value is 0 for no fading.</remarks>
            <remarks>Valid rangeis 0 to 90 (byte). Value is limited to 90 percent to avoid making entities invisible.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.LockLayerFadeEffect">
            <summary>
            Get/Set the color Fading effect percentage for all objects on locked layers, close to the background color of output rendering.
            </summary>
            <remarks>
            This property is not saved by the drawing and not added in the undo history.</remarks>
            <remarks>The value references a static field and applies with the same value to all <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> objects of the application.</remarks>
            <remarks>Default value is 0 for no fading.</remarks>
            <remarks>Valid range is 0 to 90 (byte). Value is limited to 90 percent in order to avoid making entities invisible.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.EntitySelectMode">
            <summary>
            Get/Set the <see cref="T:VectorDraw.Render.PickEntityMode"/> method used for single entity picking operation.
            </summary>
            <remarks>
            The value is reference to a static field and applies with the same value to all <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> objects of the application.  Default value is <see cref="F:VectorDraw.Render.PickEntityMode.DrawOrder"/>
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.SortGripWindowSelection">
            <summary>
            Defines if the user Window or Crossing Grip Selection will be sorted according to the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.EntitySelectMode"/>
            Default value is false in order entities to be added in the Grip selection according to the order of their owner list.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.SortSelection">
            <summary>
            Defines if the user Window or Crossing Selection will be sorted according to the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.EntitySelectMode"/>
            Default value is false in order entities to be added in the selection according to the order of their owner list.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.BlockStdLayerOper">
            <summary>
             Get/Set the <see cref="T:VectorDraw.Professional.vdObjects.vdDocument.BlockStdLayerOperFlag"/> method used for the PenColor, LineType, LineWeight of entities set to layer 0 ,inside block
            </summary>
            <remarks>Default value is <see cref="F:VectorDraw.Professional.vdObjects.vdDocument.BlockStdLayerOperFlag.Default"/></remarks>
            <remarks>Value is saved inside the document.</remarks>
            <remarks>Value is not added to undo history.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.BlockColorOper">
            <summary>
             Get/Set the <see cref="T:VectorDraw.Professional.vdObjects.vdDocument.BlockColorOperEnum"/> method used for the color of entities inside block  belongs in Layer 0 and with it's color equals to ByLayer.
            </summary>
            <remarks>Default value is <see cref="F:VectorDraw.Professional.vdObjects.vdDocument.BlockColorOperEnum.BlockLayer"/></remarks>
            <remarks>Value is saved inside the document.</remarks>
            <remarks>Value is not added to undo history.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ExtendedDeletedCheck">
            <summary>
            Get/Set the method used for Deleted check and Merging Table objects or Purge methods.
            </summary>
            <remarks>Default value is False. Setting the value to False then checking is faster than if value is True.</remarks>
            <remarks>Use the True value if your document contains custom figures that do not override the <see cref="M:VectorDraw.Professional.vdPrimaries.vdFigure.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)"/> method and have reference fields into document Table objects such as Blocks Images hatchPaterns or LineTypes etc.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.AltTTFFont">
            <summary>
            Return or set the default <see cref="T:System.Drawing.Font"/> that is used for style names when a <see cref="T:VectorDraw.Professional.vdPrimaries.vdTextstyle"/> object first created.
            </summary>
            <remarks>
            Default value is Arial TrueTypeFont</remarks>
            <remarks>This property is used when <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.setDocumentDefaults"/> is called.
            </remarks>
            <example>
            <para>Changes the AltTTFFont and create a new vdTextstyle that its FontFile property have this value.</para>
            <code>
                            //Changes the AltTTFFont to Verdana TrueTypeFont with Bold and Italic characters.
                            doc.AltTTFFont = new Font("Verdana",15.0f, FontStyle.Bold | FontStyle.Italic) ;
                            //Add a new text style object.
                            vdTextstyle txtstyle = doc.TextStyles.Add("MyNewTextStyle");
                            //select the default active properties of the document object for the style object
                            txtstyle.setDocumentDefaults();
                            //the created text style have FontFile name "Verdana"
                            Console.WriteLine(txtstyle.FontFile + "," + txtstyle.Extra.ToString());// output will be "Verdana,None,21,True,False"
            </code>
            </example>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.InsUnits">
            <summary>
            Get/Set a value of <see cref="T:VectorDraw.Professional.vdObjects.vdDocument.InsUnitsEnum"/> type used for scaling when inserting blocks from a drawing or attach ExternalReferences.
            </summary>
            <remarks>The inserted entities are scaled by dividing the Inserted document InsUnits value with this document InsUnits value.</remarks>
            <remarks>If InsUnits of inserted document  or this document is <see cref="F:VectorDraw.Professional.vdObjects.vdDocument.InsUnitsEnum.Unspecified"/> no scale on inserted blocks is applied.</remarks>
            <remarks>Default value is <see cref="F:VectorDraw.Professional.vdObjects.vdDocument.InsUnitsEnum.Unspecified"/></remarks>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.RenderingQuality">
            <summary>
            Specifies the <see cref="T:VectorDraw.Render.vdRender.RenderingQualityMode"/> quality.
            </summary>
            <remarks>
            Default value is <see cref="F:VectorDraw.Render.vdRender.RenderingQualityMode.HighSpeed"/></remarks>
            <remarks>Value is saved inside the document.</remarks>
            <remarks>This mode is used when drawing Images , lines.</remarks>
            <remarks>For <see cref="F:VectorDraw.Render.vdRender.RenderingQualityMode.HighSpeed"/> the <see cref="M:VectorDraw.Render.vdRender.PrepareGraphicsHighSpeed(System.Drawing.Graphics)"/> method is called.</remarks>
            <remarks>For <see cref="F:VectorDraw.Render.vdRender.RenderingQualityMode.HighQuality"/> the <see cref="M:VectorDraw.Render.vdRender.PrepareGraphicsHighQuality(System.Drawing.Graphics)"/> method is called.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.LicVal">
            <summary>
            Get/Set the license to use the control in a webpage.
            </summary>
            <remarks>
            This value is requsted when loading a file from a url instead from local disk.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.PenCapsSquare">
            <summary>
            Get/Set a static value which represents if the lines with width ends with square or round cap.
            </summary>
            <remarks>True if square.Default value:false. </remarks>
            <remarks>PenCapsSquare is not supported when PerspectiveMod = PerspectON or</remarks>
            <remarks>The line width is  from <see cref="P:VectorDraw.Professional.vdPrimaries.vdFigure.LineWeight"/> and <see cref="P:VectorDraw.Professional.vdPrimaries.vdFigure.PenWidth"/> = 0.0
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.EnableAutoFocus">
            <summary>
            Get/Set a boolean value representing if the mouse enters the control automatically will set the focus to the control.
            </summary>
            <remarks>Default value is false.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.DisableRedraw">
            <summary>
            Get/Set a boolean value which disables or enables drawing methods to the control window.
            </summary>
            <remarks>Default value: false (the control is drawn).</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.DisableZoomOnResize">
            <summary>
            Get/Set a boolean value which disables or enables zoom change when the control is resized.
            </summary>
            <remarks>
            The value is reference to a static field and applies with the same value to all <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> objects of the application.  Default value is false.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.BackupOnSave">
            <summary>
            Get/Set a boolean value representing if a backup file will be kept before saving an existing file.
            </summary>
            <remarks>
            The value is reference to a static field and applies with the same value to all <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> objects of the application. If value is true the already existing file is renamed with ".~bak" extension.</remarks>
            <remarks>Default value is false.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.MouseWheelZoomScale">
            <summary>
            Get/Set the zooming scale used when zooming with the mouse wheel.Set this value under 1.0 to inverse the mouse wheel operation.
            </summary>
            <remarks>
            Default value is 1.2.If this value is under 1.0 then the mouse wheel operation is inversed. If this value is 1.0 then the mouse wheel is disabled.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.SketchDistance">
            <summary>
            Get/Set the Distance in drawing units that will be used as default value for the sketch command.
            </summary>
            <remarks>
            Default value is 0.1 drawing units.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ActionScaleMode">
            <summary>
            Get/Set the way that user scale action is applied, when user run the CmdScale or CmdInsert commands
            </summary>
            <remarks>
            Default value is <see cref="F:VectorDraw.Professional.CommandActions.ActionGetTranfromSelection.ScaleModeFlag.Default"/>.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.FilletRadius">
            <summary>
            Get/Set the Distance in drawing units that will be used as default value for the FilletRadius command.
            </summary>
            <remarks>
            Default value is 0.0 drawing units.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.OffsetDistance">
            <summary>
            Get/Set the Distance in drawing units that will be used as default value for the Offset command.
            </summary>
            <remarks>
            Default value is 0.1 drawing units.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.CloudDistance">
            <summary>
            Get/Set the Distance in drawing units that will be used as default value for the Cloud command.
            </summary>
            <remarks>
            Default value is 1.0 drawing units.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ChamferSettings">
            <summary>
            Get/Set the default settings used in chamfer command. These values change as the user use the cmdChamfer command.
            </summary>
            <seealso cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdChamfer(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Boolean)"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.EdgeExtendTrim">
            <summary>
            Get/Set the default settings used in Extend and Trim command. These values change as the user use the cmdTrim and cmdExtend command. If this is True then the trim or extend is applied using the extension of the bound entities
            </summary>
            <seealso cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdChamfer(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Boolean)"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ImageSaveJPGQuality">
            <summary>
            Get/Set the default image quality (0=lowest to 100=highest) when saving in a raster JPG image using the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.SaveAs(System.String,System.Drawing.Image)"/> method and the <see cref="T:VectorDraw.Professional.vdObjects.vdPrint"/> to export to image.
            </summary>
            <remarks>This property specifies the level of compression for an JPG image. The range of useful values for this is from 0 to 100. The lower the number specified, the higher the compression and therefore the lower the quality of the image. Zero would result in the lowest quality image and 100 the highest. Default values is 255 and the default GDI jpeg export is used.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ImageSaveSize">
            <summary>
            Get/Set the default image size (height pixels) when saving in a raster image(BMP,EMF etc...) using the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.SaveAs(System.String,System.Drawing.Image)"/> method.
            </summary>
            <remarks>Default size:768 height in pixels. The width is automatically calculated according to the aspect ratio of the control window.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.GripBlock">
            <summary>
            Get/Set a <see cref="T:VectorDraw.Professional.vdObjects.vdDocument.VdConstGripBlock"/> value that controls the display of the grips of the vdInsert object.
            </summary>
            <remarks>
            Default value is <see cref="F:VectorDraw.Professional.vdObjects.vdDocument.VdConstGripBlock.GripSTANDARD"/>
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.GripSnap">
            <summary>
            Get/Set a value representing if the mouse is locked in the center of the grip rectangle when the mouse pointer enters the grip rectangle.
            </summary>
            <remarks>Default value:true.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.GripMoveInVisibleTypes">
            <summary>
            Get/Set a string value representing the entity type names for which the original position will be invisible while moving grip points.
            </summary>
            <remarks>
            Default value is empty string and the original position of all entities are visible while moving grip points. </remarks>
            <remarks>Set it to string value 'all' in order all entities original position to be invisible while moving grip points -or- </remarks>
            <remarks>a string with type names separated by comma like 'vdLine,vdCircle,MyCustomFigure' in order the original position for specific types to be invisible while moving grip points.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.CommandAction">
            <summary>
            Get the <see cref="T:VectorDraw.Professional.ActionUtilities.vdCommandAction"/> object of the document.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveActionControl">
            <summary>
            
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ActionControl">
            <summary>
            Get/Set the Control window associated with the document object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.Openflags">
            <summary>
            Get/Set the <see cref="T:VectorDraw.Professional.vdObjects.vdDocument.OpenFlagsEnum"/> when opening a file to the document.
            </summary>
            <remarks>
            Default value is <see cref="F:VectorDraw.Professional.vdObjects.vdDocument.OpenFlagsEnum.None"/>
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.GlobalRenderProperties">
            <summary>
            Get the <see cref="T:VectorDraw.Render.vdRenderGlobalProperties"/> object of the document.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.IsModified">
            <summary>
            Get/Set if a document is modified.
            </summary>
            <remarks>
            By default this value is set to true if a property is added into the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.UndoHistory"/>
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.HandleCurrent">
            <summary>
            Returns the last handle id used from the document.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.KeepAttributeHeight">
            <summary>
            Get/Set a value representing if an attribute inserted to a scaled block will get the tranformation of the insert or will keep it's height.
            </summary>
            <remarks>Default value : false.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.EnableFullCircleArc">
            <summary>
            Get/Set a static value representing if a vdArc object that has equal start and end angle it will be drawn as vdCircle.
            </summary>
            <remarks>Default value : false</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.DisableShowPrinterPaper">
            <summary>
            Get/Set if the default paper printer will be drawn at the active layout.
            </summary>
            <remarks>Default value :false(the printer paper will be drawn).</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.IgnoreLockLayers">
            <summary>
            Get/Set a value representing if the lock layers are taken into consideration.
            </summary>
            <remarks>Default value:false.If true then osnaps,tooltips,selection of objects belonging to locked layers are ignored.</remarks>
            <remarks>Property is not saved inside the drawing and it is not added in the undo history.</remarks>
            <remarks>We kept this property for backward compatibility, it is strongly recommended to use <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethod"/> instead.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethod">
            <summary>
            Get/Set a <see cref="T:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum"/> value representing how entities in Lock layers are used in methods.
            </summary>
            <remarks>Default value is <see cref="F:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum.Default"/> which prevents entities in lock layers to be added in selections.</remarks>
            <remarks>Property is not saved by the drawing and not added in the undo history.
            </remarks>
            <example>
            <para>Making a drawing to be read-only.</para>
            <code>
                            doc.UndoHistory.PushEnable(false);//do not write the following commands in to undo history so they can not be undone later
                            foreach (vdLayer layer in doc.Layers)
                            {
                                layer.Lock = true;
                            }
                            doc.LockLayerMethod = vdDocument.LockLayerMethodEnum.DisableAll;
                            doc.UndoHistory.PopEnable();
            </code>
            </example>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodStack">
            <summary>
            A stack for using push,pop to modify the LockLayerMethod.
            </summary>
            <remarks>Every Push must be followed by a Pop.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.DisableXrefToolTips">
            <summary>
            Get/Set a boolean value representing if the objects that belong to external references of the document will show their tooltip.
            </summary>
            <remarks>Default value is true.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.EnableToolTips">
            <summary>
            Get/Set a value representing if the tooltips of the objects will be shown.
            </summary>
            <remarks>
            Default value :true.</remarks>
            <remarks>If the value is true and no user action is active then by moving the cursor over entities VectorDraw searches for ToolTips and display them using the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ToolTipDispProps"/>.
            </remarks>
            <seealso cref="P:VectorDraw.Professional.vdObjects.vdDocument.EnableToolTips"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.EnableAutoGripOn">
            <summary>
            A boolean value representing if the mouse click will show the grips of the entities and also if the window Select command will start when the user click's  to the control and there is no Entity below.
            </summary>
            <remarks>Default value is true.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.EnableUrls">
            <summary>
            Get/Set a value representing if the URL of the objects will be opened.
            </summary>
            <remarks>
            Default value is true.</remarks>
            <remarks>If the value is true and no user action is active then by moving the cursor over entities VectorDraw searches for Urls assign with an entity and display a hand cursor so by Left-clicking the mouse with <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.UrlActionKey"/> the URL executed.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.UrlActionKey">
            <summary>
            Get/Set a <see cref="T:System.Windows.Forms.Keys"/> value used in combination with mouse-down to execute the URL.
            </summary>
            <remarks>Default value <see cref="F:System.Windows.Forms.Keys.Control"/>.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.PanMouseButton">
            <summary>
            Get/Set a Mouse Button value To start the pan action.
            </summary>
            <remarks>
            Using this property you can choose between Middle , XButton1 , XButton2 mouse buttons to start the pan action at the default VectorDraw implementation.</remarks>
            <remarks>Default Mouse Button value is Middle.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.SelectionPreviewUpKey">
            <summary>
            Get/Set a keyboard key value , used to circle through highlighted entities.
            </summary>
            <remarks>Default value is the up arrow.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.SelectionPreviewDownKey">
            <summary>
            Get/Set a keyboard key value , used to circle through highlighted entities.
            </summary>
            <remarks>Default value is the down arrow.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.OrbitActionKey">
            <summary>
            Get/Set a combination of a key stroke and a mouse button value of type <see cref="T:VectorDraw.Professional.vdObjects.vdDocument.KeyWithMouseStroke"/> , used to begin a 3d orbit command.
            </summary>
            <remarks>Default value <see cref="F:VectorDraw.Professional.vdObjects.vdDocument.KeyWithMouseStroke.AltLeft"/>.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.OsnapDialogKey">
            <summary>
            Get/Set a <see cref="T:System.Windows.Forms.Keys"/> value used in combination with right mouse-down to show the OsnapDialog.
            </summary>
            <remarks>
            Deafault value is <see cref="F:System.Windows.Forms.Keys.Control"/>
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.WalkThroughKeys">
            <summary>
            Get/Set a <see cref="T:VectorDraw.Professional.vdObjects.vdDocument.WalkThroughKeysClass"/> class which contains the keys used for Walkthrough action.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ShowUCSAxis">
            <summary>
            Get/Set a value representing if the axis for all layouts or viewports will be drawn.
            </summary>
            <remarks>
            Default value is true.</remarks>
            <remarks>The axis are represent the the active User Coordinate System <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.World2UserMatrix"/>
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.FileProperties">
            <summary>
            Get the <see cref="T:VectorDraw.Professional.vdObjects.vdFileProperties"/> object of the document.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.PrimaryCount">
            <summary>
            Get the number of all vdPrimary objects of the document.
            </summary>
            <remarks>
            All vdPrimary objects are:Layers,TextStyles,DimStyles,LayOuts,Images,HatchPatterns,LineTypes,Lights,Model.Entities, entities of all blocks,all entities of all layouts.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.MeterProgress">
            <summary>
            Get the <see cref="T:VectorDraw.Professional.Utilities.ProgressMeter"/> object of the document.
            </summary>
            <example>
            <para>Using MeterProgress while enumurating inside entities collection.</para>
            <code>
                            doc.MeterProgress.start("Searching...", doc.Model.Entities.Count);
                            foreach (vdFigure fig in doc.Model.Entities)
                            {
                                doc.MeterProgress.Progress();
                                //do something with fig entity.....
                            }
                            doc.MeterProgress.stop();
            </code>
            </example>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ActionUtility">
            <summary>
            Get the Action <see cref="T:VectorDraw.Professional.ActionUtility.Utility"/> of the active layout of the document.Used to beging some common user actions.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.Activator">
            <summary>
            Get the <see cref="T:VectorDraw.Serialize.Activator"/> that creates all object types of the document.Used to add new custom object types.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveRender">
            <summary>
            Get the <see cref="T:VectorDraw.Render.vdRender"/> object where the document will be rendered.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveActionRender">
            <summary>
            Get the <see cref="T:VectorDraw.Render.vdRender"/> object where the active BaseAction object is rendered.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.FreezeGridEvents">
            <summary>
            Get/Set a value that represents if the vdPropertyGrid control events are going to be fired.Default value is True and events are not fired.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.FreezeModifyEvents">
            <summary>
            A stack to enable/disable using push,pop the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterAddItem"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAddItem"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnEraseObject"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/>, <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/>  events.
            </summary>
            <remarks>Default value on the top of the stack is true , so the above events are by default disabled.</remarks>
            <remarks>In order to enable the above events use the following code: <c>FreezeModifyEvents.Push(false);</c>
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.FreezeEntityDrawEvents">
            <summary>
            A stack to enable/disable using push,pop the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnDrawFigure"/> , <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnDrawAfterFigure"/> , <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.GetDimensionText"/> , <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnFigureDrawGrips"/> events.
            </summary>
            <remarks>Default value on the top of the stack is true , so the above events are by default disabled.</remarks>
            <remarks>In order to enable the above events use the following code: <c>FreezeEntityDrawEvents.Push(false);</c>
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ExternalReferences">
            <summary>
            Get the <see cref="T:VectorDraw.Professional.vdCollections.vdDocuments"/> collection containing all External References of the Document.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.Xrefs">
            <summary>
            Get a collection of Documents containing all External References of the Document.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.IsTopMostDocumet">
            <summary>
            Returns true if this document object is reference equal to <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.TopMostDocumet"/>
            </summary>
            <remarks>
            An External reference drawing is not TopMostDocument.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.Document">
            <summary>
            Gets the vdDocument that the object belongs.
            </summary>
            <seealso cref="M:VectorDraw.Professional.vdObjects.vdBaseObject.SetUnRegisterDocument(VectorDraw.Professional.vdObjects.vdDocument)"/>
            <remarks>
            The object gets a vdDocument when is added in any collection of it.</remarks>
            <remarks>Once an Object gets a Document this cannot be changed.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.TopMostDocumet">
            <summary>
            Gets the vdDocument that this object belongs to.
            </summary>
            <remarks>
            An External reference drawing is not TopMostDocument.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.Selections">
            <summary>
            Get the <see cref="T:VectorDraw.Professional.vdCollections.vdSelections"/> collection of the document.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.OsnapModePreserve">
            <summary>
            Get/set a boolean value that represents the behaviour of the osnapmode.
            </summary>
            <remarks>
            Default value = FALSE.</remarks>
            <remarks>If this value is FALSE: If a user executes a command (e.g. cmdLine) and during this command changes the OsnapMode* (add Center Osnap) and clicks a point then the OsnapMode will return to the initial value that the command started.</remarks>
            <remarks>If this value is TRUE : If the user executes a command (e.g. cmdLine) and during this command changes the OsnapMode*, this change will stay and will not be modified.</remarks>
            <remarks>Please note that .end (.cen .nea ... etc) commands at the CommandLine override the existing OsnapMode for the current Action and the OsnapMode is returned to its initial value after the current action no matter the value of this flag.</remarks>
            <remarks>* The OsnapMode can change through the Osnap dialog and also by code(developer).
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.OsnapModeVisibilty">
            <summary>
            Get/set the osnaps that will excluded if they are not visible in 3d.
            </summary>
            <remarks>
            Default value is OsnapMode.None, none osnaps are excluded. </remarks>
            <remarks>You can control the depth compare equality by the <see cref="F:VectorDraw.Geometry.Globals.DefaultDepthRangeEquality"/>
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.osnapMode">
            <summary>
            Get/set the active object <see cref="T:VectorDraw.Geometry.OsnapMode"/> type snap modes.
            </summary>
            <remarks>
            Default value is <see cref="F:VectorDraw.Geometry.OsnapMode.NONE"/></remarks>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.OsnapCrossPointsAddvalue">
            <summary>
            Represents a value that controls if the extra cross-help type of OsnapPoints will be added.
            </summary>
            <remarks>
            For example if the center value is present, then when the Center Osnap is light on and the cursor passes from a vdCircle object then a small circle will appear to the center of the circle. </remarks>
            <remarks>This small cross will help the user to select the center of the circle when he moves the cursor close to that point. In the other case 
            the only way to get the center Osnap point will be to have the cursor over the vdCircle object.</remarks>
            <remarks>   </remarks>
            <remarks>This property is not saved by the drawing and not added in the undo history.</remarks>
            <remarks>The value references a static field and applies with the same value to all <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> objects of the application.</remarks>
            <remarks>Default value is <see cref="F:VectorDraw.Geometry.OsnapPoints.OsnapCrossPointsAddenum.DEFAULT_ALL"/>.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.SupportPath">
            <summary>
            Get/Set the support path of the document.
            </summary>
            <remarks>
            Specifies the directories in which VectorDraw searches for files when using methods for drawings like insert, file open, images attach, xref, font files and FindFile method of vdUtility.
            After setting this value, call the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Update"/> method in order the file paths to be recalculated.</remarks>
            <remarks>The value is reference to a static field and applies with the same value to all <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> objects of the application.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.FileName">
            <summary>
            Get/Set the filename of the file opened to the document.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.Version">
            <summary>
            Get/Set the version of the file opened to the document.
            </summary>
            <remarks>
            The version can also be found to the FileProperties object.
            </remarks>
            <seealso cref="P:VectorDraw.Professional.vdObjects.vdFileProperties.ExternalFileVersion"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.Angdir">
            <summary>
            Get/Set the <see cref="T:VectorDraw.Professional.Constants.VdConstAngDir"/> type for angle direction.
            </summary>
            <remarks>
            This value is used when displaying angular object  properties or when parsing user input.</remarks>
            <remarks>Default value <see cref="F:VectorDraw.Professional.Constants.VdConstAngDir.COUNTER_CLOCKWISE"/>.</remarks>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.AngBase">
            <summary>
            Returns and sets where the direction start angle is in radians.
            </summary>
            <remarks>
            This value is used when displaying angular object  properties or when parsing user input.
            Valid Values are from 0 to 2*Pi in Radians and default value is 0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <seealso cref="P:VectorDraw.Professional.vdObjects.vdDocument.Angdir"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.lunits">
            <summary>
            Get/Set the <see cref="T:VectorDraw.Geometry.LUnits"/> linear units used to the document.
            </summary>
            <remarks>
            This value is used when displaying linear distance object  properties or when parsing user input.</remarks>
            <remarks>Default value : lu_Decimal.</remarks>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <seealso cref="P:VectorDraw.Professional.vdObjects.vdDocument.aunits"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.aunits">
            <summary>
            Get/Set the <see cref="T:VectorDraw.Geometry.AUnits"/> angular units used to the document.
            </summary>
            <remarks>
            This value is used when displaying angular object  properties or when parsing user input.
            Default value:au_Degrees.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <seealso cref="P:VectorDraw.Professional.vdObjects.vdDocument.lunits"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.MirrorText">
            <summary>
            Controls how the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdMirror(System.Object,System.Object,System.Object,System.Object)"/> command reflects <see cref="T:VectorDraw.Professional.vdFigures.vdText"/> entity.
            </summary>
            <remarks>
            Default value : true.</remarks>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.UserTables">
            <summary>
            Get the user defined table collection. Used to store application specific user data as <see cref="T:VectorDraw.Professional.vdCollections.vdXProperties"/>
            </summary>
            <remarks>
            <para>You can set user value properties to any of the following type values: </para>
            <para>   String Double Int32 Boolean Byte Int16 Int64 UInt16 UInt64 UInt32 Single ushort Enum System.Color VectorDraw.Serialize.IVDHandle
            or any object that implents IVDSerialise interface like default VectorDraw objects(vdFigure , vdPrimary , ByteArray , DoubleArray gPoint gPoints etc.)
            </para>
            <para>By default the collection is empty.</para>
            <para>The object is saved with vdml / vdcl format</para>
            <para>Undo is not supported for VectorDraw.Professional.Table.vdTables object.</para>
            </remarks>
            <example> 
            <code>
                            //group some user property values
                            int Int_value = 1;
                            double double_value = 1.0d;
                            string string_value = "some string data";
                            ByteArray bytearray_value = new ByteArray(new byte[] { 1, 2, 3, 4 });
                            gPoint gpoint_value = new gPoint(1, 2, 3);
                            gPoints gpoints_value = new gPoints(new gPoint[] { new gPoint(1, 2, 3), new gPoint(4, 5, 6) });
            
                            doc.UserTables["Table1"]["Table1_GroupProperties1"]["Integer_Property"] = Int_value;
                            doc.UserTables["Table1"]["Table1_GroupProperties1"]["Double_Property"] = double_value;
                            doc.UserTables["Table1"]["Table1_GroupProperties1"]["String_Property"] = string_value;
                            doc.UserTables["Table1"]["Table1_GroupProperties1"]["ByteArray_Property"] = bytearray_value;
            
                            doc.UserTables["Table2"]["Table2_GroupProperties1"]["gpoint_value"] = gpoint_value;
                            doc.UserTables["Table2"]["Table2_GroupProperties2"]["gpoints_value"] = gpoints_value;
                            
                            //read the user property values that stored before
                            Int_value = (int)doc.UserTables["Table1"]["Table1_GroupProperties1"]["Integer_Property"];
            
                            double_value = (double)doc.UserTables["Table1"]["Table1_GroupProperties1"]["Double_Property"] ;
                            string_value = (string)doc.UserTables["Table1"]["Table1_GroupProperties1"]["String_Property"];
                            bytearray_value = (ByteArray)doc.UserTables["Table1"]["Table1_GroupProperties1"]["ByteArray_Property"];
            
                            gpoint_value = (gPoint)doc.UserTables["Table2"]["Table2_GroupProperties1"]["gpoint_value"];
                            gpoints_value = (gPoints) doc.UserTables["Table2"]["Table2_GroupProperties2"]["gpoints_value"];
            </code>
            </example>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.LineTypes">
            <summary>
            Get the <see cref="T:VectorDraw.Professional.vdCollections.vdLineTypes"/> collection of the document.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.Images">
            <summary>
            Get the <see cref="T:VectorDraw.Professional.vdCollections.vdImages"/> collection of the document that contains all Images used by this vdDocument object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.Palette">
            <summary>
            Get the <see cref="T:VectorDraw.Professional.vdObjects.vdPalette"/> collection of standard colors for the document.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.HatchPatterns">
            <summary>
            Get the <see cref="T:VectorDraw.Professional.vdCollections.vdHatchPatterns"/> of hatch patterns of the document.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.MultilineStyles">
            <summary>
            Get the MultiLines collection of the document.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.Layers">
            <summary>
            Get the layers collection of the document.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.Blocks">
            <summary>
            Get the <see cref="T:VectorDraw.Professional.vdCollections.vdBlocks"/> collection of the document.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.Groups">
            <summary>
            Get the <see cref="T:VectorDraw.Professional.vdCollections.vdGroups"/> collection of the document.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.NamedUCSs">
            <summary>
            Get the <see cref="T:VectorDraw.Professional.vdCollections.vdNamedUCSs"/> collection of the document.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.Views">
            <summary>
            Get the <see cref="T:VectorDraw.Professional.vdCollections.vdViews"/> collection of the document.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.TextStyles">
            <summary>
            Get the <see cref="T:VectorDraw.Professional.vdCollections.vdTextstyles"/> collection of the document.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.DimStyles">
            <summary>
            Get the <see cref="T:VectorDraw.Professional.vdCollections.vdDimstyles"/> collection of the document.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.LayOuts">
            <summary>
            Get the <see cref="T:VectorDraw.Professional.vdCollections.vdLayouts"/> collection of the document.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.Lights">
            <summary>
            Get the <see cref="T:VectorDraw.Professional.vdCollections.vdLights"/> collection of the document.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ProxyClasses">
            <summary>
            Gets <see cref="T:VectorDraw.Professional.vdCollections.vdProxyClasses"/> collection of the document used for custom objects.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLineType">
            <summary>
            Get/Set the active <see cref="T:VectorDraw.Professional.vdPrimaries.vdLineType"/> of the document.
            </summary>
            <remarks>
            <para>This property is used when <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.setDocumentDefaults"/> is called.</para>
            <para>Default value:null.</para>
            <para>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and  the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.</para>
            </remarks>
            <example> 
            <para>Changes the ActiveLineType and create a new vdLine that reference to this linetype.</para>
            <code>
                            //create a new vdLineType with name "MyNewLineType" and make it as active.
                            vdLineType linetype = doc.LineTypes.Add("MyNewLineType");
                            doc.ActiveLineType = linetype;
                            //create a new line entitity
                            vdLine line = new vdLine();
                            //select the document that the line is reference to.
                            line.SetUnRegisterDocument(doc);
                            //select the default active properties of the document object for the entity
                            line.setDocumentDefaults();
                            Console.WriteLine(line.LineType.Name);//the output will be "MyNewLineType"
            </code>
            </example>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.EnableActiveLayerFrozen">
            <summary>
            Get/Set a boolean value representing if the active layer ocan be Frozen.
            </summary>
            <remarks>
            <para>Default value : false</para>
            <para>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.</para>
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveMultiLineStyle">
            <summary>
            Get/Set the active <see cref="T:VectorDraw.Professional.vdPrimaries.vdMultilineStyle"/> of the document.
            </summary>
            <remarks>
            <para>This property is used when <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.setDocumentDefaults"/> is called.</para>
            <para>Default value : null</para>
            <para>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.</para>
            </remarks>
            <exception cref="T:VectorDraw.Professional.Exceptions.InvalidPropertyValueException">
            When setting to a multiline style that does not exist in the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.MultilineStyles"/> collection
            </exception>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayer">
            <summary>
            Get/Set the active <see cref="T:VectorDraw.Professional.vdPrimaries.vdLayer"/> of the document.
            </summary>
            <remarks>
            <para>This property is used when <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.setDocumentDefaults"/> is called.</para>
            <para>Default value:null.</para>
            <para>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.</para>
            </remarks>
            <exception cref="T:VectorDraw.Professional.Exceptions.InvalidPropertyValueException">When setting to a layer that does not exist in the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.Layers"/> collection
            or <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.EnableActiveLayerFrozen"/> is false and setting to a layer that is Frozen.
            </exception>
            <example> 
            <para>Changes the ActiveLayer and create a new vdLine that reference to this layer.</para>
            <code>
                            //create a new vdLayer with name "MyNewLayer" and make it as active.
                            vdLayer layer = doc.Layers.Add("MyNewLayer");
                            doc.ActiveLayer = layer;
                            //create a new line entitity
                            vdLine line = new vdLine();
                            //select the document that the line is reference to.
                            line.SetUnRegisterDocument(doc);
                            //select the default active properties of the document object for the entity
                            line.setDocumentDefaults();
                            Console.WriteLine(line.Layer.Name);//the output will be "MyNewLayer"
            </code>
            </example>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveDimStyle">
            <summary>
            Get/Set the active <see cref="T:VectorDraw.Professional.vdPrimaries.vdDimstyle"/> of the document.
            </summary>
            <remarks>
            <para>This property is used when <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.setDocumentDefaults"/> is called.</para>
            <para>Default value <see cref="P:VectorDraw.Professional.vdCollections.vdDimstyles.Standard"/></para>
            <para>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.</para>
            </remarks>
            <example> 
            <para>Changes the ActiveDimStyle and create a new vdDimension that reference to this style.</para>
            <code>
                            //create a new dimension style with name "MyNewDimStyle" and make it as active.
                            vdDimstyle dimstyle = doc.DimStyles.Add("MyNewDimStyle");
                            doc.ActiveDimStyle = dimstyle;
                            //create a new dimension entitity
                            vdDimension dim = new vdDimension();
                            //select the document that the dimension is reference to.
                            dim.SetUnRegisterDocument(doc);
                            //select the default active properties of the document object for the entity
                            dim.setDocumentDefaults();
                            Console.WriteLine(dim.Style.Name);//the output will be "MyNewDimStyle"
            </code>
            </example>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveTextStyle">
            <summary>
            Get/Set the active <see cref="T:VectorDraw.Professional.vdPrimaries.vdTextstyle"/> of the document.
            </summary>
            <remarks>
            <para>This property is used when <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.setDocumentDefaults"/> is called.</para>
            <para>Default value:  <see cref="P:VectorDraw.Professional.vdCollections.vdTextstyles.Standard"/></para>
            <para>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.</para>
            </remarks>
            <example>
            <para>Changes the ActiveTextStyle and create a new vdText that reference to this style.</para>
            <code>
                            //create a new text style with name "MyNewTextStyle" and make it as active.
                            vdTextstyle texttyle = doc.TextStyles.Add("MyNewTextStyle");
                            doc.ActiveTextStyle = texttyle;
                            //create a new text entitity
                            vdText txt = new vdText();
                            //select the document that the text is reference to.
                            txt.SetUnRegisterDocument(doc);
                            //select the default active properties of the document object for the entity
                            txt.setDocumentDefaults();
                            Console.WriteLine(txt.Style.Name);//the output will be "MyNewTextStyle"
            </code>
            </example>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ActivePenColor">
            <summary>
            Get/Set the <see cref="T:VectorDraw.Professional.vdObjects.vdColor"/> pen color of the document.
            </summary>
            <remarks>
            <para>This property is used when <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.setDocumentDefaults"/> is called.</para>
            <para>Default value: <see cref="P:VectorDraw.Professional.vdObjects.vdColor.ByLayer"/></para>
            <para>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.</para>
            </remarks>
            <example>
            <para>Changes the ActivePenColor and create a new vdLine that get this color.</para>
            <code>
                            //change the active color of document to red true color value.
                            doc.ActivePenColor = new vdColor(Color.Red);
                            //create a new vdLine entity
                            vdLine line = new vdLine();
                            //select the document that the text is reference to.
                            line.SetUnRegisterDocument(doc);
                            //select the default active properties of the document object for the entity
                            line.setDocumentDefaults();
                            Console.WriteLine(line.PenColor.ToString());//the output will be : (255,0,0)
            </code>
            </example>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLineWeight">
            <summary>
            Get/Set the active <see cref="T:VectorDraw.Professional.Constants.VdConstLineWeight"/> of the document.
            </summary>
            <remarks>
            <para>This property is used when <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.setDocumentDefaults"/> is called.</para>
            <para>Default value: <see cref="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_BYLAYER"/>.</para>
            <para>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> even and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.</para>
            </remarks>
            <example>
            <para>Changes the ActiveLineWeight and create a new vdLine that get this property.</para>
            <code>
                            //change the ActiveLineWeight of document to be 2 mm wide.
                            doc.ActiveLineWeight = VectorDraw.Professional.Constants.VdConstLineWeight.LW_200;
                            //create a new vdLine entity
                            vdLine line = new vdLine();
                            //select the document that the text is reference to.
                            line.SetUnRegisterDocument(doc);
                            //select the default active properties of the document object for the entity
                            line.setDocumentDefaults();
                            Console.WriteLine(line.LineWeight);//the output will be : LW_200
            </code>
            </example>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ActivePenWidth">
            <summary>
            Get/Set the active penwidth of the document.
            </summary>
            <remarks>
            <para>This property is used when <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.setDocumentDefaults"/> is called.</para>
            <para>Default value:0.0.</para>
            <para>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and  the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.</para>
            </remarks>
            <example>
            <para>Changes the ActivePenWidth and create a new vdLine that get this property.</para>
            <code>
                            //change the ActivePenWidth of document to be 2 Drawing Units wide.
                            doc.ActivePenWidth = 2.0d;
                            //create a new vdLine entity
                            vdLine line = new vdLine();
                            //select the document that the text is reference to.
                            line.SetUnRegisterDocument(doc);
                            //select the default active properties of the document object for the entity
                            line.setDocumentDefaults();
                            Console.WriteLine(line.PenWidth);//the output will be : 2.0
            </code>
            </example>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveThickness">
            <summary>
            Get/Set the active thickness of the document.
            </summary>
            <remarks>
            <para>This property is used when <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.setDocumentDefaults"/> is called.</para>
            <para>Default value: 0.0</para>
            <para>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.</para>
            </remarks>
            <example>
            <para>Changes the ActiveThickness and create a new vdLine that get this property.</para>
            <code>
                            //change the ActiveThickness of document to be 2 Drawing Units .
                            doc.ActiveThickness = 2.0d;
                            //create a new vdLine entity
                            vdLine line = new vdLine();
                            //select the document that the text is reference to.
                            line.SetUnRegisterDocument(doc);
                            //select the default active properties of the document object for the entity
                            line.setDocumentDefaults();
                            Console.WriteLine(line.Thickness);//the output will be : 2.0
            </code>
            </example>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveHatchProperties">
            <summary>
            Get/Set the active <see cref="T:VectorDraw.Professional.vdObjects.vdHatchProperties"/> properties of the document.
            </summary>
            <remarks>
            <para>This property is used from <see cref="T:VectorDraw.Professional.vdPrimaries.vdFigure"/> objects that implement the <see cref="T:VectorDraw.Professional.vdObjects.IvdHatchFigure"/> interface (like <see cref="T:VectorDraw.Professional.vdFigures.vdArc"/> , <see cref="T:VectorDraw.Professional.vdFigures.vdCircle"/>, <see cref="T:VectorDraw.Professional.vdFigures.vdEllipse"/>, <see cref="T:VectorDraw.Professional.vdFigures.vdPolyline"/> , <see cref="T:VectorDraw.Professional.vdFigures.vdRect"/> , <see cref="T:VectorDraw.Professional.vdFigures.vdPolyhatch"/>).</para>
            <para>This property is used when <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.setDocumentDefaults"/> is called.</para>
            <para>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.</para>
            </remarks>
            <example>
            <para>Changes the ActiveHatchProperties to be filled with blue VdFillModeHatchDiagCross lines</para>
            <code>
                            vdHatchProperties hprops = new vdHatchProperties();
                            hprops.FillMode = VectorDraw.Professional.Constants.VdConstFill.VdFillModeHatchDiagCross;
                            hprops.FillColor = new vdColor(Color.Blue);
                            doc.ActiveHatchProperties = hprops;
                            //Create a new vdRect entity
                            vdRect rc = new vdRect();
                            //select the document that the text is reference to.
                            rc.SetUnRegisterDocument(doc);
                            //select the default active properties of the document object for the entity
                            rc.setDocumentDefaults();
                            Console.WriteLine(rc.HatchProperties.ToString());// output will be "VdFillModeHatchDiagCross"
            </code>
            </example>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.PointStyleMode">
            <summary>
            Get/Set the point style mode of the document used to draw a <see cref="T:VectorDraw.Professional.vdFigures.vdPoint"/> entity.
            </summary>
            <remarks>
            <para>Valid values are : 0 (draws a sigle dot), 1 (draws nothing), 2 (draws a cross), 3 (draws an X Mark) , 4 (draws a vertical line)</para>
            <para>Additionaly these values can be combined with value 32 (draws a circle) and or 64 (draws a rectangle)</para>
            <para>The size of drawing is depend by the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.PointStyleSize"/> property.</para>
            <para>Default value: 2 (draws a cross).</para>
            <para>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.</para>
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.PointStyleSize">
            <summary>
            Get/Set the point style size of the document used to draw <see cref="T:VectorDraw.Professional.vdFigures.vdPoint"/> entity.
            </summary>
            <remarks>
            <para>If the value is positive then represents the size in Drawing Units. </para>
            <para>If the value is negative then represents the percentage of active ViewSize. The value of -2 will draw points with size 2% of the active ViewSize.</para>
            <para>Default value: 0.2 Drawing Units.</para>
            <para>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event. </para>
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.LineTypeScale">
            <summary>
            Get/Set the active linetype scale of the document used to draw <see cref="T:VectorDraw.Professional.vdPrimaries.vdFigure"/> entities referenced to a <see cref="T:VectorDraw.Professional.vdPrimaries.vdLineType"/>.
            </summary>
            <remarks>
            <para>This value is multiply with a <see cref="P:VectorDraw.Professional.vdPrimaries.vdFigure.LineTypeScale"/></para>
            <para>Default value: 1.0</para>
            <para>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.</para>
            </remarks>
            <example>
            <see cref="T:VectorDraw.Professional.vdPrimaries.vdLineType"/>
            </example>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveTextHorJustify">
            <summary>
            Get/Set the active text <see cref="T:VectorDraw.Professional.Constants.VdConstHorJust"/> of the document.
            </summary>
            <remarks>
            <para>This property is used when <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.setDocumentDefaults"/> is called from <see cref="T:VectorDraw.Professional.vdFigures.vdText"/> and <see cref="T:VectorDraw.Professional.vdFigures.vdMText"/> entities.</para>
            <para>Default value: <see cref="F:VectorDraw.Professional.Constants.VdConstHorJust.VdTextHorLeft"/></para>
            <para>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.</para>
            </remarks>
            <example>
            <para>Changes the ActiveTextHorJustify and ActiveTextVerJustify to be VdConstVerJust.VdTextVerCen and VdConstVerJust.VdTextVerCen</para>
            <code>
                            doc.ActiveTextHorJustify = VectorDraw.Professional.Constants.VdConstHorJust.VdTextHorCenter;
                            doc.ActiveTextVerJustify = VectorDraw.Professional.Constants.VdConstVerJust.VdTextVerCen;
                            //Create a new vdText entity
                            vdText txt = new vdText();
                            //select the document that the text is reference to.
                            txt.SetUnRegisterDocument(doc);
                            //select the default active properties of the document object for the entity
                            txt.setDocumentDefaults();
                            txt.TextString = "CenterJustificationExample";
                            Console.WriteLine(txt.HorJustify.ToString() + "," + txt.VerJustify.ToString());// output will be "VdTextHorCenter,VdTextVerCen"
                            //add the text into default layout entities
                            doc.Model.Entities.AddItem(txt);
                            //Invalidates the object's Bounding Box and causes the rendering control window to be redrawn in this region.
                            txt.Invalidate();
            </code>
            </example>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveTextVerJustify">
            <summary>
            Get/Set the active text <see cref="T:VectorDraw.Professional.Constants.VdConstVerJust"/> of the document.
            </summary>
            <remarks>
            <para>This property is used when <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.setDocumentDefaults"/> is called from <see cref="T:VectorDraw.Professional.vdFigures.vdText"/> and <see cref="T:VectorDraw.Professional.vdFigures.vdMText"/> entities.</para>
            <para>Default value: <see cref="F:VectorDraw.Professional.Constants.VdConstVerJust.VdTextVerBaseLine"/> </para>
            <para>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.</para>
            </remarks>
            <example>
            <para>Changes the ActiveTextHorJustify and ActiveTextVerJustify to be VdConstVerJust.VdTextVerCen and VdConstVerJust.VdTextVerCen</para>
            <code>
                            doc.ActiveTextHorJustify = VectorDraw.Professional.Constants.VdConstHorJust.VdTextHorCenter;
                            doc.ActiveTextVerJustify = VectorDraw.Professional.Constants.VdConstVerJust.VdTextVerCen;
                            //Create a new vdText entity
                            vdText txt = new vdText();
                            //select the document that the text is reference to.
                            txt.SetUnRegisterDocument(doc);
                            //select the default active properties of the document object for the entity
                            txt.setDocumentDefaults();
                            txt.TextString = "CenterJustificationExample";
                            Console.WriteLine(txt.HorJustify.ToString() + "," + txt.VerJustify.ToString());// output will be "VdTextHorCenter,VdTextVerCen"
                            //add the text into default layout entities
                            doc.Model.Entities.AddItem(txt);
                            //Invalidates the object's Bounding Box and causes the rendering control window to be redrawn in this region.
                            txt.Invalidate();
            </code>
            </example>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.LineWeight">
            <summary>
            Get/Set the <see cref="T:VectorDraw.Professional.Constants.VdConstLineWeight"/> value of the document.
            This value is used when a <see cref="T:VectorDraw.Professional.vdPrimaries.vdFigure"/> object has <see cref="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_DOCUMENTDEFAULT"/> as lineweight.
            </summary>
            <remarks>
            <para>Default value: <see cref="F:VectorDraw.Professional.Constants.VdConstLineWeight.LW_0"/> </para>
            <para>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.</para>
            </remarks>
            <seealso cref="P:VectorDraw.Professional.vdObjects.vdDocument.LineWeightDisplay"/>
            <seealso cref="P:VectorDraw.Professional.vdPrimaries.vdFigure.LineWeight"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.LineWeightDisplay">
            <summary>
            Get/Set a boolean value representing if the line weights of the objects will be displayed or not.
            </summary>
            <remarks>
            <para>Default value : true</para>
            <para>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.</para>
            </remarks>
            <seealso cref="P:VectorDraw.Professional.vdObjects.vdDocument.LineWeight"/>
            <seealso cref="P:VectorDraw.Professional.vdPrimaries.vdFigure.LineWeight"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.Model">
            <summary>
            Get the model which is the default <see cref="T:VectorDraw.Professional.vdPrimaries.vdLayout"/> of the document.
            </summary>
            <remarks>
            Model is the default layout in which generally a drawing is creating.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut">
            <summary>
            Get/Set the active layout(model or a layout) of the document.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveView">
            <summary>
            Get/Set the active <see cref="T:VectorDraw.Professional.vdPrimaries.vdView"/> for the document.
            </summary>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ToolTipDispProps">
            <summary>
            Get the ToolTip window dispaly properties as <see cref="T:VectorDraw.Professional.Actions.ToolTipDisplayProps"/> type.
            </summary>
            <remarks>
            The value is reference to a static field and applies with the same value to all <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> objects of the application.
            </remarks>
            <seealso cref="P:VectorDraw.Professional.vdObjects.vdDocument.EnableToolTips"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.PolarTrackDispProps">
            <summary>
            Get the PolarTrack tooltip window display properties as <see cref="T:VectorDraw.Professional.Actions.ToolTipDisplayProps"/>.
            </summary>
            <remarks>
            The value is reference to a static field and applies with the same value to all <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> objects of the application.
            </remarks>
            <seealso cref="P:VectorDraw.Professional.vdObjects.vdDocument.PolarTrack"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.RenderMode">
            <summary>
            Get/Set the <see cref="T:VectorDraw.Render.vdRender.Mode"/> render mode of the active viewport(if exist) or the active layout(model or a layout) of the document.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ViewSize">
            <summary>
            Get/Set the viewsize in Drawing Units of the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/> (model or a layout) of the document or the <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.ActiveViewPort"/> (if exist) of active layout.
            </summary>
            <remarks>It is the dy (in drawing units) of lower and upper left corner of VectorDraw View Window.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ColorPalette">
            <summary>
             Get/Set the output Color palette  of <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.ActiveViewPort"/> (if exist) or the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/> (model or a layout)
            </summary>
            <remarks>
            <para>Deafault value <see cref="F:VectorDraw.Render.vdRender.ColorDisplay.TrueColor"/></para>
            <para>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.</para>
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.EdgeColor">
            <summary>
            Get/Set the display color for edges of all faces when rendering in 3d.(when RenderMode is Wire3d ,Hide or ShadeOn)
            </summary>
            <remarks>
            Default value is Color.Empty and the edges keep their entity color.
            </remarks>
            <remarks>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ShowHidenEdges">
            <summary>
            Get/Set a boolean value representing if the edges of the 3dFace object will be shown.
            </summary>
            <remarks>
            <para>If this value is true then all edges of the 3dFace object will be shown ( even if they are invisible).</para>
            <para>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.</para>
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ViewCenter">
            <summary>
            Get/Set the coordinates of the center point of <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.ActiveViewPort"/> (if exist) or the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/> (model or a layout) in Display Coordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.World2ViewMatrix">
            <summary>
            Get/Set the <see cref="T:VectorDraw.Geometry.Matrix"/> used for transformations between World Coordinate System(WCS)
            and View Coordinate System(VCS) for <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.ActiveViewPort"/> (if exist) or <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/>.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.BasePoint">
            <summary>
            Get/Set the base point of the document.It is used when you insert a drawing in a document as a block.
            </summary>
            <remarks>
            <para>Used by <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdWriteBlock(System.Object,System.Object,System.Object)"/> , <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.DoDragDrop(System.Object,VectorDraw.Professional.vdCollections.vdSelection.DragDropEffects,System.Object,System.Int32,System.Int32,System.Int32)"/> when dropping files, <see cref="M:VectorDraw.Professional.vdCollections.vdBlocks.AddFromDocument(System.String,VectorDraw.Professional.vdObjects.vdDocument,System.Boolean)"/>, <see cref="M:VectorDraw.Professional.vdCollections.vdSelection.ToDocument(VectorDraw.Geometry.gPoint)"/>, <see cref="M:VectorDraw.Professional.vdPrimaries.vdBlock.ToDocument"/> methods.</para>
            <para>Default value (0.0, 0.0, 0.0).</para>
            <para>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.</para>
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.MouseElevation">
            <summary>
            Get/Set a value in Drawing Units used to add a Zvalue to mouse position relative to Current UCS.
            </summary>
            <remarks>
            This value is reference to ActiveViewport if exists -or- to ActiveLayout. 
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.World2PixelMatrix">
            <summary>
            Get the <see cref="T:VectorDraw.Geometry.Matrix"/> used for transformations between world coordinates into pixels of the <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.ActiveViewPort"/>(if exist) or the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/>(model or a layout).
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.View2PixelMatrix">
            <summary>
            Get the <see cref="T:VectorDraw.Geometry.Matrix"/> used for transformations between view coordinates into pixels of the <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.ActiveViewPort"/>(if exist) or the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/>(model or a layout).
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.Pixel2ViewMatrix">
            <summary>
            Get the <see cref="T:VectorDraw.Geometry.Matrix"/> used for transformations between pixels and view coordinates of the <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.ActiveViewPort"/>(if exist) or the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/>(model or a layout).
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.View2WorldMatrix">
            <summary>
            Get the <see cref="T:VectorDraw.Geometry.Matrix"/> used for transformations between view and world coordinates of the <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.ActiveViewPort"/>(if exist) or the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/>(model or a layout).
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.World2UserMatrix">
            <summary>
            Get the <see cref="T:VectorDraw.Geometry.Matrix"/> used for tranformations between world and user coordinate system of the <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.ActiveViewPort"/>(if exist) or the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/>(model or a layout).
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.User2WorldMatrix">
            <summary>
            Get the <see cref="T:VectorDraw.Geometry.Matrix"/> used for transformations between user and world coordinate system of the <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.ActiveViewPort"/>(if exist) or the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/>(model or a layout).
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.LastPoint">
            <summary>
            Get the last picked point, from user actions.
            </summary>
            <remarks>For example when drawing lines this property will keep the last point the user clicked.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.LensAngle">
            <summary>
            Get/Set lhe lens angle in degrees of the <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.ActiveViewPort"/>(if exist) or the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/>(model or a layout).
            </summary>
            <seealso cref="P:VectorDraw.Professional.vdObjects.vdDocument.PerspectiveMod"/>
            <seealso cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.LensAngle"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.FocalLength">
            <summary>
            Get/Set the focal length of the <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.ActiveViewPort"/> (if exist) or the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/>(model or a layout).
            </summary>
            <seealso cref="P:VectorDraw.Professional.vdObjects.vdDocument.PerspectiveMod"/>
            <seealso cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.FocalLength"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.PerspectiveMod">
            <summary>
            Get/Set the perspective mode as <see cref="T:VectorDraw.Render.vdRender.VdConstPerspectiveMod"/> of the <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.ActiveViewPort"/> (if exist) or the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/> (model or a layout).
            </summary>
            <remarks>When PerspectiveMod is on and View3D is other than Plan World you get a view like a photograph depenting of LensAngle and FocalLength Properties. To have correct results you must enable the perspective mode and then call the LookAt method.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.Limits">
            <summary>
            Get/Set the lower-left and upper-right limits of the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActionLayout"/> used for grid displaying in UCS as <see cref="T:VectorDraw.Geometry.Box"/> object type.
            </summary>
            <remarks>
            Limits are used whne drawing <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/> grid or from <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.Zoom(System.Object,System.Object,System.Object)"/> command when zooming "all" area of <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/>
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.OrthoMode">
            <summary>
            Get/Set the orthomode property of the document used when the <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.OverAllActiveAction"/> is waiting for a user point referenced by an other one. 
            If true Constrains cursor movement to the perpendicular.
            </summary>
            <see cref="M:VectorDraw.Professional.ActionUtility.Utility.getUserRefPoint(VectorDraw.Geometry.gPoint)"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.OrthoModeAxis">
            <summary>
            Defines the axis where the Ortho is limited on when <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.OrthoMode"/> is true.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.PolarTrackLock">
            <summary>
            Get/Set the polar track lock property .If true constrains cursor movement only to the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.PolarTrackAngle"/> direction.
            </summary>
            <remarks>
            <para>Default value false.</para>
            <para>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.</para>
            </remarks>
            <seealso cref="P:VectorDraw.Professional.vdObjects.vdDocument.PolarTrack"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.PolarTrackInfinityLineDraw">
            <summary>
            Get/Set the draw of the infinity line. If true the infinity line will be rendered.
            </summary>
            <remarks>
            <para>Default value True.</para>
            <para>Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event and the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.</para>
            </remarks>
            <seealso cref="P:VectorDraw.Professional.vdObjects.vdDocument.PolarTrack"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.PolarTrack">
            <summary>
            Enable/disable the polar track behaviour of the document.Also <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.PolarTrackAngle"/> must be specified.
            </summary>
            <seealso cref="P:VectorDraw.Professional.vdObjects.vdDocument.PolarTrackAngle"/>
            <seealso cref="P:VectorDraw.Professional.vdObjects.vdDocument.PolarTrackDispProps"/>
            <seealso cref="P:VectorDraw.Professional.vdObjects.vdDocument.PolarTrackLock"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.PolarTrackActionFlag">
            <summary>
            Get/Set additional flags that controls the PolarTrack with user actions.
            </summary>
            <remarks>
            Default value is <see cref="F:VectorDraw.Professional.Actions.PolarTrackActionFlags.None"/>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.PolarTrackAngle">
            <summary>
            Get/Set the polar track angle of the document in radians.
            </summary>
            <remarks>Default value : PI /2. If <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.PolarTrack"/> is true then as you move your cursor to specify points, and a user action is open 
            waiting a reference point, a dotted polar tracking line appears at the tracking angles you specified with 
            PolarTrackAngle property. Also A text tool tip display the polar coordinates.</remarks>
            <seealso cref="P:VectorDraw.Professional.vdObjects.vdDocument.PolarTrack"/>
            <seealso cref="P:VectorDraw.Professional.vdObjects.vdDocument.PolarTrackDispProps"/>
            <seealso cref="P:VectorDraw.Professional.vdObjects.vdDocument.PolarTrackLock"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.GridSpaceX">
            <summary>
            Get/Set the distance (dx) of the dots of the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/> grid in drawing units.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.GridSpaceY">
            <summary>
            Get/Set the distance (dy) of the dots of the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/> grid in drawing units.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.GridMode">
            <summary>
            Get/Set a boolean value that specifies if the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/> grid is drawn or not.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.GridStyle">
            <summary>
            Get/Set the <see cref="T:VectorDraw.Render.vdRender.GridDrawingStyle"/> style that used to draw the grid on the active <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/>.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.GridMeasure">
            <summary>
            
            Get the <see cref="T:VectorDraw.Professional.vdObjects.GridMeasured"/> object of the <see cref="P:VectorDraw.Professional.vdPrimaries.vdLayout.ActiveViewPort"/> (if exist) or the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/> (model or a layout).
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.SnapStyle">
            <summary>
            Get/Set the <see cref="T:VectorDraw.Render.vdRender.VdConstSnapStyle"/> style  that used to draw the grid on the active <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/>.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.SnapIso">
            <summary>
            Get/Set the <see cref="T:VectorDraw.Render.vdRender.VdConstSnapIso"/> style  that used to draw the grid on the active <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/>.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.SnapMode">
            <summary>
            Get/Set a value for active <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/> that enables/disables the cursor to move only over the grid dots.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.SnapSpaceX">
            <summary>
            Get/Set the snap distance (dx) in Drawing Units for the active <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/>.
            </summary>
            <seealso cref="P:VectorDraw.Professional.vdObjects.vdDocument.SnapMode"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.SnapSpaceY">
            <summary>
            Get/Set the snap distance (dy) in Drawing Units for the active <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/>.
            </summary>
            <seealso cref="P:VectorDraw.Professional.vdObjects.vdDocument.SnapMode"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.SnapAngle">
            <summary>
            Get/Set the snap and grid angle in radians for the active <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/>. Default value 0.0.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.SnapBase">
            <summary>
            Get/Set the snap and grid base point in World Coordinate System(WCS) for the active <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/>.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.FreezeActions">
            <summary>
            Get/Set a boolean value representing if the user actions are enabled or not.
            </summary>
            <remarks>Set this value to true in order to speed up the component if no user action is needed.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.FreezeActionsStack">
            <summary>
            A stack to enable/disable using push,pop the user actions.
            </summary>
            <remarks><para>Default value on the top of the stack is false , so the user actions by default are enable.</para>
            <para>In order to disable all user actions, use the following code: <c>FreezeActionsStack.Push(true);</c></para>
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ActionLayout">
            <summary>
            <para>Get the layout of the document that the user input actions is taking place.</para>
            <para>The action layout is either the <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.ActiveLayOut"/>(model or a layout) or the default <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.Model"/> layout if a <see cref="T:VectorDraw.Professional.vdFigures.vdViewport"/> is active in a layout.</para>
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ExplodeCustomObjectsOnSave">
            <summary>
            A boolean value that represents if custom objects will be exploded when saved in vdml/vdcl format.
            </summary>
            <remarks>
            <para>If this value is true then the <see cref="T:VectorDraw.Serialize.IvdProxyFigure"/> will be displayed as a group of its exploded entities if the dll that implements the does not exist</para>
            <para>Default value true.</para>
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.GroupGrips">
            <summary>
            Controls The behaviour of the grips when an entity belongs to a group.
            </summary>
            <see cref="T:VectorDraw.Professional.vdObjects.vdDocument.GroupGripsEnum"/> , <see cref="P:VectorDraw.Render.vdRenderGlobalProperties.GroupGripColor"/>
            <remarks>This is an application setting and is connected with a static private property.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ProjectionTrimExtend">
            <summary>
            This is a system variable (it is not saved with the Document) and controls how trim and extend commands work.Intersections between objects are controled by this variable.
            </summary>
            <remarks><see cref="T:VectorDraw.Professional.vdObjects.vdDocument.ProjectionTrimExtendEnum"/> , Default value is None.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.UndoHistory">
            <summary>
            Maintains the stack of redo and undo logs.
            </summary>
            <seealso cref="T:VectorDraw.Professional.UndoRedo.ModificationHistory"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.XrefUndo">
            <summary>
            Get/Set a boolean value representing if ExternalReferences documents uses this Document <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.UndoHistory"/> .
            </summary>
            <remarks>Default value is false.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ShowHatches">
            <summary>
            Get/Set a boolean value representing if the hatches of filled object will be shown.Default value is true.
            <seealso cref="P:VectorDraw.Render.vdRenderGlobalProperties.ShowHatches"/>
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.GroupGripsEnum">
            <summary>
            This enumeration is used to control the grips of the group of entities when an entity that belongs to a group is selected.
            </summary>
            <remarks>This option is available when VectorDraw default selecting is enabled.</remarks>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.GroupGripsEnum.AllEntities">
            <summary>
            Grip points from all entities of the group will be shown.Grips will act as they usually act at the entities.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.GroupGripsEnum.AllEntitiesTransformby">
            <summary>
            Grip points from all entities of the group will be shown.Grips will be Drown with <see cref="P:VectorDraw.Render.vdRenderGlobalProperties.GroupGripColor"/> color and they all move(transformby) the group.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.GroupGripsEnum.AllEntitiesTransformbyWithBoundingBox">
            <summary>
            Grip points from all entities of the group will be shown and also a BoundingBox of the Group.Grips and BoundingBox will be Drown with <see cref="P:VectorDraw.Render.vdRenderGlobalProperties.GroupGripColor"/> color and they all move(transformby) the group.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.PanMouseButtons">
            <summary>
            This enum is used in <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.PanMouseButton"/> property of vdDocument to control which Mouse button will be used to start the pan action at the default Vectordraw implementation.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.PanMouseButtons.Middle">
            <summary>
            Middle Mouse Button.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.PanMouseButtons.Left">
            <summary>
            Left Mouse Button.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.PanMouseButtons.XButton1">
            <summary>
            XButton1 Mouse Button.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.PanMouseButtons.XButton2">
            <summary>
            XButton2 Mouse Button.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.BlockStdLayerOperFlag">
            <summary>
             Controls the display of the  PenColor , LineType ,LineWeight of entities inside block  belongs in Layer 0.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.BlockStdLayerOperFlag.BlockLayer">
            <summary>
            Entity inside a block that belongs on Layer 0 and with PenColor , LineType ,LineWeight set Bylayer  , will finally get the  PenColor , LineType ,LineWeight of the layer of the block instance that belongs.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.BlockStdLayerOperFlag.BlockColor">
            <summary>
            Entity inside a block that belongs on Layer 0 and with PenColor set Bylayer , will finally get the  PenColor of the block instance and not the PenColor of the block's layer.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.BlockStdLayerOperFlag.BlockLineType">
            <summary>
            Entity inside a block that belongs on Layer 0 and with LineType set Bylayer , will finally get the  LineType of the block instance and not the LineType of the block's layer.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.BlockStdLayerOperFlag.BlockLineWeight">
            <summary>
            Entity inside a block that belongs on Layer 0 and with LineWeight set Bylayer , will finally get the  LineWeight of the block instance and not the LineWeight of the block's layer.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.BlockStdLayerOperFlag.Default">
            <summary>
            The default value which is a combination of <see cref="F:VectorDraw.Professional.vdObjects.vdDocument.BlockStdLayerOperFlag.BlockLayer"/> and <see cref="F:VectorDraw.Professional.vdObjects.vdDocument.BlockStdLayerOperFlag.BlockLineType"/> and <see cref="F:VectorDraw.Professional.vdObjects.vdDocument.BlockStdLayerOperFlag.BlockLineWeight"/>
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.BlockColorOperEnum">
            <summary>
            Controls the display of the color of entities inside block  belongs in Layer 0 and with it's color equals to ByLayer 
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.BlockColorOperEnum.BlockLayer">
            <summary>
            Entity inside a block with PenColor Bylayer that belongs on Layer 0 , will finally get the color of the layer of the block instance that belongs.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.BlockColorOperEnum.BlockColor">
            <summary>
            Entity inside a block with PenColor Bylayer that belongs on Layer 0 , will finally get the color of the block instance and not the color of the block's layer. 
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.InsUnitsEnum">
            <summary>
            Specifies a drawing-units value using for scaling inserted blocks from a drawing.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.InsUnitsEnum.Unspecified">
            <summary>
            Unit with no scale factor .
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.InsUnitsEnum.Inches">
            <summary>
            Unit with no scale factor 0.0254 to meters.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.InsUnitsEnum.Feet">
            <summary>
            Unit with no scale factor 0.3048 to meters.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.InsUnitsEnum.Miles">
            <summary>
            Unit with no scale factor 1609.3440 to meters.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.InsUnitsEnum.Millimeters">
            <summary>
            Unit with no scale factor 0.001 to meters.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.InsUnitsEnum.Centimeters">
            <summary>
            Unit with no scale factor 0.01 to meters.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.InsUnitsEnum.Meters">
            <summary>
            Unit with no scale factor 1 to meters.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.InsUnitsEnum.Kilometers">
            <summary>
            Unit with no scale factor 1000 to meters.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.InsUnitsEnum.Microinches">
            <summary>
            Unit with no scale factor 25.4e-9 to meters.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.InsUnitsEnum.Mils">
            <summary>
            Unit with no scale factor 25.4e-6 to meters.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.InsUnitsEnum.Yards">
            <summary>
            Unit with no scale factor 0.9144 to meters.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.InsUnitsEnum.Angstroms">
            <summary>
            Unit with no scale factor 1.0e-10 to meters.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.InsUnitsEnum.Nanometers">
            <summary>
            Unit with no scale factor 1.0e-9 to meters.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.InsUnitsEnum.Microns">
            <summary>
            Unit with no scale factor 1.0e-6 to meters.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.InsUnitsEnum.Decimeters">
            <summary>
            Unit with no scale factor 0.1 to meters.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.InsUnitsEnum.Dekameters">
            <summary>
            Unit with no scale factor 10 to meters.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.InsUnitsEnum.Hectometers">
            <summary>
            Unit with no scale factor 100 to meters.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.InsUnitsEnum.Gigameters">
            <summary>
            Unit with no scale factor 1.0e+10 to meters.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.InsUnitsEnum.Astronomical_Units">
            <summary>
            Unit with no scale factor 149.597871e+9 to meters.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.InsUnitsEnum.Light_Years">
            <summary>
            Unit with no scale factor 9.460730e+15 to meters.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.InsUnitsEnum.Parsecs">
            <summary>
            Unit with no scale factor 3.0856776e+16 to meters.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.VdConstGripBlock">
            <summary>
            Controls the display of the grips of vdInsert object.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.VdConstGripBlock.GripSTANDARD">
            <summary>
            Shows one(1) grip - the insertion point of vdInsert object (Default value).
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.VdConstGripBlock.GripALLENTITIES">
            <summary>
            Shows all grips of subentities of vdInsert object and the insertion point of vdInsert object .
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.VdConstGripBlock.GripBOUNDARY">
            <summary>
            Shows the boundary 8 grips and the insertion point of vdInsert object.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.VdConstGripBlock.GripAttrib">
            <summary>
            Shows the grip points of the vdAttribute objetcs and the insertion point of vdInsert object.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.OpenFlagsEnum">
            <summary>
            Recover flags when opening a file.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.OpenFlagsEnum.None">
            <summary>
            None action is commited.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.OpenFlagsEnum.RecoverDublicateHandles">
            <summary>
            Recovers duplicate handles of objects bye creating new ones.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.OpenFlagsEnum.RecoverTableNames">
            <summary>
            Recovers invalid table names by generating new unique names.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.OpenFlagsEnum.RecoverIncompleteSavedFiles">
            <summary>
            Allow Inclomplete saved vdml,vdcl files to be open with information until the exception was occured.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.OpenFlagsEnum.RecoverDublicateOwners">
            <summary>
            Bypass the <see cref="T:VectorDraw.Professional.Exceptions.ChangeOwnerException"/> by removing the entities from other collections
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.OpenFlagsEnum.RecoverTableAndHandles">
            <summary>
            Use both <see cref="F:VectorDraw.Professional.vdObjects.vdDocument.OpenFlagsEnum.RecoverTableNames"/> and <see cref="F:VectorDraw.Professional.vdObjects.vdDocument.OpenFlagsEnum.RecoverDublicateHandles"/>
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.OpenFlagsEnum.RecoverAll">
            <summary>
            All the recover values are used.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum">
            <summary>
            Controls how entities in Lock layers are used in methods.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum.DisableAll">
            <summary>
            Entities in lock layers are only drawn.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum.EnableAddToSelections">
            <summary>
            Entities in lock layers can be added in selections.
            </summary>
            <remarks>If this value is not present then entities in lock layers are not added in selections.</remarks>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum.EnableModifyEntity">
            <summary>
            Entities in lock layers can be modified.
            </summary>
            <remarks>If this value is not present then a modification to a property of an entity will raize a <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.GenericError"/>.</remarks>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum.EnableGetObjectSnap">
            <summary>
            Entities in lock layers will show their snap points.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum.EnableGetObjectGrip">
            <summary>
            Entities in lock layers will show their grip points. 
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum.EnableGetEntityFromPoint">
            <summary>
            Entities in lock layers can be returned from single entity selection methods.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum.EnableShowObjectToolTip">
            <summary>
            Entities in lock layers can display their tooltip. 
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum.EnableSelectionPreviewDraw">
            <summary>
            Entities in locked layers highlight drawn, when the cursor is over.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum.EnableAll">
            <summary>
            Entities in lock layers take part in all methods like entities in unlock layers.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum.Default">
            <summary>
            Default method.Entities in lock layers take part in all methods except from adding in selections and selecting object grips.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum.Basic">
            <summary>
            Basic method. Entities in lock layers can not be modified.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.LockLayerMethodEnum.HighLight">
            <summary>
            This option has these values : EnableAddToSelections + EnableGetObjectGrip + EnableGetEntityFromPoint + EnableShowObjectToolTip
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.MouseLogicEnum">
            <summary>
            Controls the mouse behavior.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.MouseLogicEnum.Default">
            <summary>
            Default no TouchScreen implementation
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.MouseLogicEnum.TouchScreen">
            <summary>
            TouchScreen logic by reversing the mouse-down whith mouse-up implementations
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.MouseLogicEnum.SingleClkActionPoint">
            <summary>
            If it is selectected then the get user point is finish by a mouse down else it is finish with a mouse up.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.ChamferMethodEnum">
            <summary>
            Controls the method used in Chamfer command.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.ChamferMethodEnum.Distance">
            <summary>
            Distance method.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.ChamferMethodEnum.Angle">
            <summary>
            Angle method.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.ChamferSettingsClass">
            <summary>
            Specifies the settings used in Chamfer command. These properties are being updated depending the choices the user does while running the command.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ChamferSettingsClass.#ctor">
            <summary>
            Empty constructor of the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.ChamferSettingsClass.ToString">
            <summary>
            Returns the string "Walkthrough Keys" in order to be shown at the properties list.
            </summary>
            <returns>Returns the string "Walkthrough Keys"</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ChamferSettingsClass.Distance1">
            <summary>
            The first distance used in Chamfer command when the method is "Distance".
            </summary>
            <remarks>Default value is 1.0;</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ChamferSettingsClass.Distance2">
            <summary>
            The second distance used in Chamfer command when the method is "Distance".
            </summary>
            <remarks>Default value is 1.0;</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ChamferSettingsClass.DistanceForAngleMethod">
            <summary>
            The distance for the first line used in chamfer command when the method is "Angle".
            </summary>
            <remarks>Default value is 1.0;</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ChamferSettingsClass.Angle">
            <summary>
            The angle in degrees used in chamfer command when the method is "Angle".
            </summary>
            <remarks>Default value is 45 degrees.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ChamferSettingsClass.ChamferMethod">
            <summary>
            The method used by default for the Chamfer command. Can be Distance or Angle.
            </summary>
            <remarks>Default value is "Distance".</remarks>
            <seealso cref="T:VectorDraw.Professional.vdObjects.vdDocument.ChamferMethodEnum"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.ChamferSettingsClass.Trim">
            <summary>
            A boolean value representing if the chamfer command will Trim or not the lines.
            </summary>
            <remarks>default value is true.</remarks>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.WalkThroughKeysClass">
            <summary>
            Specifies <see cref="T:System.Windows.Forms.Keys"/> that are used for Walkthrough action.
            </summary>
            <seealso cref="P:VectorDraw.Professional.vdObjects.vdDocument.WalkThroughKeys"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDocument.WalkThroughKeysClass.ToString">
            <summary>
            Returns the string "Walkthrough Keys" in order to be shown at the properties list.
            </summary>
            <returns>Returns the string "Walkthrough Keys"</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.WalkThroughKeysClass.MovementSpeedIncrease">
            <summary>
            Key to increase movement speed , default key is Keys.Add.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.WalkThroughKeysClass.MovementSpeedDecrease">
            <summary>
            Key to decrease movement speed , default key is Keys.Subtract.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.WalkThroughKeysClass.Fly">
            <summary>
            Key to enable/disable fly mode , default key is Keys.F;
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.WalkThroughKeysClass.Up">
            <summary>
            Key to move up , default key is Keys.C;
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.WalkThroughKeysClass.Down">
            <summary>
            Key to move down , default key is Keys.Space;
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.WalkThroughKeysClass.Forward">
            <summary>
            Key to move forward , default key is Keys.W;
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.WalkThroughKeysClass.Backward">
            <summary>
            Key to move backward , default key is Keys.S;
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.WalkThroughKeysClass.SidestepLeft">
            <summary>
            Key to sidestep left  , default key is Keys.A;
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.WalkThroughKeysClass.SidestepRight">
            <summary>
            Key to sidestep right  , default key is Keys.D;
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.KeyWithMouseStroke">
            <summary>
             Specifies constants that define a combination of a key stroke and a mouse button.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.KeyWithMouseStroke.ShiftLeft">
            <summary>
             The SHIFT modifier key and the left mouse button are pressed.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.KeyWithMouseStroke.ShiftRight">
            <summary>
            The SHIFT modifier key and the right mouse button are pressed.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.KeyWithMouseStroke.ShiftMiddle">
            <summary>
            The SHIFT modifier key and the middle mouse button are pressed.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.KeyWithMouseStroke.CtrlLeft">
            <summary>
            The Control modifier key and the left mouse button are pressed.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.KeyWithMouseStroke.CtrlRight">
            <summary>
            The Control modifier key and the right mouse button are pressed.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.KeyWithMouseStroke.CtrlMiddle">
            <summary>
            The Control modifier key and the middle mouse button are pressed.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.KeyWithMouseStroke.AltLeft">
            <summary>
             The ALT modifier key and the left mouse button are pressed.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.KeyWithMouseStroke.AltRight">
            <summary>
             The ALT modifier key and the right mouse button are pressed.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.KeyWithMouseStroke.AltMiddle">
            <summary>
             The ALT modifier key and the left middle button are pressed.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.KeyWithMouseStroke.None">
            <summary>
            None of the above key and buttons are pressed.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.ProjectionTrimExtendEnum">
            <summary>
            Thie enum is used to determine how the Trim and Extend commands work.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.ProjectionTrimExtendEnum.None">
            <summary>
            Only real world intersections are taken into consideration.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.ProjectionTrimExtendEnum.UCS">
            <summary>
            Entities are projected to the current UCS and then the intersections are being checked.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.ProjectionTrimExtendEnum.View">
            <summary>
            Intersections are being calculated at the current view.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.GenericErrorEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.GenericError"/> event.
            </summary>
            <param name="sender">The Document object.</param>
            <param name="Membername">The name of the method or property where the error raised.</param>
            <param name="errormessage">The description of the error.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.GetPassWordEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.GetPassWord"/> event.
            </summary>
            <param name="sender">The Document object.</param>
            <param name="drawingname">a drawing name which is password protected.</param>
            <param name="password">a reference string with the password</param>
            <param name="cancel">Set this as true in order not to run the default VectorDraw event code.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.ActionErrorEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionError"/> event.
            </summary>
            <param name="sender">The Document object.</param>
            <param name="actionName">A string representing the action.For example the vdCommandAction methods like "CmdArc","CmdLine","Zoom" etc.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.ActionEndEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionEnd"/> event.
            </summary>
            <param name="sender">The Document object.</param>
            <param name="actionName">A string representing the action.For example the vdCommandAction methods like "CmdArc","CmdLine","Zoom" etc.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.ActionStartEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionStart"/> event.
            </summary>
            <param name="sender">The Document object.</param>
            <param name="actionName">A string representing the action.For example the vdCommandAction methods like "CmdArc","CmdLine","Zoom" etc.</param>
            <param name="cancel">Set this as true in order not to run the default VectorDraw event code.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.ActionAddedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionAdded"/> event.
            </summary>
            <param name="action">The BaseAction that just added to active actions stack.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.GetDimensionTextEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.GetDimensionText"/> event.
            </summary>
            <param name="sender">A vdDimension object.</param>
            <param name="newText">A string reference that represents the text of the dimension.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.PromptEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnPrompt"/> event.
            </summary>
            <param name="sender">A vdDocument object.</param>
            <param name="promptstr">A reference string representing the string that will be prompt.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.InitBaseActionEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnInitBaseAction"/> event.
            </summary>
            <param name="sender">A vdLayout or vdViewport object where the action is added.</param>
            <param name="action">The BaseAction reference object that will be added.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.LoadUnknownFileName">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnLoadUnknownFileName"/> event.
            </summary>
            <param name="sender">A vdDocument object</param>
            <param name="fileName">The filename to be opened.</param>
            <param name="success">Set this parameter to true if the file was succesfully opened.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.SaveUnknownFileName">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnSaveUnknownFileName"/> event.
            </summary>
            <param name="sender">A vdDocument object</param>
            <param name="fileName">The filename to be saved.</param>
            <param name="success">Set this parameter to true if the file was succesfully saved.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.BeforeOpenDocument">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeOpenDocument"/> event.
            </summary>
            <param name="sender">A vdDocument object</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.AfterOpenDocument">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterOpenDocument"/> event.
            </summary>
            <param name="sender">A vdDocument object</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.AfterNewDocument">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterNewDocument"/> event.
            </summary>
            <param name="sender">A vdDocument object</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.FigureDrawEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnDrawFigure"/> event.
            </summary>
            <param name="sender">A vdFigure object that will be drawn.</param>
            <param name="render">A vdRender object where the object will be rendered.</param>
            <param name="cancel">Set this as true in order not to run the default VectorDraw event code.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.FigureAfterDrawEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnDrawAfterFigure"/> event.
            </summary>
            <param name="sender">A vdFigure object that will be drawn.</param>
            <param name="render">A vdRender object where the object will be rendered.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.GetGripPointsEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetGripPoints"/> event.
            </summary>
            <param name="sender">A vdFigure object that will be drawn.</param>
            <param name="gripPoints">A collection of the object's grip points.</param>
            <param name="cancel">Set this as true in order not to run the default VectorDraw event code.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.MoveGripPointsAtEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnMoveGripPointsAt"/> event.
            </summary>
            <param name="sender">A vdFigure object that will be drawn.</param>
            <param name="Indexes">Represents a zero based array of the grip indexes that will be moved.</param>
            <param name="dx">The dx distance that the grip is moved.</param>
            <param name="dy">The dy distance that the grip is moved.</param>
            <param name="dz">The dz distance that the grip is moved.</param>
            <param name="cancel">Set this as true in order not to run the default VectorDraw event code.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.AddItemEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAddItem"/> event.
            </summary>
            <param name="obj">The object which is going to be added to a collection.</param>
            <param name="Cancel">Set this as true in order not to run the default VectorDraw event code.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.AfterAddItemEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterAddItem"/> event.
            </summary>
            <param name="obj">The object which is going to be added to a collection.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.EraseObjectEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnEraseObject"/> event.
            </summary>
            <param name="sender">The object which is going to be marked as deleted.</param>
            <param name="cancel">Set this as true in order not to run the default VectorDraw event code.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.BeforeModifyObjectEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            </summary>
            <param name="sender">The object which is going to be modified.</param>
            <param name="propertyname">The name of the property that is changed</param>
            <param name="newvalue">The new value of the property.</param>
            <param name="cancel">Set this as true in order not to run the default VectorDraw event code.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.AfterModifyObjectEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </summary>
            <param name="sender">The object which was modified.</param>
            <param name="propertyname">The name of the property that was changed.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.FilterFigureEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnFilterFigure"/> event.
            </summary>
            <param name="sender"></param>
            <param name="JobId"></param>
            <param name="fig"></param>
            <param name="cancel"></param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.DrawAfterEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnDrawAfter"/> event.
            </summary>
            <param name="sender">The vdDocument object.</param>
            <param name="render">The vdRender object where all objects where drawn.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.DrawBackgroundEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnDrawBackground"/> event.
            </summary>
            <param name="sender">The vdDocument object.</param>
            <param name="render">The vdRender object where all objects where drawn.</param>
            <param name="cancel">Set this as true in order not to run the default VectorDraw event code.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.DrawEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnDraw"/> event.
            </summary>
            <param name="sender">The vdDocument object.</param>
            <param name="render">The vdRender object where all objects where drawn.</param>
            <param name="cancel">Set this as true in order not to run the default VectorDraw event code.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.DrawOverAllEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnDrawOverAll"/> event.
            </summary>
            <param name="sender">The vdDocument object.</param>
            <param name="render">The vdRender object where all objects where drawn.</param>
            <param name="cancel">Set this as true in order not to run the default VectorDraw event code.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.FigureDrawGripsEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnFigureDrawGrips"/> event.
            </summary>
            <param name="sender">The vdFigure object.</param>
            <param name="render">The vdRender object where all objects where drawn.</param>
            <param name="cancel">Set this as true in order not to run the default VectorDraw event code.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.OpenUrlEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnOpenUrl"/> event.
            </summary>
            <param name="sender">A vdDocument object.</param>
            <param name="urlname">A reference string representing the URL to be opened.</param>
            <param name="cancel">Set this as true in order not to run the default VectorDraw event code.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.NoFileFindEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnNoFileFind"/> event.
            </summary>
            <param name="sender">A vdDocument object.</param>
            <param name="fileName">The filename of the file.</param>
            <param name="success">Set this parameter to true if the file was found.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.ActionDrawOsnapEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnActionDrawOsnap"/> event.
            </summary>
            <param name="sender">A vdDocument object.</param>
            <param name="mode">The OsnapMode.</param>
            <param name="render">The vdRender object.</param>
            <param name="cancel">Set this as true in order not to run the default VectorDraw event code.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.ResizeControlWindowEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnResizeControlWindow"/> event.
            </summary>
            <param name="sender">The vdDocument object.</param>
            <param name="cx">The new width of the rendering control window.</param>
            <param name="cy">The new height of the rendering control window.</param>
            <param name="cancel">Set this as true in order not to run the default VectorDraw event code.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.ScrollEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnScroll"/> event.
            </summary>
            <param name="sender">The vdRender object.</param>
            <param name="cx">The drawing units of x offset scrolling.</param>
            <param name="cy">The drawing units of y offset scrolling.</param>
            <param name="cancel">Set this as true in order not to run the default VectorDraw event code.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.UndoStoreValueEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnUndoStoreValue"/> event.
            </summary>
            <param name="sender">A vdDocument object.</param>
            <param name="isRedo">True if is stored in the redo stack.</param>
            <param name="propObject">The object that it's property is stored.</param>
            <param name="propName">The name of the property that is stored.</param>
            <param name="value">The value of the property.</param>
            <param name="Cancel">Set this as true in order not to run the default VectorDraw event code.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.AfterUndoStoreValueEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterUndoStoreValue"/> event.
            </summary>
            <param name="sender">A vdDocument object.</param>
            <param name="isRedo">True if is stored in the redo stack.</param>
            <param name="propObject">The object that it's property was stored.</param>
            <param name="propName">The name of the property that was stored.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.ActionDrawEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnActionDraw"/> event.
            </summary>
            <param name="sender">A vdDocument object.</param>
            <param name="action">The <see cref="T:VectorDraw.Actions.BaseAction"/> commited.</param>
            <param name="isHideMode">If the vdRender is about to hide the previously rendered objects.</param>
            <param name="cancel">Set this as true in order not to run the default VectorDraw event code.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.ActionJobLoopEventHandler">
            <summary>
             Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnActionJobLoop"/> event.
            </summary>
            <param name="sender">A vdDocument object.</param>
            <param name="action">The <see cref="T:VectorDraw.Actions.BaseAction"/> commited.</param>
            <param name="cancel">Set this as true in order to cancel the action</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.ActionJobLoopExEventHandler">
            <summary>
             Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnActionJobLoop"/> event.
            </summary>
            <param name="sender">A vdDocument object.</param>
            <param name="action">The <see cref="T:VectorDraw.Actions.BaseAction"/> commited.</param>
            <param name="msg">The currently translated window message.</param>
            <param name="cancel">Set this as true in order to cancel the action</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.IsValidOpenFormatEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnIsValidOpenFormat"/> event.
            </summary>
            <param name="sender">The vdDocument object.</param>
            <param name="extension">The extension of the file.</param>
            <param name="success">Set this to true if the extension is supported.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.GetFileImagePreviewEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetFileImagePreview"/> event.
            </summary>
            <param name="sender">A vdDocument object.</param>
            <param name="Filename">The filename of the file.</param>
            <param name="img">Returns the preview image of the file.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.GetOpenFileFilterFormatEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetOpenFileFilterFormat"/> event.
            </summary>
            <param name="openFilter">The supported filter formats for the open dialog.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.GetSaveFileFilterFormatEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetSaveFileFilterFormat"/> event.
            </summary>
            <param name="saveFilter">The supported filter formats for the save dialog.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.GripSelectionModifiedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.GripSelectionModified"/> event.
            </summary>
            <param name="sender">The vdDocument object.</param>
            <param name="layout">The active layout of the document.</param>
            <param name="gripSelection">A collection representing the objects which the grips are drawn.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.ActionLayoutActivatedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionLayoutActivated"/> event.
            </summary>
            <param name="sender">A vdDocument object.</param>
            <param name="deactivated">The deactivated layout.</param>
            <param name="activated">The active layout of the document.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.ActionLayoutBeforeDeActivatedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionLayoutBeforeDeActivated"/> event.
            </summary>
            <param name="sender">A vdDocument object.</param>
            <param name="deactivated">The deactivated layout.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.ActionFinishEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionFinish"/> event.
            </summary>
            <param name="sender">A vdDocument object.</param>
            <param name="action">The action that finished.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.FilterActionPointEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.FilterActionPoint"/> event.
            </summary>
            <param name="sender">A vdDocument object.</param>
            <param name="action">The action that finished.</param>
            <param name="pt">A reference point in User Coordinate System(UCS).</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.PolarTrackToolTipEventHandler">
            <summary>
             Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnPolarTrackToolTip"/> event.
            </summary>
            <param name="sender">A vdDocument object.</param>
            <param name="referencePoint">The reference point of current action in User Coordinate System.</param>
            <param name="currentPoint">The mouse position of current action  in User Coordinate System.</param>
            <param name="tooltipText">A string reference to the Tooltip text.</param>
            <param name="cancel">Set this as true in order to cancel the default action.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.PolarTrackAngleValidateEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnPolarTrackAngleValidate"/> event.
            </summary>
            <param name="sender">A vdDocument object.</param>
            <param name="referencePoint">The reference point of current action in User Coordinate System.</param>
            <param name="currentPoint">The mouse position of current action  in User Coordinate System.</param>
            <param name="DefaultEquality">The default angle equality used to lock the action position in specific NewTrackingAngle direction.</param>
            <param name="NewTrackingAngle">The desired tracking angle in radius.</param>
            <param name="isValid">A reference value representing if the the currentPoint is valid to display the NewTrackingAngle.</param>
            <param name="cancel">Set this as true in order to cancel the default action.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.CommandExecuteEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnCommandExecute"/> event.
            </summary>
            <param name="sender">The Document object.</param>
            <param name="parseString">A user string to be parsed.</param>
            <param name="succeed">Set it true if command successfully parsed.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.ActionParseEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.ActionParse"/> event.
            </summary>
            <param name="sender">The Document object.</param>
            <param name="actionName">A string representing the active action type name.</param>
            <param name="parseString">A user string to be parsed.</param>
            <param name="cancel">Set this as true in order not to run the default VectorDraw event code.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.ObjectHandleChangedEventHandler">
            <summary>
             Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnObjectHandleChanged"/> event.
            </summary>
            <param name="sender">The Document object.</param>
            <param name="obj">An object with a dublicated handle value.</param>
            <param name="ExistingHandleHEX">A dublicated handle value in hexadecimal format.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.RequestLicValEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnRequestLicVal"/> event.
            </summary>
            <param name="sender">The Document object.</param>
            <param name="UrlFileName">A url filename full path name.</param>
            <param name="LicenseValue">A reference string representing the a valid licval for the specific url.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.FilterOsnapEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnFilterOsnap"/> event.
            </summary>
            <param name="sender">The Document object.</param>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.ActionMouseMoveEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnActionMouseMove"/> event.
            </summary>
            <param name="sender">The active <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object.</param>
            <param name="action">The active <see cref="T:VectorDraw.Actions.BaseAction"/> object.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.FigureMouseOverEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnFigureMouseOver"/> event.
            </summary>
            <param name="sender">The active <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object.</param>
            <param name="args">Event Arguments with crusioal information about the Entity and the mouse involved in an FigureMouseOver operation.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.DrawSceneEventHandler">
            <summary>
            Represents the method that will override the draw of the entire scene.
            </summary>
            <param name="sender">The active <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object.</param>
            <param name="render">The vdRender object where all objects where drawn.</param>
            <param name="entities">A collection of <see cref="T:VectorDraw.Professional.vdPrimaries.vdFigure"/> to be drawn.</param>
            <param name="sections">A collection of <see cref="T:VectorDraw.Professional.vdObjects.vdSectionClip"/> to be applied or null.</param>
            <param name="lights">A collection of <see cref="T:VectorDraw.Professional.vdFigures.vdLight"/> to be applied or null.</param>
            <param name="FireMeterProgress">A boolean value that defines if the progress meter can be Raised <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnProgress"/></param>
            <param name="status">Returns a rendering status code.</param>
            <param name="cancel">Set this as true in order not to run the default VectorDraw code.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.ExportedExtraFilesEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnExportedExtraFiles"/> event.
            </summary>
            <param name="sender">The active <see cref="T:VectorDraw.Professional.vdObjects.vdDocument"/> object which call the save command.</param>
            <param name="ParentFileName">The filename for which the save command is called.</param>
            <param name="ExtraFiles">An array of extra created files need by ParentFileName.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.GripSelectionBeforeModifyEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.GripSelectionBeforeModify"/> event.
            </summary>
            <param name="sender">The vdDocument object.</param>
            <param name="layout">The active layout that the gripSelection is reference to.</param>
            <param name="gripSelection">A collection representing the objects which the grips are drawn.</param>
            <param name="item">The item that is going to be added or remove from the gripSelection</param>
            <param name="bRemove">A boolean value representing if the item is going to be remove (true) or to be add (false)</param>
            <param name="cancel">Set this as true in order to cancel the default VectorDraw event code.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.ThreadFinishedDelegate">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnThreadFinished"/> event.
            </summary>
            <param name="sender">The Document object.</param>
            <param name="thread">The thread object.</param>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.IvdThread">
            <summary>
            Provides the functionality for <see cref="T:System.Threading.Thread"/> that started by executing a VectorDraw Thread Safe method.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.IvdThread.TimeWorking">
            <summary>
            Returns the time passed in milliseconds , from thread start.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.IvdThread.Id">
            <summary>
            Gets a unique identifier for the current managed thread.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdDocument.IvdThread.MethodName">
            <summary>
            Returns the  a VectorDraw Thread Safe method name that this thread is first started with.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.MatchXpropertiesFlag">
            <summary>
            Controls if <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.XProperties"/> will be matched when <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)"/> is called.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.MatchXpropertiesFlag.All">
            <summary>
            All <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.XProperties"/> will be matched
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.MatchXpropertiesFlag.None">
            <summary>
            <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.XProperties"/> will not be matched
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.MatchXpropertiesFlag.TypeSameAndInsert">
            <summary>
            <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.XProperties"/> will be matched only between same Types or for <see cref="M:VectorDraw.Professional.vdFigures.vdInsert.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)"/>
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDocument.ExportScriptFlags">
            <summary>
            Controls some parameters for the ExportScript method.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.ExportScriptFlags.Default">
            <summary>
            Default properties are used
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdDocument.ExportScriptFlags.ExplodePolylineWidths">
            <summary>
            If set explode <see cref="T:VectorDraw.Professional.vdFigures.vdPolyline"/> objects that has <see cref="P:VectorDraw.Professional.vdFigures.vdPolyline.Widths"/> with deferent values to single fill hatched entities for each segment widths.
            If not set then <see cref="P:VectorDraw.Professional.vdFigures.vdPolyline.Widths"/> are ignored
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.vdBlocks">
            <summary>
            Implements the vdBlocks collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.AddResolveProperty(System.Object,System.String,System.String)">
            <summary>
            Adds the parameters to the resolve list of the collection.
            </summary>
            <param name="_ObjectOfProperty">The object with the property to set(for example a vdDimension object).</param>
            <param name="_PropertyName">A string representing the property name of the object(for example "Style")</param>
            <param name="_TableName">A string representing the table name.(for example "mystyle1").</param>
            <remarks>The resolve list of the collections is used to set to an object a property that is equal to 
            an item of the list which may not be added yet to the collection. This is usually used when opening a 
            format and you want to add a layer to a vdFigure and it is not certain that the layer is already added 
            to the document.Use resolve list at the end of an open procedure of a format to resolve these properties.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.ResolveProperties">
            <summary>
            Resolves all the properties added with the <see cref="M:VectorDraw.Professional.vdCollections.vdBlocks.AddResolveProperty(System.Object,System.String,System.String)"/> function.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.getUniqueTableName(System.String)">
            <summary>
            Creates a unique string for use as name to a vdBlock object.
            </summary>
            <param name="prefix">A prefix string that will be present to the unique name.</param>
            <returns>Returns a unique string.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.GetNotDeletedItemsAndVisibleOnForms">
            <summary>
            Get all non deleted objects of the collection.
            </summary>
            <returns>
            Returns a new created collection of vdBlock objects that are not set as <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.Deleted"/>and also <see cref="P:VectorDraw.Professional.vdPrimaries.vdBlock.VisibleOnForms"/> is true. The array is sorted alphabetically by the name of the object.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.GetNotDeletedItems">
            <summary>
            Get all non deleted objects of the collection.
            </summary>
            <returns>Returns a new created collection of vdBlock objects that are not set as <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.Deleted"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.IsDefault(VectorDraw.Professional.vdObjects.vdPrimary)">
            <summary>
            Checks if the parameter passed is the standard VDDIM_DEFAULT vdBlock object.
            </summary>
            <param name="obj">A vdPrimary object to be checked if it is equal referenced to the standard VDDIM_DEFAULT vdBlock object.</param>
            <returns>True if the passed object is equal referenced with the standard VDDIM_DEFAULT vdBlock object of the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.ToString">
            <summary>
            Gets a System.String that represents the count of the vdBlocks collection Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.#ctor">
            <summary>
            Initializes the vdBlocks collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.Purge">
            <summary>
            Sets as Deleted all vdBlock objects that are not being used in the Collection's Document.
            </summary>
            <returns>Returns the number of unused vdBlock objects that where set as Deleted.</returns>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnEraseObject"/> event for each deleted item.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.InitDefaults(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Creates and initializes the VDDIM_DEFAULT,VDDIM_NONE default vdBlock objects and also
            Sets the specified Document for the collection..
            </summary>
            <param name="document">The Document where the collection is.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.EnsureDefaults">
            <summary>
            Creates and initializes the VDDIM_DEFAULT,VDDIM_NONE default vdBlock objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.FindItem(VectorDraw.Professional.vdPrimaries.vdBlock)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">A vdBlock object to be checked if it exists in the collection</param>
            <returns>True if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.AddItem(VectorDraw.Professional.vdPrimaries.vdBlock)">
            <summary>
            Adds an object to the collection.
            </summary>
            <param name="value">The object to be added.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAddItem"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterAddItem"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.AddItem(VectorDraw.Professional.vdPrimaries.vdBlock,System.Boolean)">
            <summary>
            Adds an object to the collection.
            </summary>
            <param name="value">The object to be added.</param>
            <param name="RemoveExistingItemsIfExist">If a block already exists with the same name , then this boolean controls whether the entities of the block are going to be added to the current OR remove the previous and preserve the value's entities.This AddItem is used while importing DXF files.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAddItem"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterAddItem"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
            <remarks>
            All vdBlocks objects are removed even the standard ones.Call EnsureDefaults method in 
            order to create the stadard objects after removing all the item's of the collection.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.RemoveItem(VectorDraw.Professional.vdPrimaries.vdBlock)">
            <summary>
            Removes a specific vdBlock object from the collection.
            </summary>
            <param name="Object">The vdBlock object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.RemoveAt(System.Int32)">
            <summary>
            Removes a vdBlock object from the specified index of the collection.
            </summary>
            <param name="Index">The zero based index.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.InsertAt(System.Int32,VectorDraw.Professional.vdPrimaries.vdBlock)">
            <summary>
            Insert a vdBlock object to a specified index of the collection.
            </summary>
            <param name="Index">The zero based index of the collection where the object will be inserted.</param>
            <param name="Object">The vdBlock object which will be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.ChangeOrder(VectorDraw.Professional.vdPrimaries.vdBlock,System.Boolean)">
            <summary>
            Changes the position of a vdBlock object to the front or the end of the collection.
            </summary>
            <param name="Object">The vdBlock object.</param>
            <param name="ToBack">If true moves the object to the beginning of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.MakeIndexDictionary">
            <summary>
            Creates an Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must be followed by a <see cref="M:VectorDraw.Professional.vdCollections.vdBlocks.ClearIndexDictionary"/> call when the search or swap is finished. </remarks>
            <example> For a code example please check topic <see cref="M:VectorDraw.Professional.vdCollections.vdBlocks.swap(VectorDraw.Professional.vdPrimaries.vdBlock,VectorDraw.Professional.vdPrimaries.vdBlock)"/> Method. </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.ClearIndexDictionary">
            <summary>
            Clears the Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must follow a <see cref="M:VectorDraw.Professional.vdCollections.vdBlocks.MakeIndexDictionary"/> call when the search or swap is finished. </remarks>
            <example> For a code example please check topic <see cref="M:VectorDraw.Professional.vdCollections.vdBlocks.swap(VectorDraw.Professional.vdPrimaries.vdBlock,VectorDraw.Professional.vdPrimaries.vdBlock)"/> Method. </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.swap(VectorDraw.Professional.vdPrimaries.vdBlock,VectorDraw.Professional.vdPrimaries.vdBlock)">
            <summary>
            Swaps the position between two different vdBlock objects existing in the collection.
            </summary>
            <param name="Object1">first object needed.</param>
            <param name="Object2">second object needed.</param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.InsertCopyOf(VectorDraw.Professional.vdPrimaries.vdBlock)">
            <summary>
            Adds a clone of the obj in the collection if it is not exist.
            </summary>
            <param name="obj">The object to be added.</param>
            <returns>The new added item.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.Add(System.String)">
            <summary>
            Creates and adds a vdBlock object to the collection with the specified name.
            </summary>
            <param name="Name">The name of the inserted vdBlock object.</param>
            <returns>Returns the added vdBlock object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.FindName(System.String)">
            <summary>
            Finds a vdBlock object with the specified name in the collection.
            </summary>
            <param name="Name">The name to search in the collection.</param>
            <returns>The found object else returns null if a vdBlock does not exist with this name.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.AddFromFile(System.String,System.Boolean)">
            <summary>
            Creates a vdBlock object from a file.
            </summary>
            <param name="FileName">The filename of the file from where all the entities for the block will be taken.</param>
            <param name="redefine">If the block's name already exist in the document and this value is true then the existing block will be replaced by the newly added from file block.</param>
            <returns>Returns a vdBlock object contaning all model entities from the file.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.AddFromDocument(System.String,VectorDraw.Professional.vdObjects.vdDocument,System.Boolean)">
            <summary>
            Creates a vdBlock object taking all model entities from a document.
            </summary>
            <param name="BlockName">The name of the created block</param>
            <param name="document">The document from which all model entities will be taken.</param>
            <param name="redefine">If this value is false if the block exists in the current document then the existing block is returned.</param>
            <returns>Returns a vdBlock object containing all entities from the model of the given Document.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.AddFromStream(System.String,System.IO.MemoryStream)">
            <summary>
            Creates a block from a stream.
            </summary>
            <param name="BlockName">The name of the created block.</param>
            <param name="stream">The stream where the file is.</param>
            <returns>A vdBlock object which is not added to the blocks collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.AddFromStream(System.String,System.IO.MemoryStream,System.Boolean)">
            <summary>
            Creates a block from a stream.
            </summary>
            <param name="BlockName">The name of the created block.</param>
            <param name="stream">The stream where the file is.</param>
            <param name="iscompressed">Set it to true if the stream is compressed</param>
            <returns>A vdBlock object which is not added to the blocks collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdBlocks object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdBlocks object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.RemoveItem(System.Object)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The item to be removed.</param>
            <returns>Returns true if the item was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.AddItem(System.Object)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="value">The object to be added.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.FindItem(System.Object)">
            <summary>
            Searches the collection for a specified object.
            </summary>
            <param name="item">The object to search for into the collection.</param>
            <returns>Returns true if the item exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.VectorDraw#Professional#vdCollections#IvdObjectCollection#Item(System.Int32)">
            <summary>
            Retreave a specific item placed at a specified index from the collection.
            </summary>
            <param name="Index">The index where the object is.</param>
            <returns>Returns the object at the specified index.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.GetObjectRealPosition(System.Object)">
            <summary>
            Find the index where a specified object is located in the list.
            </summary>
            <param name="item">The object to find.</param>
            <returns>Returns the index where the object is or -1 if the object is not in the list.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.InsertAt(System.Int32,System.Object)">
            <summary>
            Insert an object at a specified index.
            </summary>
            <param name="index">The index where the object will be inserted.</param>
            <param name="item">The object to be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdBlocks.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements the vdBlocks collection object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdBlocks.ItemType">
            <summary>
            Returns the Type of Items in the collection
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdBlocks.VDDIM_DEFAULT">
            <summary>
            Get the Default(arrow) vdBlock object used for dimensions.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdBlocks.VDDIM_NONE">
            <summary>
            Get the Default(empty).
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdBlocks.ListPosition">
            <summary>
            Gets the <see cref="T:VectorDraw.Generics.IListPosition"/> interface object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdBlocks.Item(System.Int32)">
            <summary>
            Get a vdBlock object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdBlocks.Last">
            <summary>
            Returns the last item in the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdBlocks.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.vdLineTypes">
            <summary>
            Implements all functionality for the vdLineTypes collection object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.AddResolveProperty(System.Object,System.String,System.String)">
            <summary>
            Adds the parameters to the resolve list of the collection.
            </summary>
            <param name="_ObjectOfProperty">The object with the property to set(for example a vdDimension object).</param>
            <param name="_PropertyName">A string representing the property name of the object(for example "Style")</param>
            <param name="_TableName">A string representing the table name.(for example "mystyle1").</param>
            <remarks>The resolve list of the collections is used to set to an object a property that is equal to 
            an item of the list which may not be added yet to the collection. This is usually used when opening a 
            format and you want to add a layer to a vdFigure and it is not certain that the layer is already added 
            to the document.Use resolve list at the end of an open procedure of a format to resolve these properties.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.ResolveProperties">
            <summary>
            Resolves all the properties added with the <see cref="M:VectorDraw.Professional.vdCollections.vdLineTypes.AddResolveProperty(System.Object,System.String,System.String)"/> function.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.getUniqueTableName(System.String)">
            <summary>
            Creates a unique string for use as name to a vdLineType object.
            </summary>
            <param name="prefix">A prefix string that will be present to the unique name.</param>
            <returns>Returns a unique string.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.GetNotDeletedItemsAndVisibleOnForms">
            <summary>
            Get all non deleted objects of the collection.
            </summary>
            <returns>
            Returns a new created collection of vdLineType objects that are not set as <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.Deleted"/>and also <see cref="P:VectorDraw.Professional.vdPrimaries.vdLineType.VisibleOnForms"/> is true..
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.GetNotDeletedItems">
            <summary>
            Get all non deleted objects of the collection.
            </summary>
            <returns>
            Returns a new created collection of vdLineType objects that are not set as <see cref="P:VectorDraw.Professional.vdObjects.vdPrimary.Deleted"/>.
            </returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.IsDefault(VectorDraw.Professional.vdObjects.vdPrimary)">
            <summary>
            Checks if the parameter passed is one of the standard vdLineType objects.
            </summary>
            <param name="obj">A vdPrimary object to be checked if it is equal referenced to one of the standard vdLinetype objects.</param>
            <returns>True if the passed object is equal referenced with one of the standard vdLineType objects of the collection.</returns>
            <remarks>
            Default LineType objects:Solid,ByLayer,ByBlock,DPIDash,DPIDot,DPIDashDot,DPIDashDotDot,Invisible.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.ToString">
            <summary>
            Gets a System.String that represents the count of the vdLinetypes collection Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.#ctor">
            <summary>
            Initializes the vdLineTypes collection objects and also the default linetype objects.
            </summary>
            <remarks>
            Default LineType objects:Solid,ByLayer,ByBlock,DPIDash,DPIDot,DPIDashDot,DPIDashDotDot,Invisible.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.Purge">
            <summary>
            Sets as Deleted all vdLineType that are not being used in the Collection's Document.
            </summary>
            <returns>Returns the number of unused vdLineType objects that where set as Deleted.</returns>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnEraseObject"/> event for each deleted item.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.Load(System.String,System.Boolean)">
            <summary>
            Add  a collection of linetypes that defined in the .lin file. 
            </summary>
            <param name="Filename">A file that contains the description of linetypes.</param>
            <param name="redefineIfExist">Set it to true in order to redifine a linetype that already exist with same name.</param>
            <returns>True if the file is a valid linetype definition file.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.Load(System.IO.Stream,System.Boolean)">
            <summary>
            Add  a collection of linetypes that defined in the .lin file. 
            </summary>
            <param name="stream">A stream that contains the description of linetypes.</param>
            <param name="redefineIfExist">Set it to true in order to redifine a Linetype that already exist with same name.</param>
            <returns>True if the stream is a valid linetype definition file.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.EnsureDefaults">
            <summary>
            Ensures the existance of the standard vdLineType objects.
            </summary>
            <remarks>
            Default LineType objects:Solid,ByLayer,ByBlock,DPIDash,DPIDot,DPIDashDot,DPIDashDotDot,Invisible.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.FindItem(VectorDraw.Professional.vdPrimaries.vdLineType)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">A vdLineType object to be checked if it exists in the collection</param>
            <returns>True if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.AddItem(VectorDraw.Professional.vdPrimaries.vdLineType)">
            <summary>
            Adds a vdLineType object to the collection.
            </summary>
            <param name="value">The vdLineType object to be added to the collection.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAddItem"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterAddItem"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
            <remarks>
            All vdLineType objects are removed even the standard.Call EnsureDefaults method in 
            order to create the standard vdLineType objects after removing all the item's of the collection.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.RemoveItem(VectorDraw.Professional.vdPrimaries.vdLineType)">
            <summary>
            Removes a specific vdLineType object from the collection.
            </summary>
            <param name="Object">The vdLineType object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.RemoveAt(System.Int32)">
            <summary>
            Removes an object from the specified index of the collection.
            </summary>
            <param name="Index">The zero based index.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.ChangeOrder(VectorDraw.Professional.vdPrimaries.vdLineType,System.Boolean)">
            <summary>
            Changes the position of a vdLineType object to the front or the end of the collection.
            </summary>
            <param name="Object">The vdLineType object.</param>
            <param name="ToBack">If true moves the object to the beginning of the collection.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.MakeIndexDictionary">
            <summary>
            Creates an Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must be followed by a <see cref="M:VectorDraw.Professional.vdCollections.vdLineTypes.ClearIndexDictionary"/> call when the search or swap is finished. </remarks>
            <example> For a code example please check topic <see cref="M:VectorDraw.Professional.vdCollections.vdLineTypes.swap(VectorDraw.Professional.vdPrimaries.vdLineType,VectorDraw.Professional.vdPrimaries.vdLineType)"/> Method. </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.ClearIndexDictionary">
            <summary>
            Clears the Index of the Dictionary. Internally used to speed up Swap method.
            </summary>
            <remarks> This method must follow a <see cref="M:VectorDraw.Professional.vdCollections.vdLineTypes.MakeIndexDictionary"/> call when the search or swap is finished. </remarks>
            <example> For a code example please check topic <see cref="M:VectorDraw.Professional.vdCollections.vdLineTypes.swap(VectorDraw.Professional.vdPrimaries.vdLineType,VectorDraw.Professional.vdPrimaries.vdLineType)"/> Method. </example>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.swap(VectorDraw.Professional.vdPrimaries.vdLineType,VectorDraw.Professional.vdPrimaries.vdLineType)">
            <summary>
            Swaps the position between two different vdLineType objects existing in the collection.
            </summary>
            <param name="Object1">first object needed.</param>
            <param name="Object2">second object needed.</param>
            <returns>True if the swap operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.InsertCopyOf(VectorDraw.Professional.vdPrimaries.vdLineType)">
            <summary>
            Adds a clone of the obj in the collection if it is not exist.
            </summary>
            <param name="obj">The object to be added.</param>
            <returns>The new added item.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.InsertAt(System.Int32,VectorDraw.Professional.vdPrimaries.vdLineType)">
            <summary>
            Insert a vdLineType object to a specified index of the collection.
            </summary>
            <param name="Index">The zero based index of the collection where the object will be inserted.</param>
            <param name="Object">The vdLineType object which will be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.Add(System.String)">
            <summary>
            Creates and adds a vdLineType object to the collection with the specified name.
            </summary>
            <param name="Name">The name of the inserted vdLineType object.</param>
            <returns>Returns the added vdLineType object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.FindName(System.String)">
            <summary>
            Finds a vdLineType object with the specified name in the collection.
            </summary>
            <param name="Name">The name to search in the collection.</param>
            <returns>The found object else returns null if a vdLineType does not exist with this name.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.UpdateTextStyles">
            <summary>
            Updates all textstyles used in Linetypes.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.isDefaultLinetype(System.String)">
            <summary>
            Checks if the passed name is a default linetype
            </summary>
            <param name="name">A string representing the name to search</param>
            <returns>True if the name is a default linetype name.</returns>
            <remarks>
            Default linetype is if the name equals to one of the below linetype names:
            CENTER,DASHDOT,DASHED,HIDDEN,HIDDEN2,BORDER,BORDER2,
            BORDERX2,CENTER2,CENTERX2,DASHDOT2,DASHDOTX2,DASHED2,DASHEDX2,DIVIDE,DIVIDE2,DIVIDEX2,DOT,
            DOT2,DOTX2,HIDDENX2,PHANTOM,PHANTOM2,PHANTOMX2
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.InitDefaults(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes vdLineType objects in the collection.
            </summary>
            <param name="document">The document of the collection.</param>
            <remarks>
            Initializes default vdLineType objects:CENTER,DASHDOT,DASHED,HIDDEN,HIDDEN2,BORDER,BORDER2,
            BORDERX2,CENTER2,CENTERX2,DASHDOT2,DASHDOTX2,DASHED2,DASHEDX2,DIVIDE,DIVIDE2,DIVIDEX2,DOT,
            DOT2,DOTX2,HIDDENX2,PHANTOM,PHANTOM2,PHANTOMX2.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdLinetypes object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdLinetypes object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.RemoveItem(System.Object)">
            <summary>
            Removes an object from the collection.
            </summary>
            <param name="item">The object to be removed.</param>
            <returns>True if the object was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.AddItem(System.Object)">
            <summary>
            Adds an object to the collection.
            </summary>
            <param name="value">The object to be added.</param>
            <exception cref="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">Thrown when an object already exist in collection and cannot be added.</exception>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.FindItem(System.Object)">
            <summary>
            Checks if an object exists in the collection.
            </summary>
            <param name="item">The object required for the search.</param>
            <returns>true if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.VectorDraw#Professional#vdCollections#IvdObjectCollection#Item(System.Int32)">
            <summary>
            Retreave a specific item placed at a specified index from the collection.
            </summary>
            <param name="Index">The index where the object is.</param>
            <returns>Returns the object at the specified index.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.GetObjectRealPosition(System.Object)">
            <summary>
            Find the index where a specified object is located in the list.
            </summary>
            <param name="item">The object to find.</param>
            <returns>Returns the index where the object is or -1 if the object is not in the list.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.InsertAt(System.Int32,System.Object)">
            <summary>
            Insert an object at a specified index.
            </summary>
            <param name="index">The index where the object will be inserted.</param>
            <param name="item">The object to be inserted.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdLineTypes.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements all functionality for the vdLineTypes collection object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLineTypes.ItemType">
            <summary>
            Returns the Type of Items in the collection
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLineTypes.Solid">
            <summary>
            Gets and ensures existance of the default Solid linetype.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLineTypes.ByLayer">
            <summary>
            Setting the linetype to BYLAYER means that an object assumes the linetype that is assigned
            to the object's layer.
            If the object that has the linetype, belongs to a block and the block is inserted in <see cref="P:VectorDraw.Professional.vdCollections.vdLayers.Standard"/>
            (Layer 0), then the object inherit the block's Linetype. 
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLineTypes.ByBlock">
            <summary>
            Setting the linetype to BYBLOCK means that an object assumes the Solid linetype until 
            it is grouped into a block. Whenever the block is inserted, all objects inherit the 
            block's linetype.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLineTypes.DPIDash">
            <summary>
            Gets and ensures existance of the default dash linetype.
            </summary>
            <remarks>
            All DPI Linetypes look the same no matter the distance of the viewer.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLineTypes.DPIDot">
            <summary>
            Gets and ensures existance of the default dot linetype.
            </summary>
            <remarks>
            All DPI Linetypes look the same no matter the distance of the viewer.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLineTypes.DPIDashDot">
            <summary>
            Gets and ensures existance of the default dash dot linetype.
            </summary>
            <remarks>
            All DPI Linetypes look the same no matter the distance of the viewer.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLineTypes.DPIDashDotDot">
            <summary>
            Gets and ensures existance of the default dash dot dot linetype.
            </summary>
            <remarks>
            All DPI Linetypes look the same no matter the distance of the viewer.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLineTypes.Invisible">
            <summary>
            Represents an invisible linetype.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLineTypes.ListPosition">
            <summary>
            Gets the <see cref="T:VectorDraw.Generics.IListPosition"/> interface object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLineTypes.Item(System.Int32)">
            <summary>
            Get a vdLineType object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The vdLineType object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLineTypes.Last">
            <summary>
            Returns the last item in the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdLineTypes.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdCollections.vdDocuments">
            <summary>
            Implements the vdDocuments collection object which is a collection
            of vdDocuments used mainly for External references.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDocuments.ToString">
            <summary>
            Gets a System.String that represents the count of the vdDocuments collection Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDocuments.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDocuments.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDocuments.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDocuments.RemoveItem(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="Object">The item to be removed.</param>
            <returns>Returns true if the item was succesfully removed.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDocuments.Add(System.String,System.Boolean)">
            <summary>
            Add a vdDocument object to the collection with the specified file path name.
            If the document with secific file name exist, returns the existing one.
            </summary>
            <param name="Name">The file path name of the inserted vdBlock object.</param>
            <param name="Unloadded">True in order to add an empty document with <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.FileName"/> equals to Name parameter. </param>
            <returns>Returns the added vdDocument object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDocuments.FindName(System.String)">
            <summary>
            Finds a vdDocument object with the specified file path name in the collection.
            </summary>
            <param name="Name">The file name to search in the collection.</param>
            <returns>The found object else returns null if a vdDocument does not exist with this file name.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDocuments.FindNameWithoutExtension(System.String)">
            <summary>
            Finds a vdDocument object with the specified file path name in the collection without extension
            </summary>
            <param name="Name">The file name to search in the collection.</param>
            <returns>The found object else returns null if a vdDocument does not exist with this file name.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDocuments.Purge">
            <summary>
            Removes all unused External references documents for the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDocuments.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdDocuments object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDocuments.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdDocuments object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdCollections.vdDocuments.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements the vdDocuments collection object which is a collection
            of vdDocuments used mainly for External references.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdCollections.vdDocuments.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionLine">
            <summary>
            Implements the ActionLine object used when adding a line.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionLine.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Initializes the object with the given paramaters.
            </summary>
            <param name="reference">Start point of the line.</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionLine.OnMyPositionChanged(VectorDraw.Geometry.gPoint)">
            <summary>
            Called when the mouse position changes.Changes the end point of the created line entity to be drawn each time the mouse moves..
            </summary>
            <param name="newPosition">A gPoint representing the new mouse position in User Coordinate System.</param>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionLine.ReferencePoint">
            <summary>
            the reference point of the action in World Coordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionLine.HideRubberLine">
            <summary>
            Get a value that represents if the rubber line is drawn or not.Returns true since a rubber line is not needed.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionLine.Entity">
            <summary>
            The entity which is currently selected for this action.Returns the created line.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionLine.needUpdate">
            <summary>
            Get a value that represents if the entity should be updated after each position change.Returns true since an update is needed.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdDimension">
            <summary>
            Implements the vdDimension object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdDimension.#ctor(VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Initializes a new instance of the vdEllipse object and registers it to the passed Document.
            </summary>
            <param name="doc">The Document where the object is going to be registered.</param>
            <remarks>Calling this Constructor there is no need to call SetUnRegisterDocument(doc) ,setDocumentDefaults() methods after the creation of the object.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdDimension.#ctor">
            <summary>
            Initializes a new instance of the vdDimension object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdDimension.GetTableDependecies(VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs)">
            <summary>
            Fills the passed <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> args  with all the table references of this object (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc). 
            </summary>
            <param name="args"> 
            A  <see cref="T:VectorDraw.Professional.vdPrimaries.vdTableDependeciesArgs"/> object where the table references of this object will be added to.
            </param>
            <remarks>
            Called by the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.Purge"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.MergeTables(VectorDraw.Professional.vdObjects.vdDocument,System.Boolean,System.Boolean)"/> , <see cref="M:VectorDraw.Professional.vdObjects.vdPrimary.IsTableObjectDependOn(VectorDraw.Professional.vdObjects.vdPrimary)"/>  method, or before deleting a table object.
            User custom objects that derived from vdFigure must implement this method and add the table references objects (vdLayer, vdBlock, vdDimstyle, vdLineType, vdTextstyle, vdImageDef, vdHatchPattern etc) to the passed argument 
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdDimension.IntersectWith(VectorDraw.Professional.vdPrimaries.vdFigure,VectorDraw.Professional.Constants.VdConstInters,VectorDraw.Geometry.gPoints)">
            <summary>
            Finds the intersection points of an object with another object.
            </summary>
            <param name="pEntity">The entity with which the intersection of the object will be done.</param>
            <param name="intersectOption"><see cref="T:VectorDraw.Professional.Constants.VdConstInters"/> constant</param>
            <param name="intPoints">A precreated gPoints collection in which the instersection points will be added.The points are returned in WCS.</param>
            <returns>True if at least one intersection point is found.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdDimension.MatchProperties(VectorDraw.Professional.vdObjects.vdPrimary,VectorDraw.Professional.vdObjects.vdDocument)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="_from">The object from which the properties values will be read.</param>
            <param name="thisdocument">The vdDocument object where this object belongs.</param>
            <remarks >
            If thisdocument parameter is null then the from's object Document is used instead.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdDimension.GetGripPoints">
            <summary>
            A function returning the grip points of the object.
            </summary>
            <returns>Returns a new instance of gpoints object containing the grip points of the object.</returns>
            <remarks>
            The returning points are in World coordinate system(WCS).
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnGetGripPoints"/> event.
            When implementing this method the <see cref="M:VectorDraw.Professional.vdFigures.vdDimension.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)"/> must be also override according to the new selected grip points.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdDimension.MoveGripPointsAt(VectorDraw.Geometry.Int32Array,System.Double,System.Double,System.Double)">
            <summary>
            This function is intended to be called during a grip edit of the vDimension object. 
            </summary>
            <param name="Indexes">Represents a zero based array of the grip indexes that will be moved.</param>
            <param name="dx">The dx distance that the grip is moved.</param>
            <param name="dy">The dy distance that the grip is moved.</param>
            <param name="dz">The dz distance that the grip is moved.</param>
            <seealso cref="M:VectorDraw.Professional.vdFigures.vdDimension.GetGripPoints"/>
            <remarks>
            Raises the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnMoveGripPointsAt"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdDimension.InitializeProperties">
            <summary>
            Resets the properties of the vdDimension object to the Default values.
            </summary>
            <remarks>
            Default values:All Points Initialize to (0.0,0.0,0.0),dimText = "", dimType = dim_Aligned,Rotation = 0,
            UsingDefaultTextPosition = true, and also initialize the Style of the vdDimension object.
            If the object is Document Registered then it's common properties with the Active Document's properties
            will be overriden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdDimension.ToString">
            <summary>
            Gets a System.String that represents the type of the vdDimension Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdDimension.HasOverwritevalue(VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite)">
            <summary>
            Checks if a specific ovewrite value exists to the dimension.
            </summary>
            <param name="value">A value representing a specific ovewrite value.</param>
            <returns>Returns true if the dimension ovewrites the specific value.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdDimension.dimstyle(VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite)">
            <summary>
            Gets the vdDimstyle object of the dimension.
            </summary>
            <param name="value">A specific ovewrite value for the dimension.</param>
            <returns>Returns the vdDimstyle object of the dimension.If the dimension has ovewrite value specified
            by the parameter then a custom vdDimstyle object is returned contaning the ovewrite value.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdDimension.GetFormattedText">
            <summary>
            Get the text of the dimension as string.
            </summary>
            <returns>Returns a string representing the text of the dimension.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdDimension.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdDimension.GetdimDefaultText">
            <summary>
            Returns the default string that will be displayed to the dimension calculated by the distance of the dimension's points and is the text that will be displayed after an update of the dimension.
            </summary>
            <returns>The calculated string.</returns>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.GetDimensionText"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdDimension.GetDisplayedText">
            <summary>
            Returns the text that is displayed to the dimension or null if the dimension uses a block that does not contain a Text or Mtext object.
            </summary>
            <returns>Returns the displayed text.</returns>
            <remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.GetDimensionText"/> event.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdDimension.GetMtextPosition">
            <summary>
            returns the position of the dimension text Insertion point in World CS.
            </summary>
            <returns>returns the position of the dimension text Insertion point in World CS.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdDimension.Explode">
            <summary>
            Explodes the vdDimension object into it's entities.
            </summary>
            <returns>Returns a collection of entities that draw the vdDimensino object(vdline,vdblock).</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdDimension.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdDimension.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Called in order to draw the object in a specified vdRender object.
            </summary>
            <param name="render">The vdRender object in which the object will be drawn.</param>
            <returns><see cref="T:VectorDraw.Render.vdRender.DrawStatus"/>.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdDimension.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdDimension object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdDimension.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdDimension object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdDimension.ShouldBeTransformed(VectorDraw.Professional.vdCollections.vdSelection,System.Boolean)">
            <summary>
            This method is used in order to determine what should happen when a transformBy occurs in a collection.
            </summary>
            <param name="selset">The selection of entities that is going to be transformed.</param>
            <param name="Disconnect">A boolean value representing if the object should disconnect from it's reference , referenceobj = null</param>
            <returns>True if the transform should occur or false if not.</returns>
            <remarks>
            This method is used for example in the iteration of the CmdScale, when the user selects entities to scale then this method will return false if the reference object is also chosen in the selection so the Dimension is not transformed because it will apply the changes when the reference object is scaled.
            </remarks>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdDimension.SetAngularFrom2Lines(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Set the dimension type <see cref="F:VectorDraw.Professional.Constants.VdConstDimType.dim_Angular"/> and calculate the Angle Vertex points by two lines.
            </summary>
            <param name="Line1Start">Start Point of First line in WCS.</param>
            <param name="Line1End">End Point of First line in WCS.</param>
            <param name="Line2Start">Start Point of Second line in WCS.</param>
            <param name="Line2End">End Point of Second line in WCS.</param>
            <param name="ArcPoint">The point defining the location of dimension arc in WCS.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdFigures.vdDimension.VectorDraw#Professional#vdObjects#IvdBaseObject#get_Id">
            <summary>
            Implements the vdDimension object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.UserBlock">
            <summary>
            Returns a user ovveride vdBlock used to draw the dimension.
            </summary>
            <remarks>Entities of UserBlock must be in Entity Coordinate System Plane.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.BoundingBox">
            <summary>
            Gets the Bounding Box of the vdDimension object in WorldCoordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.DimOverwriteValue">
            <summary>
            Get/Set a value indicating which ovewrite values has the vdDimension object.
            </summary>
            <remarks>
            It is recomended to use the <see cref="M:VectorDraw.Professional.vdFigures.vdDimension.HasOverwritevalue(VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite)"/> method to check 
            the ovewrite values the dimension has.
            The Integer value represents the following values : <see cref="T:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite"/>
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.ExtrusionVector">
            <summary>
            Get/Set the 3D vector extrusion direction for the object.
            </summary>
            <remarks> Default value is (0,0,1) and the object is drawn in the XY plane.
            Is a one-unit length vector relative to World Coordinate System(WCS).</remarks>
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.DefPoint1">
            <summary>
            Get/Set the Definition point 1 of a vdDimension object in WCS.
            </summary>
            <remarks>
            Default value (0.0,0.0,0.0)
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.DefPoint2">
            <summary>
            Get/Set the Definition point 2 of a vdDimension object in WCS.
            </summary>
            <remarks>
            Default value (0.0,0.0,0.0)
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.DefPoint3">
            <summary>
            Get/Set the Definition point 3 of a vdDimension object in WCS.
            </summary>
            <remarks>
            Default value (0.0,0.0,0.0)
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.DefPoint4">
            <summary>
            Get/Set the Definition point 4 of a vdDimension object in WCS.
            </summary>
            <remarks>
            Default value (0.0,0.0,0.0)
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.TextPosition">
            <summary>
            Get/Set the text position of the dimension in WCS.
            </summary>
            <remarks>
            Default value (0.0,0.0,0.0)
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
            <seealso cref="P:VectorDraw.Professional.vdFigures.vdDimension.UsingDefaultTextPosition"/>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.LinePosition">
            <summary>
            Get/Set the line position of the dimension in WCS.
            </summary>
            <remarks>
            Default value (0.0,0.0,0.0)
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.Style">
            <summary>
            Get/Set the vdDimstyle of the vdDimension object.
            </summary>
            <remarks>
            Default value a new created vdDimstyle object with default values.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.dimText">
            <summary>
            Get/Set the dimension's text.
            </summary>
            <remarks>
            Default value "".
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.dimType">
            <summary>
            Get/Set the dimension's type.
            </summary>
            <remarks>
            Default value dim_Aligned.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.UsingDefaultTextPosition">
            <summary>
            Get/Set a boolean value representing the dimension's text position.
            </summary>
            <remarks>
            Default value true.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.Rotation">
            <summary>
            Get/Set the rotation of the dimension in radians.
            </summary>
            <remarks>
            Default value 0.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.HorizontalRotation">
            <summary>
            Get/Set the angle in radians between the ECSMatrix X axis and World2UserMatrix X axis.
            </summary>
            <remarks>
            Default value 0.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.Measurement">
            <summary>
            Get/Set the measurement of the dimension.
            </summary>
            <remarks>
            Default value 0.0. This property equals with the distance calculated by the DimLength. It is used also when reading DXF/DWG files as the group code 42. The user can set this in order to assign the measurement of the dimension. Any change/update to the dimension will cause this property to be recalculated.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.Oblique">
            <summary>
            Get/Set the oblique angle of the dimension in radians.
            </summary>
            <remarks>
            Default value 0.0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.DimLength">
            <summary>
            Get the length measured by the dimension in drawing units.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.ArrowBlock">
            <summary>
            Get/Set the vdBlock object used by the dimension as arrow.
            </summary>
            <remarks>
            When setting this value the dimension gets an ovewrite value representing this property.
            Default value null and VDDIM_DEFAULT when initialized in a Document.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.ArrowBlock2">
            <summary>
            Get/Set the second vdBlock object of the dimension style. If set to null the <see cref="P:VectorDraw.Professional.vdFigures.vdDimension.ArrowBlock"/> object will be used.
            </summary>
            <remarks>
            When setting this value the dimension gets an ovewrite value representing this property.
            Default value null and VDDIM_DEFAULT when initialized in a Document.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.ArrowSize">
            <summary>
            Get/Set the arrow size of the dimension.
            </summary>
            <remarks>
            Default value 1.0.
            When setting this value the dimension gets an ovewrite value representing this property.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.TextStyle">
            <summary>
            Get/Set the vdTextstyle object used for the dimension's text.
            </summary>
            <remarks>
            Default value the standard Document's Textstyle or null if no Document is present.
            When setting this value the dimension gets an ovewrite value representing this property.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.TextHeight">
            <summary>
            Get/Set the Dimension's text height in drawing units.
            </summary>
            <remarks>
            Default value 1.0.
            When setting this value the dimension gets an ovewrite value representing this property.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.TextDist">
            <summary>
            Get/Set the distance around the dimension's text.
            </summary>
            <remarks>
            Default value 0.1.
            When setting this value the dimension gets an ovewrite value representing this property.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.TextVerJust">
            <summary>
            Get/Set the vertical justification of dimension text along the dimension line.
            </summary>
            <remarks>
            Default value DIMTEXT_ABOVE.
            When setting this value the dimension gets an ovewrite value representing this property.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.TextHorRotation">
            <summary>
            Get/Set the position of dimension text inside the extension lines(aligned or horizontal).
            </summary>
            <remarks>
            Default value DIMTEXT_ALIGN.
            When setting this value the dimension gets an ovewrite value representing this property.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.TextColor">
            <summary>
            Get/Set the dimension's text color.
            </summary>
            <remarks>
            Default value a color with index 7.
            When setting this value the dimension gets an ovewrite value representing this property.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.ExtLineColor">
            <summary>
            Get/Set the dimension's extension lines color.
            </summary>
            <remarks>
            Default value a color with index 7.
            When setting this value the dimension gets an ovewrite value representing this property.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.ExtLineDist1">
            <summary>
            Get/Set how far to extend the extension lines beyond the dimension line in drawing units.
            </summary>
            <remarks>
            Default value 1.0.
            When setting this value the dimension gets an ovewrite value representing this property.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.ExtLineDist2">
            <summary>
            Get/Set how far extension lines are offset from origin points in drawing units.
            </summary>
            <remarks>
            Default value 1.0.
            When setting this value the dimension gets an ovewrite value representing this property.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.ExtLineVisible">
            <summary>
            Get/Set a boolean value indicating the display of the extension lines.
            </summary>
            <remarks>
            Default value true.
            When setting this value the dimension gets an ovewrite value representing this property.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.ScaleFactor">
            <summary>
            Get/Set the scale factor of the dimension.
            </summary>
            <remarks>
            Default value 1.0.
            This scale factor influences the arrows,lines and text not the length of the dimension.
            When setting this value the dimension gets an ovewrite value representing this property.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.DecimalPrecision">
            <summary>
            Get/Set the number of decimal places displayed in default dimension text.
            </summary>
            <remarks>
            Default value 4.
            When setting this value the dimension gets an ovewrite value representing this property.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.LinearScaleFactor">
            <summary>
            Get/Set the scale factor for dimensioning by which the default dimension Length is multiplyed.
            </summary>
            <remarks>
            Default value 1.0.
            When setting this value the dimension gets an ovewrite value representing this property.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.TextMovement">
            <summary>
            Get/Set a value that represents how the dimension will change according to the dimension's text position change.
            </summary>
            <remarks>
            Default value KeepDimLineWithText.
            When setting this value the dimension gets an ovewrite value representing this property.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.LineForced">
            <summary>
            Get/Set the visibility of extension lines between extensions viable only for radial and diameter dimensions.
            </summary>
            <remarks>
            Default value false.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.LineIsInvisible">
            <summary>
            Get/Set the visibility of dimension base line.
            </summary>
            <remarks>
            Default value false.
            When setting this value the dimension gets an ovewrite value representing this property.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.DimAunit">
            <summary>
            Get/Set the units mode for angular dimensions.
            </summary>
            <remarks>
            Default value au_Degrees.
            When setting this value the dimension gets an ovewrite value representing this property.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.DimAdec">
            <summary>
            Get/Set the number of decimal places for angular dimensions.
            </summary>
            <remarks>
            Default value 4.
            When setting this value the dimension gets an ovewrite value representing this property.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.DimLunit">
            <summary>
            Get/Set the Units mode for linear dimensions.
            </summary>
            <remarks>
            Default value lu_Decimal.
            When setting this value the dimension gets an ovewrite value representing this property.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.DimTol">
            <summary>
            Appends tolerances to dimension text.
            </summary>
            <remarks>
            Default value false.
            When setting this value the dimension gets an ovewrite value representing this property.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.DimTp">
            <summary>
            Specifies the tolerance limit for dimension text.
            </summary>
            <remarks>
            Default value 1.0.
            When setting this value the dimension gets an ovewrite value representing this property.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.DimZin">
            <summary>
            Get/Set a value representing the suppression of zeros in the default dimension text value.
            </summary>
            <remarks>
            Default value LZeroSuppression.None.
            When setting this value the dimension gets an ovewrite value representing this property.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.DimaZin">
            <summary>
            Controls the suppression of zeros in the default dimension text value for Angular dimensions.
            </summary>
            <remarks>
            Default value AZeroSuppression.None.
            When setting this value the dimension gets an ovewrite value representing this property.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.DimTm">
            <summary>
            Specifies the tolerance lower limit for dimension text.
            </summary>
            <remarks>
            Default value 1.0.
            When setting this value the dimension gets an ovewrite value representing this property.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.PostString">
            <summary>
            Specifies a text prefix or suffix (or both) to the dimension measurement.
            </summary>
            <remarks>
            Default value "".
            When setting this value the dimension gets an ovewrite value representing this property.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.DimLineColor">
            <summary>
            Represents the color of dimension lines and arrowheads.
            </summary>
            <remarks>
            Default value a clolor with index 7.
            When setting this value the dimension gets an ovewrite value representing this property.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.AngularType">
            <summary>
            Determines if the Angular Dimension will measure the angle or the Length.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.DimTextAlignToView">
             <summary>
             A boolean value that defines if the plane of the Dimension's Text object is relative to the current view.
             </summary>
             <remarks>
             Default value is False.
             Please note that when DimTextAlignToView is true the extrusion vector of the Dimension's Text object is relative to Current view coordinative system and not to World as the default behaviour is.
            Also the Rotaion property when DimTextAlignToView is true is relative and counterclockwise from axis X of current view coordinative system.
             Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
             Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
             This will override the vdDimension's and vdDimStyle's text alignement.
             </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.DimTextAlignToViewSize">
            <summary>
            Get/Set the height of the Dimension's Text object in output Device millimeters for positive or hundreds of millimeters for negative.
            </summary>
            <remarks>
            If  value is not 0 then the height of the object will be the same independently of current zoom.
            If value = 0 height is relative to Drawing Units.
            Negative values are in hundreds of millimeters of output device (screen/printer etc). For example, in order the object to have 1.5 millimeters height you must set it to -150 (means 150/100 millimeters).
            Default value = 0.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnBeforeModifyObject"/> event.
            Raizes the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnAfterModifyObject"/> event.
            This will override the vdDimension's and vdDimStyle's text size.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.ECSMatrix">
            <summary>
            Gets the matrix which is used to transform vectors or points from the 
            object's object coordinate system (OCS) to the World Coordinate System (WCS).
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.ReferenceObj">
            <summary>
            The reference Object of the vdDimension
            </summary>
            <remarks>
            This property is internally used currently.
            It supports vdCircle and vdArc objects in order to associate a Radial or Diameter Dimension with these objects.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdFigures.vdDimension.param1">
            <summary>
            This is used to identify the segment of the polyline that is referenced , used only when the ReferenceObj is a vdPolyline object.
            </summary>
            <remarks>This is an integer value representing the segment of the polyline that is referenced.</remarks>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite">
            <summary>
            Values representing ovewrite values of the vdDimension object that differs from it's vdDimstyle value.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite.None">
            <summary>
            None override values. All properties of the Dimension reference to the corresponding properties of the Dimstyle that belongs.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite.ScaleFactor">
            <summary>
            Represents the scale factor for the dimension.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite.ArrowSize">
            <summary>
            Represents the size of the vdBlock object used as arrow
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite.TextHeight">
            <summary>
            Represents the height for the text of the dimension.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite.TextDist">
            <summary>
            Represents the distance around the dimension text.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite.TextHorJust">
            <summary>
            Represents the horizontal justification for the text of the dimension.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite.TextVerJust">
            <summary>
            Represents the vertical justification for the text of the dimension.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite.TextHorRotation">
            <summary>
            Represents the position for the text inside the extension lines(aligned or horizontal)
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite.TextColor">
            <summary>
            Represents the color for the text of the dimension.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite.ExtLineColor">
            <summary>
            Represents the color for the extension lines of the dimension.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite.ExtLineDist1">
            <summary>
            Specifies how far to extend the extension line beyond the dimension line in drawing units.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite.ExtLineDist2">
            <summary>
            Specifies how far extension lines are extended from origin points in drawing units.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite.ExtLineVisible">
            <summary>
            Specifies the visibility of the extension lines of the dimension.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite.DecimalPrecision">
            <summary>
            Specifies the Decimal precision for the text of the dimension.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite.LinearScaleFactor">
            <summary>
            Specifies the scale factor for dimensioning by which the default dimension Length is multiplyed.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite.LineIsInvisible">
            <summary>
            Specifies the visibility of dimension's base line.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite.DimLunit">
            <summary>
            Specifies Units mode for linear dimensions.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite.DimAunit">
            <summary>
            Specifies Units mode for angular dimensions.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite.DimAdec">
            <summary>
            Specifies the number of decimal places for angular dimensions.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite.DimTol">
            <summary>
            Appends tolerances to dimension's text.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite.DimTp">
            <summary>
            Specifies the tolerance's limit for the text of the dimension.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite.ArrowBlock">
            <summary>
            Represents the vdBlock object used as arrow.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite.DimZin">
            <summary>
            Controls the suppression of zeros in the default dimension text value.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite.DimaZin">
            <summary>
            Controls the suppression of zeros in the default dimension text value for Angular dimensions.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite.DimTm">
            <summary>
            Specifies the tolerance lower limit for dimension text.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite.DimLineColor">
            <summary>
            Specifies the color to dimension's lines and arrowheads.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite.PostString">
            <summary>
            Specifies a text prefix or suffix (or both) to the dimension measurement.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite.TextStyle">
            <summary>
            Represents the vdTextstyle object used as textstyle for the text of the dimension.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite.TextMovement">
            <summary>
            Represents how the dimension will change according to the dimension's text position change.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite.ArrowBlock2">
            <summary>
            Represents the vdBlock object used as the second arrow.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.vdDimension.DimOverWrite.LineForced">
            <summary>
            Get/Set a boolean value that forces line extensions between extensions if true.Viable for radial and diameter dimensions.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdDummyExpandableConverter">
            <summary>
            Dummy TypeConverter to hide Size expandable properties.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdDummyExpandableConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdFileProperties">
            <summary>
            Represents the file properties of a Document.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdFileProperties.#ctor">
            <summary>
            Initializes the vdFileProperties object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdFileProperties.ToString">
            <summary>
            Gets a System.String that represents the Created time of the Document object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdFileProperties.GetPreviewBitmapDIBBytes">
            <summary>
            Get the bytes of the preview without the BITMAPFILEHEADER.
            </summary>
            <returns>Returns an array of bytes of the preview image of the file.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdFileProperties.GetPreviewBitmapBytes">
            <summary>
            Get the preview image of the file of the Document.
            </summary>
            <returns>Returns an array of bytes containing the BITMAPFILEHEADER,BITMAPINFO and the image bytes.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdFileProperties.GetPreviewImage">
            <summary>
            Get the preview image of the file.
            </summary>
            <returns>Get an Image object representing the preview of the Document's file.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdFileProperties.SetPreviewImage(System.Drawing.Image)">
            <summary>
            Set the another preview for the Document's file.
            </summary>
            <param name="image">An Image object representing the preview of the Document's file.
            This image is streched to fit to the <see cref="P:VectorDraw.Professional.vdObjects.vdFileProperties.ImagePreviewSize"/>.
            </param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdFileProperties.Reset">
            <summary>
            Resets all file properties
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdFileProperties.CopyFrom(VectorDraw.Professional.vdObjects.vdFileProperties,System.Boolean)">
            <summary>
            Copies all properties from the passed vdFileProperties object.
            </summary>
            <param name="from">Another vdFileProperties object to copy the properties from.</param>
            <param name="onlySerializable">If true only the serializable members are copy from.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdFileProperties.CopyFrom(VectorDraw.Professional.vdObjects.vdFileProperties)">
            <summary>
            Copies all properties from the passed vdFileProperties object.
            </summary>
            <param name="from">Another vdFileProperties object to copy the properties from.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdFileProperties.Clone">
            <summary>
            Creates and returns a copy of this vdFileProperties object. 
            </summary>
            <returns>Returns a copy of this vdFileProperties object.</returns>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdFileProperties.SetCreatedTime(System.Int64)">
            <summary>
            Sets the Create time from a Windows file time (long) object.
            </summary>
            <param name="binary">A long representing the create windows file time.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdFileProperties.SetModifiedTime(System.Int64)">
            <summary>
            Sets the Modified time from a Windows file time (long) object.
            </summary>
            <param name="binary">A long representing the modified windows file time.</param>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdFileProperties.OnSaveUpdateTime">
            <summary>
            Updates the file properties times(ModifiedTime,TotalEditingTime) using the current system time.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdFileProperties.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the vdFileProperties object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Professional.vdObjects.vdFileProperties.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the vdFileProperties object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFileProperties.Gps_Map">
            <summary>
            This property is to set the longtitude and latidude of a drawing and use this setting while exporting to PDF format.
            </summary>
            <example>Sample code of using GPS , requesting two points of the drawing from the user and then type the Long/Lat of these points.<code>
                    doc.Prompt("Pick a point");
                    gPoint p1 = doc.ActionUtility.getUserPoint() as gPoint;
                    doc.Prompt(null);
                    if (p1 == null) return;
                    doc.Prompt("Latitude,Longitude");
                    string str1 = doc.ActionUtility.getUserString();
                    doc.Prompt(null);
                    if (str1 == null) return;
            
                    doc.Prompt("Pick a point");
                    gPoint p2 = doc.ActionUtility.getUserPoint() as gPoint;
                    doc.Prompt(null);
                    if (p1 == null) return;
                    doc.Prompt("Latitude,Longitude");
                    string str2 = doc.ActionUtility.getUserString();
                    doc.Prompt(null);
                    if (str2 == null) return;
                    //3107 GDA_1994_South_Australia_Lambert 
                    string ellipsoid = "PROJCS[\"GDA_1994_South_Australia_Lambert\",GEOGCS[\"GCS_GDA_1994\",DATUM[\"D_GDA_1994\",SPHEROID[\"GRS_1980\",6378137.0,298.257222101]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Lambert_Conformal_Conic\"],PARAMETER[\"False_Easting\",1000000.0],PARAMETER[\"False_Northing\",2000000.0],PARAMETER[\"Central_Meridian\",135.0],PARAMETER[\"Standard_Parallel_1\",-28.0],PARAMETER[\"Standard_Parallel_2\",-36.0],PARAMETER[\"Latitude_Of_Origin\",-32.0],UNIT[\"Meter\",1.0]]";
                    ////the ellipsoid must be valid from https://developers.arcgis.com/javascript/3/jshelp/pcs.html and contains a valid Central_Meridian nearest to drawing area longitude values
                    doc.FileProperties.Gps_Map = new GPS.GPS_MAP(ellipsoid, new GPS.GPS_POSITION(str1), new GPS.GPS_POSITION(str2), p1, p2);
            </code>
            </example>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFileProperties.vdExportFlags">
            <summary>
            This property is used while exporting vdml,vdcl files.
            <seealso cref="P:VectorDraw.Serialize.Serializer.vdExportFlags"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFileProperties.UseGuidHandleTable">
            <summary>
            A static property that enable / disable the Guid Table Creation for a vdDocument object. <see cref="P:VectorDraw.Professional.vdObjects.vdDocument.HandleTableGuid"/> property.
            Default value is false.Changing this value is applied to all vdDocument objects.
            This value is better to be assign in the application initialization.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFileProperties.ClipboardFormat">
            <summary>
            Specifies the data used from the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdClipCopy(System.Object)"/> and <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdClipCut(System.Object)"/> commands.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFileProperties.CompressionMethod">
            <summary>
            Get/Set the compression method used to save the data.
            </summary>
            <remarks>Default value is <see cref="F:VectorDraw.Professional.vdObjects.vdFileProperties.Compression.DefaultCompression"/></remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFileProperties.PDFExportProperties">
            <summary>
            Get/Set the PDF export properties used when saving in PDF format.
            </summary>
            <remarks>Default value is <see cref="F:VectorDraw.Professional.vdObjects.vdFileProperties.PDFExportPropertiesFlags.DrawOutlineText"/></remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFileProperties.ImageSaveJPGQuality">
            <summary>
            Get/Set the default image quality (0=lowest to 100=highest) when saving in a raster JPG image using the <see cref="M:VectorDraw.Professional.vdObjects.vdDocument.SaveAs(System.String,System.Drawing.Image)"/> method and the <see cref="T:VectorDraw.Professional.vdObjects.vdPrint"/> to export to image.
            </summary>
            <remarks>This property specifies the level of compression for an JPG image. The range of useful values for this is from 0 to 100. The lower the number specified, the higher the compression and therefore the lower the quality of the image. Zero would result in the lowest quality image and 100 the highest. Default values is 255 and the default GDI jpeg export is used.</remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFileProperties.ImportDWGFlags">
            <summary>
            Controls the import of dwg files.
            </summary>
            <remarks>Default value is <see cref="F:VectorDraw.Professional.vdObjects.vdFileProperties.DWGImportFlags.AnalyzePolylineCurves"/>
            This property is not saved with the drawing.
            </remarks>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFileProperties.CacheLevel">
            <summary>
            Gets or sets the cache policy when opening a drawing from a url.Not saved with drawing.
            vaid values:
            0 :NoCache           ,No entries are taken from caches, added to caches, or removed from caches between the client and server
            1 :BypassCache       ,Satisfies a request by using the server. No entries are taken from caches,
                                  added to caches, or removed from caches between the client and server.
            2 :CacheOnly         ,Satisfies a request using the locally cached resource; does not send a request
                                   for an item that is not in the cache.
            3 :CacheIfAvailable  ,Satisfies a request for a resource from the cache, if the resource is available;
                                  otherwise, sends a request for a resource to the server. If the requested
                                  item is available in any cache between the client and the server, the request
                                  might be satisfied by the intermediate cache.
            4 :Revalidate        ,Satisfies a request by using the cached copy of the resource if the timestamp
                                  is the same as the timestamp of the resource on the server; otherwise, the
                                  resource is downloaded from the server, presented to the caller, and stored                 
                                  in the cache.
            5 :Reload             ,Satisfies a request by using the server. The response might be saved in the
                                   cache. In the HTTP caching protocol, this is achieved using the no-cache
                                   cache control directive and the no-cache Pragma header.
            6 :NoCacheNoStore    ,Never satisfies a request by using resources from the cache and does not
                                  cache resources. If the resource is present in the local cache, it is removed.
            default value = 3
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFileProperties.ContainsLargeRangeCharacters">
            <summary>
            Specifies if the document contains strings with characters in range bigger than 56207.Used when saving in vdml or vdcl format.
            This may slow down the saving time.
            Set it to true , before saving the document in vdml,vdcl format, if you are using serializable string properties with characters in range bigger than 56207.
            Default value is false.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFileProperties.DoublePrecision">
            <summary>
            Get/Set the maximum number of decimal digits used when saving double values in vdml format.Valid range 0 - 17
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFileProperties.DefaultDrawingCodePage">
            <summary>
            Get/Set the Default Code Page of the drawing.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFileProperties.ExternalFileVersion">
            <summary>
            Get/Set a string representing the version of the Document's file.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFileProperties.ImagePreviewSize">
            <summary>
            Get/Set the preview image size of the file.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFileProperties.SaveImagePreview">
            <summary>
            Get/Set a boolean value representing if the preview image will be saved wwhen the file is saved or not.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFileProperties.Title">
            <summary>
            Get/Set a string representing a title for the Document's file.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFileProperties.Subject">
            <summary>
            Get/Set a string representing a subject for the Document's file.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFileProperties.Author">
            <summary>
            Get/Set a string representing the author for the Document's file.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFileProperties.CreatedTime">
            <summary>
            Get a DateTime object representing the date the file was created.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFileProperties.ModifiedTime">
            <summary>
            Get a DateTime object representing the date the file was modified last time.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFileProperties.TotalEditingTime">
            <summary>
            Get the total editing time of the file.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFileProperties.CustomProperties">
            <summary>
            Get an array of the Custom properties of the file.It is recommended that the custom properties follow the rule Tag=value.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdObjects.vdFileProperties.FilePermissions">
            <summary>
            Get/Set the File Permissions for this Document.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdFileProperties.FilePermissionsEnum">
            <summary>
            File permissions of the file. You can disable editing of the file using the <seealso cref="P:VectorDraw.Professional.vdObjects.vdFileProperties.FilePermissions"/>
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdFileProperties.FilePermissionsEnum.None">
            <summary>
            None file permission.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdFileProperties.FilePermissionsEnum.Edit">
            <summary>
            Editing of the drawing is enabled
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdFileProperties.Compression">
            <summary>
            Represents the method used to save compressed data
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdFileProperties.Compression.DefaultCompression">
            <summary>
            The data saved with the default compression
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdFileProperties.Compression.BigDocumentSizeCompression">
            <summary>
            The data saved using copression that supports large size of data biger than 4GBytes
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdFileProperties.PDFExportPropertiesFlags">
            <summary>
            These values take effect when exporting a file in PDF format.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdFileProperties.PDFExportPropertiesFlags.DrawOutlineText">
            <summary>
            The texts are drawn as solid polygons and cannot be selected or edited.
            The Extends of ActiveLayout are exported fitting in the selected paper.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdFileProperties.PDFExportPropertiesFlags.UsePrinterPropertiesWithOutlineText">
            <summary>
            When using this value the activelayout's printer properties are used (orientaion, Margins , papersize, printingwindow) and the texts are drawn as solid polygons and cannot be selected or edited.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdFileProperties.PDFExportPropertiesFlags.DrawTextAsSelected">
            <summary>
            The texts can be selected and edited. 
            The Extends of ActiveLayout are exported fitting in the selected paper.
            </summary>
            <remarks>
            Only strings that contains characters in range between 0 to 255, after their conversion using the selected CodePage, are drawn as selected.
            Else they are drawn as solid polygons.
            </remarks>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdFileProperties.PDFExportPropertiesFlags.UsePrinterWithTextAsSelected">
            <summary>
            When using this value the activelayout's printer properties are used (orientaion, Margins , papersize, printingwindow) and the texts can be selected and edited. 
            </summary>
            <remarks>
            Only strings that contains characters in range between 0 to 255, after their conversion using the selected CodePage, are drawn as selected.
            Else they are drawn as solid polygons.
            </remarks>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdFileProperties.DWGImportFlags">
            <summary>
            Controls the import of dwg files.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdFileProperties.DWGImportFlags.None">
             <summary>
            Default with no flags for normal import.
             </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdFileProperties.DWGImportFlags.IgnoreUnusedBlocks">
            <summary>
            Open drawing without importing unused <see cref="T:VectorDraw.Professional.vdPrimaries.vdBlock"/> objects for lower memory consumption.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdFileProperties.DWGImportFlags.IgnoreXProperties">
            <summary>
            Open drawing without importing any <see cref="T:VectorDraw.Professional.vdObjects.vdXProperty"/>
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdFileProperties.DWGImportFlags.IgnoreAll">
            <summary>
            Open drawing without importing  unused blocks and all Xproperties
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdFileProperties.DWGImportFlags.ConvertToDxf">
            <summary>
            Useful with x86 application and big drawings , for less memory usage.
            When open dwg : Convert the dwg to a temporary dxf file and open the dxf file.
            When save as dwg: Convert the document to a temporary dxf file and save the dxf file as dwg.
            temporary dxf files are deleted after conversion.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdFileProperties.DWGImportFlags.ConvertToDxf_IgnoreUnusedBlocks">
            <summary>
            Both of <see cref="F:VectorDraw.Professional.vdObjects.vdFileProperties.DWGImportFlags.ConvertToDxf"/> and <see cref="F:VectorDraw.Professional.vdObjects.vdFileProperties.DWGImportFlags.IgnoreUnusedBlocks"/> are used.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdFileProperties.DWGImportFlags.ConvertToDxf_IgnoreAll">
            <summary>
            Both of <see cref="F:VectorDraw.Professional.vdObjects.vdFileProperties.DWGImportFlags.ConvertToDxf"/> and <see cref="F:VectorDraw.Professional.vdObjects.vdFileProperties.DWGImportFlags.IgnoreAll"/> are used. 
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdFileProperties.DWGImportFlags.AnalyzePolylineCurves">
            <summary>
            Convert imported polylines with spline data to simple polylines by analyzing spline curves to points
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdFileProperties.DWGImportFlags.IgnoreSections">
            <summary>
            Open Drawing without importing SectionObjects
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdFileProperties.DWGImportFlags.ReadDynamicBlockProperties">
            <summary>
            Read Dynamic Block properties of all vdInsert that reference to a dynamic block and add them to Xproperties with 'DYN_BLOCK' prefix.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdFileProperties.DWGImportFlags.IgnoreOnePolylineHatches">
            <summary>
            VectorDraw is converting a vdpolyhatch object into a polyline if the vdpolyhatch object contains only one polyline region.Adding this value will open the hatches always as vdpolyhatc objects and nbot convert them into polylines with hatchproperties.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdFileProperties.DWGImportFlags.IgnoreDefPoints">
            <summary>
            By setting this value before open a file then the vdPoints that references to a Layer with name DEFPOINTS are not added to the document.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdFileProperties.DWGImportFlags.ConvertProxyShellToPolygons">
            <summary>
            Convert imported 3d proxy shell elements to filled polygons
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdFileProperties.DWGImportFlags.Default">
            <summary>
            The Flag that by default is used.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdObjects.vdFileProperties.ClipboardFormats">
            <summary>
            Specifies the data used from the <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdClipCopy(System.Object)"/> and <see cref="M:VectorDraw.Professional.ActionUtilities.vdCommandAction.CmdClipCut(System.Object)"/> commands
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdFileProperties.ClipboardFormats.DocumentStream">
            <summary>
            Clipboard data contains a byte array that represents a vdDocument produced by  <see cref="M:VectorDraw.Professional.vdCollections.vdSelection.ToDocument(VectorDraw.Geometry.gPoint)"/> method.
            The System.Windows.Forms.Clipboard.GetData(vdDocument.ClipboardVDMLBytesFormat) can be used to access data
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdFileProperties.ClipboardFormats.Image">
            <summary>
            Clipboard data contains an Image. The System.Windows.Forms.Clipboard.GetImage can be used to access data
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdFileProperties.ClipboardFormats.FileDrop">
            <summary>
            Clipboard data contains an collection of one string that represents an existing file on disk. 
            The System.Windows.Forms.Clipboard.GetFileDropList can be used to access data
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdObjects.vdFileProperties.ClipboardFormats.Default">
            <summary>
            The default data that will added to the CmdClipCopy and CmdClipCut commands.By default all data are added in to the Clipboard.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdEventArgs.IFilterOsnapEventArgs">
            <summary>
            Provides all functionality for the FilterOsnapEventArgs.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdEventArgs.FilterOsnapEventArgs">
            <summary>
             Provides data for the <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnFilterOsnap"/> event.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.vdEventArgs.FilterOsnapEventArgs.#ctor(VectorDraw.Geometry.OsnapPoint)">
            <summary>
            Initializes a new instance of the FilterOsnapEventArgs class.
            </summary>
            <param name="OsnapObject">The <see cref="T:VectorDraw.Geometry.OsnapPoint"/> that will be Filtered by the user inside <see cref="E:VectorDraw.Professional.vdObjects.vdDocument.OnFilterOsnap"/> event.</param>
        </member>
        <member name="P:VectorDraw.Professional.vdEventArgs.FilterOsnapEventArgs.ObjectSnap">
            <summary>
            Returns the Selected <see cref="T:VectorDraw.Geometry.OsnapPoint"/>.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.vdEventArgs.FilterOsnapEventArgs.Cancel">
            <summary>
            Get/Set a property that will info VectorDraw to cancel or not its default implementation after the fire of the event.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Exceptions.UserCancelException">
            <summary>
            Exception thrown when an operation was canceled by user.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Exceptions.UserCancelException.TestThrowUserCancel(VectorDraw.Professional.Utilities.ProgressMeter,System.Windows.Forms.Keys)">
            <summary>
            Stops an operation by throwing an Exception
            </summary>
            <param name="Progress">The active <see cref="T:VectorDraw.Professional.Utilities.ProgressMeter"/>.</param>
            <param name="CancelActionKey">A key value that if it is pressed an exception will be thrown.</param>
        </member>
        <member name="M:VectorDraw.Professional.Exceptions.UserCancelException.#ctor(System.String)">
            <summary>
            Thrown when an operation was canceled by user.
            </summary>
            <param name="Message"></param>
        </member>
        <member name="T:VectorDraw.Professional.Exceptions.vdArgumentException">
            <summary>
            General Exception class.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Exceptions.vdArgumentException.#ctor(System.String)">
            <summary>
            Thrown when an invalid argument value is set.
            </summary>
            <param name="Message">The message that describes the error.</param>
        </member>
        <member name="T:VectorDraw.Professional.Exceptions.InvalidTableNameException">
            <summary>
            Checks if a name given to a collection(like vdDimestyle) is valid or not.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Exceptions.InvalidTableNameException.IsTableNameValid(System.String)">
            <summary>
            Checks if the name given by the parameter is a valid collection name.
            </summary>
            <param name="name">The name to be checked.</param>
            <returns>true if the name is valid.</returns>
        </member>
        <member name="M:VectorDraw.Professional.Exceptions.InvalidTableNameException.#ctor">
            <summary>
            Checks if the name given by the parameter is a valid collection name.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Exceptions.InvalidPropertyValueException">
            <summary>
            Exception thrown from the property list when an invalid value is set to a property of the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Exceptions.InvalidPropertyValueException.#ctor(System.String)">
            <summary>
            Thrown when an invalid property value is set.
            </summary>
            <param name="currentmethod">The current method.</param>
        </member>
        <member name="T:VectorDraw.Professional.Exceptions.vdGeneralException">
            <summary>
            General Exception class for raising Exception in Professional logic and include messages in the vdRes.txt file.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Exceptions.vdGeneralException.#ctor(System.String)">
            <summary>
            Initializes a new Exception.
            </summary>
            <param name="message">The message of the Exception</param>
        </member>
        <member name="T:VectorDraw.Professional.Exceptions.CannotRenameException">
            <summary>
            Thrown when cannot rename an object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Exceptions.CannotRenameException.#ctor(System.String)">
            <summary>
            Thrown when an object cannot be renamed because another object has the same name.
            </summary>
            <param name="name">The name given for chacging the object's name.</param>
        </member>
        <member name="M:VectorDraw.Professional.Exceptions.CannotRenameException.#ctor(System.Object,System.String)">
            <summary>
            Exception thrown when an object cannot be renamed.
            </summary>
            <param name="obj">The object which name cannot be changed.</param>
            <param name="name">The name given for changing the object's name.</param>
            <remarks>
            For example the standard object of a collection (vdDimstyle stadard) cannot be renamed.
            </remarks>
        </member>
        <member name="T:VectorDraw.Professional.Exceptions.CannotDeleteException">
            <summary>
            Thrown when an object cannot be deleted.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Exceptions.CannotDeleteException.#ctor(System.Object)">
            <summary>
            Initializes the Exception when an object cannot be deleted.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:VectorDraw.Professional.Exceptions.ChangeOwnerException">
            <summary>
            Exception thrown when an object cannot change owner.In order to chenge owner
            setOwner to null and then change the owner.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Exceptions.ChangeOwnerException.#ctor(VectorDraw.Professional.vdObjects.vdBaseObject)">
            <summary>
            Initializes the Exception when an object cannot change owner.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:VectorDraw.Professional.Exceptions.DublicateItemInCollection">
            <summary>
            Thrown when an object already exist in collection and cannot be added.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Exceptions.DublicateItemInCollection.#ctor(VectorDraw.Professional.vdObjects.vdObject)">
            <summary>
            Initializes the Exception when an object already exist in collection and cannot be added.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:VectorDraw.Professional.Exceptions.DublicateItemInCollection.#ctor(System.Type)">
            <summary>
            Initializes the Exception when an object already exist in collection and cannot be added.
            </summary>
            <param name="TypeOfObject"></param>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionArc">
            <summary>
            Implements the ActionArc object which is used when adding an arc.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.CommandActions.ActionArc.arc">
            <summary>
            A vdArc object created from the action.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionArc.#ctor(VectorDraw.Geometry.gPoint,System.Double,System.Double,VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Initializes the object with the given parameters.
            </summary>
            <param name="center">Center of the arc</param>
            <param name="rad">The radius of the arc.</param>
            <param name="sa">Start angle of the arc in radians.</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionArc.OnMyPositionChanged(VectorDraw.Geometry.gPoint)">
            <summary>
            Called when the mouse position changes.Changes the end angle of the created arc entity in order to be drawn each time the mouse moves.
            </summary>
            <param name="newPosition">A gPoint representing the new mouse position in User Coordinate System.</param>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionArc.ReferencePoint">
            <summary>
            the reference point of the action in World Coordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionArc.HideRubberLine">
            <summary>
            Get a value that represents if the rubber line is drawn or not.Returns false since a rubber line is needed.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionArc.Entity">
            <summary>
            The entity which is currently selected for this action.Returns the created arc.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionArc.needUpdate">
            <summary>
            Get a value that represents if the entity should be updated after each position change.Returns true since an update is needed.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionArcClockWise">
            <summary>
            Implements an ActionArc object which is used when adding an arc Clockwise.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionArcClockWise.#ctor(VectorDraw.Geometry.gPoint,System.Double,System.Double,VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Initializes the object with the given parameters.
            </summary>
            <param name="center">Center of the arc</param>
            <param name="rad">The radius of the arc.</param>
            <param name="sa">Start angle of the arc in radians.</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionArcClockWise.OnMyPositionChanged(VectorDraw.Geometry.gPoint)">
            <summary>
            Called when the mouse position changes.Changes the end angle(clock wise) of the created arc entity in order to be drawn each time the mouse moves.
            </summary>
            <param name="newPosition">A gPoint representing the new mouse position in User Coordinate System.</param>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionArcClockWise.Value">
            <summary>
            Return the angle selected by the user.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionArc3P">
            <summary>
            Implements an ActionArc3P object which is used when adding an arc with 3 points.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionArc3P.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdPrimaries.vdLayout,VectorDraw.Professional.CommandActions.ActionArc3P.ArcPointType)">
            <summary>
            Initializes the object with the given parameters.
            </summary>
            <param name="reference1">Start point of the arc.</param>
            <param name="reference2">End point of the arc.</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
            <param name="arcPoint">The point type that Action value will return.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionArc3P.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Professional.vdPrimaries.vdLayout)">
            <summary>
            Initializes the object with the given parameters.
            </summary>
            <param name="reference1">Start point of the arc.</param>
            <param name="reference2">End point of the arc.</param>
            <param name="layout">The vdLayout object where the action takes place.</param>
        </member>
        <member name="M:VectorDraw.Professional.CommandActions.ActionArc3P.OnMyPositionChanged(VectorDraw.Geometry.gPoint)">
            <summary>
            Called when the mouse position changes.Changes the created arc's properties in order to be drawn each time the mouse moves.
            </summary>
            <param name="newPosition">A gPoint representing the new mouse position in User Coordinate System.</param>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionArc3P.HideRubberLine">
            <summary>
            Get a value that represents if the rubber line is drawn or not.Returns false since a rubber line is needed.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionArc3P.Entity">
            <summary>
            The entity which is currently selected for this action.Returns the created arc.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.CommandActions.ActionArc3P.needUpdate">
            <summary>
            Get a value that represents if the entity should be updated after each position change.Returns true since an update is needed.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.CommandActions.ActionArc3P.ArcPointType">
            <summary>
            Represents the type of return point value for <see cref="T:VectorDraw.Professional.CommandActions.ActionArc3P"/> Action
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.CommandActions.ActionArc3P.ArcPointType.Mid">
            <summary>
            Returns a mid point on Arc
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.CommandActions.ActionArc3P.ArcPointType.End">
            <summary>
            Returns the End Point of Arc
            </summary>
        </member>
    </members>
</doc>
