<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VectorDraw.Serialize</name>
    </assembly>
    <members>
        <member name="T:VectorDraw.Serialize.vdExportFlagsEnum">
            <summary>
            Enumeration used in VectorDraw.Professional.vdObjects.vdFileProperties.vdExportFlags property.
            </summary>
        </member>
        <member name="F:VectorDraw.Serialize.vdExportFlagsEnum.Default">
            <summary>
            Default vdml/vdcl export.
            </summary>
        </member>
        <member name="F:VectorDraw.Serialize.vdExportFlagsEnum.UseStreamedArrays">
            <summary>
            Arrays vertexes,gPoints,doubleArray and Int32Array are exported in vdml,vdcl format as stream increasing speed of export and import of the file and also reducing the size of the exported file.
            This option is very usefull specially in drawings with large polyfaces.
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.ModifyHandlereason">
            <summary>
            Represents the reason why a Handle is going to be modified by the Serializer.
            </summary>
        </member>
        <member name="F:VectorDraw.Serialize.ModifyHandlereason.Dublicate">
            <summary>
            The handle exists to another object and changes.
            </summary>
        </member>
        <member name="F:VectorDraw.Serialize.ModifyHandlereason.IsZero">
            <summary>
            The handle is 0 or null and changes.
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.ModifyHandleEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Serialize.Serializer.OnModifyHandle"/> event.
            </summary>
            <param name="sender">The Serializer object.</param>
            <param name="previusSavingObject">The object that already has the handle.</param>
            <param name="SavingObject">The object to be saved.</param>
            <param name="id">The id of the saving object.</param>
            <param name="reson">The reason why the handle is changed.</param>
            <param name="handleValueFixed">A boolean value representing if the handle is fixed or not.</param>
        </member>
        <member name="T:VectorDraw.Serialize.Serializer">
            <summary>
            
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.BaseObject">
            <summary>
            This is the Base object for the VectorDraw.Serialize dll.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.BaseObject.#ctor">
            <summary>
            Initializes the base object.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.BaseObject.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. System.Object.GetHashCode()
            is suitable for use in hashing algorithms and data structures like a hash
            table.
            </summary>
            <returns>
            Returns the unique <see cref="P:VectorDraw.Serialize.BaseObject.Id"></see> of the object.
            </returns>
        </member>
        <member name="M:VectorDraw.Serialize.BaseObject.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.BaseObject.Id">
            <summary>
            A unique id used in collection dictionaries for quick searching and removing.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.Serializer.DoubleToString(System.Double,System.String)">
            <summary>
            Internally used.convert a double value to string for using inside the VectorDraw vdml serializer
            </summary>
            <param name="value"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Serialize.Serializer.FloatToString(System.Single,System.String)">
            <summary>
            Internally used.convert a double value to string for using inside the VectorDraw vdml serializer
            </summary>
            <param name="value"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Serialize.Serializer.#ctor">
            <summary>
            Initializes the object as uncompressed Memory stream.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.Serializer.#ctor(System.IO.Stream)">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="stream">A Stream is used to save vdml file.</param>
        </member>
        <member name="M:VectorDraw.Serialize.Serializer.#ctor(System.String,System.Int32)">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="filename">The filename of the vdml file to be saved.</param>
            <param name="CompressionMethod">Compression method that will be used.Set it to 0 for no compression, 1 for default compression and 2 for compressing large amount of data.</param>
        </member>
        <member name="M:VectorDraw.Serialize.Serializer.ToMemoryStream">
            <summary>
            Internally used only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Serialize.Serializer.Flush">
            <summary>
            Clears all buffers for the Serializer's stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.Serializer.Close">
            <summary>
            Closes the Serializer's stream and releases any resources (such as sockets and file handles) associated with the Serializer's stream.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.Serializer.WriteBegin(VectorDraw.Serialize.Activator)">
            <summary>
            Begins and Writes in the file the passed Activator Types and set the passed Activator as the Activator to be used when saving.
            </summary>
            <param name="activator">The Activator to use when saving the file.</param>
        </member>
        <member name="M:VectorDraw.Serialize.Serializer.WriteEnd">
            <summary>
            Ends the file saving.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.Serializer.Serialize(System.Object,System.String)">
            <summary>
            This Function is called when saving the object to vdml format.
            </summary>
            <param name="value">The value of the property.</param>
            <param name="fieldName">The field name.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Serialize.Serializer.AddReferenceObject(System.Object)">
            <summary>
            Add objects that reference the serializable objects
            </summary>
            <param name="obj">An object that inherited from <see cref="T:VectorDraw.Serialize.IVDHandle"/> </param>
            <remarks>Internally used only!</remarks>
        </member>
        <member name="M:VectorDraw.Serialize.Serializer.ContainsObject(VectorDraw.Serialize.IVDHandle)">
            <summary>
            Returns true in case passed object already serialized.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.Serializer.Dispose">
            <summary>
            Releases all resources used by the Serializer's System.IO.Stream.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.Serializer.vdExportFlags">
            <summary>
            Internally used , instead check the VectorDraw.Professional.vdObjects.vdFileProperties.vdExportFlags
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.Serializer.ContainsLargeRangeCharacters">
            <summary>
            Specifies if the document contains strings with characters in range bigger than 56207.Used when saving in vdml or vdcl format.
            This may slow down the saving time.
            Set it to true , before saving the document in vdml,vdcl format, if you are using serializable string properties with characters in range bigger than 56207.
            Default value is false.
            </summary>
        </member>
        <member name="E:VectorDraw.Serialize.Serializer.OnModifyHandle">
            <summary>
            Fires when a handle is to be changed for a reason.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.Serializer.DoublePrecisionFormat">
            <summary>
            Get the format precision string used for the ToString of the objects and for saving a double value.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.Serializer.DoublePrecision">
            <summary>
            Get/Set the maximum number of decimal digits used when saving double values in vdml format.Valid range 0 - 17
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.Serializer.Stream">
            <summary>
            Get the Stream of the saved file.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.Serializer.HandleTableGuid">
            <summary>
            Get/Set a <see cref="T:VectorDraw.Serialize.vdGuidTable"/> that will be used to save the object's unique <see cref="T:System.Guid"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.Serializer.actiVator">
            <summary>
            Get the Activator used for Types that will be saved.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            <summary>
            SharpZipBaseException is the base exception class for the SharpZipLibrary.
            All library exceptions are derived from this.
            </summary>
            <remarks>NOTE: Not all exceptions thrown will be derived from this class.</remarks>
            <remarks>A variety of other exceptions are possible for example <see cref="T:System.ArgumentNullException"></see></remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.SharpZipBaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.SharpZipBaseException.#ctor">
            <summary>
            Initializes a new instance of the SharpZipBaseException class.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.SharpZipBaseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SharpZipBaseException class with a specified error message.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.SharpZipBaseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the SharpZipBaseException class with a specified
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">Error message string</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.GZipOutputStream">
             <summary>
             This filter stream is used to compress a stream into a "GZIP" stream.
             The "GZIP" format is described in RFC 1952.
            
             author of the original java version : John Leuner
             </summary>
             <example> This sample shows how to gzip a file
             <code>
             using System;
             using System.IO;
             
             using ICSharpCode.SharpZipLib.GZip;
             using ICSharpCode.SharpZipLib.Core;
             
             class MainClass
             {
             	public static void Main(string[] args)
             	{
             			using (Stream s = new GZipOutputStream(File.Create(args[0] + ".gz")))
             			using (FileStream fs = File.OpenRead(args[0])) {
             				byte[] writeData = new byte[4096];
             				Streamutils.Copy(s, fs, writeData);
             			}
             		}
             	}
             }	
             </code>
             </example>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream">
            <summary>
            A special stream deflating or compressing the bytes that are
            written to it.  It uses a Deflater to perform actual deflating.<br/>
            Authors of the original java version : Tom Tromey, Jochen Hoenicke 
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new DeflaterOutputStream with a default Deflater and default buffer size.
            </summary>
            <param name="baseOutputStream">
            the output stream where deflated output should be written.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Deflater)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            default buffer size.
            </summary>
            <param name="baseOutputStream">
            the output stream where deflated output should be written.
            </param>
            <param name="deflater">
            the underlying deflater.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Deflater,System.Int32)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            buffer size.
            </summary>
            <param name="baseOutputStream">
            The output stream where deflated output is written.
            </param>
            <param name="deflater">
            The underlying deflater to use
            </param>
            <param name="bufferSize">
            The buffer size to use when deflating
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            bufsize is less than or equal to zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            baseOutputStream does not support writing
            </exception>
            <exception cref="T:System.ArgumentNullException">
            deflater instance is null
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Finish">
            <summary>
            Finishes the stream by calling finish() on the deflater. 
            </summary>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            Not all input is deflated
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.EncryptByte">
            <summary>
            Encrypt a single byte 
            </summary>
            <returns>
            The encrypted value
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.EncryptBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypt a block of data
            </summary>
            <param name="buffer">
            Data to encrypt.  NOTE the original contents of the buffer are lost
            </param>
            <param name="offset">
            Offset of first byte in buffer to encrypt
            </param>
            <param name="length">
            Number of bytes in buffer to encrypt
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.InitializePassword(System.String)">
            <summary>
            Initializes encryption keys based on given password
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.UpdateKeys(System.Byte)">
            <summary>
            Update encryption keys 
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Deflate">
            <summary>
            Deflates everything in the input buffers.  This will call
            <code>def.deflate()</code> until all bytes from the input buffers
            are processed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value. Not supported by this class!
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value. Not supported by this class!
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.ReadByte">
            <summary>
            Read a byte from stream advancing position by one
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes from stream
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous reads are not supported a NotSupportedException is always thrown
            </summary>
            <param name="buffer">The buffer to read into.</param>
            <param name="offset">The offset to start storing data at.</param>
            <param name="count">The number of bytes to read</param>
            <param name="callback">The async callback to use.</param>
            <param name="state">The state to use.</param>
            <returns>Returns an <see cref="T:System.IAsyncResult"/></returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous writes arent supported, a NotSupportedException is always thrown
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="offset">The offset to begin writing at.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> to use.</param>
            <param name="state">The state object.</param>
            <returns>Returns an IAsyncResult.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Flush">
            <summary>
            Flushes the stream by calling flush() on the deflater and then
            on the underlying stream.  This ensures that all bytes are
            flushed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Close">
            <summary>
            Calls <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Finish"/> and closes the underlying
            stream when <see cref="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.IsStreamOwner"></see> is true.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.WriteByte(System.Byte)">
            <summary>
            Writes a single byte to the compressed output stream.
            </summary>
            <param name="value">
            The byte value.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes from an array to the compressed stream.
            </summary>
            <param name="buffer">
            The byte array
            </param>
            <param name="offset">
            The offset into the byte array where to start.
            </param>
            <param name="count">
            The number of bytes to write.
            </param>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.buffer_">
            <summary>
            This buffer is used temporarily to retrieve the bytes from the
            deflater and write them to the underlying output stream.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.def">
            <summary>
            The deflater which is used to deflate the stream.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.baseOutputStream">
            <summary>
            Base stream the deflater depends on.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.BaseStream">
            <summary>
            Gets a reference to the underlying stream.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of the underlying stream.
            When the flag is true <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Close"></see> will close the underlying stream also.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanPatchEntries">
            <summary>
            Allows client to determine if an entry can be patched after its added
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Password">
            <summary>
            Get/set the password used for encryption.
            </summary>
            <remarks>When set to null or if the password is empty no encryption is performed</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanRead">
            <summary>
            Gets value indicating stream can be read from
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanSeek">
            <summary>
            Gets a value indicating if seeking is supported for this stream
            This property always returns false
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanWrite">
            <summary>
            Get value indicating if this stream supports writing
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Length">
            <summary>
            Get current length of stream
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Position">
            <summary>
            Gets the current position within the stream.
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt to set position</exception>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.crc">
            <summary>
            CRC-32 value for uncompressed data
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a GzipOutputStream with the default buffer size
            </summary>
            <param name="baseOutputStream">
            The stream to read data (to be compressed) from
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a GZipOutputStream with the specified buffer size
            </summary>
            <param name="baseOutputStream">
            The stream to read data (to be compressed) from
            </param>
            <param name="size">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.SetLevel(System.Int32)">
            <summary>
            Sets the active compression level (1-9).  The new level will be activated
            immediately.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Level specified is not supported.
            </exception>
            <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Deflater"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.GetLevel">
            <summary>
            Get the current compression level.
            </summary>
            <returns>The current compression level.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write given buffer to output updating crc
            </summary>
            <param name="buffer">Buffer to write</param>
            <param name="offset">Offset of first byte in buf to write</param>
            <param name="count">Number of bytes to write</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.Close">
            <summary>
            Writes remaining compressed output data to the output stream
            and closes it.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.Finish">
            <summary>
            Finish compression and write any footer information required to stream
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.Crc32">
             <summary>
             Generate a table for a byte-wise 32-bit CRC calculation on the polynomial:
             x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1.
            
             Polynomials over GF(2) are represented in binary, one bit per coefficient,
             with the lowest powers in the most significant bit.  Then adding polynomials
             is just exclusive-or, and multiplying a polynomial by x is a right shift by
             one.  If we call the above polynomial p, and represent a byte as the
             polynomial q, also with the lowest power in the most significant bit (so the
             byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,
             where a mod b means the remainder after dividing a by b.
            
             This calculation is done using the shift-register method of multiplying and
             taking the remainder.  The register is initialized to zero, and for each
             incoming bit, x^32 is added mod p to the register if the bit is a one (where
             x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by
             x (which is shifting right by one and adding x^32 mod p if the bit shifted
             out is a one).  We start with the highest power (least significant bit) of
             q and repeat for all eight bits of q.
            
             The table is simply the CRC of all possible eight bit values.  This is all
             the information needed to generate CRC's on data a byte at a time for all
             combinations of CRC register values and incoming bytes.
             </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.IChecksum">
            <summary>
            Interface to compute a data checksum used by checked input/output streams.
            A data checksum can be updated by one byte or with a byte array. After each
            update the value of the current checksum can be returned by calling
            <code>getValue</code>. The complete checksum object can also be reset
            so it can be used again with new data.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.IChecksum.Reset">
            <summary>
            Resets the data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.IChecksum.Update(System.Int32)">
            <summary>
            Adds one byte to the data checksum.
            </summary>
            <param name = "value">
            the data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.IChecksum.Update(System.Byte[])">
            <summary>
            Updates the data checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.IChecksum.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buffer">
            The buffer which contains the data
            </param>
            <param name = "offset">
            The offset in the buffer where the data starts
            </param>
            <param name = "count">
            the number of data bytes to add.
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.IChecksum.Value">
            <summary>
            Returns the data checksum computed so far.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Checksums.Crc32.crc">
            <summary>
            The crc data checksum so far.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Crc32.Reset">
            <summary>
            Resets the CRC32 data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Crc32.Update(System.Int32)">
            <summary>
            Updates the checksum with the int bval.
            </summary>
            <param name = "value">
            the byte is taken as the lower 8 bits of value
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Crc32.Update(System.Byte[])">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Crc32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buffer">
            The buffer which contains the data
            </param>
            <param name = "offset">
            The offset in the buffer where the data starts
            </param>
            <param name = "count">
            The number of data bytes to update the CRC with.
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Crc32.Value">
            <summary>
            Returns the CRC32 data checksum computed so far.
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.zipUtil">
            <summary>
            Intrnally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.zipUtil.PDFCompressStream(System.IO.MemoryStream)">
            <summary>
            Internally used only.
            </summary>
            <param name="instream"></param>
            <returns></returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.Adler32">
            <summary>
            Computes Adler32 checksum for a stream of data. An Adler32
            checksum is not as reliable as a CRC32 checksum, but a lot faster to
            compute.
            
            The specification for Adler32 may be found in RFC 1950.
            ZLIB Compressed Data Format Specification version 3.3)
            
            
            From that document:
            
                 "ADLER32 (Adler-32 checksum)
                  This contains a checksum value of the uncompressed data
                  (excluding any dictionary data) computed according to Adler-32
                  algorithm. This algorithm is a 32-bit extension and improvement
                  of the Fletcher algorithm, used in the ITU-T X.224 / ISO 8073
                  standard.
            
                  Adler-32 is composed of two sums accumulated per byte: s1 is
                  the sum of all bytes, s2 is the sum of all s1 values. Both sums
                  are done modulo 65521. s1 is initialized to 1, s2 to zero.  The
                  Adler-32 checksum is stored as s2*65536 + s1 in most-
                  significant-byte first (network) order."
            
             "8.2. The Adler-32 algorithm
            
               The Adler-32 algorithm is much faster than the CRC32 algorithm yet
               still provides an extremely low probability of undetected errors.
            
               The modulo on unsigned long accumulators can be delayed for 5552
               bytes, so the modulo operation time is negligible.  If the bytes
               are a, b, c, the second sum is 3a + 2b + c + 3, and so is position
               and order sensitive, unlike the first sum, which is just a
               checksum.  That 65521 is prime is important to avoid a possible
               large class of two-byte errors that leave the check unchanged.
               (The Fletcher checksum uses 255, which is not prime and which also
               makes the Fletcher check insensitive to single byte changes 0 -
               255.)
            
               The sum s1 is initialized to 1 instead of zero to make the length
               of the sequence part of s2, so that the length does not have to be
               checked separately. (Any sequence of zeroes has a Fletcher
               checksum of zero.)"
            </summary>
            <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream"/>
            <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream"/>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Checksums.Adler32.BASE">
            <summary>
            largest prime smaller than 65536
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.#ctor">
            <summary>
            Creates a new instance of the Adler32 class.
            The checksum starts off with a value of 1.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.Reset">
            <summary>
            Resets the Adler32 checksum to the initial value.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.Update(System.Int32)">
            <summary>
            Updates the checksum with a byte value.
            </summary>
            <param name="value">
            The data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.Update(System.Byte[])">
            <summary>
            Updates the checksum with an array of bytes.
            </summary>
            <param name="buffer">
            The source of the data to update with.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            an array of bytes
            </param>
            <param name="offset">
            the start of the data used for this update
            </param>
            <param name="count">
            the number of bytes to use for this update
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Adler32.Value">
            <summary>
            Returns the Adler32 data checksum computed so far.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.UndoRedo.IUpdate">
            <summary>
            Provides functionality for the objects that support the update.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.UndoRedo.IUpdate.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="T:VectorDraw.Professional.UndoRedo.IInvalidate">
            <summary>
            Provides functionality for the objects that support invalidate.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.UndoRedo.IInvalidate.Invalidate">
            <summary>
            Invalidates the object's Bounding Box and causes the control to be redrawn in this region.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.UndoRedo.ISupportUndoStream">
            <summary>
            Provides functionality for the objects that support undo-redo.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.UndoRedo.ISupportUndoStream.UndoHistory">
            <summary>
            An object containing undo-redo stacks and procedures.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.UndoRedo.ISupportUndoStream.SupportUndoWrite">
            <summary>
            Returns true if object can write to Undo.If it is return false object properties are save to UndoHistory.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.UndoRedo.IModificationHistory">
            <summary>
            Provides all functionality for the ModificationHistory object.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Utilities.IProgressMeter">
            <summary>
            Provides all functionality for the ProgressMeter object.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Utilities.ProgressEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.Utilities.ProgressMeter.OnProgress"/> event.
            </summary>
            <param name="sender">The <see cref="T:VectorDraw.Professional.Utilities.ProgressMeter"/> object that handles the job.</param>
            <param name="percent">The current percent.</param>
            <param name="jobDescription">A string representing the job taken.</param>
        </member>
        <member name="T:VectorDraw.Professional.Utilities.ProgressStartEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.Utilities.ProgressMeter.OnProgressStart"/> event.
            </summary>
            <param name="sender">The <see cref="T:VectorDraw.Professional.Utilities.ProgressMeter"/> object that handles the job.</param>
            <param name="jobDescription">A string representing the job taken.</param>
            <param name="meterLimit">Specify the maximum number of times the <see cref="T:VectorDraw.Professional.Utilities.ProgressMeter"/> object will be incremented.</param>
        </member>
        <member name="T:VectorDraw.Professional.Utilities.ProgressStopEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.Utilities.ProgressMeter.OnProgressStop"/> event.
            </summary>
            <param name="sender">The <see cref="T:VectorDraw.Professional.Utilities.ProgressMeter"/> object that handles the job.</param>
            <param name="jobDescription">A string representing the job taken.</param>
        </member>
        <member name="T:VectorDraw.Professional.Utilities.ProgressMeter">
            <summary>
            Represents an object to handle the progress meter bar of the component.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Utilities.ProgressMeter.#ctor">
            <summary>
            Initializes the ProgressMeter object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Utilities.ProgressMeter.Clear">
            <summary>
            Internally used only. Clears the progress meter stack.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Utilities.ProgressMeter.start(System.String,System.Int64)">
            <summary>
            Starts the progress meter.
            </summary>
            <param name="jobDescription">A string representing the job taken.</param>
            <param name="maxLimit">A long number representing the 100% of the job.</param>
        </member>
        <member name="M:VectorDraw.Professional.Utilities.ProgressMeter.stop">
            <summary>
            Stops the meter.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Utilities.ProgressMeter.SetProgressBarPercent(System.Double)">
            <summary>
            Sets the meter to the specified percent.
            </summary>
            <param name="percent">A double value representing the current %.Note this value must be less than 1.0.</param>
        </member>
        <member name="M:VectorDraw.Professional.Utilities.ProgressMeter.SetEventFirePercent(VectorDraw.Professional.Utilities.ProgressMeter.EventFirePercent_Flag)">
            <summary>
            Sets a value of <see cref="T:VectorDraw.Professional.Utilities.ProgressMeter.EventFirePercent_Flag"/> that controls how often hen the <see cref="E:VectorDraw.Professional.Utilities.ProgressMeter.OnProgress"/> is fire
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Utilities.ProgressMeter.Progress">
            <summary>
            Progresses the meter.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Utilities.ProgressMeter.RaiseOnPaint">
            <summary>
            Get/Set if the the progress event will be raised during Paint events.Default value is false;
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.Utilities.ProgressMeter.OnProgress">
            <summary>
            Fires when the Progresses meter changed.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.Utilities.ProgressMeter.OnProgressStart">
            <summary>
            Fires when the Progresses meter initialize.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.Utilities.ProgressMeter.OnProgressStop">
            <summary>
            Fires when the Progresses meter terminated.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Utilities.ProgressMeter.IsEmpty">
            <summary>
            Returns true no progress is started.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Utilities.ProgressMeter.JobDescription">
            <summary>
            Get the job countered by the meter.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Utilities.ProgressMeter.MeterLimit">
            <summary>
            Returns the maximum limmit of progress meter
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.Utilities.ProgressMeter.CurrentPosition">
            <summary>
            Returns the current position of progress meter
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Utilities.ProgressMeter.EventFirePercent_Flag">
            <summary>
            Specifies values that controls when the <see cref="E:VectorDraw.Professional.Utilities.ProgressMeter.OnProgress"/> is fire
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Utilities.ProgressMeter.EventFirePercent_Flag.Always">
            <summary>
            The <see cref="E:VectorDraw.Professional.Utilities.ProgressMeter.OnProgress"/> is fire always
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.Utilities.ProgressMeter.EventFirePercent_Flag.Default">
            <summary>
             The <see cref="E:VectorDraw.Professional.Utilities.ProgressMeter.OnProgress"/> is fire when the percentance diference if biger than 0.7%
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer">
            <summary>
            An input buffer customised for use by <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream"/>
            </summary>
            <remarks>
            The buffer supports decryption of incoming data.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.#ctor(System.IO.Stream)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer"/> with a default buffer size
            </summary>
            <param name="stream">The stream to buffer.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer"/>
            </summary>
            <param name="stream">The stream to buffer.</param>
            <param name="bufferSize">The size to use for the buffer</param>
            <remarks>A minimum buffer size of 1KB is permitted.  Lower sizes are treated as 1KB.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.SetInflaterInput(ICSharpCode.SharpZipLib.Zip.Compression.Inflater)">
            <summary>
            Call <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)"/> passing the current clear text buffer contents.
            </summary>
            <param name="inflater">The inflater to set input for.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.Fill">
            <summary>
            Fill the buffer from the underlying input stream.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadRawBuffer(System.Byte[])">
            <summary>
            Read a buffer directly from the input stream
            </summary>
            <param name="buffer">The buffer to fill</param>
            <returns>Returns the number of bytes read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadRawBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a buffer directly from the input stream
            </summary>
            <param name="outBuffer">The buffer to read into</param>
            <param name="offset">The offset to start reading data into.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>Returns the number of bytes read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadClearTextBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read clear text data from the input stream.
            </summary>
            <param name="outBuffer">The buffer to add data to.</param>
            <param name="offset">The offset to start adding data at.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>Returns the number of bytes actually read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeByte">
            <summary>
            Read a byte from the input stream.
            </summary>
            <returns>Returns the byte read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeShort">
            <summary>
            Read an unsigned short in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeInt">
            <summary>
            Read an int in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeLong">
            <summary>
            Read an int baseInputStream little endian byte order.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.RawLength">
            <summary>
            Get the length of bytes bytes in the <see cref="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.RawData"/>
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.RawData">
            <summary>
            Get the contents of the raw data buffer.
            </summary>
            <remarks>This may contain encrypted data.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ClearTextLength">
            <summary>
            Get the number of useable bytes in <see cref="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ClearText"/>
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ClearText">
            <summary>
            Get the contents of the clear text buffer.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.Available">
            <summary>
            Get/set the number of bytes available
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.CryptoTransform">
            <summary>
            Get/set the <see cref="T:System.Security.Cryptography.ICryptoTransform"/> to apply to any data.
            </summary>
            <remarks>Set this value to null to have no transform applied.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream">
             <summary>
             This filter stream is used to decompress data compressed using the "deflate"
             format. The "deflate" format is described in RFC 1951.
            
             This stream may form the basis for other decompression filters, such
             as the <see cref="T:ICSharpCode.SharpZipLib.GZip.GZipInputStream">GZipInputStream</see>.
            
             Author of the original java version : John Leuner.
             </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream)">
            <summary>
            Create an InflaterInputStream with the default decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Inflater)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The source of input data
            </param>
            <param name = "inf">
            The decompressor used to decompress data read from baseInputStream
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Inflater,System.Int32)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and the specified buffer size.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
            <param name = "inflater">
            The decompressor to use
            </param>
            <param name = "bufferSize">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Skip(System.Int64)">
            <summary>
            Skip specified number of bytes of uncompressed data
            </summary>
            <param name="count">
            Number of bytes to skip
            </param>
            <returns>
            The number of bytes skipped, zero if the end of 
            stream has been reached
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Number of bytes to skip is less than zero
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.StopDecrypting">
            <summary>
            Clear any cryptographic state.
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Fill">
            <summary>
            Fills the buffer with more data to decompress.
            </summary>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            Stream ends early
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Flush">
            <summary>
            Flushes the baseInputStream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream
            Always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.SetLength(System.Int64)">
            <summary>
            Set the length of the current stream
            Always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to stream and advances the current position
            This method always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.WriteByte(System.Byte)">
            <summary>
            Writes one byte to the current stream and advances the current position
            Always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Entry point to begin an asynchronous write.  Always throws a NotSupportedException.
            </summary>
            <param name="buffer">The buffer to write data from</param>
            <param name="offset">Offset of first byte to write</param>
            <param name="count">The maximum number of bytes to write</param>
            <param name="callback">The method to be called when the asynchronous write operation is completed</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests</param>
            <returns>An <see cref="T:System.IAsyncResult">IAsyncResult</see> that references the asynchronous write</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Close">
            <summary>
            Closes the input stream.  When <see cref="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.IsStreamOwner"></see>
            is true the underlying stream is also closed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads decompressed data into the provided buffer byte array
            </summary>
            <param name="buffer">
            The array to read and decompress data into
            </param>
            <param name="offset">
            The offset indicating where the data should be placed
            </param>
            <param name="count">
            The number of bytes to decompress
            </param>
            <returns>The number of bytes read.  Zero signals the end of stream</returns>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            Inflater needs a dictionary
            </exception>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.inf">
            <summary>
            Decompressor for this stream
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.inputBuffer">
            <summary>
            <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer">Input buffer</see> for this stream.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.baseInputStream">
            <summary>
            Base stream the inflater reads from.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.isClosed">
            <summary>
            Flag indicating wether this instance has been closed or not.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.isStreamOwner">
            <summary>
            Flag indicating wether this instance is designated the stream owner.
            When closing if this flag is true the underlying stream is closed.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of underlying stream.
            When the flag is true <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Close"/> will close the underlying stream also.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Available">
            <summary>
            Returns 0 once the end of the stream (EOF) has been reached.
            Otherwise returns 1.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanSeek">
            <summary>
            Gets a value of false indicating seeking is not supported for this stream.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanWrite">
            <summary>
            Gets a value of false indicating that this stream is not writeable.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Length">
            <summary>
            A value representing the length of the stream in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Position">
            <summary>
            The current position within the stream.
            Throws a NotSupportedException when attempting to set the position
            </summary>
            <exception cref="T:System.NotSupportedException">Attempting to set the position</exception>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.GZipInputStream">
            <summary>
            This filter stream is used to decompress a "GZIP" format stream.
            The "GZIP" format is described baseInputStream RFC 1952.
            
            author of the original java version : John Leuner
            </summary>
            <example> This sample shows how to unzip a gzipped file
            <code>
            using System;
            using System.IO;
            
            using ICSharpCode.SharpZipLib.Core;
            using ICSharpCode.SharpZipLib.GZip;
            
            class MainClass
            {
            	public static void Main(string[] args)
            	{
            		using (Stream inStream = new GZipInputStream(File.OpenRead(args[0])))
            		using (FileStream outStream = File.Create(Path.GetFileNameWithoutExtension(args[0]))) {
            			byte[] buffer = new byte[4096];
            			StreamUtils.Copy(inStream, outStream, buffer);
            		}
            	}
            }	
            </code>
            </example>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipInputStream.crc">
            <summary>
            CRC-32 value for uncompressed data
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipInputStream.eos">
            <summary>
            Indicates end of stream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipInputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a GzipInputStream with the default buffer size
            </summary>
            <param name="baseInputStream">
            The stream to read compressed data from (baseInputStream GZIP format)
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipInputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a GZIPInputStream with the specified buffer size
            </summary>
            <param name="baseInputStream">
            The stream to read compressed data from (baseInputStream GZIP format)
            </param>
            <param name="size">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads uncompressed data into an array of bytes
            </summary>
            <param name="buffer">
            The buffer to read uncompressed data into
            </param>
            <param name="offset">
            The offset indicating where the data should be placed
            </param>
            <param name="count">
            The number of uncompressed bytes to be read
            </param>
        </member>
        <member name="M:vdlcm.devinfo.GetUnique2">
            <summary>
            Internaly use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:vdlcm.devinfo.GetUnique3">
            <summary>
            Internaly use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:vdlcm.devinfo.GetUnique">
            <summary>
            Internaly use only.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassic">
            <summary>
            PkzipClassic embodies the classic or original encryption facilities used in Pkzip archives.
            While it has been superceded by more recent and more powerful algorithms, its still in use and 
            is viable for preventing casual snooping
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassic.GenerateKeys(System.Byte[])">
            <summary>
            Generates new encryption keys based on given seed
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase">
            <summary>
            PkzipClassicCryptoBase provides the low level facilities for encryption
            and decryption using the PkzipClassic algorithm.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase.TransformByte">
            <summary>
            Transform a single byte 
            </summary>
            <returns>
            The transformed value
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase.SetKeys(System.Byte[])">
            <summary>
            Set the key schedule for encryption/decryption.
            </summary>
            <param name="keyData">The data use to set the keys from.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase.UpdateKeys(System.Byte)">
            <summary>
            Update encryption keys 
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase.Reset">
            <summary>
            Reset the internal state.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform">
            <summary>
            PkzipClassic CryptoTransform for encryption.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.#ctor(System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform"></see>
            </summary>
            <param name="keyBlock">The key block to use.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies 
            the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.Dispose">
            <summary>
            Cleanup internal state.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.InputBlockSize">
            <summary>
            Gets the size of the input data blocks in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.OutputBlockSize">
            <summary>
            Gets the size of the output data blocks in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform">
            <summary>
            PkzipClassic CryptoTransform for decryption.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.#ctor(System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform"></see>.
            </summary>
            <param name="keyBlock">The key block to decrypt with.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies 
            the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.Dispose">
            <summary>
            Cleanup internal state.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.InputBlockSize">
            <summary>
            Gets the size of the input data blocks in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.OutputBlockSize">
            <summary>
            Gets the size of the output data blocks in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged">
            <summary>
            Defines a wrapper object to access the Pkzip algorithm. 
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.GenerateIV">
            <summary>
            Generate an initial vector.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.GenerateKey">
            <summary>
            Generate a new random key.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Create an encryptor.
            </summary>
            <param name="rgbKey">The key to use for this encryptor.</param>
            <param name="rgbIV">Initialisation vector for the new encryptor.</param>
            <returns>Returns a new PkzipClassic encryptor</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Create a decryptor.
            </summary>
            <param name="rgbKey">Keys to use for this new decryptor.</param>
            <param name="rgbIV">Initialisation vector for the new decryptor.</param>
            <returns>Returns a new decryptor.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.BlockSize">
            <summary>
            Get / set the applicable block size in bits.
            </summary>
            <remarks>The only valid block size is 8.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.LegalKeySizes">
            <summary>
            Get an array of legal <see cref="T:System.Security.Cryptography.KeySizes">key sizes.</see>
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.LegalBlockSizes">
            <summary>
            Get an array of legal <see cref="T:System.Security.Cryptography.KeySizes">block sizes</see>.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.Key">
            <summary>
            Get / set the key value applicable.
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.MemorySerializer">
            <summary>
            This class is used to save vdml files in a memory stream.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.MemorySerializer.#ctor(System.IO.Stream)">
            <summary>
            Initializes the object
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.MemorySerializer.#ctor(System.Int32)">
            <summary>
            Initializes the object
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.MemorySerializer.WriteBegin(VectorDraw.Serialize.Activator)">
            <summary>
            Begins and Writes in the file the passed Activator Types and set the passed Activator as the Activator to be used when saving to memory.
            </summary>
            <param name="activator">The Activator to use when saving the file to the memory.</param>
        </member>
        <member name="M:VectorDraw.Serialize.MemorySerializer.WriteEnd">
            <summary>
            Ends the file saving.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.MemorySerializer.Flush">
            <summary>
            Clears all buffers for the Serializer's stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.MemorySerializer.Close">
            <summary>
            Closes the Serializer's stream and releases any resources (such as sockets and file handles) associated with the Serializer's stream.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.MemorySerializer.Serialize(System.Object,System.String)">
            <summary>
            This Function is called when saving the MemorySerializer object to vdml format.
            </summary>
            <param name="value">The value of the property.</param>
            <param name="_fieldName">The field name.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            <summary>
            Represents exception conditions specific to Zip archive handling
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipException.#ctor">
            <summary>
            Initializes a new instance of the ZipException class.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ZipException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipException.#ctor(System.String,System.Exception)">
            <summary>
            Initialise a new instance of ZipException.
            </summary>
            <param name="message">A message describing the error.</param>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.StrangeCRC">
            <summary>
            Bzip2 checksum algorithm
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:ICSharpCode.SharpZipLib.Checksums.StrangeCRC"></see>
            </summary>	
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Reset">
            <summary>
            Reset the state of Crc.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Update(System.Int32)">
            <summary>
            Update the Crc value.
            </summary>
            <param name="value">data update is based on</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Update(System.Byte[])">
            <summary>
            Update Crc based on a block of data
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Update Crc based on a portion of a block of data
            </summary>
            <param name="buffer">block of data</param>
            <param name="offset">index of first byte to use</param>
            <param name="count">number of bytes to use</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Value">
            <summary>
            Get the current Crc value.
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.XMLDeSerializer">
            <summary>
            This class is a Deserializer that contains an vdml file.
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.FileDeSerializer">
            <summary>
            This class is used to open vdml files.
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.MemoryDeSerializer">
            <summary>
            This class is used to read objects from a memory stream.
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.DeSerializer">
            <summary>
            This class is used to open vdml files.
            </summary>
        </member>
        <member name="F:VectorDraw.Serialize.DeSerializer.mHandleTable">
            <summary>
            This is a dictionary where all object's are inserted when are deserialized.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.DeSerializer.#ctor(VectorDraw.Serialize.Activator)">
            <summary>
            Initializes the object with the passed Activator.
            </summary>
            <param name="activator">An <see cref="T:VectorDraw.Serialize.Activator"/> object needed for the DeSerializer.</param>
        </member>
        <member name="M:VectorDraw.Serialize.DeSerializer.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current vdml stream.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.DeSerializer.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.DeSerializer.Read">
            <summary>
            Read the vdml file.
            </summary>
            <returns>An array of the top most readed objects.</returns>
        </member>
        <member name="M:VectorDraw.Serialize.DeSerializer.AddReferenceObject(System.Object)">
            <summary>
            Add objects that reference the deserializable objects
            </summary>
            <param name="obj">An object that inherited from <see cref="T:VectorDraw.Serialize.IVDHandle"/> </param>
            <remarks>Internally used only!</remarks>
        </member>
        <member name="M:VectorDraw.Serialize.DeSerializer.getObjectFromHandle(System.UInt64)">
            <summary>
            Returns an object already deserialized that reference the passed handle id.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.DeSerializer.ContainsLargeRangeCharacters">
            <summary>
            Specifies if this document contains strings with characters in range bigger than 56207
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.DeSerializer.RecoverMode">
            <summary>
            Get/Set a boolean value that defines if the desirializer will try to recover bad records.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.DeSerializer.version">
            <summary>
            Returns the version of the deserializing file.
            </summary>
        </member>
        <member name="E:VectorDraw.Serialize.DeSerializer.OnAddObjectHandleToTable">
            <summary>
            Fires when an object's handle is added to the handle dictionary.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.DeSerializer.START_DOC">
            <summary>
            Get/Set a value indicating whether a vdDocument is started deserialization.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.DeSerializer.END_DOC">
            <summary>
            Get/Set a value indicating whether all properties of vdDocument object are deserialized.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.DeSerializer.FirstObjectRecord">
            <summary>
            Get/Set the vdDocument object,internally used to define the document object in the memory stream.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.DeSerializer.HandleTableGuid">
            <summary>
            Get/Set a <see cref="T:VectorDraw.Serialize.vdGuidTable"/> that will be filled with serialized objects unique <see cref="T:System.Guid"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.DeSerializer.actiVator">
            <summary>
            Get/Set the activator object used to create instances of the read objects.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.DeSerializer.IncompleteOpenStatus">
            <summary>
            Returns a string that descripts the reason and the object tree for a broken deserialization  or string.Empty for successfully complete deserialization.
            </summary>
            <returns>A string that descripts the reason and the object tree for a broken deserialization or string.Empty for successfully complete deserialization.</returns>
        </member>
        <member name="T:VectorDraw.Serialize.DeSerializer.AddObjectHandleToTableEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Serialize.DeSerializer.OnAddObjectHandleToTable"/> event.
            </summary>
            <param name="sender">The DeSerializer object.</param>
            <param name="objToadd">The object that is being added to the table.</param>
            <param name="id">The id added to the table.</param>
        </member>
        <member name="M:VectorDraw.Serialize.MemoryDeSerializer.#ctor(VectorDraw.Serialize.Activator)">
            <summary>
            Initializes the object with the passed Activator.
            </summary>
            <param name="activator">The Activator object which will be filled with the Types found in the memory stream.</param>
        </member>
        <member name="M:VectorDraw.Serialize.MemoryDeSerializer.#ctor(System.IO.Stream,VectorDraw.Serialize.Activator)">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="activator">The Activator to fill with the Types found in the stream.</param>
        </member>
        <member name="M:VectorDraw.Serialize.MemoryDeSerializer.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current vdml stream.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.MemoryDeSerializer.SetReturnOnlyObjectOfType(System.Type)">
            <summary>
            Set the Type of object to stop the serializing and the deserializer read function returns that object.
            </summary>
            <param name="type">The Type of object to stop,used for quich read the vdFileProperties (image of the file).</param>
        </member>
        <member name="M:VectorDraw.Serialize.MemoryDeSerializer.Read">
            <summary>
            Read the stream file.
            </summary>
            <returns>An array of the top most readed objects.</returns>
        </member>
        <member name="P:VectorDraw.Serialize.MemoryDeSerializer.FirstObjectRecord">
            <summary>
            Get/Set the vdDocument object,internally used to define the document object in the memory stream.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.MemoryDeSerializer.IncompleteOpenStatus">
            <summary>
            Returns a string that descripts the reason and the object tree for a broken deserialization  or string.Empty for successfully complete deserialization.
            </summary>
            <returns>A string that descripts the reason and the object tree for a broken deserialization or string.Empty for successfully complete deserialization.</returns>
        </member>
        <member name="M:VectorDraw.Serialize.FileDeSerializer.#ctor(System.String,VectorDraw.Serialize.Activator)">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="filename">The filename of the vdml file.</param>
            <param name="activator">The Activator object that will be filled with the Types found in the vdml file.</param>
        </member>
        <member name="M:VectorDraw.Serialize.FileDeSerializer.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current vdml stream.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.FileDeSerializer.FileName">
            <summary>
            Get the filename of the vdml file.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.XMLDeSerializer.#ctor(System.String,VectorDraw.Serialize.Activator)">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="filename">The filename of the vdml file.</param>
            <param name="activator">The Activator object which will be filled with the Types of the objects that will be found in the file.</param>
            <exception cref="T:System.IO.FileNotFoundException">If the filename not exist.</exception>
        </member>
        <member name="M:VectorDraw.Serialize.XMLDeSerializer.#ctor(System.String,VectorDraw.Serialize.Activator,System.IO.Stream)">
            <summary>
            Initializes the object with the passed parameters.Used when the stream is already opened.
            </summary>
            <param name="filename">The filename of the vdml file.</param>
            <param name="activator">The Activator object which will be filled with the Types of the objects that will be found in the file.</param>
            <param name="stream">The stream to open.</param>
            <exception cref="T:System.IO.FileNotFoundException">If the filename not exist.</exception>
        </member>
        <member name="M:VectorDraw.Serialize.XMLDeSerializer.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.PropertyDescriptorEvents">
            <summary>
            Implements the events for visibility and readonly properties of vdgrid component.
            </summary>
        </member>
        <member name="F:VectorDraw.Serialize.PropertyDescriptorEvents.GlobalPropertyDescriptorEvents">
            <summary>
            A static instance of the object.Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.PropertyDescriptorEvents.IsVisible(System.String,System.String,System.Boolean)">
            <summary>
            Raise the FilterVisibilityProperty event.
            </summary>
            <param name="ComponentTypeName">The name of the object Type that contain the property.</param>
            <param name="PropertyName">The name of the property.</param>
            <param name="isvisible">Currently used vivibility value.</param>
            <returns>The user  selected visibility value.</returns>
        </member>
        <member name="M:VectorDraw.Serialize.PropertyDescriptorEvents.IsReadOnly(System.String,System.String,System.Boolean)">
            <summary>
            Raise the FilterReadOnlyProperty event.
            </summary>
            <param name="ComponentTypeName">The name of the object Type that contain the property.</param>
            <param name="PropertyName">The name of the property.</param>
            <param name="isreadonly">Currently used readonly value.</param>
            <returns>The user  selected readonly value.</returns>
        </member>
        <member name="E:VectorDraw.Serialize.PropertyDescriptorEvents.OnAddExtraProperties">
            <summary>
            Fired after all properties of a specific type is calculated in order to be added in a property grid.
            Developer can add its own extra properties for this type at run-time.
            See CustomPropertyTovdFigure example 
            </summary>
        </member>
        <member name="E:VectorDraw.Serialize.PropertyDescriptorEvents.FilterVisibilityProperty">
            <summary>
            Fires when an object with this property selected in a property grid control.
            </summary>
        </member>
        <member name="E:VectorDraw.Serialize.PropertyDescriptorEvents.FilterReadOnlyProperty">
            <summary>
            Fires when an object with this property selected in a property grid control.
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.PropertyDescriptorEvents.FilterVisibilityPropertyDelegate">
            <summary>
             Represents the method that will handle the <see cref="E:VectorDraw.Serialize.PropertyDescriptorEvents.FilterVisibilityProperty"/> event.
            </summary>
            <param name="ComponentTypeName">The name of the object Type that contain the property.</param>
            <param name="PropertyName">The name of the property.</param>
            <param name="isvisible">Currently used vivibility value.</param>
        </member>
        <member name="T:VectorDraw.Serialize.PropertyDescriptorEvents.FilterReadOnlyPropertyDelegate">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Serialize.PropertyDescriptorEvents.FilterReadOnlyProperty"/> event.
            </summary>
            <param name="ComponentTypeName">The name of the object Type that contain the property.</param>
            <param name="PropertyName">The name of the property.</param>
            <param name="isreadonly">Currently used readonly value.</param>
        </member>
        <member name="T:VectorDraw.Serialize.PropertyDescriptorEvents.AddExtraPropertiesDelegate">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Serialize.PropertyDescriptorEvents.OnAddExtraProperties"/> event.
            </summary>
            <param name="t">A type for which a new property will be created for.</param>
            <param name="properties">A collection where the new property must be added.</param>
        </member>
        <member name="T:VectorDraw.Serialize.GlobalizedDictionary">
            <summary>
            Object used for globalize displayed string names.
            </summary>
            <remarks>
            <para>Contains all browsable property names strings with their descriptions and all VectorDraw command line Prompt strings.</para>
            <para>Initially loads the default vdres.txt distributed by VectorDraw MergeModule.</para>
            <para>Developer can open the vdres.txt  modify and/or add new strings by adding a locale language translation after the character '^.</para>
            <para>This file then must be saved in Unicode character set.</para>
            <para>In order the custom develop vdres.txt to be used from VectorDraw the following code line must have been called.</para>
            <code>
            VectorDraw.Serialize.GlobalizedDictionary.Dictionary = new VectorDraw.Serialize.GlobalizedDictionary (@"C:\Some path\vdres.txt");
            </code>
            </remarks>
        </member>
        <member name="M:VectorDraw.Serialize.GlobalizedDictionary.UpdateGridPropertyDescriptors">
            <summary>
            Clears the PropertyDescriptor's collection used to fill the VectorDraw PropertyGrid control.
            </summary>
        </member>
        <member name="F:VectorDraw.Serialize.GlobalizedDictionary.FreezeGridEvents">
            <summary>
            Get/Set a value that represents if the vdGrid control events are going to be fired.Default value is True and events are not fired.
            </summary>
        </member>
        <member name="F:VectorDraw.Serialize.GlobalizedDictionary.Dictionary">
            <summary>
            This is a dictionary used for globalization of all strings of the component.
            <para>See <see cref="T:VectorDraw.Serialize.GlobalizedDictionary"/> for details and usage.</para>
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.GlobalizedDictionary.#ctor(System.String)">
            <summary>
            Initialize the globalization dictionary with the specified filename containing all globalized strings.
            </summary>
            <param name="fileName">The filename of the text file containg all strings.Note the strings are separeted with the character "^".</param>
        </member>
        <member name="M:VectorDraw.Serialize.GlobalizedDictionary.#ctor(System.IO.StreamReader)">
            <summary>
            Initialize the globalization dictionary with the specified StreamReader stream containing all globalized strings.
            </summary>
            <param name="stream">A System.IO.StreamReader stream that contains a all strings.Note the strings are separeted with the character "^".</param>
             <example>This code will Load a vdres text file from the resources.<code>
                     stream = new MemoryStream();
                     writer = new StreamWriter(stream);
                     writer.Write(Resources.vdres);
                     writer.Flush();
                     stream.Position = 0;
                     StreamReader vdRes = new StreamReader(stream);
                     VectorDraw.Serialize.GlobalizedDictionary.Dictionary = new VectorDraw.Serialize.GlobalizedDictionary(vdRes);
            </code>
            </example>
        </member>
        <member name="P:VectorDraw.Serialize.GlobalizedDictionary.FilePathName">
            <summary>
            Returns the full path name of the loaded resources file.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.GlobalizedDictionary.handpan">
            <summary>
            Returns a custom user define cursor
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.GlobalizedDictionary.rot3d_v">
            <summary>
            Returns a custom user define cursor
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.GlobalizedDictionary.rot3d_2">
            <summary>
            Returns a custom user define cursor
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.GlobalizedDictionary.rot3d">
            <summary>
            Returns a custom user define cursor
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.GlobalizedDictionary.urlhand">
            <summary>
            Returns a custom user define cursor
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.GlobalizedDictionary.urlhandopen">
            <summary>
            Returns a custom user define cursor
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.GlobalizedDictionary.Item(System.String)">
            <summary>
            Searches the dictionary for the specified string and returns the globilized string.
            </summary>
            <param name="key">A string value representing the string to search to the dictionary.</param>
            <returns>The globilized string.</returns>
        </member>
        <member name="T:VectorDraw.Serialize.vdShortcutKeysEditor">
            <summary>
            Provides an editor for picking shortcut keys.
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.vdBaseObjectExpandableObjectConverter">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="F:VectorDraw.Serialize.vdBaseObjectExpandableObjectConverter.IsPropertiesReadOnly">
            <summary>
            internally used in order to make properties readonly in vdPropertyGrid control.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.vdBaseObjectExpandableObjectConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Serialize.vdBaseObjectExpandableObjectConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Serialize.IExtraPropertyGetSetValue">
            <summary>
            An Interface that must implement the GetSetValueType property of <see cref="M:VectorDraw.Serialize.CustomizePropertyDescriptor.Create(System.Type,System.String,System.Type,System.Type,System.Type,System.Boolean,System.String,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.IExtraPropertyGetSetValue.GetValue(System.ComponentModel.PropertyDescriptor,System.Object)">
             <summary>
             Returns the value of the specific get property  defined in sender <see cref="T:System.ComponentModel.PropertyDescriptor"/> , for an object compomponent.
             </summary>
            <remarks>See CustomPropertyTovdFigure example</remarks>
        </member>
        <member name="M:VectorDraw.Serialize.IExtraPropertyGetSetValue.SetValue(System.ComponentModel.PropertyDescriptor,System.Object,System.Object)">
             <summary>
             Set the value of the specific set property defined in sender <see cref="T:System.ComponentModel.PropertyDescriptor"/> , for an object compomponent.
             </summary>
            <remarks>See CustomPropertyTovdFigure example</remarks>
        </member>
        <member name="M:VectorDraw.Serialize.IExtraPropertyGetSetValue.GetContextVisibility(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            //implement visibility depend on the object that is connected with specific property and is usally the property grid selected object.
            </summary>
            <param name="sender">A property to test the visibility.</param>
            <param name="instance">selected object of a property grid that include the property.</param>
            <returns>True to show the property in property grid and False in order to hide the property.</returns>
        </member>
        <member name="T:VectorDraw.Serialize.CustomizePropertyDescriptor">
            <summary>
            GlobalizedPropertyDescriptor enhances the base class by obtaining the display name for a property from the resource.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.CustomizePropertyDescriptor.Create(System.Type,System.String,System.Type,System.Type,System.Type,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Use this method in order to create a PropertyDescriptor used in customized property add in the properties list.
            </summary>
            <param name="ObjectType">The type of the object</param>
            <param name="PropertyName">The name of the property.</param>
            <param name="PropertyType">The type of the property</param>
            <param name="typeconverter">A typeConverter to be used for the properties list.</param>
            <param name="GetSetValueType">The type of the class that implements the Get/Set values inherited from <see cref="T:VectorDraw.Serialize.IExtraPropertyGetSetValue"/> interface.</param>
            <param name="IsReadOnly">A boolean value that represents if the property is readonly.</param>
            <param name="Category">The category where the property is going to be displayed in the properties list.</param>
            <param name="DisplayName">The globalised Display name.</param>
            <param name="Description">The description of the property shown below at the properties list.</param>
            <returns>The created PropertyDescriptor.</returns>
            <remarks> Please check our .NET samples for usage of this method. sample : CustomPropertyTovdFigure</remarks>
        </member>
        <member name="M:VectorDraw.Serialize.CustomizePropertyDescriptor.GetContextVisibility(System.Object)">
            <summary>
            Internally used.Returns true to make the property visible in property grid.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.CustomizePropertyDescriptor.GetValue(System.Object)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.CustomizePropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.CustomizePropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor,System.Attribute[],System.Boolean)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.CustomizePropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.CustomizePropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.CustomizePropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.CustomizePropertyDescriptor.IsReadOnly">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.CustomizePropertyDescriptor.IsGridReadOnly">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.CustomizePropertyDescriptor.DisplayName">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.CustomizePropertyDescriptor.Category">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.CustomizePropertyDescriptor.ComponentType">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.CustomizePropertyDescriptor.PropertyType">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.GlobalizedCategory">
            <summary>
            Internally used for globalization.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.GlobalizedCategory.#ctor(System.String)">
            <summary>
            Internally used for globalization.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.GlobalizedCategory.GetLocalizedString(System.String)">
            <summary>
            Internally used for globalization.
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.GlobalizedDescription">
            <summary>
            Internally used for globalization.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.GlobalizedDescription.#ctor(System.String)">
            <summary>
            Internally used for globalization.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.GlobalizedDescription.Description">
            <summary>
            Internally used for globalization.
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.GlobalizedDisplayName">
            <summary>
            Internally used for globalization.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.GlobalizedDisplayName.#ctor(System.String)">
            <summary>
            Internally used for globalization.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.GlobalizedDisplayName.DisplayName">
            <summary>
            Internally used for globalization.
            </summary>
            <remarks>if the object of this attribute is property and the display name is '-' then the property is hidden from property grid</remarks>
        </member>
        <member name="T:VectorDraw.Serialize.vdPrimaryTableObjectConverter">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.vdPrimaryTableObjectConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Serialize.FromStringTypeConverter`1">
            <summary>
            This attribute is a type converter for objects that implement the IFromString interface.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:VectorDraw.Serialize.FromStringTypeConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overrides the standerd type converter CanConvertTo.
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Serialize.FromStringTypeConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Overrides the standerd type converter ConvertTo.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Serialize.FromStringTypeConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overrides the standerd type converter CanConvertFrom.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Serialize.FromStringTypeConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Overrides the standerd type converter ConvertFrom.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Serialize.CustomizeUITypeEditor">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.CustomizeUITypeEditor.ThrowEditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.NeedRefreshAttribute">
            <summary>
            Implements an attribute for properties that need to Refresh the graphic window.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.NeedRefreshAttribute.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.IScriptSerializeArray">
            <summary>
            Implemented by collection objects in order to be exported in a script file format as array object.
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.ScriptSerialize">
            <summary>
            Implements an attribute for properties that need to be serialized in a script file format.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.ScriptSerialize.#ctor">
            <summary>
            Initializes the object with default values <see cref="P:VectorDraw.Serialize.ScriptSerialize.DefaultValue"/> = null and <see cref="P:VectorDraw.Serialize.ScriptSerialize.CanUseHandleRef"/> = false .
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.ScriptSerialize.#ctor(System.Object)">
            <summary>
            Initializes the object and set the <see cref="P:VectorDraw.Serialize.ScriptSerialize.DefaultValue"/> to the passed parameter.
            </summary>
            <param name="defaultvalue">A value that is default for a property that contains this attribute.Properties with Default value are not serialized to script format. </param>
        </member>
        <member name="P:VectorDraw.Serialize.ScriptSerialize.DefaultValue">
            <summary>
            Get/Set the default value for a property that contains this attribute. If it is not equal to null the property is not serilized into script format.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.ScriptSerialize.CanUseHandleRef">
            <summary>
            Properties that have CanUseHandleRef = true and implements IVDSerialize interface are saved by a single string thta represent the unique handle of the object.
            Default value is true.Set it to false for full object properties script serialization.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.ScriptSerialize.SortId">
            <summary>
            Get/Set a value used to sort the properties to user defined serilization order.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.ScriptSerialize.CharacterAnalyzer">
            <summary>
            Get/Set a value used to create unicode subrange for selected font styles .
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.NeedRedrawAttribute">
            <summary>
            Implements an attribute for properties that need to be Redraw when their value is change.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.NeedRedrawAttribute.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.IgnoreFromObjectWalkerAttribute">
            <summary>
            Implements an attribute for members that need to be ignored from the object walker procedure.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.IgnoreFromObjectWalkerAttribute.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.IvdDeleted">
            <summary>
            This interface is implemented by objects that have the Deleted property.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.IvdDeleted.Deleted">
            <summary>
            Get/Set a property that marks the object as Deleted or not.
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.IvdProxySerializer">
            <summary>
            Interface representing that the object will be serialized as a custom proxy vdObject.
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.IVDSerialise">
            <summary>
            This interface is implemented by objects that are saved in the vdml format.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.IVDSerialise.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Serialize.IVDSerialise.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="T:VectorDraw.Serialize.IvdProxyFigure">
            <summary>
            Interface representing that the object is a custom proxy figure.
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.IVDHandle">
            <summary>
            This interface is implemented by objects that have Handle property and are added to the handle table.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.IVDHandle.HandleId">
            <summary>
            A UInt64 object that represent's the object's handle.
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.IFromString">
            <summary>
            Interface that gives the FromString and ToString functionality to the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.IFromString.FromString(System.String)">
            <summary>
            Sets the object's properties using a ToString string.
            </summary>
            <param name="str">The string to parse.</param>
        </member>
        <member name="M:VectorDraw.Serialize.IFromString.ToString(VectorDraw.Serialize.Serializer)">
            <summary>
            Sets the object's properties using a ToString string, according to the Serializer precision
            </summary>
            <param name="serializer">the Serializer object where the object is going to be saved.</param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Serialize.GZIPDeSerializer">
            <summary>
            This class is used to decompress vdcl files.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.GZIPDeSerializer.#ctor(System.String,VectorDraw.Serialize.Activator)">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="filename">The filename of the vdcl file.</param>
            <param name="activator">The Activator object that will be filled with the Types that will be found in the vdcl file.</param>
        </member>
        <member name="M:VectorDraw.Serialize.GZIPDeSerializer.#ctor(System.String,VectorDraw.Serialize.Activator,System.IO.Stream)">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="filename">The filename of the vdcl file.</param>
            <param name="activator">The Activator object that will be filled with the Types that will be found in the vdcl file.</param>
            <param name="stream">The stream to open.</param>
        </member>
        <member name="M:VectorDraw.Serialize.GZIPDeSerializer.#ctor(System.IO.Stream,VectorDraw.Serialize.Activator)">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="stream">The stream of the vdcl memory file.</param>
            <param name="activator">The Activator object that will be filled with the Types that will be found in the vdcl file.</param>
        </member>
        <member name="M:VectorDraw.Serialize.GZIPDeSerializer.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current vdcl stream.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer">
            <summary>
            This class is general purpose class for writing data to a buffer.
            
            It allows you to write bits as well as bytes
            Based on DeflaterPending.java
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.buffer_">
            <summary>
            Internal work buffer
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.#ctor">
            <summary>
            construct instance using default buffer size of 4096
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.#ctor(System.Int32)">
            <summary>
            construct instance using specified buffer size
            </summary>
            <param name="bufferSize">
            size to use for internal buffer
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.Reset">
            <summary>
            Clear internal state/buffers
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteByte(System.Int32)">
            <summary>
            Write a byte to buffer
            </summary>
            <param name="value">
            The value to write
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteShort(System.Int32)">
            <summary>
            Write a short value to buffer LSB first
            </summary>
            <param name="value">
            The value to write.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteInt(System.Int32)">
            <summary>
            write an integer LSB first
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a block of data to buffer
            </summary>
            <param name="block">data to write</param>
            <param name="offset">offset of first byte to write</param>
            <param name="length">number of bytes to write</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.AlignToByte">
            <summary>
            Align internal buffer on a byte boundary
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteBits(System.Int32,System.Int32)">
            <summary>
            Write bits to internal buffer
            </summary>
            <param name="b">source of bits</param>
            <param name="count">number of bits to write</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteShortMSB(System.Int32)">
            <summary>
            Write a short value to internal buffer most significant byte first
            </summary>
            <param name="s">value to write</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.Flush(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Flushes the pending buffer into the given output array.  If the
            output array is to small, only a partial flush is done.
            </summary>
            <param name="output">
            The output array.
            </param>
            <param name="offset">
            The offset into output array.
            </param>
            <param name="length">
            The maximum number of bytes to store.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.ToByteArray">
            <summary>
            Convert internal buffer to byte array.
            Buffer is empty on completion
            </summary>
            <returns>
            The internal buffer contents converted to a byte array.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.BitCount">
            <summary>
            The number of bits written to the buffer
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.IsFlushed">
            <summary>
            Indicates if buffer has been flushed
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree">
            <summary>
            Huffman tree used for inflation
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.defLitLenTree">
            <summary>
            Literal length tree
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.defDistTree">
            <summary>
            Distance tree
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.#ctor(System.Byte[])">
            <summary>
            Constructs a Huffman tree from the array of code lengths.
            </summary>
            <param name = "codeLengths">
            the array of code lengths
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.GetSymbol(ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator)">
            <summary>
            Reads the next symbol from input.  The symbol is encoded using the
            huffman tree.
            </summary>
            <param name="input">
            input the input source.
            </param>
            <returns>
            the next symbol, or -1 if not enough input is available.
            </returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Inflater">
             <summary>
             Inflater is used to decompress data that has been compressed according
             to the "deflate" standard described in rfc1951.
             
             By default Zlib (rfc1950) headers and footers are expected in the input.
             You can use constructor <code> public Inflater(bool noHeader)</code> passing true
             if there is no Zlib header information
            
             The usage is as following.  First you have to set some input with
             <code>SetInput()</code>, then Inflate() it.  If inflate doesn't
             inflate any bytes there may be three reasons:
             <ul>
             <li>IsNeedingInput() returns true because the input buffer is empty.
             You have to provide more input with <code>SetInput()</code>.
             NOTE: IsNeedingInput() also returns true when, the stream is finished.
             </li>
             <li>IsNeedingDictionary() returns true, you have to provide a preset
                dictionary with <code>SetDictionary()</code>.</li>
             <li>IsFinished returns true, the inflater has finished.</li>
             </ul>
             Once the first output byte is produced, a dictionary will not be
             needed at a later stage.
            
             author of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DECODE_HEADER">
            <summary>
            These are the possible states for an inflater
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPLENS">
            <summary>
            Copy lengths for literal codes 257..285
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPLEXT">
            <summary>
            Extra bits for literal codes 257..285
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPDIST">
            <summary>
            Copy offsets for distance codes 0..29
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPDEXT">
            <summary>
            Extra bits for distance codes
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.mode">
            <summary>
            This variable contains the current state.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.readAdler">
            <summary>
            The adler checksum of the dictionary or of the decompressed
            stream, as it is written in the header resp. footer of the
            compressed stream. 
            Only valid if mode is DECODE_DICT or DECODE_CHKSUM.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.neededBits">
            <summary>
            The number of bits needed to complete the current state.  This
            is valid, if mode is DECODE_DICT, DECODE_CHKSUM,
            DECODE_HUFFMAN_LENBITS or DECODE_HUFFMAN_DISTBITS.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.isLastBlock">
            <summary>
            True, if the last block flag was set in the last block of the
            inflated stream.  This means that the stream ends after the
            current block.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.totalOut">
            <summary>
            The total number of inflated bytes.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.totalIn">
            <summary>
            The total number of bytes set with setInput().  This is not the
            value returned by the TotalIn property, since this also includes the
            unprocessed input.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.noHeader">
            <summary>
            This variable stores the noHeader flag that was given to the constructor.
            True means, that the inflated stream doesn't contain a Zlib header or 
            footer.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.#ctor">
            <summary>
            Creates a new inflater or RFC1951 decompressor
            RFC1950/Zlib headers and footers will be expected in the input data
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.#ctor(System.Boolean)">
            <summary>
            Creates a new inflater.
            </summary>
            <param name="noHeader">
            True if no RFC1950/Zlib header and footer fields are expected in the input data
            
            This is used for GZIPed/Zipped input.
            
            For compatibility with
            Sun JDK you should provide one byte of input more than needed in
            this case.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Reset">
            <summary>
            Resets the inflater so that a new stream can be decompressed.  All
            pending input and output will be discarded.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeHeader">
            <summary>
            Decodes a zlib/RFC1950 header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            The header is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeDict">
            <summary>
            Decodes the dictionary checksum after the deflate header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeHuffman">
            <summary>
            Decodes the huffman encoded symbols in the input stream.
            </summary>
            <returns>
            false if more input is needed, true if output window is
            full or the current block ends.
            </returns>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeChksum">
            <summary>
            Decodes the adler checksum after the deflate stream.
            </summary>
            <returns>
            false if more input is needed.
            </returns>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            If checksum doesn't match.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Decode">
            <summary>
            Decodes the deflated stream.
            </summary>
            <returns>
            false if more input is needed, or if finished.
            </returns>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
            <param name="index">
            The index into buffer where the dictionary starts.
            </param>
            <param name="count">
            The number of bytes in the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No dictionary is needed.
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            The adler checksum for the buffer is invalid
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[])">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            the input.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            The source of input data
            </param>
            <param name="index">
            The index into buffer where the input starts.
            </param>
            <param name="count">
            The number of bytes of input to use.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No input is needed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The index and/or count are wrong.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Inflate(System.Byte[])">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether IsNeedingDictionary(),
            IsNeedingInput() or IsFinished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buffer">
            the output buffer.
            </param>
            <returns>
            The number of bytes written to the buffer, 0 if no further
            output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if buffer has length 0.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Inflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buffer">
            the output buffer.
            </param>
            <param name="offset">
            the offset in buffer where storing starts.
            </param>
            <param name="count">
            the maximum number of bytes to output.
            </param>
            <returns>
            the number of bytes written to the buffer, 0 if no further output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if count is less than 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if the index and / or count are wrong.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method also returns true when the stream is finished.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.IsNeedingDictionary">
            <summary>
            Returns true, if a preset dictionary is needed to inflate the input.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.IsFinished">
            <summary>
            Returns true, if the inflater has finished.  This means, that no
            input is needed and no output can be produced.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Adler">
            <summary>
            Gets the adler checksum.  This is either the checksum of all
            uncompressed bytes returned by inflate(), or if needsDictionary()
            returns true (and thus no output was yet produced) this is the
            adler checksum of the expected dictionary.
            </summary>
            <returns>
            the adler checksum.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.TotalOut">
            <summary>
            Gets the total number of output bytes returned by Inflate().
            </summary>
            <returns>
            the total number of output bytes.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.TotalIn">
            <summary>
            Gets the total number of processed compressed input bytes.
            </summary>
            <returns>
            The total number of bytes of processed input bytes.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.RemainingInput">
            <summary>
            Gets the number of unprocessed input bytes.  Useful, if the end of the
            stream is reached and you want to further process the bytes after
            the deflate stream.
            </summary>
            <returns>
            The number of bytes of the input which have not been processed.
            </returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy">
            <summary>
            Strategies for deflater
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy.Default">
            <summary>
            The default strategy
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy.Filtered">
            <summary>
            This strategy will only allow longer string repetitions.  It is
            useful for random data with a small character set.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy.HuffmanOnly">
            <summary>
            This strategy will not look for string repetitions at all.  It
            only encodes with Huffman trees (which means, that more common
            characters get a smaller encoding.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine">
            <summary>
            Low level compression engine for deflate algorithm which uses a 32K sliding window
            with secondary compression from Huffman/Shannon-Fano codes.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants">
            <summary>
            This class contains constants used for deflation.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEBUGGING">
            <summary>
            Set to true to enable debugging
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.STORED_BLOCK">
            <summary>
            Written to Zip file to identify a stored block
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.STATIC_TREES">
            <summary>
            Identifies static tree in Zip file
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DYN_TREES">
            <summary>
            Identifies dynamic tree in Zip file
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.PRESET_DICT">
            <summary>
            Header flag indicating a preset dictionary for deflation
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFAULT_MEM_LEVEL">
            <summary>
            Sets internal buffer sizes for Huffman encoding
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MIN_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_WBITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.WSIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.WMASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_BITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_MASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_SHIFT">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MIN_LOOKAHEAD">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_DIST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.PENDING_BUF_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_STORED">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_FAST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_SLOW">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_BLOCK_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.GOOD_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_LAZY">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.NICE_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_CHAIN">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.COMPR_FUNC">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">
            Pending buffer to use
            </param>>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Deflate(System.Boolean,System.Boolean)">
            <summary>
            Deflate drives actual compression of data
            </summary>
            <returns>Returns true if progress has been made.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets input data to be deflated.  Should only be called when <code>NeedsInput()</code>
            returns true
            </summary>
            <param name="buffer">The buffer containing input data.</param>
            <param name="offset">The offset of the first byte of data.</param>
            <param name="count">The number of bytes of data to use as input.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.NeedsInput">
            <summary>
            Return true if input is needed via <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)"> SetInput</see>
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set compression dictionary
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.ResetAdler">
            <summary>
            Reset Adler checksum
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetLevel(System.Int32)">
            <summary>
            Set the deflate level (0-9)
            </summary>
            <param name="level">The value to set the level to.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.FillWindow">
            <summary>
            Fill the window
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.InsertString">
            <summary>
            Inserts the current string in the head hash and returns the previous
            value for this hash.
            </summary>
            <returns>The previous hash value</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.FindLongestMatch(System.Int32)">
             <summary>
             Find the best (longest) string in the window matching the 
             string starting at strstart.
            
             Preconditions:
             <code>
             strstart + MAX_MATCH &lt;= window.length.</code>
             </summary>
             <param name="curMatch"></param>
             <returns>True if a match greater than the minimum length is found</returns>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.head">
            <summary>
            Hashtable, hashing three characters to an index for window, so
            that window[index]..window[index+2] have this hash code.  
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.prev">
            <summary>
            <code>prev[index &amp; WMASK]</code> points to the previous index that has the
            same hash code as the string starting at index.  This way 
            entries with the same hash code are in a linked list.
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.strstart">
            <summary>
            Points to the current character in the window.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.lookahead">
            <summary>
            lookahead is the number of characters starting at strstart in
            window that are valid.
            So window[strstart] until window[strstart+lookahead-1] are valid
            characters.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.window">
            <summary>
            This array contains the part of the uncompressed stream that 
            is of relevance.  The current character is indexed by strstart.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.compressionFunction">
            <summary>
            The current compression function.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.inputBuf">
            <summary>
            The input data for compression.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.totalIn">
            <summary>
            The total bytes of input read.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.inputOff">
            <summary>
            The offset into inputBuf, where input data starts.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.inputEnd">
            <summary>
            The end offset of the input data.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.adler">
            <summary>
            The adler checksum
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Adler">
            <summary>
            Get current value of Adler checksum
            </summary>		
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.TotalIn">
            <summary>
            Total data processed
            </summary>		
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Strategy">
            <summary>
            Get/set the <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy">deflate strategy</see>
            </summary>		
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Deflater">
             <summary>
             This is the Deflater class.  The deflater class compresses input
             with the deflate algorithm described in RFC 1951.  It has several
             compression levels and three different strategies described below.
            
             This class is <i>not</i> thread safe.  This is inherent in the API, due
             to the split of deflate and setInput.
             
             author of the original java version : Jochen Hoenicke
             </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.BEST_COMPRESSION">
            <summary>
            The best and slowest compression level.  This tries to find very
            long and distant string repetitions.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.BEST_SPEED">
            <summary>
            The worst but fastest compression level.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.DEFAULT_COMPRESSION">
            <summary>
            The default compression level.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.NO_COMPRESSION">
            <summary>
            This level won't compress at all but output uncompressed blocks.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.DEFLATED">
            <summary>
            The compression method.  This is the only method supported so far.
            There is no need to use this constant at all.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.#ctor">
            <summary>
            Creates a new deflater with default compression level.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.#ctor(System.Int32)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION, or DEFAULT_COMPRESSION.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION.
            </param>
            <param name="noZlibHeaderOrFooter">
            true, if we should suppress the Zlib/RFC1950 header at the
            beginning and the adler checksum at the end of the output.  This is
            useful for the GZIP/PKZIP formats.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Reset">
            <summary>
            Resets the deflater.  The deflater acts afterwards as if it was
            just created with the same compression level and strategy as it
            had before.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Flush">
            <summary>
            Flushes the current input block.  Further calls to deflate() will
            produce enough output to inflate everything in the current input
            block.  This is not part of Sun's JDK so I have made it package
            private.  It is used by DeflaterOutputStream to implement
            flush().
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Finish">
            <summary>
            Finishes the deflater with the current input block.  It is an error
            to give more input after this method was called.  This method must
            be called to force all bytes to be flushed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetInput(System.Byte[])">
            <summary>
            Sets the data which should be compressed next.  This should be only
            called when needsInput indicates that more input is needed.
            If you call setInput when needsInput() returns false, the
            previous input that is still pending will be thrown away.
            The given byte array should not be changed, before needsInput() returns
            true again.
            This call is equivalent to <code>setInput(input, 0, input.length)</code>.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended().
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the data which should be compressed next.  This should be
            only called when needsInput indicates that more input is needed.
            The given byte array should not be changed, before needsInput() returns
            true again.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <param name="offset">
            the start of the data.
            </param>
            <param name="count">
            the number of data bytes of input.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was Finish()ed or if previous input is still pending.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetLevel(System.Int32)">
            <summary>
            Sets the compression level.  There is no guarantee of the exact
            position of the change, but if you call this when needsInput is
            true the change of compression level will occur somewhere near
            before the end of the so far given input.
            </summary>
            <param name="level">
            the new compression level.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.GetLevel">
            <summary>
            Get current compression level
            </summary>
            <returns>Returns the current compression level</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetStrategy(ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy)">
            <summary>
            Sets the compression strategy. Strategy is one of
            DEFAULT_STRATEGY, HUFFMAN_ONLY and FILTERED.  For the exact
            position where the strategy is changed, the same as for
            SetLevel() applies.
            </summary>
            <param name="strategy">
            The new compression strategy.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Deflate(System.Byte[])">
            <summary>
            Deflates the current input block with to the given array.
            </summary>
            <param name="output">
            The buffer where compressed data is stored
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            IsNeedingInput() or IsFinished returns true or length is zero.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Deflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Deflates the current input block to the given array.
            </summary>
            <param name="output">
            Buffer to store the compressed data.
            </param>
            <param name="offset">
            Offset into the output array.
            </param>
            <param name="length">
            The maximum number of bytes that may be stored.
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If Finish() was previously called.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If offset or length don't match the array length.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            This call is equivalent to <code>setDictionary(dict, 0, dict.Length)</code>.
            </summary>
            <param name="dictionary">
            the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if SetInput () or Deflate () were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            The dictionary is a byte array containing strings that are
            likely to occur in the data which should be compressed.  The
            dictionary is not stored in the compressed output, only a
            checksum.  To decompress the output you need to supply the same
            dictionary again.
            </summary>
            <param name="dictionary">
            The dictionary data
            </param>
            <param name="index">
            The index where dictionary information commences.
            </param>
            <param name="count">
            The number of bytes in the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If SetInput () or Deflate() were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.level">
            <summary>
            Compression level.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.noZlibHeaderOrFooter">
            <summary>
            If true no Zlib/RFC1950 headers or footers are generated
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.state">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.totalOut">
            <summary>
            The total bytes of output written.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.pending">
            <summary>
            The pending output.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.engine">
            <summary>
            The deflater engine.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Adler">
            <summary>
            Gets the current adler checksum of the data that was processed so far.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.TotalIn">
            <summary>
            Gets the number of input bytes processed so far.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.TotalOut">
            <summary>
            Gets the number of output bytes so far.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.IsFinished">
            <summary>
            Returns true if the stream was finished and no more output bytes
            are available.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method can also return true when the stream
            was finished.
            </summary>
        </member>
        <member name="T:VectorDraw.WinMessages.Kernel32">
            <summary>
            Imports stadard windows API KERNEL32 functions.
            </summary>
        </member>
        <member name="M:VectorDraw.WinMessages.Kernel32.GetProcAddress(System.IntPtr,System.String)">
            <summary>
            Imports stadard windows API KERNEL32 function.
            </summary>
            <param name="hModule"></param>
            <param name="lpProcName"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.WinMessages.Kernel32.GlobalAlloc(System.Int32,System.Int32)">
            <summary>
            Imports stadard windows API KERNEL32 function.
            </summary>
            <param name="flags"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.WinMessages.Kernel32.GlobalSize(System.IntPtr)">
            <summary>
            Imports stadard windows API KERNEL32 function.
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.WinMessages.Kernel32.GlobalUnlock(System.IntPtr)">
            <summary>
            Imports stadard windows API KERNEL32 function.
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.WinMessages.Kernel32.GlobalLock(System.IntPtr)">
            <summary>
            Imports stadard windows API KERNEL32 function.
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.WinMessages.Kernel32.GlobalFree(System.IntPtr)">
            <summary>
            Imports stadard windows API KERNEL32 function.
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.WinMessages.Kernel32.HandleToBytes(System.IntPtr)">
            <summary>
            Converts a memory handle into a byte array.
            </summary>
            <param name="handle">The memory handle.</param>
            <returns>Returns a byte array representing the memory handle.</returns>
        </member>
        <member name="M:VectorDraw.WinMessages.Kernel32.HandleToStream(System.IntPtr)">
            <summary>
            Writes the bytes from a memory handle to a stream.
            </summary>
            <param name="handle">The memory handle.</param>
            <returns>Returns a memory stream filled with the handle bytes.</returns>
        </member>
        <member name="M:VectorDraw.WinMessages.Kernel32.LoadLibrary(System.String)">
            <summary>
            Imports stadard windows API KERNEL32 function.
            </summary>
            <param name="libFilename"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.WinMessages.Kernel32.FreeLibrary(System.IntPtr)">
            <summary>
            Imports stadard windows API KERNEL32 function.
            </summary>
        </member>
        <member name="M:VectorDraw.WinMessages.MessageManager.IsKeyPressed(System.IntPtr,System.Windows.Forms.Keys)">
            <summary>
            Check if a Key is recently pressed.
            </summary>
            <param name="WindowHandle">Handle of the Window that the key message was send from.</param>
            <param name="key">The key value that will be checked.</param>
            <returns>True if the Key is recently pressed.</returns>
            <remarks>Set the WindowHandle to zero in order all windows messages of the application to be checked.If the key is <see cref="F:System.Windows.Forms.Keys.None"/> the method always returns false.</remarks>
        </member>
        <member name="F:VectorDraw.WinMessages.MessageManager.BreakMessageMethod.None">
            <summary>
            No checking windows messages
            </summary>
        </member>
        <member name="F:VectorDraw.WinMessages.MessageManager.BreakMessageMethod.All">
            <summary>
            All windows messages will be checked.
            </summary>
        </member>
        <member name="F:VectorDraw.WinMessages.MessageManager.BreakMessageMethod.ActionDraw">
            <summary>
            All windows messages will be checked except mouse move without pressed any bmouse buttons.
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.XMLSerializer">
            <summary>
            This class saves vdml files.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.XMLSerializer.#ctor(System.String,System.Int32)">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="filename">The filename of the vdml file.</param>
            <param name="CompressionMethod">Represents the type of compression that will be used, if the file will be saved compressed(vdcl).</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.GZipException">
            <summary>
            GZipException represents a Gzip specific exception	
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipException.#ctor">
            <summary>
            Initialise a new instance of GZipException
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipException.#ctor(System.String)">
            <summary>
            Initialise a new instance of GZipException with its message string.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipException.#ctor(System.String,System.Exception)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.GZip.GZipException"></see>.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
            <param name="innerException">The <see cref="T:System.Exception"/> that caused this exception.</param>
        </member>
        <member name="T:VectorDraw.Professional.Components.MyLicFileLicenseProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Components.MyLicFileLicenseProvider._VUL2(System.Int32)">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Components.MyLicFileLicenseProvider._VLK(System.String)">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Components.MyLicFileLicenseProvider.EVL(System.Int32)">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Components.MyLicFileLicenseProvider._GLK(System.String@)">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Components.MyLicFileLicenseProvider.getUsageMode">
            <summary>
            Internally used only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.Components.MyLicFileLicenseProvider._VLCV(System.String,System.String)">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Components.MyLicFileLicenseProvider._ISL">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Components.MyLicFileLicenseProvider.J_GLCV(System.String)">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Components.MyLicFileLicenseProvider.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Components.MyLicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="type"></param>
            <param name="instance"></param>
            <param name="allowExceptions"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Professional.Components.IDEVINF">
            <summary>
            Internaly use only.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Components.IDEVINF._VUL(System.String,System.Int32)">
            <summary>
            Internaly use only.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Components.IDEVINF.EVL(System.String,System.Int32)">
            <summary>
            Internaly use only.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Components.IDEVINF._VLK(System.String,System.String)">
            <summary>
            Internaly use only.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Components.IDEVINF._GLK(System.String)">
            <summary>
            Internaly use only.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.Components.DEVINF">
            <summary>
            Internaly use only.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Components.DEVINF.#ctor">
            <summary>
            Internaly use only.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.Components.DEVINF.chkbinFile">
            <summary>
            Internally used only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.Components.DEVINF._VUL(System.String,System.Int32)">
            <summary>
            Internaly use only.
            </summary>
            <param name="info"></param>
            <param name="product"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.Components.DEVINF.EVL(System.String,System.Int32)">
            <summary>
            Internaly use only.
            </summary>
            <param name="info"></param>
            <param name="product"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.Components.DEVINF._VLK(System.String,System.String)">
            <summary>
            Internaly use only.
            </summary>
            <param name="info"></param>
            <param name="bstrKey"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Professional.Components.DEVINF._GLK(System.String)">
            <summary>
            Internaly use only.
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow">
            <summary>
            Contains the output from the Inflation process.
            We need to have a window so that we can refer backwards into the output stream
            to repeat stuff.<br/>
            Author of the original java version : John Leuner
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.Write(System.Int32)">
            <summary>
            Write a byte to this output window
            </summary>
            <param name="value">value to write</param>
            <exception cref="T:System.InvalidOperationException">
            if window is full
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.Repeat(System.Int32,System.Int32)">
            <summary>
            Append a byte pattern already in the window itself
            </summary>
            <param name="length">length of pattern to copy</param>
            <param name="distance">distance from end of window pattern occurs</param>
            <exception cref="T:System.InvalidOperationException">
            If the repeated data overflows the window
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyStored(ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator,System.Int32)">
            <summary>
            Copy from input manipulator to internal window
            </summary>
            <param name="input">source of data</param>
            <param name="length">length of data to copy</param>
            <returns>the number of bytes copied</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyDict(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy dictionary to window
            </summary>
            <param name="dictionary">source dictionary</param>
            <param name="offset">offset of start in source dictionary</param>
            <param name="length">length of dictionary</param>
            <exception cref="T:System.InvalidOperationException">
            If window isnt empty
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetFreeSpace">
            <summary>
            Get remaining unfilled space in window
            </summary>
            <returns>Number of bytes left in window</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetAvailable">
            <summary>
            Get bytes available for output in window
            </summary>
            <returns>Number of bytes filled</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyOutput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy contents of window to output
            </summary>
            <param name="output">buffer to copy to</param>
            <param name="offset">offset to start at</param>
            <param name="len">number of bytes to count</param>
            <returns>The number of bytes copied</returns>
            <exception cref="T:System.InvalidOperationException">
            If a window underflow occurs
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.Reset">
            <summary>
            Reset by clearing window so <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetAvailable">GetAvailable</see> returns 0
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending">
            <summary>
            This class stores the pending output of the Deflater.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending.#ctor">
            <summary>
            Construct instance with default buffer size
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.IActivator">
            <summary>
            Provides the functionality for the Activator object.
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.Activator">
            <summary>
            This class is used to create instances of the vdml read objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.#ctor">
            <summary>
            Initializes a new instance of the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach property name of the object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="F:VectorDraw.Serialize.Activator.EmptyTypes">
            <summary>
            Get a static empty Type array.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.ContainsType(System.String)">
            <summary>
            Checks if a type with the specific name has been already added.
            </summary>
            <param name="SingleTypeName">A single name of a type without Namespace</param>
            <returns>True if object contains the name of the type.</returns>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.TypeContainsInterface(System.Type,System.String)">
            <summary>
            Checks if the passed type contains the given interface.
            </summary>
            <param name="t">The type of the object.</param>
            <param name="InterfaceName">The interface to check.</param>
            <returns>True if the interface is contained to the type.</returns>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.AddAssemplyTypes(System.Reflection.Assembly,System.String)">
            <summary>
            Add object types  that implements VectorDraw.Serialize.IFromString and/or VectorDraw.Serialize.IVDSerialise and their full name starts with namespacePrefix
            </summary>
            <param name="asm">Assembly to search for types that will be added to activator</param>
            <param name="namespacePrefix">String used to filter types that starts with specified name.Set it to emtpty string for no type name filter.</param>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.AddCommonTypes">
            <summary>
            Add common ValueType objects like double Int32 byte short System.Drawing.Color System.Drawing.Rectangle etc.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.AddType(System.Type)">
            <summary>
            Add a new Type to the Activator.
            </summary>
            <param name="type">The Type to be added to the Activator's list.</param>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.GetAssemply(System.String,System.Reflection.Assembly@)">
            <summary>
            Gets the assemply of the specific type.
            </summary>
            <param name="FullTypeName">The name of the type.</param>
            <param name="asm"></param>
            <returns>True if an asseply have been calculated for the specific type.</returns>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.AddAssemply(System.String,System.Reflection.Assembly)">
            <summary>
            Adds a new Assembly which implements some Types to the Activator.
            </summary>
            <param name="typefullname">The Full name of the Type including the NameSpace.</param>
            <param name="asm">he Assembly to be added to the Activator.</param>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.AddType(System.String,System.String,System.String,System.String)">
            <summary>
            Adds a Type with the passed parameters.
            </summary>
            <param name="typename">The name of the Type.</param>
            <param name="typeFullname">The Full name of the Type including the NameSpace.</param>
            <param name="dllname">The dll name where the Type is implemented.</param>
            <param name="dllfilename">The dll full path name.</param>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.getTypes(System.String[]@,System.String[]@,System.String[]@)">
            <summary>
            Returns all the Type names and their own Assemblies from the Activator's list.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.GetAssemplyTypes">
            <summary>
            Returns an array of string ellements contains the Full Type Name and Version number of the Assemply where the type is implemented.
            </summary>
            <returns>Returns an array of string ellements contains the Full Type Name and Version number of the Assemply where the type is implemented.</returns>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.FindDllFileName(System.String)">
            <summary>
            Search the specific dll file name on the disk and return the full path name.
            </summary>
            <param name="dllfilename">A sinle dll file name to search for.</param>
            <returns>The full path name of the dll if exist on the disk.</returns>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.GetTypeFullname(System.String)">
            <summary>
            Returns the full namespace of type if exist or null if not.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.GeTypeFromString(System.String)">
            <summary>
            Gets the Type from the Activator's list with the given type name.
            </summary>
            <param name="typeName">The name of the Type to search.</param>
            <returns>The Type if found else null is returned.</returns>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.GetUnicodeString(System.String,System.UInt16)">
            <summary>
            Returns a copy of input str with characters bigger than characterLimit replaced to Unicode format
            </summary>
            <param name="str">String to be converted.</param>
            <param name="characterLimit">
            A limit used to convert only characters with value bigger or equal to limit.Can be in range 0x0100 to 0xDBFF
            </param>
            <returns>A copy of input str with characters bigger than 255 replaced to Unicode format</returns>
            <remarks>
            For example a character with value of 928 is replaced with "\\U+03A0"  3A0 is the hex value of 928.</remarks>
            <remarks>In order to convert the return string back use <see cref="M:VectorDraw.Serialize.Activator.ConvertUnicodeString(System.String)"/>
            </remarks>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.ConvertUnicodeString(System.String)">
            <summary>
            Replaces Unicode format strings to their single value in UTF-16 format using little endian byte order.
            </summary>
            <param name="str">String to be converted.</param>
            <returns>A copy of input string with  Unicode format strings converted to their single value.</returns>
            <remarks>
            Call this method to convert back a string return by a previous call of <see cref="M:VectorDraw.Serialize.Activator.GetUnicodeString(System.String,System.UInt16)"/>
            </remarks>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.ReadObjectFromString(System.String,System.String)">
            <summary>
            Parses the svalue string to the stype name Type.
            </summary>
            <param name="stype">The name of the Type.</param>
            <param name="svalue">The value of the Type object.</param>
            <returns>The parsed object if succeds or null.</returns>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.ReadObjectFromString(System.String,System.String,System.Boolean)">
            <summary>
            Parses the svalue string to the stype name Type.
            </summary>
            <param name="stype">The name of the Type.</param>
            <param name="svalue">The value of the Type object.</param>
            ?<param name="tryConvertUnicodeString">Set it true in order to try convert big unicode characters </param>
            <returns>The parsed object if succeds or null.</returns>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.CreateInstance(System.String)">
            <summary>
            Creates an instance of an object from an existing given Type name.
            </summary>
            <param name="typeName">The existing Type name.</param>
            <returns>The instance of the created object or null if the Type is not found.</returns>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.CreateInstanceFromType(System.Type)">
            <summary>
            Creates an instance of an object from an existing given Type.
            </summary>
            <param name="type">The existing Type.</param>
            <returns>The instance of the created object or null if the Type is not found.</returns>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.OnThrowException(System.Exception)">
            <summary>
            Called when an exception occured.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.GetCulture">
            <summary>
            Modify the current culture NumberFormat with DecimalSeparator
            </summary>
            <returns>The modified current culture</returns>
            <remarks>Internaly used only.</remarks>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.GetNumberFormat">
            <summary>
            Returns a DecimalSeparator Numberformat
            </summary>
            <returns>A DecimalSeparator Numberformat</returns>
            <remarks>Internaly used only.</remarks>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.FindFile(System.String)">
            <summary>
            Finds the specified filename using the <see cref="P:VectorDraw.Serialize.Activator.SupportPath"/> property and returns the path where the file is.
            </summary>
            <param name="filename">The filename with the extension to be searched.</param>
            <returns>The filename with it's path where it is located.</returns>
            <remarks>
            Search for the file in the following order:</remarks>
            <remarks> 1.   The path of the passed filename.</remarks>
            <remarks> 2.   The installation path of the VectorDraw reference dlls.</remarks>
            <remarks> 3.   The path of the <see cref="M:VectorDraw.Serialize.Activator.SetResourcesDirectory(System.String)"/> .</remarks>
            <remarks> 4.   The StartupPath of the Application</remarks>
            <remarks> 5.   The path for the executable file that started the application .</remarks>
            <remarks> 6.   The path of the <see cref="P:VectorDraw.Serialize.Activator.SupportPath"/> .
            </remarks>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.GetResourcesDirectory">
            <summary>
            Returns the directory of the resources files : vdres.txt , Menu.txt, Commands.txt 
            </summary>
            <returns>The directory of the resources files.</returns>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.SetResourcesDirectory(System.String)">
            <summary>
            Set the directory of the resources files : vdres.txt , Menu.txt, Commands.txt 
            </summary>
            <param name="resdir">the directory of the resources files in the form username;directoryname</param>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.GetInstallationPath">
            <summary>
            Get the Installation path where our libraries are placed.
            </summary>
            <returns>A string where the VectorDraw libraries are placed.</returns>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.GetAssemplyPath">
            <summary>
            The Full path of the folser where the VectorDraw componts are installed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.getuservalue(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Reads a string from the VectorDraw registry.
            </summary>
            <param name="baseRegistryPath">The base registry path ( CurrentUser or LocalMachine etc...)</param>
            <param name="SectionName">The Section of the registry(baseRegistryPath\\SOFTWARE\\VectorDraw\\UserValues\).</param>
            <param name="defaultValue">Represents the value that will be returned if the section name does not exist</param>
            <returns>The string value of the registry key.</returns>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.writeuservalue(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Writes a string from the VectorDraw registry.
            </summary>
            <param name="baseRegistryPath">The base registry path ( CurrentUser or LocalMachine etc...)</param>
            <param name="SectionName">The Section of the registry(CurrentUser\\SOFTWARE\\VectorDraw\\UserValues\).</param>
            <param name="Value">The string value to write to the registry.</param>
        </member>
        <member name="M:VectorDraw.Serialize.Activator.getCallingAssembly">
            <summary>
            Returns the System.Reflection.Assembly of the method that invoked the currently executing method.
            </summary>
            <returns>The Assembly object of the method that invoked the currently executing method.</returns>
        </member>
        <member name="P:VectorDraw.Serialize.Activator.version">
            <summary>
            Returns the file version where the object is embeded.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.Activator.SupportPath">
            <summary>
            Get/Set the support path used from <see cref="M:VectorDraw.Serialize.Activator.FindFile(System.String)"/> method.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.Activator.isevl">
            <summary>
            Internaly use only.
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.vdGuidTable">
            <summary>
            An object that manages a dictionary table containing an array of objects with unique <see cref="T:System.Guid"/> reference
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.vdGuidTable.#ctor">
            <summary>
            Default object constructor
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.vdGuidTable.SetObjectGuid(System.Object,System.Guid)">
            <summary>
            Adds the passed object to this table and assign the passed <see cref="T:System.Guid"/> for that object.
            </summary>
            <returns>The <see cref="T:System.Guid"/> assign to object.</returns>
            <remarks>
            Fires <see cref="E:VectorDraw.Serialize.vdGuidTable.ErrorResolve"/> event in case the passed guid is Empty, or the passed object already exist with a different guid,or a different object already exist with the same guid.
            </remarks>
            <exception cref="T:VectorDraw.Serialize.vdGuidTable.vdGuidTableException">Thrown when passed  guid is not valid.</exception>
        </member>
        <member name="M:VectorDraw.Serialize.vdGuidTable.InternalReplaceGuid(System.Object,System.Guid)">
            <summary>
            Internally used mainly in MergeSelection in order to copy the Guids of the old Document to the new one.
            </summary>
            <remarks>Does not raise ErrorResolve event.</remarks>
            <returns>True if the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Serialize.vdGuidTable.GetGuidObject(System.Guid)">
            <summary>
            Returns the object that assigned to the passed <see cref="T:System.Guid"/>, or null if the passed guid is not included in this table object.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.vdGuidTable.GetObjectGuid(System.Object)">
            <summary>
            Returns the <see cref="T:System.Guid"/> that assign to the passed object, or <see cref="F:System.Guid.Empty"/> if the passed object is not included in this table object.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.vdGuidTable.ClearGuids">
            <summary>
            Internally used by VectorDraw FrameWork.
            Clears this table from all the objects and Guid. After that the <see cref="P:VectorDraw.Serialize.vdGuidTable.Count"/> property returns 0.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.vdGuidTable.RemoveObjectGuid(System.Object)">
            <summary>
            Internally used by VectorDraw FrameWork.
            Removes the object with its Guid from this table if exist.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.vdGuidTable.Guids">
            <summary>
            Returns a copy of array Guid objects in this table.
            </summary>
            <returns></returns>
        </member>
        <member name="E:VectorDraw.Serialize.vdGuidTable.ErrorResolve">
            <summary>
            Fired when a <see cref="M:VectorDraw.Serialize.vdGuidTable.SetObjectGuid(System.Object,System.Guid)"/> is called with invalid Guid paramenter.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.vdGuidTable.Count">
            <summary>
            Returns the number of object added in this table.
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.vdGuidTable.vdGuidTableException">
            <summary>
            General Exception class.
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.vdGuidTable.vdGuidTableException.#ctor(System.String)">
            <summary>
            Thrown when an invalid Guid value is passed in <see cref="M:VectorDraw.Serialize.vdGuidTable.SetObjectGuid(System.Object,System.Guid)"/> method.
            </summary>
            <param name="Message">The message that describes the error.</param>
        </member>
        <member name="T:VectorDraw.Serialize.vdGuidTable.vdGuidTableEventArgs">
            <summary>
            A class object that holds the parameters for <see cref="E:VectorDraw.Serialize.vdGuidTable.ErrorResolve"/> event
            </summary>
        </member>
        <member name="M:VectorDraw.Serialize.vdGuidTable.vdGuidTableEventArgs.SetResolveFlag(VectorDraw.Serialize.vdGuidTable.vdGuidTableEventArgs.ResolveFlag)">
            <summary>
            Set a <see cref="T:VectorDraw.Serialize.vdGuidTable.vdGuidTableEventArgs.ResolveFlag"/> used by the Framework in order to resolve the error depend on <see cref="T:VectorDraw.Serialize.vdGuidTable.vdGuidTableEventArgs.ErrorTypeFlag"/>
            </summary>
            <remarks>Default ResolveFlag is <see cref="F:VectorDraw.Serialize.vdGuidTable.vdGuidTableEventArgs.ResolveFlag.Auto"/></remarks>
        </member>
        <member name="P:VectorDraw.Serialize.vdGuidTable.vdGuidTableEventArgs.Sender">
            <summary>
            The <see cref="T:VectorDraw.Serialize.vdGuidTable"/> from which the <see cref="M:VectorDraw.Serialize.vdGuidTable.SetObjectGuid(System.Object,System.Guid)"/> is called.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.vdGuidTable.vdGuidTableEventArgs.ObjectReference">
            <summary>
            An object to map in the <see cref="T:VectorDraw.Serialize.vdGuidTable"/> table dictionary
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.vdGuidTable.vdGuidTableEventArgs.ObjectGuid">
            <summary>
            Get/Set the <see cref="T:System.Guid"/> used by the <see cref="M:VectorDraw.Serialize.vdGuidTable.SetObjectGuid(System.Object,System.Guid)"/> method.
            </summary>
        </member>
        <member name="P:VectorDraw.Serialize.vdGuidTable.vdGuidTableEventArgs.ErrorType">
            <summary>
            Defines the error type that cause the event to be fire.
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.vdGuidTable.vdGuidTableEventArgs.ResolveFlag">
            <summary>
            Defines the a value that set by developer and used by the FrameWork in order to resolve the error depend on <see cref="T:VectorDraw.Serialize.vdGuidTable.vdGuidTableEventArgs.ErrorTypeFlag"/>
            </summary>
        </member>
        <member name="F:VectorDraw.Serialize.vdGuidTable.vdGuidTableEventArgs.ResolveFlag.Auto">
            <summary>
            In case of <see cref="P:VectorDraw.Serialize.vdGuidTable.vdGuidTableEventArgs.ErrorType"/> <see cref="F:VectorDraw.Serialize.vdGuidTable.vdGuidTableEventArgs.ErrorTypeFlag.SameObjectsWithDifferentGuid"/> the passed guid of  <see cref="M:VectorDraw.Serialize.vdGuidTable.SetObjectGuid(System.Object,System.Guid)"/> is ignored and the existing is used.
            In case of <see cref="P:VectorDraw.Serialize.vdGuidTable.vdGuidTableEventArgs.ErrorType"/> <see cref="F:VectorDraw.Serialize.vdGuidTable.vdGuidTableEventArgs.ErrorTypeFlag.SameGuidInDifferentObjects"/> the passed guid of  <see cref="M:VectorDraw.Serialize.vdGuidTable.SetObjectGuid(System.Object,System.Guid)"/> is ignored and a <see cref="M:System.Guid.NewGuid"/> is used.
            In case of <see cref="P:VectorDraw.Serialize.vdGuidTable.vdGuidTableEventArgs.ErrorType"/> <see cref="F:VectorDraw.Serialize.vdGuidTable.vdGuidTableEventArgs.ErrorTypeFlag.EmptyGuid"/> the passed guid of  <see cref="M:VectorDraw.Serialize.vdGuidTable.SetObjectGuid(System.Object,System.Guid)"/> is ignored and a <see cref="M:System.Guid.NewGuid"/> is used.
            </summary>
        </member>
        <member name="F:VectorDraw.Serialize.vdGuidTable.vdGuidTableEventArgs.ResolveFlag.ThrowException">
            <summary>
            A <see cref="T:VectorDraw.Serialize.vdGuidTable.vdGuidTableException"/> is thown during the call of <see cref="M:VectorDraw.Serialize.vdGuidTable.SetObjectGuid(System.Object,System.Guid)"/>
            </summary>
        </member>
        <member name="F:VectorDraw.Serialize.vdGuidTable.vdGuidTableEventArgs.ResolveFlag.OwnFixed">
            <summary>
            User change the <see cref="P:VectorDraw.Serialize.vdGuidTable.vdGuidTableEventArgs.ObjectGuid"/> to a valid one.
            </summary>
        </member>
        <member name="F:VectorDraw.Serialize.vdGuidTable.vdGuidTableEventArgs.ResolveFlag.None">
            <summary>
            The  <see cref="M:VectorDraw.Serialize.vdGuidTable.SetObjectGuid(System.Object,System.Guid)"/> does nothig. No object is added into the <see cref="T:VectorDraw.Serialize.vdGuidTable"/> table dictionary
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.vdGuidTable.vdGuidTableEventArgs.ErrorTypeFlag">
            <summary>
            Defines the error type that cause the event to be fire.
            </summary>
        </member>
        <member name="F:VectorDraw.Serialize.vdGuidTable.vdGuidTableEventArgs.ErrorTypeFlag.SameObjectsWithDifferentGuid">
            <summary>
             The passed object in <see cref="M:VectorDraw.Serialize.vdGuidTable.SetObjectGuid(System.Object,System.Guid)"/>  method already exist with a different guid
            </summary>
        </member>
        <member name="F:VectorDraw.Serialize.vdGuidTable.vdGuidTableEventArgs.ErrorTypeFlag.SameGuidInDifferentObjects">
            <summary>
             The passed guid in <see cref="M:VectorDraw.Serialize.vdGuidTable.SetObjectGuid(System.Object,System.Guid)"/>  method already exist in a different object
            </summary>
        </member>
        <member name="F:VectorDraw.Serialize.vdGuidTable.vdGuidTableEventArgs.ErrorTypeFlag.EmptyGuid">
            <summary>
            The passed guid  in <see cref="M:VectorDraw.Serialize.vdGuidTable.SetObjectGuid(System.Object,System.Guid)"/>  method is Empty
            </summary>
        </member>
        <member name="T:VectorDraw.Serialize.vdGuidTable.vdGuidTableEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Serialize.vdGuidTable.ErrorResolve"/> event.
            </summary>
            <param name="args">a <see cref="T:VectorDraw.Serialize.vdGuidTable.vdGuidTableEventArgs"/> that contains the event paraemters info.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.GZipConstants">
            <summary>
            This class contains constants used for gzip.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.GZIP_MAGIC">
            <summary>
            Magic number found at start of GZIP header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.FTEXT">
            <summary>
            Flag bit mask for text
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.FHCRC">
            <summary>
            Flag bitmask for Crc
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.FEXTRA">
            <summary>
            Flag bit mask for extra
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.FNAME">
            <summary>
            flag bitmask for name
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.FCOMMENT">
            <summary>
            flag bit mask indicating comment is present
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipConstants.#ctor">
            <summary>
            Initialise default instance.
            </summary>
            <remarks>Constructor is private to prevent instances being created.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator">
             <summary>
             This class allows us to retrieve a specified number of bits from
             the input buffer, as well as copy big byte blocks.
            
             It uses an int buffer to store up to 31 bits for direct
             manipulation.  This guarantees that we can get at least 16 bits,
             but we only need at most 15, so this is all safe.
            
             There are some optimizations in this class, for example, you must
             never peek more than 8 bits more than needed, and you must first
             peek bits before you may drop them.  This is not a general purpose
             class but optimized for the behaviour of the Inflater.
            
             authors of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.#ctor">
            <summary>
            Constructs a default StreamManipulator with all buffers empty
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.PeekBits(System.Int32)">
            <summary>
            Get the next sequence of bits but don't increase input pointer.  bitCount must be
            less or equal 16 and if this call succeeds, you must drop
            at least n - 8 bits in the next call.
            </summary>
            <param name="bitCount">The number of bits to peek.</param>
            <returns>
            the value of the bits, or -1 if not enough bits available.  */
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.DropBits(System.Int32)">
            <summary>
            Drops the next n bits from the input.  You should have called PeekBits
            with a bigger or equal n before, to make sure that enough bits are in
            the bit buffer.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.GetBits(System.Int32)">
            <summary>
            Gets the next n bits and increases input pointer.  This is equivalent
            to <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.PeekBits(System.Int32)"/> followed by <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.DropBits(System.Int32)"/>, except for correct error handling.
            </summary>
            <param name="bitCount">The number of bits to retrieve.</param>
            <returns>
            the value of the bits, or -1 if not enough bits available.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.SkipToByteBoundary">
            <summary>
            Skips to the next byte boundary.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.CopyBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies bytes from input buffer to output buffer starting
            at output[offset].  You have to make sure, that the buffer is
            byte aligned.  If not enough bytes are available, copies fewer
            bytes.
            </summary>
            <param name="output">
            The buffer to copy bytes to.
            </param>
            <param name="offset">
            The offset in the buffer at which copying starts
            </param>
            <param name="length">
            The length to copy, 0 is allowed.
            </param>
            <returns>
            The number of bytes copied, 0 if no bytes were available.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Length is less than zero
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Bit buffer isnt byte aligned
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.Reset">
            <summary>
            Resets state and empties internal buffers
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add more input for consumption.
            Only call when IsNeedingInput returns true
            </summary>
            <param name="buffer">data to be input</param>
            <param name="offset">offset of first byte of input</param>
            <param name="count">number of bytes of input to add.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.AvailableBits">
            <summary>
            Gets the number of bits available in the bit buffer.  This must be
            only called when a previous PeekBits() returned -1.
            </summary>
            <returns>
            the number of bits available.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.AvailableBytes">
            <summary>
            Gets the number of bytes available.
            </summary>
            <returns>
            The number of bytes available.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.IsNeedingInput">
            <summary>
            Returns true when SetInput can be called
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.UndoRedo.IUndoGroup">
            <summary>
            Provides the functionality for the UndoGroup used to group multiple property changes in the undo history list.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.UndoRedo.IUndoGroup.Group">
            <summary>
            Get a boolean value that represents the start and the end of the group in a history list.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.UndoRedo.IUndoGroup.Description">
            <summary>
            Returns the Description of the Group action.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.UndoRedo.UndoGroup">
            <summary>
            Implements the Group object which is used to group multiple property changes in the undo history list.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.UndoRedo.UndoGroup.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.UndoRedo.UndoGroup.#ctor(System.String)">
            <summary>
            Initializes the object.
            </summary>
            <param name="description">The description of the Group action.</param>
        </member>
        <member name="M:VectorDraw.Professional.UndoRedo.UndoGroup.ToString">
            <summary>
            Gets a System.String that represents the Description property of the Object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.UndoRedo.UndoGroup.Group">
            <summary>
            Get/Set a boolean value that represents the start and the end of the group in a history list.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.UndoRedo.UndoGroup.Description">
            <summary>
            Returns the Description of the Group action.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.UndoRedo.ModificationHistory">
            <summary>
            Maintains the stack of redo and undo logs.Each entry in the undo stack represents a single property change
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.UndoRedo.ModificationHistory.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.UndoRedo.ModificationHistory.MakeGroup(System.Int32)">
            <summary>
            Groups the last groupLength items of the undo list.
            </summary>
            <param name="groupLength">The count of items to be grouped.</param>
        </member>
        <member name="M:VectorDraw.Professional.UndoRedo.ModificationHistory.ClearRedoStack">
            <summary>
            Clears the redo stack.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.UndoRedo.ModificationHistory.Clear">
            <summary>
            Clears the undo and redo stacks.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.UndoRedo.ModificationHistory.Store(System.Object,System.String,System.Object)">
            <summary>
            This method would be called by the parent class in order to store the value of a property before it changes.
            </summary>
            <param name="propObject">Object that is modified</param>
            <param name="propName">Name of the property</param>
            <param name="propVal">The new value of the property.</param>
        </member>
        <member name="M:VectorDraw.Professional.UndoRedo.ModificationHistory.GetUndoItemArray">
            <summary>
            Get the undo history stach to an array of PropertyValue objects.
            </summary>
            <returns>An array of PropertyValue that contains all the undo list objects.</returns>
        </member>
        <member name="M:VectorDraw.Professional.UndoRedo.ModificationHistory.GetRedoItemArray">
            <summary>
            Get the redo history stach to an array of PropertyValue objects.
            </summary>
            <returns>An array of PropertyValue that contains all the redo list objects.</returns>
        </member>
        <member name="M:VectorDraw.Professional.UndoRedo.ModificationHistory.AddToStack(System.Collections.Generic.Stack{VectorDraw.Professional.UndoRedo.PropertyValue},System.Boolean,System.Object,System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Adds a PropertyValue object into the specific stack.
            </summary>
            <param name="stack">The undo or redo Stack where the object will be added.</param>
            <param name="IsRedoStack">True is the input stack is the redo stack.</param>
            <param name="propObject">The object that property name is reference.</param>
            <param name="propName">The name of the property for the input object.</param>
            <param name="value">The value of the property.</param>
            <param name="FireEvents">True in order the <see cref="E:VectorDraw.Professional.UndoRedo.ModificationHistory.OnStoreValue"/> and <see cref="E:VectorDraw.Professional.UndoRedo.ModificationHistory.OnAfterStoreValue"/> to be fire on.</param>
            <param name="cloneValue">True in order a copy of the value to be added.</param>
        </member>
        <member name="M:VectorDraw.Professional.UndoRedo.ModificationHistory.StoreEx(System.Object,System.String,System.Object)">
            <summary>
            This method would be called by the parent class in order to store the value of a property before.
            </summary>
            <param name="propObject">Object that is modified</param>
            <param name="propName">Name of the property</param>
            <param name="newvalue">The value prior to change</param>
        </member>
        <member name="M:VectorDraw.Professional.UndoRedo.ModificationHistory.StoreUndoGroup(System.Boolean)">
            <summary>
            Begin/End a Group of property changes.
            </summary>
            <param name="begin">True begins the group and false ends it.</param>
        </member>
        <member name="M:VectorDraw.Professional.UndoRedo.ModificationHistory.StoreUndoGroup(System.Boolean,System.String)">
            <summary>
            Begin/End a Group of property changes.
            </summary>
            <param name="begin">True begins the group and false ends it.</param>
            <param name="description">A description for the group action.</param>
            <remarks > Currently the Descriptions we use in our code are the following : MOVEGRIPS,PAN,ROTATE,COPY,ERASE,SCALE,MOVE,INSERT,CLIPPASTE,EXPLODE,ROTATE3D,MIRROR,ARRAY,BREAK,LOOKAT,OFFSET,FILLET,STRETCH,XREF,TEXTSTYLE,BLOCK,PURGE,ZOOM. Default value of description is GROUP which is used in several occasions also.</remarks>
        </member>
        <member name="M:VectorDraw.Professional.UndoRedo.ModificationHistory.UpdateObject(System.Object)">
            <summary>
            Called to update an object after change its value by an undo or redo action
            </summary>
            <param name="obj">An object saved in the undo or redo stack</param>
        </member>
        <member name="M:VectorDraw.Professional.UndoRedo.ModificationHistory.InvalidateObject(System.Object)">
            <summary>
            Called to send an Invalidate for an object before and after change its value by an undo or redo action
            </summary>
            <param name="obj">An object saved in the undo or redo stack</param>
        </member>
        <member name="M:VectorDraw.Professional.UndoRedo.ModificationHistory.PushEnable(System.Boolean)">
            <summary>
            Adds a boolean value to the enable stack.
            </summary>
            <param name="bvalue">False to disable the write to the undo group.Each PushEnable must be combined with a <see cref="M:VectorDraw.Professional.UndoRedo.ModificationHistory.PopEnable"/> command.</param>
        </member>
        <member name="M:VectorDraw.Professional.UndoRedo.ModificationHistory.PopEnable">
            <summary>
            Pops the last value added value from the enable stack.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.UndoRedo.ModificationHistory.Undo">
            <summary>
            Undones the last item stored in the undo list.If an end group item is last then undones all items of the group.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.UndoRedo.ModificationHistory.Redo">
            <summary>
            Redones the last item stored in the redo list.If a start group item is last then redones all items of the group.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.UndoRedo.ModificationHistory.OnStoreValue">
            <summary>
            Fires before a property change is stored in the ModificationHistory object.
            </summary>
        </member>
        <member name="E:VectorDraw.Professional.UndoRedo.ModificationHistory.OnAfterStoreValue">
            <summary>
            Fires after a property change is stored in the ModificationHistory object.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.UndoRedo.ModificationHistory.LatestUndoHistoryValue">
            <summary>
            Returns the latest <see cref="T:VectorDraw.Professional.UndoRedo.PropertyValue"/> saved in the undo history stack.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.UndoRedo.ModificationHistory.UndoStackLength">
            <summary>
            Get the count of items in the undo stack.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.UndoRedo.ModificationHistory.RedoStackLength">
            <summary>
            Get the count of items in the redo stack.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.UndoRedo.ModificationHistory.GroupCount">
            <summary>
            Returns the index of the active object property if an Undo or a Redo action is executed inside a Group.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.UndoRedo.ModificationHistory.IsInAction">
            <summary>
            Get/Set a boolean value representing  if an Undo or a Redo action is executed.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.UndoRedo.ModificationHistory.Enable">
            <summary>
            Returns the object at the top of the enable stack without removing it.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.UndoRedo.ModificationHistory.CanUndo">
            <summary>
            Get a boolean value representing if an undo command can be performed,if there are no items in the undo list then an undo command cannot be performed.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.UndoRedo.ModificationHistory.CanRedo">
            <summary>
            Get a boolean value representing if a redo command can be performed,if there are no items in the redo list then an undo command cannot be performed.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.UndoRedo.ModificationHistory.UndoStackCollection">
            <summary>
            Returns the undo Stack where the properties are stored.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.UndoRedo.ModificationHistory.RedoStackCollection">
            <summary>
            Returns the redo Stack where the properties are stored.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.UndoRedo.ModificationHistory.StoreValueEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.UndoRedo.ModificationHistory.OnStoreValue"/> event.
            </summary>
            <param name="sender">A ModificationHistory object that the property change will be inserted.</param>
            <param name="isRedo">A boolean value representing if this action is a redo(true) action or undo(false).</param>
            <param name="propObject">The object which property was changed.</param>
            <param name="propName">The name of the property that changed.</param>
            <param name="value">The previous value of the property.</param>
            <param name="Cancel">A reference boolean value that if it is true then the default VectorDraw code is not implemented.</param>
        </member>
        <member name="T:VectorDraw.Professional.UndoRedo.ModificationHistory.AfterStoreValueEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.Professional.UndoRedo.ModificationHistory.OnAfterStoreValue"/> event.
            </summary>
            <param name="sender">A ModificationHistory object that the property change will be inserted.</param>
            <param name="isRedo">A boolean value representing if this action is a redo(true) action or undo(false).</param>
            <param name="propObject">The object which property was changed.</param>
            <param name="propName">The name of the property that changed.</param>
            <param name="value">The previous value of the property.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman">
            <summary>
            This is the DeflaterHuffman class.
            
            This class is <i>not</i> thread safe.  This is inherent in the API, due
            to the split of Deflate and SetInput.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.pending">
            <summary>
            Pending buffer to use
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">Pending buffer to use</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.SendAllTrees(System.Int32)">
            <summary>
            Write all trees to pending buffer
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.CompressBlock">
            <summary>
            Compress current buffer writing data to pending buffer
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.FlushStoredBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with no compression
            </summary>
            <param name="stored">Data to write</param>
            <param name="storedOffset">Index of first byte to write</param>
            <param name="storedLength">Count of bytes to write</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.FlushBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with compression
            </summary>		
            <param name="stored">Data to flush</param>
            <param name="storedOffset">Index of first byte to flush</param>
            <param name="storedLength">Count of bytes to flush</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.IsFull">
            <summary>
            Get value indicating if internal buffer is full
            </summary>
            <returns>true if buffer is full</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.TallyLit(System.Int32)">
            <summary>
            Add literal to buffer
            </summary>
            <param name="literal">Literal value to add to buffer.</param>
            <returns>Value indicating internal buffer is full</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.TallyDist(System.Int32,System.Int32)">
            <summary>
            Add distance code and length to literal and distance trees
            </summary>
            <param name="distance">Distance code</param>
            <param name="length">Length</param>
            <returns>Value indicating if internal buffer is full</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.BitReverse(System.Int32)">
            <summary>
            Reverse the bits of a 16 bit value.
            </summary>
            <param name="toReverse">Value to reverse bits</param>
            <returns>Value with bits reversed</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.Reset">
            <summary>
            Resets the internal state of the tree
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.CheckEmpty">
            <summary>
            Check that all frequencies are zero
            </summary>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            At least one frequency is non-zero
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.SetStaticCodes(System.Int16[],System.Byte[])">
            <summary>
            Set static codes and length
            </summary>
            <param name="staticCodes">new codes</param>
            <param name="staticLengths">length for new codes</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.BuildCodes">
            <summary>
            Build dynamic codes and lengths
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.GetEncodedLength">
            <summary>
            Get encoded length
            </summary>
            <returns>Encoded length, the sum of frequencies * lengths</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.CalcBLFreq(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree)">
            <summary>
            Scan a literal or distance tree to determine the frequencies of the codes
            in the bit length tree.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.WriteTree(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree)">
            <summary>
            Write tree values
            </summary>
            <param name="blTree">Tree to write</param>
        </member>
        <member name="T:VectorDraw.Professional.UndoRedo.IPropertyValue">
            <summary>
            Provides all functionality for the PropertyValue object used in undo-redo history.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.UndoRedo.PropertyValue">
            <summary>
            This class will hold the name and value of a property prior to the value being changed used for undo-redo history.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.UndoRedo.PropertyValue.#ctor(System.Object,System.String,System.Object)">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="propObject">The object that has the property changed.</param>
            <param name="propName">A string representing the name of the object's property.</param>
            <param name="propVal">The value of the property.</param>
        </member>
        <member name="M:VectorDraw.Professional.UndoRedo.PropertyValue.ToString">
            <summary>
            Gets a System.String that represents the Type,PropName and PropVal values of the PropertyValue Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Professional.UndoRedo.PropertyValue.GetCurrentObjectPropertyValue">
            <summary>
            Returns the currently selected object property value 
            </summary>
            <returns>The currently selected object property value </returns>
        </member>
        <member name="M:VectorDraw.Professional.UndoRedo.PropertyValue.UpdateObjectPropertyValue(System.Boolean,System.Boolean)">
            <summary>
            Change the object property value with the <see cref="P:VectorDraw.Professional.UndoRedo.PropertyValue.Value"/>.
            </summary>
            <param name="bUpdateObject">True in order the <see cref="M:VectorDraw.Professional.UndoRedo.IUpdate.Update"/> method to be called for an <see cref="T:VectorDraw.Professional.UndoRedo.IUpdate"/> type object.</param>
            <param name="bInvalidateObject">True in order the <see cref="M:VectorDraw.Professional.UndoRedo.IInvalidate.Invalidate"/> method to be called for an <see cref="T:VectorDraw.Professional.UndoRedo.IInvalidate"/> type object.</param>
        </member>
        <member name="P:VectorDraw.Professional.UndoRedo.PropertyValue.ObjectOfProperty">
            <summary>
            Get the object that has the property changed.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.UndoRedo.PropertyValue.PropertyName">
            <summary>
            Get the name of the changed object's property.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.UndoRedo.PropertyValue.Value">
            <summary>
            Get the value of the changed object's property.
            </summary>
        </member>
        <member name="P:VectorDraw.Professional.UndoRedo.PropertyValue.Xprop">
            <summary>
            Get/Set a user property for this object.
            </summary>
        </member>
    </members>
</doc>
