<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VectorDraw.Render</name>
    </assembly>
    <members>
        <member name="T:VectorDraw.DrawElements.grText2d">
            <summary>
            Implements a drawable True Type Font(TTF) text object.
            </summary>
        </member>
        <member name="T:VectorDraw.DrawElements.grElement">
            <summary>
            Implements a basic drawable element.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.BaseObject">
            <summary>
            This is the Base VectorDraw object.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.BaseObject.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="T:VectorDraw.DrawElements.IDrawable">
            <summary>
            Interface used to specify that an element is drawable.This object is a basic object for other elements and cannot be used as drawble element.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.IDrawable.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Draws an element to the passed vdRender object.
            </summary>
            <param name="render">A vdRender object where the object is going to be drawn.</param>
            <returns>A status code representing the end of the draw function.</returns>
        </member>
        <member name="F:VectorDraw.DrawElements.grElement.Childs">
            <summary>
            Get/Set the child elements of the drawable object.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grElement.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grElement.GetBox">
            <summary>
            Gets Element's BoundingBox
            </summary>
            <remarks >The Bounding box of subelements(Childs) is not included</remarks>
        </member>
        <member name="M:VectorDraw.DrawElements.grElement.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Draws an element to the passed vdRender object.
            </summary>
            <param name="render">A vdRender object where the object is going to be drawn.</param>
            <returns>A status code representing the end of the draw function.</returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grElement.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.DrawElements.grElement.TransformBy(VectorDraw.Geometry.Matrix,System.Boolean)">
            <summary>
            Transforms all the geometrical properties of the object with the specific Matrix mat.
            </summary>
            <param name="matrix">The Matrix with which the transformation will be done.</param>
            <param name="updateBoundRect">If true then the Bounding Box of the object will be recalculated.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grElement.GetSamplePoints(System.Int32,System.Double)">
            <summary>
            Returns a list of points on the element from the start to the end point of the element.
            </summary>
            <param name="curveResolution">valid values (1 to 20000)</param>
            <param name="pixelSize">valid values possitive decimal ( >=0)</param>
            <returns>A collection of points belonging to the element in Entity Coordinate System(ECS).</returns>
            <remarks >
            The greater the curveResolution the biggest the number of segments that the curve is 
            divided in(The Smoother the curve).The greater PixelSize the smallest the 
            number of curves that the curve is divided in(which means bigger segments).
            Usually it is used to draw the curve into small polygon segments.
            If you want to devide the curve into a specific number of segments then use pixelsize=0 and curveresolution = number of segments.
            </remarks>
        </member>
        <member name="M:VectorDraw.DrawElements.grElement.GetLength">
            <summary>
            Calculate the length of the Element.
            </summary>
            <returns>Returns a double value representing the length of the element.</returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grElement.GetArea">
            <summary>
            Calculate the Area of the element.
            </summary>
            <returns>Returns a double value that represents the area of the element.</returns>
        </member>
        <member name="P:VectorDraw.DrawElements.grElement.Elements">
            <summary>
            Get/Set the child elements of the drawable object.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grText2d.mbFillSolid">
            <summary>
            A boolean value that represents if the characters will be fiiled with a solid brush or not.
            </summary>
            <remarks>Default value is true.</remarks>
        </member>
        <member name="F:VectorDraw.DrawElements.grText2d._inspoint">
            <summary>
            A gPoint object that represents the insertion point of the text.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grText2d._height">
            <summary>
            A double value that represents the height of the text.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grText2d._rotation">
            <summary>
            A double value that represents the rotation of the text in radians.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grText2d._italicAngle">
            <summary>
            A double value that represents the angle used when the text is italic.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grText2d._font">
            <summary>
            A grFont object representing the font of the text.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grText2d._textstring">
            <summary>
            A string object representing the string value of the text.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grText2d.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grText2d.#ctor(System.String)">
            <summary>
            Initializes the object with the passed string value.
            </summary>
            <param name="textstring">The string value of the text.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grText2d.#ctor(VectorDraw.DrawElements.grFont,System.String)">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="font">The font of the text.</param>
            <param name="textstring">The string value of the text.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grText2d.#ctor(VectorDraw.DrawElements.grFont,System.String,System.Double)">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="font">The font of the text.</param>
            <param name="textstring">The string value of the text.</param>
            <param name="height">The height of the text.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grText2d.GetBox">
            <summary>
            Gets Element's BoundingBox
            </summary>
            <remarks >The Bounding box of subelements(Childs) is not included</remarks>
        </member>
        <member name="M:VectorDraw.DrawElements.grText2d.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Draws an element to the passed vdRender object.
            </summary>
            <param name="render">A vdRender object where the object is going to be drawn.</param>
            <returns>A status code representing the end of the draw function.</returns>
        </member>
        <member name="T:VectorDraw.DrawElements.grCircle">
            <summary>
            Implements a drawable circle element.
            </summary>
        </member>
        <member name="T:VectorDraw.DrawElements.grCurve">
            <summary>
            Implemets a basic drawable curve.This object is a basic object for other elements and cannot be used as drawble element.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grCurve.mSamplePoints">
            <summary>
            Internally used for storing object's sample points.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grCurve.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grCurve.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="F:VectorDraw.DrawElements.grCircle.Center">
            <summary>
            Get/Set the center of the circle.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grCircle.Radius">
            <summary>
            Get/Set the radius of the circle.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grCircle.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grCircle.#ctor(VectorDraw.Geometry.gPoint,System.Double)">
            <summary>
            Initializes the object with the given parameters.
            </summary>
            <param name="center">The center of the circle.</param>
            <param name="radius">The radius of the circle.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grCircle.GetBox">
            <summary>
            Gets Element's BoundingBox
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grCircle.GetSamplePoints(System.Int32,System.Double)">
            <summary>
            Returns a list of points on the arc from the start to the end point of the arc.
            </summary>
            <param name="curveResolution">valid values (1 to 20000)</param>
            <param name="pixelSize">valid values possitive decimal ( &gt;=0)</param>
            <returns>A collection of points belonging to the arc in Entity Coordinate System(ECS).</returns>
            <seealso cref="M:VectorDraw.DrawElements.grElement.GetSamplePoints(System.Int32,System.Double)"/>
        </member>
        <member name="M:VectorDraw.DrawElements.grCircle.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.DrawElements.grCircle.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Draws an element to the passed vdRender object.
            </summary>
            <param name="render">A vdRender object where the object is going to be drawn.</param>
            <returns>A status code representing the end of the draw function.</returns>
        </member>
        <member name="T:VectorDraw.DrawElements.grBulgePline">
            <summary>
            Implements a drawble polyline with bulges.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grBulgePline._isclosed">
            <summary>
            Get/Set a boolean value representing if the polyline is closed.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grBulgePline._Vertexes">
            <summary>
            Get/Set the collection of Vertexes of the polyline.The points are in Entity Coordinate System.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grBulgePline.#ctor(VectorDraw.Geometry.Vertexes)">
            <summary>
            Initilizes the object with the given parameter.
            </summary>
            <param name="vertexies">A collection of Vertexes representing the points and bulges of the polyline.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grBulgePline.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grBulgePline.GetBox">
            <summary>
            Gets Element's BoundingBox
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grBulgePline.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.DrawElements.grBulgePline.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Draws an element to the passed vdRender object.
            </summary>
            <param name="render">A vdRender object where the object is going to be drawn.</param>
            <returns>A status code representing the end of the draw function.</returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grBulgePline.GetSamplePoints(System.Int32,System.Double)">
            <summary>
            Returns a list of points on the arc from the start to the end point of the arc.
            </summary>
            <param name="curveResolution">valid values (1 to 20000)</param>
            <param name="pixelSize">valid values possitive decimal ( &gt;=0)</param>
            <returns>A collection of points belonging to the arc in Entity Coordinate System(ECS).</returns>
            <seealso cref="M:VectorDraw.DrawElements.grElement.GetSamplePoints(System.Int32,System.Double)"/>
        </member>
        <member name="M:VectorDraw.DrawElements.grBulgePline.bulge2Arc(VectorDraw.Geometry.Vertex,VectorDraw.Geometry.Vertex,VectorDraw.Geometry.gPoint@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Calculates an arc from two given Vertexes with bulge.
            </summary>
            <param name="p1">First Vertex object needed.</param>
            <param name="p2">Second Vertex object needed.</param>
            <param name="cen">A reference gPoint object where is going to be returned the center of the arc.</param>
            <param name="rad">A reference double object where is going to be returned the radius of the arc.</param>
            <param name="sa">A reference double object where is going to be returned the start angle of the arc.</param>
            <param name="ea">A reference double object where is going to be returned the end angle of the arc.</param>
            <returns>True if the operation was succesfull.</returns>
        </member>
        <member name="T:VectorDraw.DrawElements.grElements">
            <summary>
            Represents a collection of drawble elements.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grElements.#ctor">
            <summary>
            Initializes the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grElements.#ctor(System.Int32)">
            <summary>
            Initializes the collection object with a given capacity.
            </summary>
            <param name="capacity">An integer representing the preallocated memory size of the collection.</param>
        </member>
        <member name="T:VectorDraw.DrawElements.gr3dFace">
            <summary>
            Implements a 3dFace drawble element.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.gr3dFace.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="p4"></param>
            <param name="visible1"></param>
            <param name="visible2"></param>
            <param name="visible3"></param>
            <param name="visible4"></param>
        </member>
        <member name="M:VectorDraw.DrawElements.gr3dFace.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="visible1"></param>
            <param name="visible2"></param>
            <param name="visible3"></param>
        </member>
        <member name="M:VectorDraw.DrawElements.gr3dFace.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.gr3dFace.#ctor(VectorDraw.Geometry.gPoint[])">
            <summary>
            Initializes the object with the passed points.
            </summary>
            <param name="pts">A collection of 4 gPoint objects.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.gr3dFace.#ctor(VectorDraw.Geometry.gPoint[],System.Boolean[])">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="pts">A collection of 4 gPoint objects.</param>
            <param name="Visibilities">A bool array that represents the visibilities of the 4 lines of the 3dFace object.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.gr3dFace.GetBox">
            <summary>
            Gets Element's BoundingBox
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.gr3dFace.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.DrawElements.gr3dFace.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Draws an element to the passed vdRender object.
            </summary>
            <param name="render">A vdRender object where the object is going to be drawn.</param>
            <returns>A status code representing the end of the draw function.</returns>
        </member>
        <member name="P:VectorDraw.DrawElements.gr3dFace.Visibilities">
            <summary>
            A bool array that represents the visibilities of the 4 lines of the 3dFace object.
            </summary>
        </member>
        <member name="P:VectorDraw.DrawElements.gr3dFace.Verticies">
            <summary>
            A collection of 4 gPoint objects that represents the 4 points of the face.
            </summary>
        </member>
        <member name="T:VectorDraw.Professional.vdFigures.LightType">
            <summary>
            Represents the type of the light.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.LightType.Positional">
            <summary>
            Global positional light.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.LightType.Directional">
            <summary>
            Directional light.
            </summary>
        </member>
        <member name="F:VectorDraw.Professional.vdFigures.LightType.Spot">
            <summary>
            Spot light.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.Iviewport">
            <summary>
            Provides the methods and properties that implemented by a vdViewport object
            </summary>
        </member>
        <member name="M:VectorDraw.Render.Iviewport.PushFrozenLayers">
            <summary>
            Push a stack that mark the layers in vdViewport.FrozenLayerList, as Frozen
            </summary>
        </member>
        <member name="M:VectorDraw.Render.Iviewport.PopFrozenLayers">
             <summary>
            Pop the stack that previously was pushed by PushFrozenLayers
             </summary>
        </member>
        <member name="P:VectorDraw.Render.Iviewport.ClipBoundaryPoints">
            <summary>
            Get the Boundary clipping points in World Coord System of active layout.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.Iviewport.LayoutRender">
            <summary>
            Returns the Layout render where this object belongs to.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.BitmapWrapper">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.BitmapWrapper.#ctor">
            <summary>
            Initialize a new instane of this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.BitmapWrapper.Invalidate(System.Drawing.Rectangle)">
            <summary>
            Invalidates the specified region of the control (adds it to the control's
            update region, which is the area that will be repainted at the next paint
            operation), and causes a paint message to be sent to the control.
            </summary>
            <param name="rc"> A System.Drawing.Rectangle that represents the region to invalidate.</param>
        </member>
        <member name="M:VectorDraw.Render.BitmapWrapper.ApplyRenderQuality(System.Drawing.Graphics,VectorDraw.Render.vdRender.RenderingQualityMode)">
            <summary>
            Apply a value that represents the quality of the draw. Better quality slower draw!
            </summary>
            <param name="graphics">The graphics of the render.</param>
            <param name="mode">The mode to use , <see cref="T:VectorDraw.Render.vdRender.RenderingQualityMode"/></param>
        </member>
        <member name="M:VectorDraw.Render.BitmapWrapper.ApplyRenderQuality(VectorDraw.Render.vdRender.RenderingQualityMode)">
            <summary>
            Apply a value that represents the quality of the draw. Better quality slower draw!
            </summary>
            <param name="mode">The mode to use , <see cref="T:VectorDraw.Render.vdRender.RenderingQualityMode"/></param>
        </member>
        <member name="M:VectorDraw.Render.BitmapWrapper.Scroll(System.Int32,System.Int32)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.BitmapWrapper.Clear(System.Drawing.Color)">
            <summary>
            Clears the render object with tha passed System.Drawing.Color.
            </summary>
            <param name="color">The color to be used.</param>
        </member>
        <member name="M:VectorDraw.Render.BitmapWrapper.Create(System.Windows.Forms.Control,System.Object,System.Drawing.Color)">
            <summary>
            Initial Create of the Render objects required.
            </summary>
            <param name="_control">The Control where the render is going be used.</param>
            <param name="sender">The sender where usually is a vdDocument object or a vdLayout.</param>
            <param name="color">A System.Drawing.Color used to fill the drawing area. <seealso cref="M:VectorDraw.Render.BitmapWrapper.Clear(System.Drawing.Color)"/></param>
        </member>
        <member name="M:VectorDraw.Render.BitmapWrapper.Finalize">
            <summary>
            Deconstructor of the Object , calls the Dispose of the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.BitmapWrapper.Dispose">
            <summary>
            The dispose method of the object forces a clear of the object.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.BitmapWrapper.NeedRedraw">
            <summary>
            Get/Set a boolean value that represents if the render needs to be redrawn.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.BitmapWrapper.ScreenBitmap">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.BitmapWrapper.ScreenGraphics">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.BitmapWrapper.ActionBitmap">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.BitmapWrapper.ActionGraphics">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.BitmapWrapper.MemoryBitmap">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.BitmapWrapper.MemoryGraphics">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.BitmapWrapper.IsClear">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.BitmapWrapper.IsScrolling">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.BitmapWrapper.control">
            <summary>
            Returns the <see cref="T:System.Windows.Forms.Control"/> where the drawing is done.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.BitmapWrapper.ControlGraphics">
            <summary>
            Returns the graphics context of selected <see cref="P:VectorDraw.Render.BitmapWrapper.control"/> property.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.BitmapWrapper.DefaultPixelFormat">
            <summary>
            Get the Default Pixel Format used by the render object. <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppPArgb"/>.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.PolyFaceSelectingMode">
            <summary>
            This property controls the selecting of the polyface when you click either inside of a face or to the wireframe of the polyface.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.PolyFaceSelectingMode.WireBase">
            <summary>
            The polyface will be selected if and only it is clicked in the wireframe of it.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.PolyFaceSelectingMode.SolidBase">
            <summary>
            The polyface will be selected even if it is clicked between the wires of the object.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.Draw3DFlagEnum">
            <summary>
            Represents values that used when drawing an object in 3d.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.Draw3DFlagEnum.Default">
            <summary>
            The default value for <see cref="P:VectorDraw.Render.IDraw3DFlag.Draw3DFlag"/>
            </summary>
        </member>
        <member name="F:VectorDraw.Render.Draw3DFlagEnum.ExcludeFromList">
            <summary>
            Object with this value are not included in display lists.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.Draw3DFlagEnum.DrawWire">
            <summary>
             Object with this value draws wire lines
            </summary>
        </member>
        <member name="F:VectorDraw.Render.Draw3DFlagEnum.ExcludeFrom3DList">
            <summary>
            Object with this value are not included in 3d opengl display lists.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.FLAG_ELEMENT_EX">
            <summary>
            Represents additional flag values for drawing elements
            </summary>
        </member>
        <member name="F:VectorDraw.Render.FLAG_ELEMENT_EX.None">
            <summary>
            No addtional values for drawing elements
            </summary>
        </member>
        <member name="F:VectorDraw.Render.FLAG_ELEMENT_EX.IGNORE_LIGHTING">
            <summary>
            Drawing Elements will ignore lighting
            </summary>
        </member>
        <member name="T:VectorDraw.Render.IDraw3DFlag">
            <summary>
            Controls 3d display of drawing entities.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.IDraw3DFlag.Draw3DFlag">
            <summary>
            Get/Set the <see cref="T:VectorDraw.Render.Draw3DFlagEnum"/> used when drawing an object in 3d.
            </summary>
            <remarks>Default value is <see cref="F:VectorDraw.Render.Draw3DFlagEnum.Default"/> </remarks>
        </member>
        <member name="T:VectorDraw.Render.IBindMappedImage">
            <summary>
            Provides the functionality for maping images over a surface.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.IBindMappedImage.GetBindPtr(VectorDraw.Render.vdRender)">
            <summary>
            Create an image structure used by <see cref="P:VectorDraw.Render.IRenderList.vdContext"/>
            </summary>
            <param name="render"><see cref="T:VectorDraw.Render.vdRender"/> object for which the image structure will be created.</param>
            <returns>An image structure used by <see cref="P:VectorDraw.Render.IRenderList.vdContext"/> </returns>
        </member>
        <member name="M:VectorDraw.Render.IBindMappedImage.GetBitmap">
            <summary>
            Returns the selected image as a <see cref="T:System.Drawing.Bitmap"/> type object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Render.IBindMappedImage.clipbound(VectorDraw.Render.IBoundingBox)">
            <summary>
            Returns true if the mapped image intersect the passed entity bounding box
            </summary>
        </member>
        <member name="P:VectorDraw.Render.IBindMappedImage.ImageBind">
            <summary>
            Get the image object to be applied as material on a surface object.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.IBindMappedImage.MaterialMatrix">
            <summary>
            Get a Matrix used for transformations for the material(image) of the object.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.IBindMappedImage.SourceRectangle">
            <summary>
            Get the sub rectangle that is used to map the image over a surface.
            </summary>
            <remarks>Defalt value is vdRectangle.Empty that means the whole image is mapped over the surface.</remarks>
        </member>
        <member name="P:VectorDraw.Render.IBindMappedImage.Aspect">
            <summary>
            Returns the aspect ratio of selected image. The aspect ratio is the ratio of <see cref="P:VectorDraw.Render.ImageBind.Width"/>  to <see cref="P:VectorDraw.Render.ImageBind.Height"/>. 
            </summary>
        </member>
        <member name="T:VectorDraw.Render.ISupportdMappedImages">
            <summary>
            Provides all functionality used for mapping images over a Polyface object.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.ISupportdMappedImages.GetMappedImages">
            <summary>
            Returns an array of Images and their matrixes that applied over the Polyface object.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.ISupportdMappedImages.GetNumMappedImages">
            <summary>
            Returns the Number of IBindMappedImage
            </summary>
        </member>
        <member name="M:VectorDraw.Render.ISupportdMappedImages.GetMappedImageAt(System.Int32)">
            <summary>
            Returns the <see cref="T:VectorDraw.Render.IBindMappedImage"/> at the specified index.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.IPolyface">
            <summary>
            Provides all functionality used for rendering a Polyface object.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.IPolyfaceDraw">
            <summary>
            Provides an Interface that implements <see cref="T:VectorDraw.Render.IRenderListItem"/> ,<see cref="T:VectorDraw.Render.ISupportdMappedImages"/> , <see cref="T:VectorDraw.Render.ISupportdMappedImages"/>  and <see cref="T:VectorDraw.Render.ISupportGradientColors"/>.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.IRenderListItem">
            <summary>
            Interface used to hold drawing list pointer.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.IRenderListItem.IsVisible">
            <summary>
            Indicates if the object can be drawn.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.IRenderListItem.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Called in order to draw the object in a specified vdRender object.
            </summary>
            <param name="render">The vdRender object in which the object will be drawn.</param>
            <returns><see cref="T:VectorDraw.Render.vdRender.DrawStatus"/>.</returns>
        </member>
        <member name="M:VectorDraw.Render.IRenderListItem.SupportOpenGLPrimitives(VectorDraw.Render.IvdOpenGLRender)">
            <summary>
             Returns a boolean value that represents if the user will use the <see cref="M:VectorDraw.Render.IRenderListItem.OnDrawOpenGLPrimitives(VectorDraw.Render.IvdOpenGLRender)"/> event to draw the object using his own Opengl commands.
            </summary>
            <param name="openglrender"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Render.IRenderListItem.OnDrawOpenGLPrimitives(VectorDraw.Render.IvdOpenGLRender)">
            <summary>
            Represents the event fired in order to draw the object using OpenGL list commands.
            </summary>
            <param name="openglrender">The render where the objects are being drawn.</param>
        </member>
        <member name="P:VectorDraw.Render.IRenderListItem.DrawingList">
            <summary>
            Returns the pointer of the Drawing List.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.IRenderListItem.Draw3DFlag">
            <summary>
             Get/Set a property value used when drawing an object in 3d.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.IRenderListItem.PixelIDFlag">
            <summary>
            Returns an integer flag that used when an object is pixelized on the screen
            </summary>
        </member>
        <member name="T:VectorDraw.Render.ISupportSmoothAngle">
            <summary>
            Provides all functionality used by vdFigures that support SmoothAngle property.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.ISupportSmoothAngle.SmoothAngle">
            <summary>
            Get/Set the angle in degrees between 0 and 90 used to calculate normals for each vertex in each face when rendering the object.
            Defines the maximum angle which is compared with the angles between the planes of neighboring faces in order to filter out the normals of the planes that will added in the average calculation.
            </summary>
            <remarks>
            Set it to 0 in order the normals not to be smoothing.</remarks>
            <remarks>Set it to 90 in order the normal of each vertex to be calculated as the average value with all the neighboring faces normals.
            </remarks>
        </member>
        <member name="T:VectorDraw.Render.ISupportGradientColors">
            <summary>
            Provides all functionality used by vdFigures that support GradientColors property.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.ISupportGradientColors.GradientColors">
            <summary>
             Get/Set an array of elevations with their colors used for gradient rendering.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.IPolyface.GetNormals(VectorDraw.Render.vdRender,VectorDraw.Geometry.Vector[]@,VectorDraw.Geometry.Vector[]@,VectorDraw.Geometry.Int32Array@)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.IPolyface.SelectingMode">
            <summary>
            Get/Set the selecting method of the polyface when you click either inside of a face or to the wireframe of the polyface.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.IPolyface.FaceList">
            <summary>
            A collection of integers indicating each face which 4 points and which color it has.
            </summary>
            <remarks>
            If a Polyface object has 4 faces then the facelist count should be 20.</remarks>
            <remarks>Default value a new created empty collection of integers.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.IPolyface.VertexList">
            <summary>
            A collection of all points of the Polyface object in World Coordinate System(WCS)
            </summary>
            <remarks>
            Default value a new empty created collection of gPoints.
            </remarks>
        </member>
        <member name="T:VectorDraw.Render.IvdImageBind">
            <summary>
            Provides the functionality used by vdFigures that support ImageBind property.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.IvdImageBind.ImageBinding">
            <summary>
            Get the ImageBind image object of the object.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRender">
            <summary>
            The base render object from which inherit all render classes of VectorDraw component.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.PenCapsSquare">
            <summary>
            A global boolean value that represents the draw of the lines if they end as rectangles or circular.
            </summary>
            <remarks>Default value false which is circular.PenCapsSquare is not supported when PerspectiveMod = PerspectON</remarks>
        </member>
        <member name="M:VectorDraw.Render.vdRender.IsSectionVisible(VectorDraw.Geometry.gPoint)">
            <summary>
            Checks if the passed point is visible from all section clips apply to this vdRender object.
            </summary>
            <param name="pt">A point in World Coordinate System(WCS).</param>
            <returns>True if the point is visible using all clips.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.ApplySectionClips(VectorDraw.Geometry.ISectionClips)">
            <summary>
            Applies a collection of Section Clips to the render
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.ApplySectionClip(System.Boolean,System.Int32,VectorDraw.Geometry.ISectionClip)">
            <summary>
            "This method is no longer in use.Use <see cref="M:VectorDraw.Render.vdRender.ApplySectionClips(VectorDraw.Geometry.ISectionClips)"/> instead
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.ClearAllSectionClips">
            <summary>
            Disable and clear all sectionclips for this render object.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.MatchProperties(VectorDraw.Render.vdRender)">
            <summary>
            Matches all the common properties from an object and sets them to this object.
            </summary>
            <param name="render">Another vdRender object.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.UpdateProperties">
            <summary>
            Updates the properties of the render.
            </summary>
            <remarks>Commonly used when World to View matrix or view to pixel matrix is changed.</remarks>
        </member>
        <member name="M:VectorDraw.Render.vdRender.GetNearFarHeight">
            <summary>
            Returns the near and far and height of the <see cref="P:VectorDraw.Render.vdRender.DrawingExtents"/> that includes all drawing objects in current view cs
            </summary>
            <returns>near,far and Box height of the <see cref="P:VectorDraw.Render.vdRender.DrawingExtents"/> in current view, in vdraw logic(Positive values are from screen to eye).
            near,far value must multiply with -1 to converted in opengl logic(Negative values are from screen to eye)
            </returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.UnProjectTransform(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Matrix,VectorDraw.Geometry.Matrix)">
            <summary>
             Translate point coordinates from  window to world coordinates
            </summary>
            <param name="pt">Point in window coordinates</param>
            <param name="modelview">Model matrix , usually <see cref="P:VectorDraw.Render.vdRender.CurrentMatrix"/></param>
            <param name="projection">View to projection matrix usually from <see cref="M:VectorDraw.Render.vdRender.GetProjectionMatrix"/></param>
            <returns>A point in world coordinates on success or null</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.ProjectTransform(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Matrix,VectorDraw.Geometry.Matrix)">
            <summary>
             Translate point coordinates from world to window coordinates
            </summary>
            <param name="pt">Point in world coordinates</param>
            <param name="modelview">Model matrix , usually <see cref="P:VectorDraw.Render.vdRender.CurrentMatrix"/></param>
            <param name="projection">View to projection matrix usually from <see cref="M:VectorDraw.Render.vdRender.GetProjectionMatrix"/></param>
            <returns>A point in window coordinates on success or null</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.GetViewLimits(System.Int32,System.Int32,System.Int32,System.Int32,System.Double,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Box)">
            <summary>
            Internally used.
            Returns a <see cref="T:VectorDraw.Geometry.Box"/> in current view coord system for the passed rectangle defined by UpperLeftX, UpperLeftY,  width, height parameters
            </summary>
            <param name="UpperLeftX">Upper left x coord in pixels.</param>
            <param name="UpperLeftY">Upper left y coord in pixels.</param>
            <param name="width">In pixels.</param>
            <param name="height">In pixels.</param>
            <param name="viewsize">Size in Drawing Units of the passed height.</param>
            <param name="viewcenter">The center of the passed rect in Drawing Units.</param>
            <param name="drawingextents">The extents of the entities that will be drawn in this render object.</param>
            <returns>A <see cref="T:VectorDraw.Geometry.Box"/> in current view coord system for the passed rectangle defined by UpperLeftX, UpperLeftY,  width, height parameters</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.GetProjectionMatrix">
            <summary>
            Returns view to projection matrix used by projection parameter of <see cref="M:VectorDraw.Render.vdRender.ProjectTransform(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Matrix,VectorDraw.Geometry.Matrix)"/> or <see cref="M:VectorDraw.Render.vdRender.UnProjectTransform(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Matrix,VectorDraw.Geometry.Matrix)"/> methods
            </summary>
            <returns>view to projection matrix</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.LockToPixelMatrix">
            <summary>
            Lock this render properties so all drawing method calls assept coordinates reference to drawing device pixels
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.UnLockToPixelMatrix">
            <summary>
            UnLock this render properties previous locked by <see cref="M:VectorDraw.Render.vdRender.LockToPixelMatrix"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.UpdateReadOnlyProps">
            <summary>
            Updates the properties of the render.
            </summary>
            <remarks >Commonly used when view to pixel matrix is changed.</remarks>
        </member>
        <member name="M:VectorDraw.Render.vdRender.Invalidate">
            <summary>
            Post a <see cref="M:System.Windows.Forms.Control.Invalidate"/> to this <see cref="P:VectorDraw.Render.vdRender.GraphicsContext"/> selected control client area.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.Invalidate(System.Boolean)">
            <summary>
            Post / Send a <see cref="M:System.Windows.Forms.Control.Invalidate"/> to this <see cref="P:VectorDraw.Render.vdRender.GraphicsContext"/> selected control client area.
            </summary>
            <param name="doitNow">If true the functions does not return until the redraw done.Else the redraw is posted to windows message que.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.Invalidate(VectorDraw.Geometry.Box,System.Double,System.Boolean)">
            <summary>
            Call the <see cref="M:VectorDraw.Render.vdRender.Invalidate(System.Boolean)"/> for the passed box in current view coord system.
            </summary>
            <param name="box">A <see cref="T:VectorDraw.Geometry.Box"/> in current view coord system.</param>
            <param name="additionalWidth">Inflates th passed box by the specified amount in drawing units.</param>
            <param name="doitNow">If true the functions does not return until the redraw done.Else the redraw is posted to windows message que</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.Invalidate(System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Call the <see cref="M:VectorDraw.Render.vdRender.Invalidate(System.Boolean)"/> for the passed box in pixel coord system.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.IsPointsOnEmptyRect(System.Drawing.PointF[])">
            <summary>
            Check if passed points defines a Rectangle with zero(0) width and height
            </summary>
            <param name="pts"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.MatchGraphicsProperties(System.Drawing.Graphics,System.Drawing.Graphics)">
            <summary>
            Sets destination <see cref="T:System.Drawing.Graphics"/> properties same as source.
            </summary>
            <param name="destination">Graphics that will change the properties. </param>
            <param name="source">Graphics where the properties will be read from.</param>
            <remarks>The <see cref="P:System.Drawing.Graphics.PageUnit"/> , <see cref="P:System.Drawing.Graphics.PixelOffsetMode"/> , <see cref="P:System.Drawing.Graphics.SmoothingMode"/> , <see cref="P:System.Drawing.Graphics.CompositingQuality"/> , <see cref="P:System.Drawing.Graphics.InterpolationMode"/> will be matched to destination.</remarks>
        </member>
        <member name="M:VectorDraw.Render.vdRender.PrepareGraphicsHighQuality(System.Drawing.Graphics)">
            <summary>
            Initializes to the passed Graphics object properties for high quality performance.
            </summary>
            <param name="gr">The output drawing surface where properties to be applied.</param>
            <remarks>
            The following properties are set with specific values:</remarks>
            <remarks><see cref="P:System.Drawing.Graphics.CompositingMode"/> = <see cref="F:System.Drawing.Drawing2D.CompositingMode.SourceOver"/></remarks>
            <remarks><see cref="P:System.Drawing.Graphics.PixelOffsetMode"/> = <see cref="F:System.Drawing.Drawing2D.PixelOffsetMode.HighQuality"/></remarks>
            <remarks><see cref="P:System.Drawing.Graphics.SmoothingMode"/> = <see cref="F:System.Drawing.Drawing2D.SmoothingMode.HighQuality"/></remarks>
            <remarks><see cref="P:System.Drawing.Graphics.CompositingQuality"/> = <see cref="F:System.Drawing.Drawing2D.CompositingQuality.HighQuality"/></remarks>
            <remarks><see cref="P:System.Drawing.Graphics.InterpolationMode"/> = <see cref="F:System.Drawing.Drawing2D.InterpolationMode.Bilinear"/></remarks>
            <remarks>Additionally Other properties can be set after this method like</remarks>
            <remarks><see cref="P:System.Drawing.Graphics.TextRenderingHint"/> = <see cref="F:System.Drawing.Text.TextRenderingHint.SingleBitPerPixel"/>
            </remarks>
        </member>
        <member name="M:VectorDraw.Render.vdRender.PrepareGraphicsHighSpeed(System.Drawing.Graphics)">
            <summary>
            Initializes to the passed Graphics object properties for high speed performance.
            </summary>
            <param name="gr">The output drawing surface where properties to be applied.</param>
            <remarks>
            The following properties are set with specific values:</remarks>
            <remarks><see cref="P:System.Drawing.Graphics.CompositingMode"/> = <see cref="F:System.Drawing.Drawing2D.CompositingMode.SourceOver"/></remarks>
            <remarks><see cref="P:System.Drawing.Graphics.PixelOffsetMode"/> = <see cref="F:System.Drawing.Drawing2D.PixelOffsetMode.Half"/></remarks>
            <remarks><see cref="P:System.Drawing.Graphics.SmoothingMode"/> = <see cref="F:System.Drawing.Drawing2D.SmoothingMode.HighSpeed"/></remarks>
            <remarks><see cref="P:System.Drawing.Graphics.CompositingQuality"/> = <see cref="F:System.Drawing.Drawing2D.CompositingQuality.HighSpeed"/></remarks>
            <remarks><see cref="P:System.Drawing.Graphics.InterpolationMode"/> = <see cref="F:System.Drawing.Drawing2D.InterpolationMode.NearestNeighbor"/></remarks>
            <remarks>Additionally Other properties can be set after this method like</remarks>
            <remarks><see cref="P:System.Drawing.Graphics.TextRenderingHint"/> = <see cref="F:System.Drawing.Text.TextRenderingHint.SingleBitPerPixel"/>
            </remarks>
        </member>
        <member name="M:VectorDraw.Render.vdRender.DrawImageUnscaled(System.Drawing.Graphics,System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Draws the specified image to the passed Graphics using its original physical size at the location specified by a coordinate pair.
            </summary>
            <param name="gr">The Graphics object where the image will be drawn.</param>
            <param name="img">The image to draw.</param>
            <param name="x">x coordinate of the insertion location.</param>
            <param name="y">y coordinate of the insertion location.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.DrawImageUnscaled(System.Drawing.Graphics,System.Drawing.Image,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Draws the specified image to the passed Graphics using its original physical size at the location specified by a coordinate pair.
            </summary>
            <param name="gr">The Graphics object where the image will be drawn.</param>
            <param name="img">The image to draw.</param>
            <param name="x">x coordinate of the insertion location.</param>
            <param name="y">y coordinate of the insertion location.</param>
            <param name="useSetDIBitsToDevice">Set it to true in order to fast set the pixel to graphics device.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.IsColorEmpty(System.Drawing.Color)">
            <summary>
            Checks if the passed System.Drawing.Color is transparent or empty.
            </summary>
            <param name="color">A System.Drawing.Color to be checked.</param>
            <returns>True if the passed Color object is transparent or empty.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.MapExtendsToRect(VectorDraw.Geometry.Box,System.Drawing.Size)">
            <summary>
            Internally used.Retruns a size that is not maximum than the input size and it is best fitting with the drawing Area.
            </summary>
            <param name="drawingArea"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.ColorDistance(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Calculates a double value that represents the distance two vdColor objects have.
            </summary>
            <param name="col1">First vdColor object</param>
            <param name="col2">Second vdColor object</param>
            <returns>Returns a double representation of the object's distance.</returns>
            <remarks >
            This is used in order to find a similar vdColor object from the palette.By calculating this distance
            of one vdColor to every color of the palette the smallest distance will give you the most similar vdColor
            object of the palette.
            </remarks>
        </member>
        <member name="M:VectorDraw.Render.vdRender.GetBitmapDivision(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the scale to be commited to a Bitmap in order so the size of the bitmap to be less than the passed SizeMegaBytes value.
            </summary>
            <param name="gr">The Graphics object which is compatible with the Bitmap.</param>
            <param name="width">The width of the original bitmap in pixels.</param>
            <param name="height">The height of the original bitmap in pixels.</param>
            <param name="SizeMegaBytes">The size required.</param>
            <returns>The scale to be commited to the Bitmap.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.GetBitmapDivisionFromBytes(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the scale to be commited to a Bitmap in order so the size of the bitmap to be less than the passed SizeBytes in bytes value.
            </summary>
            <param name="gr">The Graphics object which is compatible with the Bitmap.</param>
            <param name="width">The width of the original bitmap in pixels.</param>
            <param name="height">The height of the original bitmap in pixels.</param>
            <param name="SizeBytes">The size required.</param>
            <returns>The scale to be commited to the Bitmap.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.GetGrBytesPerPixel(System.Drawing.Graphics)">
            <summary>
            Get the number of bytes per pixel for the passed System.Drawing.Graphics object.
            </summary>
            <param name="gr">A System.Drawing.Graphics object.</param>
            <returns>The number of bytes used per pixel.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.GetGrBytesPerPixel(System.Drawing.Graphics,System.Single@)">
            <summary>
            Get the number of bytes per pixel for the passed System.Drawing.Graphics object.
            </summary>
            <param name="gr">A System.Drawing.Graphics object.</param>
            <param name="resolution">Returns the resolution of specific graphics device.</param>
            <returns>The number of bytes used per pixel.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.GetBitmapBytes(System.Drawing.Bitmap)">
            <summary>
            Returns an array of bytes from a System.Drawing.Bitmap object.
            </summary>
            <param name="bmp">A System.Drawing.Bitmap object.</param>
            <returns>An array of Bytes that consist the passed System.Drawing.Bitmap object.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.BitmapCopy(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Copies the cource System.Drawing.Bitmap to the destination System.Drawing.Bitmap object.
            </summary>
            <param name="dst">The destination object.</param>
            <param name="src">The source object.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.GetSmoothingNormals(System.Double,VectorDraw.Geometry.Int32Array,VectorDraw.Geometry.gPoints)">
            <summary>
            Calculate the normals of each vertex in each face to be average with neighboring faces depending on the input angle.
            </summary>
            <param name="angle">An angle in degrees in range from 0 to 90.</param>
            <param name="FaceList">A collection of integers that represents the facelist of the polyface object.</param>
            <param name="VertexList">A collection of gPoints representing the vertex list points of the polyface in World Coordinate System.</param>
            <returns>
            An array of Normal Vectors for each vertex foreach face in the FaceList.The count of normals is equal to the count of FaceList divided by 5 and multiply by 4 [= 4 * (FaceList.Count / 5) ].
            </returns>
            <remarks>
            if angle is 0 then the normals are not smoothing and are perpendicular to the face that they belongs</remarks>
            <remarks>if angle is 90 then the normal of each vertex is calculating as the average value with all the neighboring faces normals.</remarks>
            <remarks>if angle is between 0 and 90 and other than 0 and 90 degrees then the normal of each vertex is calculating as the average value with the neighboring plane faces that defines angle less or equal with input angle.
            </remarks>
        </member>
        <member name="M:VectorDraw.Render.vdRender.GetOrientedNormal(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the normal Vector of a plane consisted by four points.
            </summary>
            <param name="p1">First point of the plane.</param>
            <param name="p2">Second point of the plane.</param>
            <param name="p3">Third point of the plane.</param>
            <param name="p4">Fourth point of the plane</param>
            <returns>The normal Vector of a plane consisted by four points.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.GetOrientedNormal(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector@,System.Int32@,System.Int32@)">
            <summary>
            Calculates the normal Vector of a plane consisted by four points.
            </summary>
            <param name="p1">First point of the plane.</param>
            <param name="p2">Second point of the plane.</param>
            <param name="p3">Third point of the plane.</param>
            <param name="p4">Fourth point of the plane</param>
            <param name="ret">Reference to the calculated normal Vector.</param>
            <param name="overlapVertex">Reference to the overlap vertex value:
            The one(1) base index of overlap vertex for a face or 0 if no overlapping points.
            </param>
            <param name="orientation">Reference to the oriantation value 1 for clockwise , -1 for counterclockwise or 0 if the function returns false.</param>
            <returns>True if the normal Vector succesfully calculated.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.GetOrientedSmoothingNormals(System.Double,VectorDraw.Geometry.Int32Array,VectorDraw.Geometry.gPoints,VectorDraw.Geometry.Int32Array@,VectorDraw.Geometry.Vector[]@)">
            <summary>
            Calculate the normals of each vertex in each face to be average with neighboring faces depending on the input angle.
            </summary>
            <param name="angle">An angle in degrees in range from 0 to 90.</param>
            <param name="FaceList">A collection of integers that represents the facelist of the polyface object.</param>
            <param name="VertexList">A collection of gPoints representing the vertex list points of the polyface in World Coordinate System.</param>
            <param name="OrientedFaceList">Reference to the calculated face indexes, which are same as the input Facelist, with their faces that are cunterclockwise in opposite direction.</param>
            <param name="faceNormals">Reference to an array of normals foreach face in the FaceList.</param>
            <returns>
            An array of Normal Vectors for each vertex foreach face in the FaceList.
            The count of normals is equal to the count of FaceList divided by 5 and multiply by 4 [= 4 * (FaceList.Count / 5) ].
            </returns>
            <remarks>
            if angle is 0 then the normals are not smoothing and are perpendicular to the face that they belongs</remarks>
            <remarks>if angle is 90 then the normal of each vertex is calculating as the average value with all the neighboring faces normals.</remarks>
            <remarks>if angle is between 0 and 90 and other than 0 and 90 degrees then the normal of each vertex is calculating as the average value with the neighboring plane faces that defines angle less or equal with input angle.</remarks>
            <remarks>if angle is negative and not equal to 0.0 then edges of Soomthing faces are mark as hidden.
            </remarks>
        </member>
        <member name="M:VectorDraw.Render.vdRender.Finalize">
            <summary>
            Deconstructor of the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.IsMessageQueEmpty">
            <summary>
            Checks the messages que and returns true if it is empty.
            </summary>
            <returns>True if the messages que is empty.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.IsMessageQueEmpty(VectorDraw.WinMessages.MessageManager.BreakMessageMethod)">
            <summary>
            Checks the messages que and returns true if it is empty.
            </summary>
            <returns>True if the messages que is empty.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.GetFinalColor(System.Drawing.Color)">
            <summary>
            Translate a Color depend of the active <see cref="P:VectorDraw.Render.vdRender.ColorPalette"/>
            </summary>
            <param name="color">A System.Drawing.Color to translated.</param>
            <returns>A Translated Color depend of the active <see cref="P:VectorDraw.Render.vdRender.ColorPalette"/></returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.GetFinalColor(System.Drawing.Color,System.Byte)">
            <summary>
            Translate a Color depend of the active <see cref="P:VectorDraw.Render.vdRender.ColorPalette"/>
            </summary>
            <param name="color">A System.Drawing.Color to translated.</param>
            <param name="AlphaBlending">If it is a value other than 255 then this value is used for the return color Alpha.</param>
            <returns>A Translated Color depend of the active <see cref="P:VectorDraw.Render.vdRender.ColorPalette"/></returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.PushFadeEffect(System.Byte)">
            <summary>
            Change the active color fade effect value.
            </summary>
            <param name="fade">New color fade value in range 0 to 90.</param>
            <remarks>
            Set it to 0 for no color fading.</remarks>
            <remarks>Every <see cref="M:VectorDraw.Render.vdRender.PushFadeEffect(System.Byte)"/> must be followed by a <see cref="M:VectorDraw.Render.vdRender.PopFadeEffect"/> call.
            </remarks>
        </member>
        <member name="M:VectorDraw.Render.vdRender.PopFadeEffect">
            <summary>
            Restores the fade effect to the value before the <see cref="M:VectorDraw.Render.vdRender.PushFadeEffect(System.Byte)"/> method call.
            </summary>
            <remarks>Every <see cref="M:VectorDraw.Render.vdRender.PushFadeEffect(System.Byte)"/> must be followed by a <see cref="M:VectorDraw.Render.vdRender.PopFadeEffect"/> call.</remarks>
        </member>
        <member name="M:VectorDraw.Render.vdRender.PushDrawFigureList(System.Object)">
            <summary>
            Inserts an object at the top of the DrawFigureList
            </summary>
            <param name="obj">the current object that it's drawing procedure starts</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.PopDrawFigureList">
            <summary>
            Removes the object at the top of the DrawFigureList.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.MatrixView2PixelChanged">
            <summary>
            Called when view to pixels matrix is changed.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.MatrixViewChanged">
            <summary>
            Called when world to view matrix is changed.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.PushAlignToView(VectorDraw.Render.vdRender.MatrixPushFlag,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector,System.Int32,System.Double,System.Double)">
             <summary>
             Pushes the current selected render matrix into a new matrix that is used to draw objects always to align view.
             This method must be called before the entity Ecs matrix pushed to current render.
             </summary>
             <param name="AlignToView">A value that defines how the plane of the object will be transformed relative to the current view.</param>
             <param name="InsertionPoint">A needed base point of the object in World Coordinate System.</param>
             <param name="ExtrusionVector">A 3D vector in extrusion direction for the object that implements alignToView properties.</param>
            <param name="AlignToViewSize">Height of the object in Device millimeters </param>
            <param name="objectHeight">Height of the object in Drawing Units </param>
            <param name="objectRotation">Rotation in Object Coordinate-System</param>
            <returns>True if the matrix was applied.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.PopAlignToView">
            <summary>
            Pop the matrix previous pushed by <see cref="M:VectorDraw.Render.vdRender.PushAlignToView(VectorDraw.Render.vdRender.MatrixPushFlag,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector,System.Int32,System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.PushAlignToViewMatrix(VectorDraw.Render.vdRender.MatrixPushFlag,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector,VectorDraw.Geometry.Matrix,System.Int32,System.Double,System.Double)">
             <summary>
             Pushes the current selected render matrix into a new matrix that is used to draw objects always to align view.
             This method must be called before the entity Ecs matrix pushed to current render.
             </summary>
             <param name="AlignToView">A value that defines how the plane of the object will be transformed relative to the current view.</param>
             <param name="InsertionPoint">A needed base point of the object in World Coordinate System.</param>
             <param name="ExtrusionVector">A 3D vector in extrusion direction for the object that implements alignToView properties.</param>
             <param name="modelmatrix">The active world to view matrix before Align to view applied.</param>
            <param name="AlignToViewSize">Height of the object in Device millimeters </param>
            <param name="objectHeight">Height of the object in Drawing Units </param>
            <param name="objectRotation">Rotation in Object Coordinate-System</param>
            <returns>True if the matrix was applied.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.PushToViewMatrix(System.Boolean,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Matrix,System.Int32,System.Double)">
             <summary>
             Pushes the current selected render matrix into a new matrix that is used to draw objects always to align view.
             This method must be called after the entity Ecs matrix pushed to current render.
             </summary>
             <param name="AlignToView">A boolean value that defines if the plane of the object is relative to the current view.</param>
             <param name="_worldBasePt">A needed base point of the object in World Coordinate System.</param>
             <param name="entityMatrix">A matrix containing object transformations</param>
            <param name="AlignToViewSize">Height of the object in Device millimeters </param>
            <param name="objectHeight">Height of the object in Drawing Units </param>
            <returns>True if the matrix was applied.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.PushToViewMatrix(System.Boolean,VectorDraw.Geometry.gPoint,System.Int32,System.Double)">
             <summary>
             Pushes the current selected render matrix into a new matrix that is used to draw objects always to align view.
             </summary>
             <param name="AlignToView">A boolean value that defines if the plane of the object is relative to the current view.</param>
             <param name="worldBasePt">A needed base point of the object in World Coordinate System.</param>
            <param name="AlignToViewSize">Height of the object in Device millimeters </param>
            <param name="objectHeight">Height of the object in Drawing Units </param>
            <returns>True if the matrix was applied.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.FadeEffectChanged">
            <summary>
            Called when the current <see cref="P:VectorDraw.Render.vdRender.FadeEffect"/> is changed by <see cref="M:VectorDraw.Render.vdRender.PushFadeEffect(System.Byte)"/> or <see cref="M:VectorDraw.Render.vdRender.PopFadeEffect"/> calls
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.PenStyleChanged(VectorDraw.Render.vdGdiPenStyle)">
            <summary>
            Called when the current penstyle is changed.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.PushPenstyle(System.Drawing.Color,System.Double)">
            <summary>
            Select a new penstyle defined by the parameters.
            </summary>
            <param name="color">The color of the penstyle.</param>
            <param name="stdwidth">The pen width of the penstyle.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.PushPenstyle(System.Drawing.Color,System.Boolean,System.Byte)">
            <summary>
            Select a new penstyle defined by the parameters.
            </summary>
            <param name="rgbcolor">The color of the penstyle.</param>
            <param name="makeVisible">If true and the color is equal to BackGround then change it to Forground. </param>
            <param name="alphaBlending">The Alpha value used for the passed color.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.PushPenstyle(System.Drawing.Color,System.Double,VectorDraw.Render.LineType)">
            <summary>
            Select a new penstyle defined by the parameters.
            </summary>
            <param name="color">The color of the penstyle.</param>
            <param name="stdwidth">The pen width of the penstyle.</param>
            <param name="linetype">The linetype of the penstyle or null for solid.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.GetVisibleColor(System.Drawing.Color)">
            <summary>
            Returns the Forground color if incolor is equal to Background.
            </summary>
            <param name="incolor">Color to be tested.</param>
            <returns>Returns a color deferent than Background.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.PushPenstyle(System.Drawing.Color,System.Boolean)">
            <summary>
            Select a new penstyle defined by the parameters.
            </summary>
            <param name="color">The color of the penstyle.</param>
            <param name="makeVisible">If true and the color is equal to BackGround then change it to Forground. </param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.SelectPenStyle(VectorDraw.Render.vdGdiPenStyle)">
            <summary>
            Change the current selected penstyle properties
            </summary>
            <param name="newstyle">A penstyle object which properties will be set to current selected penstyle.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.PushPenstyle(VectorDraw.Render.vdGdiPenStyle)">
            <summary>
            Select a new penstyle.
            </summary>
            <param name="newstyle">A penstyle object to be set as active.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.PushPenstyle(VectorDraw.Render.vdGdiPenStyle,System.Boolean)">
            <summary>
            Select a new penstyle.
            </summary>
            <returns>true if input newstyle is not equals with active penstyle.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.PopPenstyle">
            <summary>
            Returns to the previous selected penstyle.
            </summary>
            <exception cref="T:System.Exception">If the <see cref="P:VectorDraw.Render.vdRender.PenStyleStack"/> size is equal to zero.</exception>
        </member>
        <member name="M:VectorDraw.Render.vdRender.PushHighLightFilter(VectorDraw.Render.vdRender.HighLightFilter)">
            <summary>
            Activates a new highlight property for the vdRender object.
            </summary>
            <param name="nvalue">The new highlight object to be activated.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.SetDrawStipple(System.Boolean)">
            <summary>
            Se to the vdRender a boolean value either to use a stipple filter or not. Striple filter is used for the SectionClip extended highlight filter.
            </summary>
            <param name="bval">True or false to enable this stipple filter.</param>\
            <returns> the previous selected stipple. </returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.PopHighLightFilter">
            <summary>
            Returns to the previous selected highlight.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.PushToViewMatrix">
            <summary>
            Activates the invertion of the current matrix.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.PushMatrix(VectorDraw.Geometry.Matrix)">
            <summary>
            Sets the world to view matrix.
            </summary>
            <param name="m">The new matrix to be applied.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.PopMatrix">
            <summary>
            Returns to the previous selected World to view matrix
            </summary>
            <exception cref="T:System.Exception">If <see cref="P:VectorDraw.Render.vdRender.MatrixStack"/> size is equal to zero. </exception>
        </member>
        <member name="M:VectorDraw.Render.vdRender.SetCurrentMatrix(VectorDraw.Geometry.Matrix)">
            <summary>
            Changes the current World to view selected matrix.
            </summary>
            <param name="value">The new matrix to be applied.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.WorldToView(VectorDraw.Geometry.gPoint)">
            <summary>
            Translates the passed gPoint from World to view coordinate system.
            </summary>
            <param name="thisPoint">The point to be translated.</param>
            <returns>Returns a gPoint in view coordinate system.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.ViewToRealWorldPoint(VectorDraw.Geometry.gPoint)">
            <summary>
            Translates the passed point from view to World plane projection.
            </summary>
            <param name="thisPoint">The point to be tranlated.</param>
            <returns>Returns a gPoint in World coordinate system.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.View2PixelD(VectorDraw.Geometry.gPoint)">
            <summary>
            Translates the passed point from view coordinate system to pixels.
            </summary>
            <param name="pt">A gPoint to be tranlated</param>
            <returns>A gPoint in pixels.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.View2PixelI(VectorDraw.Geometry.gPoint)">
            <summary>
            Translates the passed point from view coordinate system to pixels.
            </summary>
            <param name="pt">A gPoint to be tranlated.</param>
            <returns>A System.Point object in pixels.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.UnprojectPixel2View(VectorDraw.Geometry.gPoint)">
            <summary>
            Safe translate a point from window(pixel) coordinate system to current View.
            </summary>
            <param name="pt">A point in window(pixel) coordinate </param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.Pixel2View(System.Drawing.Point)">
            <summary>
            Translates the passed point from pixels to view coordinate system.
            </summary>
            <param name="pt">A gPoint to be tranlated.</param>
            <returns>A gPoint in view coordinate system.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.GetPixel3dProjection(System.Drawing.Point,System.Double)">
            <summary>
            Returns a point in World Coordinate that is the projection of a pixel point on the screen to an object drawing surface nearest to eye.
            </summary>
            <param name="_Pt">A point in window pixel coordinate relative to <see cref="P:VectorDraw.Render.vdRender.UpperLeft"/> </param>
            <param name="depth">If it is -1 then uses the active <see cref="M:VectorDraw.Render.vdRender.GetDepthAtPixel(System.Drawing.Point)"/> to get the depth in specific pixel position, else uses the passed depth value.</param>
            <returns> A point in World Coordinate that is the projection of a pixel point on the screen to an object drawing surface nearest to eye.
            Null if there is no surface under the pixel position.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.GetDepthAtPixel(System.Drawing.Point)">
            <summary>
            Get the depth in View CS in range from -1 to 1.0 ,at the specific pixel.
            </summary>
            <param name="_Pt">A point relative to <see cref="P:VectorDraw.Render.vdRender.UpperLeft"/> ,representing the pixel wanted.</param>
            <returns>A double value representing the depth at the specific pixel.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.GetDepthAtPixel(System.Int32,System.Int32)">
            <summary>
            Get the depth in range from 0 to 1 at the specific pixel.
            </summary>
            <param name="x">X position in Pixels relative to <see cref="P:VectorDraw.Render.vdRender.UpperLeft"/> point</param>
            <param name="y">Y position in Pixels relative to <see cref="P:VectorDraw.Render.vdRender.UpperLeft"/> point</param>
            <remarks>
            The return value is =in the range between 0.0(near) to 1.0 (far)</remarks>
            <remarks>In order to be used as coordinate z value in View  CS it must be converted to range between -1.0 to 1.0 as follow: 
             depth = 2.0 * depth - 1.0
            </remarks>
        </member>
        <member name="M:VectorDraw.Render.vdRender.GetIdAtPixel(System.Int32,System.Int32)">
            <summary>
            Returns the id saved on the pixel position reference to <see cref="P:VectorDraw.Render.IRenderListItem.PixelIDFlag"/> of drawing vdFigure 
            </summary>
            <param name="x">X position in Pixels relative to <see cref="P:VectorDraw.Render.vdRender.UpperLeft"/> point</param>
            <param name="y">Y position in Pixels relative to <see cref="P:VectorDraw.Render.vdRender.UpperLeft"/> point</param>
            <returns>The id saved on the pixel position reference to <see cref="P:VectorDraw.Render.IRenderListItem.PixelIDFlag"/> of drawing vdFigure </returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.GetNearestPixel3dProjection(System.Drawing.Point,System.Int32,System.Boolean)">
            <summary>
            Returns a point in World Coordinate that is the nearest drawing point to passed pixel Point and is inside to a rectangle with center the passed pixel point and size equal to passed picksize
            </summary>
            <param name="picksize">The size of rectangle in pixels</param>
            <param name="Pt">A point in pixels relative to the UpperLeft of ActiveLayout</param>
            <param name="BreakOnMessage"></param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.GetNearestDepthAtPixel(System.Drawing.Point,System.Int32,System.Boolean,VectorDraw.Render.vdRender.DrawStatus@)">
            <summary>
            Search the color buffer of this render object to find the nearest colored pixel to the center of passed rectangle.
            </summary>
            <param name="_Pt">The center of a rectangle in Pixels relative to the UpperLeft of ActiveLayout</param>
            <param name="picksize">The size of rectangle in pixels</param>
            <param name="BreakOnMessage"></param>
            <param name="doDraw">A reference to <see cref="T:VectorDraw.Render.vdRender.DrawStatus"/> that defines if searching was interrupted by a mouse move.</param>
            <returns>A colored pixel point relative to <see cref="P:VectorDraw.Render.vdRender.UpperLeft"/> of this viewport render insided the passed rectanlge or null if nothing drawn inside the rectangle.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.InitTimer(System.Boolean)">
            <summary>
            Enable or disable the draw timer events.
            </summary>
            <param name="bEnable">A boolean value representing if the timer is active.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.IsTimerEventOn">
            <summary>
            Checks if the timer event is enabled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.RaiseOnTimerPassed">
            <summary>
            Raises the <see cref="E:VectorDraw.Render.vdRender.OnTimerPassed"/> event
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.TestTimerEvent">
            <summary>
            Test if the default time between drawing entities is passed and Fires the <see cref="E:VectorDraw.Render.vdRender.OnTimerPassed"/> event
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.SetLineJoinRound">
            <summary>
            Select a circular join between line segments
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.SetLineJoinDefault">
            <summary>
            Select the default join between line segments depend on <see cref="F:VectorDraw.Render.vdRender.PenCapsSquare"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.Lock">
            <summary>
            Locks MemoryBitmap. Must be in pair with UnLock().Runs at StartDraw().
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.UnLock">
            <summary>
            Unlocks MemoryBitmap. Must be in pair with Lock(). Runs at EndDraw().
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.ApplyColorPalette">
            <summary>
            Apply the <see cref="P:VectorDraw.Render.vdRender.ColorPalette"/> logic to this rendering context.It is called internally by VectorDraw before the <see cref="M:VectorDraw.Render.vdRender.EndDraw"/> is called.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.StartDraw(System.Boolean)">
            <summary>
            Starts drawing a new scene. Run After Init() and after seting the RenderMode.
            </summary>
            <remarks>
            Scene preperation like lights and materials.Matrix changes must run after StartDraw().Locks the MemoryBitmap.
            </remarks>
            <exception cref="T:System.Exception">If <see cref="P:VectorDraw.Render.vdRender.MatrixStack"/> size is not equal to 1.</exception>
        </member>
        <member name="M:VectorDraw.Render.vdRender.EndDraw">
            <summary>
            Ends the drawing of a scene. Run after StartDraw. Unlocks MemoryBitmap
            </summary>
            <exception cref="T:System.Exception">If <see cref="P:VectorDraw.Render.vdRender.MatrixStack"/> size is not equal to 1.</exception>
        </member>
        <member name="M:VectorDraw.Render.vdRender.Update">
            <summary>
            Updates the object temporary object resources.
            </summary>
            <remarks >
            Call this method to force object resources to be recalculated.
            </remarks>
        </member>
        <member name="M:VectorDraw.Render.vdRender.DrawEvTxt">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.Init">
            <summary>
            Initialize MemoryBitmaps and Graphics, Run at startup or on resize of bitmap
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.OnResize(System.Int32,System.Int32)">
            <summary>
            "This method is no longer in use.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.ClearDisplayLists(System.Boolean)">
            <summary>
            Destroy all created Display lists and free the memory.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.Destroy(System.Boolean)">
            <summary>
            Destroys MemoryBitmap and Graphics, Run at the end.
            </summary>
            <param name="bFinalized">True if the method is called from Deconstructor of the object.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.Refresh(System.Drawing.Graphics,System.Int32,System.Int32)">
            <summary>
            Draws the Selected MemoryBitmap into a graphics. Run after EndDraw()
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.Refresh">
            <summary>
            Draws the Selected MemoryBitmap into a graphics. Run after EndDraw()
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.Clear(System.Drawing.Color)">
            <summary>
            Clears the drawing area using the passed color as Back color.
            </summary>
            <param name="color">A System.Drawing.Color to be used as background color.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.Clear(System.Drawing.Color,System.Boolean)">
            <summary>
            Clears the drawing area using the passed color as Back color.
            </summary>
            <param name="color">A System.Drawing.Color to be used as background color.</param>
            <param name="applyGradient">If true then BkGradient is applied.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.ClearDepthBuffer">
            <summary>
            Clears the depth buffer to 0 values.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.EnableLighting(System.Boolean)">
            <summary>
            Set a boolean value representing if the lights are enabled in this render.
            </summary>
            <param name="bVal">A boolean value needed.</param>
            <returns>A boolean value representing if the render can enable the lights.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.GetFittingViewSize(VectorDraw.Geometry.Box)">
            <summary>
            Returns the minimun required viewsize in Drawing Units for a drawing area bounding box, to fit in rendering size.
            </summary>
            <param name="DrawingArea">Bounding area in View Coord System in Drawing Units.</param>
            <returns>The minimun required viewsize in Drawing Units</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.GetFittingViewSize(VectorDraw.Geometry.Box,VectorDraw.Geometry.gPoint@)">
            <summary>
            Calculate the minimun required viewsize in Drawing Units for a drawing area bounding box,and the viewCenter in order to fit in rendering size.
            </summary>
            <param name="DrawingArea">Bounding area in View Coord System in Drawing Units.</param>
            <param name="viewCenter">A view center point in Current view coord-system in order to fit the box in the drawing area of this render object.</param>
            <returns>The minimun required viewsize in Drawing Units</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.GetFittingViewSize(VectorDraw.Geometry.Box,System.Int32,System.Int32,System.Double,System.Double,VectorDraw.Geometry.gPoint@,System.Double@)">
            <summary>
            Calculate the minimun required viewsize in Drawing Units for a drawing area bounding box,and the viewCenter in order to fit in rendering size defined by passed Width  Height.
            </summary>
            <param name="DrawingArea">Bounding area in View Coord System in Drawing Units.</param>
            <param name="Width">In pixels</param>
            <param name="Height">In pixels</param>
            <param name="FocalLength"></param>
            <param name="LensAngle">In degrees</param>
            <param name="viewCenter">A view center point in Current view coord-system in order to fit the box in the drawing rendering size defined by passed Width  Height.</param>
            <param name="viewsize">The minimun required viewsize in Drawing Units.</param>
            <returns>True if the function success -or- false if the DrawingArea is an empty box -or- input Width or Height are zero.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.GetMixMode">
            <summary>
            Get the active Drawing mode of the vdRender object.
            </summary>
            <returns>The drawing mode of the vdRender object.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.SetMixMode(VectorDraw.Render.GDIDraw.drawingMode)">
            <summary>
            Set the current drawing mode of the vdRender object.
            </summary>
            <param name="newmixmode">The new current drawing mode to be set.</param>
            <returns>Returns the previous selected drawing mode.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.ClipPixelLineDraw(System.Object,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Clips and draws the passed line to the vdRender object.
            </summary>
            <param name="sender">The object that called this function(for example a vdLine object),can be null.</param>
            <param name="p1">First point of the line in pixels.</param>
            <param name="p2">Second point of the line in pixels.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.PixelLineDraw(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Draws a line to the vdRender object.
            </summary>
            <param name="p1">First point of the line in pixels.</param>
            <param name="p2">Second point of the line in pixels.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.DrawLight(System.Object,System.String,System.Single[],System.Single[],System.Single[],System.Single[],System.Single,System.Single,System.Single,System.Single[],System.Single,System.Single,System.Boolean)">
            <summary>
            This method is no longer in used.Use - <see cref="M:VectorDraw.Render.vdRender.DrawLight(System.Object,VectorDraw.Render.IRenderingLight)"/>  - override method instead
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.DrawLight(System.Object,VectorDraw.Render.IRenderingLight)">
            <summary>
            Draws a light.
            </summary>
            <param name="sender">The object that called this function,can be null.</param>
            <param name="light">An object that contains all light properties.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.DrawInfinityLine(System.Object,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector,System.Boolean)">
            <summary>
             Draws an Infinity line.
            </summary>
            <param name="sender">The object that called this function,can be null.</param>
            <param name="basept">the Base point of the Infinity line.</param>
            <param name="direction">the Direction of the Infinity object.</param>
            <param name="isRay">True if the infinity line start from the basept end extends to the direction's vector or false if extends in both directions.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.DrawLine(System.Object,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Draws a line in the vdRender object.
            </summary>
            <param name="sender">The object that called this function(for example a vdLine object),can be null.</param>
            <param name="sp">The first point of the line in World Coordinate System.</param>
            <param name="ep">The second point of the line in World Coordinate System.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.DrawLine(System.Object,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32)">
            <summary>
            Draws a line in the vdRender object.
            </summary>
            <param name="sender">The object that called this function(for example a vdLine object),can be null.</param>
            <param name="sp">The first point of the line in World Coordinate System.</param>
            <param name="ep">The second point of the line in World Coordinate System.</param>
            <param name="segmentIndex">A zero based index that defines the line drawing order inside a series of DrawLine calls. </param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.DrawPoint(System.Object,VectorDraw.Geometry.gPoint)">
            <summary>
            Draws a point in the vdRender object.Internally used to draw the grid
            </summary>
            <param name="sender">The object that called this function(for example a vdLine object),can be null.</param>
            <param name="pt">The point in World Coordinate System.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.DrawPLine(System.Object,VectorDraw.Geometry.gPoints,System.Double)">
            <summary>
            Draws a polyline specified by the passed points and thickness.
            </summary>
            <param name="sender">The object that called this function(for example a vdPolyline object),can be null.</param>
            <param name="points">A collection of gPoints in World Coordinate System.</param>
            <param name="thickness">The thickness of the polyline.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.DrawPLine(System.Object,VectorDraw.Geometry.gPoints,System.Double,VectorDraw.Render.vdRender.PolylineFlag)">
            <summary>
            Draws a polyline specified by the passed points and thickness.
            </summary>
            <param name="sender">The object that called this function(for example a vdPolyline object),can be null.</param>
            <param name="points">A collection of gPoints in World Coordinate System.</param>
            <param name="thickness">The thickness of the polyline.</param>
            <param name="plineFlag">The <see cref="T:VectorDraw.Render.vdRender.PolylineFlag"/> that controls how the edges are drawn  ShadeOn -or- Hide RenderMode</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.DrawArc(System.Object,VectorDraw.Geometry.gPoint,System.Double,System.Double,System.Double)">
            <summary>
            Draws an Arc with the specified parameters.
            </summary>
            <param name="sender">The object that called this function(for example a vdPolyline object),can be null.</param>
            <param name="center">The center of the Arc.</param>
            <param name="startangle">The start angle of the arc in radians.</param>
            <param name="endangle">The end angle of the arc in radians.</param>
            <param name="radius">The radius angle of the arc.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.DrawRect(System.Object,VectorDraw.Geometry.gPoint,System.Double,System.Double)">
            <summary>
            Draws a rectangle polyline with the passed parameters.
            </summary>
            <param name="sender">The object that called this function(for example a vdPolyline object),can be null.</param>
            <param name="center">The center of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.DrawSolidArc(System.Object,VectorDraw.Geometry.gPoint,System.Double,System.Double,System.Double)">
            <summary>
            Fills an arc using with the current penstyle color.
            </summary>
            <param name="sender">The object that called this function(for example a vdPolyline object),can be null.</param>
            <param name="center">The center of the Arc.</param>
            <param name="startangle">The start angle of the arc in radians.</param>
            <param name="endangle">The end angle of the arc in radians.</param>
            <param name="radius">The radius angle of the arc.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.DrawPLine(System.Object,VectorDraw.Geometry.gPoints)">
            <summary>
            Draws a polyline specified by the passed points.
            </summary>
            <param name="sender">The object that called this function(for example a vdPolyline object),can be null.</param>
            <param name="points">A collection of gPoints in World Coordinate System.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.DrawImagePolygon(System.Object,VectorDraw.Render.ImageBind,System.Double,System.Double,VectorDraw.Geometry.gPoints)">
            <summary>
            Fills a passed polygon with the specified image.
            </summary>
            <param name="sender">The object that called this function(for example a vdImage object),can be null.</param>
            <param name="cImage">The image to be drawn.</param>
            <param name="angle">Angle of the image.</param>
            <param name="scale">Scale of the image to be applied.</param>
            <param name="inpoints">A collection of gPoints of the polygon in World Coordinate System.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.DrawPolygon(System.Object,VectorDraw.Geometry.gPoints,VectorDraw.Geometry.Vector,System.Boolean)">
            <summary>
            Draws a closed polygon.
            </summary>
            <param name="sender">The object that called this function(for example a vdPolyline object),can be null</param>
            <param name="points">A collection of gPoint of the polygon in World Coordinate System.</param>
            <param name="PlaneNormal">A normal perpedicular to the plane of polygon.</param>
            <param name="FillOn">True in order to fill the polygon with the current selected solid brush.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.DrawSolidPolygon(System.Object,VectorDraw.Geometry.gPoints,VectorDraw.Render.vdRender.PolygonType)">
            <summary>
            Fills the passed polygon using the current penstyle color.
            </summary>
            <param name="sender">The object that called this function(for example a vdPolyline object),can be null.</param>
            <param name="inpoints">A collection of gPoint of the polygon in World Coordinate System.</param>
            <param name="ptype">The fill type to be used.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.DrawPolyface(System.Object,VectorDraw.Geometry.Int32Array,VectorDraw.Geometry.gPoints)">
            <summary>
            Draws a polyface to the vdRender object.
            </summary>
            <param name="sender">The object that called this function(for example a vdPolyface object),can be null.</param>
            <param name="FaceList">A collection of integers that represents the facelist of the polyface object.</param>
            <param name="VertexList">A collection of gPoints representing the vertex list points of the polyface in World Coordinate System.</param>
            <returns>A value that represents the end status of the function.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.DrawFace4(System.Object,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws a face to the vdRender object.
            </summary>
            <param name="sender">The object that called this function(for example a vd3DFace object),can be null.</param>
            <param name="p1">First point of the face in World Coordinate System.</param>
            <param name="p2">Second point of the face in World Coordinate System.</param>
            <param name="p3">Third point of the face in World Coordinate System.</param>
            <param name="p4">Fourth point of the face in World Coordinate System.</param>
            <param name="visible1">A boolean value representing if the p1-p2 line is visible.</param>
            <param name="visible2">A boolean value representing if the p2-p3 line is visible.</param>
            <param name="visible3">A boolean value representing if the p3-p4 line is visible.</param>
            <param name="visible4">A boolean value representing if the p4-p1 line is visible.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.DrawString(System.Object,VectorDraw.Render.grTextStyle,VectorDraw.Render.grTextStyleExtra,System.String,VectorDraw.Geometry.Box)">
            <summary>
            Draws a string to the vdRender object.
            </summary>
            <param name="sender">The object that called this function(for example a vdText object),can be null.</param>
            <param name="style">The style to use.</param>
            <param name="extra">The extra parameters to be used.</param>
            <param name="str">The string to draw.</param>
            <param name="textBox">The Box object containing the text.</param>
            <remarks>The string is drawn in the 0,0 position.Before this call the ECS Matrix of the vdText object must be assigned.</remarks>
        </member>
        <member name="M:VectorDraw.Render.vdRender.SelectTexture(System.Boolean)">
            <summary>
            Select the material image used of the active penstyle and apply the material matrix.
            </summary>
            <param name="CheckRenderMode">If true then this texture is applied only in RENDER mode.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.StartEdgeRender">
            <summary>
            Prepare the object to draw Edges of solid surfaces.
            </summary>
            <returns>True if Drawing Edge is supported so continue by drawing the entities.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.StopEdgeRender">
            <summary>
            Stop / Disable drawing edge begin by <see cref="M:VectorDraw.Render.vdRender.StartEdgeRender"/> call.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.StartBlendingRender">
            <summary>
            Begins an Alpha blending used for transparency of planes.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.SetTransparentOn">
            <summary>
            Info the render object that contains transparent entitiy so the Blending can be applied.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.SetBlendDrawMode(System.Boolean)">
            <summary>
            Select the active blend mode.
            </summary>
            <param name="isFront">True to select the front blending, False for the back blending.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.EnableBlending">
            <summary>
            This method is no longer in used..
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.DisableBlending">
            <summary>
            This method is no longer in used..
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.StopBlendingRender">
            <summary>
            Ends the previously started Alpha blending.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.CloseOpenPolygon">
            <summary>
            Ends opengl primitives created by VectorDraw.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.DrawImage(System.Object,VectorDraw.Render.ImageBind,System.Double,System.Double)">
            <summary>
            Draws an image to the vdRender object.
            </summary>
            <param name="sender">The object that called this function(for example a vdImage object),can be null.</param>
            <param name="cImage">The image to be drawn.</param>
            <param name="cWidth">The width of the image in drawing units..</param>
            <param name="cHeight">The height of the image in drawing units.</param>
            <remarks>Before this call the ECS Matrix of the vdImage object must be assigned.</remarks>
        </member>
        <member name="M:VectorDraw.Render.vdRender.DrawGdiBox(System.Drawing.Point,System.Int32)">
            <summary>
            Draws a rectangle specified by a center point in pixels and a size same for width and height.
            </summary>
            <param name="center">The center point of the rectangle</param>
            <param name="size">The size of the rectangle.</param>
            <returns>True if vdRender ovverides and implement this method.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.DrawGdiLine(System.Int32,System.Int32,System.Double,System.Int32,System.Int32,System.Double)">
            <summary>
            Draws a line from one point to another.
            </summary>
            <param name="sx">x coordinate of start point of the line.</param>
            <param name="sy">y coordinate of start point of the line.</param>
            <param name="sz">z coordinate of start point of the line.</param>
            <param name="ex">x coordinate of end point of the line.</param>
            <param name="ey">y coordinate of end point of the line.</param>
            <param name="ez">z coordinate of end point of the line.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.DrawBoundBox(System.Object,VectorDraw.Geometry.Box)">
            <summary>
            Draws a non solid box to the vdRender object.
            </summary>
            <param name="sender">The object that called this function(for example a vdRect object),can be null.</param>
            <param name="box">The box to draw in World Coordinate System.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.DrawSolidBoundBox(System.Object,VectorDraw.Geometry.Box)">
            <summary>
            Draws a solid box to the vdRender object using the current penstyle color.
            </summary>
            <param name="sender">The object that called this function(for example a vdRect object),can be null.</param>
            <param name="box">The box to draw in World Coordinate System.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRender.Contains(VectorDraw.Geometry.gPoint,System.Boolean)">
            <summary>
            Checks if the clipping rectangle contains the specified point.
            </summary>
            <param name="pt">A point needed.</param>
            <param name="isInViewCS">A boolean value that represents if the point is in View Coordinate System or not.</param>
            <returns>True if the point is inside the clipping area.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.Contains(System.Drawing.Point)">
            <summary>
            Checks if the clipping rectangle contains the specified point.
            </summary>
            <param name="pt">A point in pixels relative to Client area.</param>
            <returns>True if the point is inside the clipping area.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.IsRectClip(System.Drawing.Rectangle)">
            <summary>
            Checks if the passed <see cref="T:System.Drawing.Rectangle"/> object is inside the clipping rectangle of this vdRender object.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.IsBoundaryClip(VectorDraw.Geometry.Box)">
            <summary>
            Checks if the passed Box object is inside the clipping rectangle of the vdRender object.
            </summary>
            <param name="bound">A Box object needed.</param>
            <returns>True if the Box is inside the clipping rectangle.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.PushClipPolygon(VectorDraw.Geometry.gPoints)">
            <summary>
            Push a polygon from the passed parameter as a clip boundary for the render.
            </summary>
            <param name="pts">A collection of points that represent the clip polygon in World coordinate system.</param>
            <returns>True if the clip was set succesfully.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.PopClipPolygon">
            <summary>
            Use this method to pop the clip polygon that was set whit <see cref="M:VectorDraw.Render.vdRender.PushClipPolygon(VectorDraw.Geometry.gPoints)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.OnUpdateClipping(System.Boolean)">
            <summary>
            Internally called when a new clipping perigram is selected by <see cref="M:VectorDraw.Render.vdRender.PushClipPerigram(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.gPoints,VectorDraw.Geometry.GpcWrapper.ClippingOperation)"/> or <see cref="M:VectorDraw.Render.vdRender.PopClipPerigram"/>.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.PushClipPerigram(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.gPoints,VectorDraw.Geometry.GpcWrapper.ClippingOperation)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.PopClipPerigram">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRender.ClipPixelLine(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint@,VectorDraw.Geometry.gPoint@)">
            <summary>
            Clips the passed line inside the viewing rectangle.
            </summary>
            <param name="p1">First point of the line in pixels</param>
            <param name="p2">Second point of the line in pixels.</param>
            <param name="_p1">A reference point of the first point after the clipping operation in pixels.</param>
            <param name="_p2">A reference point of the second point after the clipping operation in pixels.</param>
            <returns>True if the line is clipped.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.ClipViewLine(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint@,VectorDraw.Geometry.gPoint@)">
            <summary>
            Clips the passed line inside the viewing rectangle.
            </summary>
            <param name="p1">First point of the line in View Coordinate System.</param>
            <param name="p2">Second point of the line in View Coordinate System.</param>
            <param name="_p1">A reference point of the first point after the clipping operation.</param>
            <param name="_p2">A reference point of the second point after the clipping operation.</param>
            <returns>True if the line is clipped.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.EnableBufferId(System.Boolean)">
            <summary>
            Set a boolean value that represents if the buffer contains id info is enabled.
            </summary>
            <param name="bvalue">Set it true to enable buffer id.</param>
            <returns>The old selecting value.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.EnableDepthBuffer(System.Boolean)">
            <summary>
            Set a boolean value that represents if depth buffer is enabled.
            </summary>
            <param name="bvalue">Set it true to enable depth buffer.</param>
            <returns>The old selecting value.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.EnableDepthBufferWrite(System.Boolean)">
            <summary>
            Set a boolean value that enable - disable writing to depth buffer.
            </summary>
            <param name="bvalue">Set it true to enable depth buffer write.</param>
            <returns>The old selecting value.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.EnableTexture(System.Boolean)">
            <summary>
            Set a boolean value that represents if texture is enabled.
            </summary>
            <param name="bvalue">Set it true to enable texture.</param>
            <returns>The old selecting value.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.EnableColorBuffer(System.Boolean)">
            <summary>
            Enable/Disable writing to Color buffer
            </summary>
            <returns>The previous selected state.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.EnableCoordCorrection(System.Boolean)">
            <summary>
            Enable/Disable opengl large passed coordinate correction.
            Internally used by VectorDraw when opengl rendering context is active to correct the problem with too large passed coordinate values.
            </summary>
            <returns>The previous selected state.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.SetScreenMode(System.Boolean)">
            <summary>
            Internally used.
            Set the drawing mode of the<see cref="T:VectorDraw.Actions.ActionWrapperRender"/> used by user actions.
            </summary>
            <param name="bvalue">New drawing mode value.</param>
            <returns>The old selected value.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRender.ShareLists(VectorDraw.Render.vdRender,VectorDraw.Render.vdRender)">
            <summary>
            Internally used.
            Share Display Lists between two render objects
            </summary>
        </member>
        <member name="E:VectorDraw.Render.vdRender.OnTimerPassed">
            <summary>
            Fires when the default draw timer for rendering has passed.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.StartedWorldToViewMatrix">
            <summary>
            Returns the <see cref="P:VectorDraw.Render.vdRender.CurrentMatrix"/> just after the call of <see cref="M:VectorDraw.Render.vdRender.StartDraw(System.Boolean)"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.StartedViewToWorldMatrix">
            <summary>
            Returns the inverted of <see cref="P:VectorDraw.Render.vdRender.CurrentMatrix"/> just after the call of <see cref="M:VectorDraw.Render.vdRender.StartDraw(System.Boolean)"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.SectionClips">
            <summary>
            Returns the Sectionclips of this render.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.SectionClipMatrixes">
            <summary>
            No longer use property.Use <see cref="P:VectorDraw.Render.vdRender.SectionClips"/> instead
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.ProjectionMatrix">
            <summary>
            Get the Matrix used for Projection view.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.maxDepth">
            <summary>
            Returns the near to far depth of current view in drawing units
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.IsFinalized">
            <summary>
            Returns true if the object has been finalized from Garbage Collector.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.ActiveRender">
            <summary>
            Returns the active render object.Defulat is this vdRender object except for <see cref="T:VectorDraw.Render.MultiRender"/> type.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.IsOpenGLRender">
            <summary>
            Returns true if the <see cref="P:VectorDraw.Render.vdRender.ActiveRender"/> implements an opengl device context.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.OpenGLRender">
            <summary>
            get a value that represents if the render uses OpenGL for rendering.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.IsEnableCoordCorrection">
            <summary>
            Returns true if the large coordinates correction is enabled.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.OffsetPt">
            <summary>
            Returns the extra offset point that is used with Current matrix in 3d rendering, when the current viewcenter coordinates are to large.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.OwnerObject">
            <summary>
            Returns the Layout or Viewport where this object is referenced.
            </summary>
            <remarks>Note that setting this value is allowed only once.</remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRender.ActionObject">
            <summary>
            Get/Set the Active BaseAction object.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.PrinterObject">
            <summary>
            Returns the Printer object where this object is referenced.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.WindowControlHandle">
            <summary>
            Returns the Output control window handle for this render object.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.TimerBreakForDraw">
            <summary>
            This value represents the minimum time elapsed in milliseconds, for breaking the draw when a windows message appears to the message que.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.StartBreakDrawTime">
            <summary>
            Set a value in milliseconds for the <see cref="P:VectorDraw.Render.vdRender.TimerBreakForDraw"/> property.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.IsPrinting">
            <summary>
            Returns true if the render Display is one of the DisplayMode.PRINT_... values
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.IsSelectingMode">
            <summary>
            Returns true if this render is in selecting mode , usually a <see cref="T:VectorDraw.Render.RenderSelect"/> class object.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.ClippingRegion">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.Display">
            <summary>
            Get/Set the display mode of the vdRender object.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.IsBlackAndWhite">
            <summary>
            Get/Set a boolean value representing if the rendering is black and white.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.ColorPalette">
            <summary>
             Get/Set the output Color palette 
            </summary>
            <remarks>Deafault value <see cref="F:VectorDraw.Render.vdRender.ColorDisplay.TrueColor"/></remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRender.SystemPenColor">
            <summary>
            Get the currently vdRender selected color as System.Color object.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.StatusDraw">
            <summary>
            Get/Set the curent <see cref="T:VectorDraw.Render.vdRender.DrawStatus"/>.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.BreakOnMessage">
            <summary>
            Get/Set a boolean value representing if the draw will break when a windows message appears in the message que.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.Started">
            <summary>
            Get a value if the drawing procedure has started.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.GlobalProperties">
            <summary>
            Get/Set General draw(grip color,crosshair size etc...) properties of the vdRender object.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.GraphicsContext">
            <summary>
            The context used by Windows API graphics context 
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.ShowUCSAxis">
            <summary>
            Get/Set a boolean value representing if the UCS Axis will be drawn.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.SnapStyle">
            <summary>
            Get/Set a value representing the snap style of the mouse crosshair.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.SnapIso">
            <summary>
            Get/Set a value representing how the mouse crosshair will be drawn.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.SnapAngle">
            <summary>
            Get/Set a value representing the angle that the mouse crosshair will be drawn.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.EdgeColor">
            <summary>
            Get/Set the display color for edges of all faces when rendering in 3d.(when RenderMode is Wire3d ,Hide or ShadeOn)
            </summary>
            <remarks>
            Default value is Color.Empty and the edges keep their entity color.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRender.ShowHidenEdges">
            <summary>
            Get/Set a boolean value representing if the edges of the 3dFace object will be shown.
            </summary>
            <remarks>
            If this value is true then all edges of the 3dFace object will be shown ( even if they are invisible).
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRender.LensAngle">
            <summary>
            Represents the Lens Angle in degrees of the vdRender object.
            </summary>
            <remarks>
            Default value 60.0 .Typical values range from 60 to 30 degrees.This value is valid only when perspective mode is on.A wide angle lens means a wide field of view.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRender.FocalLength">
            <summary>
            Get/Set the focal length of the vdRender object.
            </summary>
            <remarks>
            This value is valid only when perspective mode is on.Represents the distance between the "eye" and the center of the view in the current view direction plane.Default value is 0.05.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRender.PerspectiveMod">
            <summary>
            Get/Set a value representing the perpective mode of the vdRender object.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.AspectRatio">
            <summary>
            The aspect ratio that determines the field of view in the x-direction. The aspect ratio is the ratio of <see cref="P:VectorDraw.Render.vdRender.Width"/>  to <see cref="P:VectorDraw.Render.vdRender.Height"/>. 
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.HorizontalLensAngle">
            <summary>
            Get the Horizontal view angle in degrees for <see cref="P:VectorDraw.Render.vdRender.PerspectiveMod"/> depend on <see cref="P:VectorDraw.Render.vdRender.FocalLength"/> and <see cref="P:VectorDraw.Render.vdRender.LensAngle"/> and <see cref="P:VectorDraw.Render.vdRender.AspectRatio"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.PerspectiveViewHeight">
            <summary>
            Get the Film height for <see cref="P:VectorDraw.Render.vdRender.PerspectiveMod"/> depend on <see cref="P:VectorDraw.Render.vdRender.FocalLength"/> and <see cref="P:VectorDraw.Render.vdRender.LensAngle"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.PerspectiveViewWidth">
            <summary>
            Get the Film width for <see cref="P:VectorDraw.Render.vdRender.PerspectiveMod"/> depend on <see cref="P:VectorDraw.Render.vdRender.FocalLength"/> and <see cref="P:VectorDraw.Render.vdRender.LensAngle"/> and <see cref="P:VectorDraw.Render.vdRender.AspectRatio"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.DrawingExtents">
            <summary>
            Get/Set a Box object representing the extends of all entities that will be drawn in World Coordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.LayoutRender">
            <summary>
            Get/Set the render in which this render is drawing. If this value is not null then this vdRender object represents a viewport and this property has the vdRender object of the layout.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.MemoryBitmap">
            <summary>
            Get/Set the Bitmap From where the graphics device is created.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.graphics">
            <summary>
            Get/Set the graphics device of the vdRender object.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.OwnerGraphicsOffset">
            <summary>
            Get/Set the upper left point of the drawing area. This point is used in viewports.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.UpperLeft">
            <summary>
            Get/Set the Upper Left point of the drawing area in pixels.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.Width">
            <summary>
            Get/Set the width of the rendering device in pixels.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.Height">
            <summary>
            Get/Set the height of the rendering device in pixels.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.VportScale">
            <summary>
            Get/Set a value which is used to multiply the penwidth and linetype scales.
            </summary>
            <remarks>By default this value is 1.0.In viewports this value varies depending the scale that the viewport has.</remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRender.VportScaleMultiplier">
            <summary>
            Internally used only.Get/Set an extra value which is used to multiply the <see cref="P:VectorDraw.Render.vdRender.VportScale"/>.
            </summary>
            <remarks>By default this value is 1.0.</remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRender.ExtraLineTypeScale">
            <summary>
            Returns the extra linetype scaling for entities inside viewports depend of the <see cref="P:VectorDraw.Render.vdRender.ViewportLTScale"/> and <see cref="P:VectorDraw.Render.vdRender.VportScale"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.ViewportLTScale">
            <summary>
            Controls the scaling of linetypes drawn inside a viewport.
            </summary>
            <remarks>Default value is <see cref="F:VectorDraw.Render.vdRender.ViewportLTScaleFlag.ViewportBased"/></remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRender.PrinterScale">
            <summary>
            Get/Set the Printer Scale
            <remarks>It is the represent the (Printer Units) / (Drawing Units)</remarks>
            <remarks>It always return 1.0d if <see cref="P:VectorDraw.Render.vdRender.IsPrinting"/> is false.
            </remarks>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.PrintPreviewScale">
            <summary>
            Get/Set the scale of printer preview paper when the <see cref="P:VectorDraw.Render.vdRender.Display"/> = <see cref="F:VectorDraw.Render.vdRender.DisplayMode.PRINT_PREVIEW"/>.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.Pure_ViewSize">
            <summary>
            Returns the internally used value of ViewSize field for this object.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.ViewSize">
            <summary>
            Get/Set the height of the drawing area in drawing units.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.ViewCenter">
            <summary>
            Get/Set the center of the drawing area in View Coordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.BkColor">
            <summary>
            Get/Set the background color of the drawing area.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.BkGradientColor">
            <summary>
            Get/Set the second color for gradient fading effect of the background.
            </summary>
            <remarks>Default value is Color.Empty which means no gradient color effect.</remarks>
            <remarks>When this property is not empty then the Background is drawn gradient using the BkColor 
            fading in to this color.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRender.BkGradientAngle">
            <summary>
            Get/Set the background gradient direction angle in radians.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.PolygonMode">
            <summary>
            Get/Set the 3dface and polyface  <see cref="T:VectorDraw.Render.vdRender.PolygonModeEnum"/> rasterization mode.
            </summary>
            <remarks>Default value is <see cref="F:VectorDraw.Render.vdRender.PolygonModeEnum.DEFAULT"/> . </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRender.RenderMode">
            <summary>
            Get/Set the render mode of the vdRender object.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.SupportTextures">
            <summary>
            Checks if the render supports Textures. Textures are supported in <see cref="P:VectorDraw.Render.vdRender.RenderMode"/> = Render.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.IsWire2d">
            <summary>
            Get a value representing if the render mode of the object is wire 2D.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.SupportLights">
            <summary>
            Get/Set a boolean value representing if the render mode of the vdRender object supports lights.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.SupportSectionClips">
            <summary>
            Get/Set a boolean value representing if the render mode of the vdRender object supports section clipping.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.PixelSize">
            <summary>
            Get the size in Drawing Units of one(1) window pixel.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.CurveResPixelSize">
            <summary>
            Returns the pixelSize used as passed paremeter in GetSamplePoints method of entities.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRender.TwistAngle">
            <summary>
            Get the angle relative to the world to view plane.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.CurveResolution">
            <summary>
            Get/Set the curve resolution of the render object.
            </summary>
            <remarks>
            Controls the appearance of circles, arcs, and ellipses using short vectors (value range 1-20000). Default value : 500.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRender.PenStyle">
            <summary>
            Get the selected penstyle of the vdRender object.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.LockPenStyle">
            <summary>
            Get/Set the penstyle that all following entities will use when drawn.If this value is null then the entity is drawn using the active PenStyle.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.highLightFilterStack">
            <summary>
            Get the Highlight stack of the vdRender object.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.ActiveHighLightFilter">
            <summary>
            Get the active highlight.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.IsDrawHighLight">
            <summary>
            Returns true  if <see cref="P:VectorDraw.Render.vdRender.ActiveHighLightFilter"/> is  <see cref="F:VectorDraw.Render.vdRender.HighLightFilter.On"/> -or- <see cref="P:VectorDraw.Render.vdRender.Display"/> is <see cref="F:VectorDraw.Render.vdRender.DisplayMode.SCREEN_ACTION_HIGHLIGHT"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.PenStyleStack">
            <summary>
            Get the penstyle stack of the vdRender object.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.FadeEffectStack">
            <summary>
            Get the Fade effect stack of the vdRender object.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.FadeEffect">
            <summary>
            Get the selected Fade effect of the vdRender object.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.DrawFigureList">
            <summary>
            Get the drawble entities stack of vdRender object.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.IvalidateRect">
            <summary>
            Get/Set the selected drawing clipping rectangle.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.ClientRectangle">
            <summary>
            Returns the client rectangle drawing area in pixels
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.ClipBounds">
            <summary>
            Get the lower left and upper right corners of the drawing area in View Coordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.View2PixelMatrix">
            <summary>
            Get the Matrix used to translate from view coordinate system to pixels.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.Pixel2ViewMatrix">
            <summary>
            Get the Matrix used to translate from pixels to view coordinate system.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.CurrentMatrix">
            <summary>
            Get/Set the matrix used to translate world to view coordinate system.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.World2Pixelmatrix">
            <summary>
            Get the matrix used to translate World coordinate system to pixels.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.Pixel2Worldmatrix">
            <summary>
            Get the Matrix used to translate Pixels to World coordinate system.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.View2Worldmatrix">
            <summary>
            Get the matrix used to translate view to world coordinate system.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.ViewDir">
            <summary>
            Get the Vector perpedicular to the plane of the current world to view matrix.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.Palette">
            <summary>
            Get/Set the palette of the vdRender object.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.IsCreatingList">
            <summary>
            Returns true if the draw primitives are called while creating display list.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.IsAlignToViewOn">
            <summary>
            Get/Set a boolean value that represents if the AlignToView is Active.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.DpiY">
            <summary>
            Get a float value representing the dots per inch of the selected graphic device.Default value 96.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.IsLock">
            <summary>
            Returns true if the <see cref="M:VectorDraw.Render.vdRender.Lock"/> is the Last call or false if <see cref="M:VectorDraw.Render.vdRender.UnLock"/> is the Last call.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.CanUseProgressMeter">
            <summary>
            Returns true if the MeterProgress of vdDocumentobject is started
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.IsDrawEdgeOn">
            <summary>
            Returns true if Drawing Edge of solid surfaces is supported.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.IsBlendingOn">
            <summary>
            Returns true if this render is in Transparency drawing mode.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.ElementFlagEx">
            <summary>
            Get/Set additional <see cref="T:VectorDraw.Render.FLAG_ELEMENT_EX"/> flag values for drawing elements.
            </summary>
            <remarks>Default value is <see cref="F:VectorDraw.Render.FLAG_ELEMENT_EX.None"/></remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRender.IsPerspectiveModeOn">
            <summary>
            Returns true if the active <see cref="P:VectorDraw.Render.vdRender.PerspectiveMod"/> is <see cref="F:VectorDraw.Render.vdRender.VdConstPerspectiveMod.PerspectON"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.IsDepthBufferEnable">
            <summary>
            Get a boolean value that represents if the depth buffer is enabled.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.IsBufferIdEnable">
            <summary>
            Get a boolean value that represents if the buffer contains id info is enabled.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.IsContextCreated">
            <summary>
            Returns true if this render contains a valid drawing context.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRender.Status">
            <summary>
            Returns a status code for diagnostic purposes.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRender.TimerPassed">
            <summary>
            Represents the method that will handle the TimerPassed event.
            </summary>
            <param name="sedner">A vdRender object.</param>
        </member>
        <member name="T:VectorDraw.Render.vdRender.HatchingMethod">
            <summary>
            Controls the hatching in special occasions
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.HatchingMethod.Default">
            <summary>
            Use the default hatching method
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.HatchingMethod.SolidTriangulation">
            <summary>
            Use triangulation method for single boundary solid hatches
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.HatchingMethod.SolidFill2d">
            <summary>
            Fills single boundary solid hatches taking into consinderation the current view direction for wire2d mode only.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.HatchingMethod.AutoNormal">
            <summary>
            Fills single boundary solid hatches by calculating the faces of a default hatching method according to an auto calculating nornal.
            Useful for 3d polylines.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.HatchingMethod.Linear">
            <summary>
            Use linear algorithm
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRender.RenderingQualityMode">
            <summary>
            Specifies rendering quality.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.RenderingQualityMode.HighSpeed">
            <summary>
            Specifies high speed, low quality rendering.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.RenderingQualityMode.HighQuality">
            <summary>
            Specifies high quality, low speed rendering.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRender.DrawStatus">
            <summary>
            Represents the Status code for Draw method
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.DrawStatus.Successed">
            <summary>
            Entity succesfully drawn.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.DrawStatus.Failed">
            <summary>
            Entity Draw Failed
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.DrawStatus.Break">
            <summary>
            Entity is not completed draw.Draw was break by a Windows message.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.DrawStatus.UserCancel">
            <summary>
            Draw was canceled by a user override event.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRender.DisplayMode">
            <summary>
            Represents the output graphics mode
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.DisplayMode.SCREEN">
            <summary>
            Drawing the screen.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.DisplayMode.PRINT_MIN">
            <summary>
            Minimum printer display value
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.DisplayMode.PRINT_MAX">
            <summary>
            Maximun printer display value
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.DisplayMode.PRINT_PREVIEW">
            <summary>
            Drawing the print preview.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.DisplayMode.PRINT_PRINTER">
            <summary>
            Drawing to the printer.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.DisplayMode.PRINT_PREVIEW_PAPER">
            <summary>
            Draws in the whole preview printer's paper.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.DisplayMode.PRINT_PRINTER_PAPER">
            <summary>
            Draws in the whole printer's paper.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.DisplayMode.PRINT_FORMAT">
            <summary>
            Draws in a Svg or PDF or Bitmap file.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.DisplayMode.SCREEN_ACTION_HIGHLIGHT">
            <summary>
             It is an ActionWrapper render and draws a selection preview of a vdFigure.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.DisplayMode.SCREEN_ACTION">
            <summary>
            It is an ActionWrapper render .
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.DisplayMode.SCREEN_SELECT">
            <summary>
            Render is used to select figures.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.DisplayMode.EXPLODE">
            <summary>
            Render is used to explode figures into lines
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.DisplayMode.BOUNDINGBOX">
            <summary>
            Render is used to calculate the rendering bounding of draw items.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.DisplayMode.BOUNDPOLY">
            <summary>
            Render is used to to find a closed outline around a point
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.DisplayMode.SCAN_ENTITIES">
            <summary>
            Used to seach the drawing objects (see SearchText)
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.DisplayMode.SCREEN_BITMAP_PIXEL_FORMAT">
            <summary>
            Internally used only when temporaly render to a memory bitmap
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRender.VdConstPerspectiveMod">
            <summary>
            Represents if the scene will be rendered perspective or not.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.VdConstPerspectiveMod.PerspectOFF">
            <summary>
            Perspective mode off.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.VdConstPerspectiveMod.PerspectON">
            <summary>
            Perspective mode on.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRender.OrthoModeAxisEnum">
            <summary>
            Defines the axis where the Ortho is limited on.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.OrthoModeAxisEnum.X">
            <summary>
            Ortho is limited on X direction.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.OrthoModeAxisEnum.Y">
            <summary>
            Ortho is limited on Y direction.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.OrthoModeAxisEnum.Z">
            <summary>
            Ortho is limited on Z direction.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRender.VdConstSnapIso">
            <summary>
            Represents default Isometric values.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.VdConstSnapIso.IsoLEFT">
            <summary>
            Isometric left.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.VdConstSnapIso.IsoRIGHT">
            <summary>
            Isometric right
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.VdConstSnapIso.IsoTOP">
            <summary>
            Isometric top.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRender.VdConstSnapStyle">
            <summary>
            Represents the snap style of a vdLayout object.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.VdConstSnapStyle.SnapISOMETRIC">
            <summary>
            Snap isometric style.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.VdConstSnapStyle.SnapSTANDARD">
            <summary>
            Stadard snap style.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRender.GridDrawingStyle">
            <summary>
            Represents the grid drawing style.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.GridDrawingStyle.Dot">
            <summary>
            Grid is displayed by drawing dots in each vertex in front of all drawing objects.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.GridDrawingStyle.Cross">
            <summary>
            Grid is displayed by drawing crosses 8 pixels wide in each vertex behind of all drawing objects.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.GridDrawingStyle.Solid">
            <summary>
            Grid is displayed by drawing solid lines between vertexes behind of all drawing objects.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRender.PolygonType">
            <summary>
            Represents the type of a polygon used when drawing a solid polygon.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.PolygonType.Simple">
            <summary>
            The points passed represent the perigram of a polygon.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.PolygonType.TriangleStrip">
            <summary>
            The points represent all triangles of the polygon.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.PolygonType.Simple_CCW">
            <summary>
            The points passed represent the perigram of a polygon in Counter - ClockWise direction.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.PolygonType.Simple_CW">
            <summary>
            The points passed represent the perigram of a polygon in ClockWise direction.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRender.Mode">
            <summary>
            Represents the render mode of a vdRender object.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.Mode.Wire2d">
            <summary>
            Wire with no clipping sections applied and with not z-depth value checking.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.Mode.Wire3d">
            <summary>
            Wire, with clipping sections and z-depth checking 
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.Mode.Hide">
            <summary>
            Wire, with clipping sections and z-depth checking without showing overlaped objects.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.Mode.Shade">
            <summary>
            Renders with filled areas
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.Mode.ShadeOn">
            <summary>
            Renders with filled areas, and also renders the edges of the objects.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.Mode.Render">
            <summary>
            with filled areas, lights, transparency and materials applied.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.Mode.Wire2dGdiPlus">
            <summary>
            Render is a wire 2D render and directly draws to the GDI plus graphics device. 
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRender.HighLightFilter">
            <summary>
            Represents the highlight property of all drawing objects in the render.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.HighLightFilter.On">
            <summary>
            The filter is on.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.HighLightFilter.Off">
            <summary>
            The filter is off.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRender.ColorDisplay">
            <summary>
            Represents the pallete used for rendering output.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.ColorDisplay.TrueColor">
            <summary>
            Colors of entities and images are not changed.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.ColorDisplay.BlackAndWhite">
            <summary>
            Colors of entities and images are changed to nearest black or white color.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.ColorDisplay.GrayScale">
            <summary>
            Colors of entities and images are changed to nearest grayscale colors.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRender.PolygonModeEnum">
            <summary>
            Represents the 3dface and polyface rasterization mode
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.PolygonModeEnum.DEFAULT">
            <summary>
            Uses the default vdraw implementation.Polygon Faces are filled in case of Shade, Render, ShadeOn and Hide RenderMode and draw out-line in case of Wire,Wire3d RenderMode
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.PolygonModeEnum.LINES">
            <summary>
            Polygon Faces are draw only their boundaries with out fill.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.PolygonModeEnum.FILL">
            <summary>
            Polygon Faces are always filled .
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRender.ViewportLTScaleFlag">
            <summary>
            Controls the scaling of linetypes drawn inside a viewport.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.ViewportLTScaleFlag.ViewportBased">
            <summary>
            Linetype is extra scaled with its Viewport scaling.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.ViewportLTScaleFlag.LayoutBased">
            <summary>
            For a specific linetype, the dash lengths of a line in a viewport are the same as the dash lengths of a line in layout space
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRender.MatrixPushFlag">
            <summary>
            Flag that defines how an object will be align to current view
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.MatrixPushFlag.None">
            <summary>
            Drawing object does not support any extra align view.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.MatrixPushFlag.AlignToView">
            <summary>
            Drawing objects plane are always parallel aligned to current view
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.MatrixPushFlag.SupportNoStrechText">
            <summary>
            Drawing objects usually text are not stretched in different x,y axis scale.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRender.PolylineFlag">
            <summary>
            Controls how the edges are drawn for polylines when the RenderMode is ShadeOn -or- Hide
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.PolylineFlag.None">
            <summary>
            edges are drawn without using the <see cref="P:VectorDraw.Render.vdRender.EdgeColor"/> and <see cref="P:VectorDraw.Render.vdRenderGlobalProperties.EdgePenWidth"/>
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRender.PolylineFlag.BoundFill">
            <summary>
            edges are drawn using the <see cref="P:VectorDraw.Render.vdRender.EdgeColor"/> and <see cref="P:VectorDraw.Render.vdRenderGlobalProperties.EdgePenWidth"/> 
            </summary>
        </member>
        <member name="T:VectorDraw.DrawElements.grHatch">
            <summary>
            Implements a drawable Hatch element.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grHatch.MaxOpeglPatternLines">
            <summary>
            Represents the maximun number of pattern lines can be rendered inside a region when using OpenGL. If the region has more than this then is rendered as solid.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grHatch.TotalCountourSegments">
            <summary>
            Represents the maximun number of segments that each countour can contains.
            Default value is 4096.
            If at least a countour contains more segments than this value then
            the vdPolyHatch object uses vdRender.HatchingMethod.Linear method to draw the hatch. 
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grHatch.TotalClipCountours">
            <summary>
            Represents the maximun number of PolyCurves of a vdPolyHatch that can use the cliping region calculation to produce the filled sub-curves.
            Default value is 32.
            If the number of PolyCurves is bigger than this value then
            the vdPolyHatch object uses vdRender.HatchingMethod.Linear method to draw the hatch. 
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grHatch.HatchMode">
            <summary>
            Controls the hatching in special occasions.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grHatch._pattern">
            <summary>
            Get/Set the grPattern of the hatch object.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grHatch.operationFlag">
            <summary>
            Specifies the mode to hatch multiple objects.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grHatch.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grHatch.IsDrawSolid(VectorDraw.Render.vdRender)">
            <summary>
            Checks if the object is solid or the view of the passed vdRender is "far" so the hatch is drawn as solid.
            </summary>
            <param name="render">The vdRender object where the object is going to be drawn.</param>
            <returns>True if the object is drawn as solid.</returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grHatch.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.DrawElements.grHatch.Empty">
            <summary>
            Initialize the object and remove all child perigrams and patterns
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grHatch.GetOutlineCountours(System.Int32,System.Double)">
            <summary>
            Returns an array of <see cref="T:VectorDraw.Geometry.gPoints"/> thta represent the outlines of hatch regions
            </summary>
            <param name="curveResolution">valid values (1 to 20000)</param>
            <param name="pixelSize">valid values possitive decimal ( &gt;=0)</param>
            <returns>An array of <see cref="T:VectorDraw.Geometry.gPoints"/> thta represent the outlines of hatch regions</returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grHatch.GetSubPolygons(System.Int32,System.Double)">
            <summary>
            Returns an array of <see cref="T:VectorDraw.Geometry.gPoints"/> boundaries that is filled with selected <see cref="F:VectorDraw.DrawElements.grHatch._pattern"/>
            </summary>
            <param name="curveResolution">valid values (1 to 20000)</param>
            <param name="pixelSize">valid values possitive decimal ( &gt;=0)</param>
            <returns>An array of <see cref="T:VectorDraw.Geometry.gPoints"/> boundaries that is filled with selected <see cref="F:VectorDraw.DrawElements.grHatch._pattern"/></returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grHatch.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Draws an element to the passed vdRender object.
            </summary>
            <param name="render">A vdRender object where the object is going to be drawn.</param>
            <returns>A status code representing the end of the draw function.</returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grHatch.IsPatternSolid(VectorDraw.Render.vdRender,VectorDraw.Geometry.gPoint,System.Int32)">
            <summary>
            Returns true if contains patternlines and the render is Opengl and at least exist a boundary that going to fill more than maxItems pattern lines
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grHatch.Draw(System.Object,VectorDraw.Render.vdRender)">
            <summary>
            Draws an element to the passed vdRender object.
            </summary>
            <param name="sender">The object that called this function,can be null.</param>
            <param name="render">A vdRender object where the object is going to be drawn.</param>
            <returns>A status code representing the end of the draw function.</returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grHatch.DrawSolidChilds(System.Object,VectorDraw.Render.vdRender)">
            <summary>
            Draws this grHatch object solid.
            </summary>
            <param name="sender">The object that called this function,can be null.</param>
            <param name="render">The vdRender object where the object is rendered.</param>
            <returns>A status code representing if the operation was succesfull or not.</returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grHatch.DrawSolidChilds(VectorDraw.Render.vdRender)">
            <summary>
            Draws this grHatch object solid.
            </summary>
            <param name="render">The vdRender object where the object is rendered.</param>
            <returns>A status code representing if the operation was succesfull or not.</returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grHatch.DrawSolidChilds(System.Object,VectorDraw.Render.vdRender,System.Double)">
            <summary>
            Draws this grHatch object solid.
            </summary>
            <param name="sender">The object that called this function,can be null.</param>
            <param name="render">The vdRender object where the object is rendered.</param>
            <param name="scale">Scales the default distance between pattern lines.</param>
            <returns>A status code representing if the operation was succesfull or not.</returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grHatch.DrawSolidChilds(VectorDraw.Render.vdRender,System.Double)">
            <summary>
            Draws this grHatch object solid.
            </summary>
            <param name="render">The vdRender object where the object is rendered.</param>
            <param name="scale">Scales the default distance between pattern lines.</param>
            <returns>A status code representing if the operation was succesfull or not.</returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grHatch.DrawPatternLineForBoundary(VectorDraw.Render.vdRender,VectorDraw.Geometry.gPoint,VectorDraw.DrawElements.grPatternLine,VectorDraw.Geometry.gPoints)">
            <summary>
            Draws a pattern line definition inside a boundary line
            </summary>
            <param name="render">The vdRender object where the object is going to be drawn.</param>
            <param name="HatchOrigin">The starting location in World Coordinate System for hatch pattern generation.</param>
            <param name="patLine">A <see cref="T:VectorDraw.DrawElements.grPatternLine"/> which defines the line properties that will repeatedly drawn inside boundary</param>
            <param name="boundary">A collection of points that consist the boundary</param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grHatch.DrawPatternLineForBoundary(System.Object,VectorDraw.Render.vdRender,VectorDraw.Geometry.gPoint,VectorDraw.DrawElements.grPatternLine,VectorDraw.Geometry.gPoints)">
            <summary>
            Draws a pattern line definition inside a boundary line
            </summary>
            <param name="sender">The object that called this function,can be null.</param>
            <param name="render">The vdRender object where the object is going to be drawn.</param>
            <param name="HatchOrigin">The starting location in World Coordinate System for hatch pattern generation.</param>
            <param name="patLine">A <see cref="T:VectorDraw.DrawElements.grPatternLine"/> which defines the line properties that will repeatedly drawn inside boundary</param>
            <param name="boundary">A collection of points that consist the boundary</param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grHatch.GetViewRectangle(VectorDraw.Render.vdRender)">
            <summary>
            Internally used only.
            </summary>
            <param name="render"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grHatch.GetBoundingBox">
            <summary>
            Get the Bounding Box of the grHatch object.
            </summary>
            <returns>A Box that contains all the object.</returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grHatch.DrawChildPerigrams(VectorDraw.Render.vdRender)">
            <summary>
            Draw only the perigrams of the hatch child ellements.
            </summary>
            <param name="render">A vdRender object where the object is going to be drawn.</param>
        </member>
        <member name="P:VectorDraw.DrawElements.grHatch.Origin">
            <summary>
            Controls the starting location in World Coordinate System for hatch pattern generation.
            </summary>
        </member>
        <member name="M:VectorDraw.Fonts.MemoryReader.readByte">
            Read one Byte value using short-endian conversion
        </member>
        <member name="M:VectorDraw.Fonts.MemoryReader.readUShort">
            Read one UShort value using short-endian conversion
        </member>
        <member name="M:VectorDraw.Fonts.MemoryReader.readULong">
            Read one ULong value using short-endian conversion
        </member>
        <member name="M:VectorDraw.Fonts.MemoryReader.readBlock(System.Int32)">
            Read Byte[] value of length bytes
        </member>
        <member name="T:VectorDraw.Fonts.GlyphList">
            <summary>
            FROM HERE : http://www.koders.com/java/fid717D0C86B78A2C9FA027A133ABBF002EE7397515.aspx
            </summary>
        </member>
        <member name="T:VectorDraw.DrawElements.grLine">
            <summary>
            Implements a drawable line element.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grLine.StartPoint">
            <summary>
            Get/Set the start point of the line.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grLine.EndPoint">
            <summary>
            Get/Set the end point of the line.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grLine.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grLine.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="startPoint">The start point of the line.</param>
            <param name="endPoint">The end point of the line.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grLine.GetBox">
            <summary>
            Gets Element's BoundingBox
            </summary>
            <remarks >The Bounding box of subelements(Childs) is not included</remarks>
        </member>
        <member name="M:VectorDraw.DrawElements.grLine.GetSamplePoints(System.Int32,System.Double)">
            <summary>
            Returns a list of points on the arc from the start to the end point of the arc.
            </summary>
            <param name="curveResolution">valid values (1 to 20000)</param>
            <param name="pixelSize">valid values possitive decimal ( &gt;=0)</param>
            <returns>A collection of points belonging to the arc in Entity Coordinate System(ECS).</returns>
            <seealso cref="M:VectorDraw.DrawElements.grElement.GetSamplePoints(System.Int32,System.Double)"/>
        </member>
        <member name="M:VectorDraw.DrawElements.grLine.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.DrawElements.grLine.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Draws an element to the passed vdRender object.
            </summary>
            <param name="render">A vdRender object where the object is going to be drawn.</param>
            <returns>A status code representing the end of the draw function.</returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grLine.shortContinuousLines(VectorDraw.Generics.vdArray{VectorDraw.DrawElements.grLine})">
            <summary>
            Short a collection of lines in order start point of each line to be same as the end point of previous line.
            </summary>
            <param name="lines">The collection of lines to be shorted.</param>
            <returns>The number of continuous lines shorted in the list.</returns>
            <remarks>If the return value is equal with the number of lines in collection, then the all lines define a continuos perigram.</remarks>
        </member>
        <member name="T:VectorDraw.Render.LineType">
            <summary>
            Implements the LineType graphical object.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.LineType.SolidDefault">
            <summary>
            A Default static Solid Linetype.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.LineType.DPI_Hidden">
            <summary>
            A static <see cref="T:VectorDraw.Render.LineType"/> DPI_Hidden used in some VectorDraw actions.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.LineType.GetBindPtr(VectorDraw.Render.vdRender,System.IntPtr)">
            <summary>
            Internally used.Passes the passed pattern pointer to the cpp library and get the pointer from that object.
            </summary>
            <param name="render">The vdRender where the linetype is being used.</param>
            <param name="vdrawGlContext">The context (cpp) of the render where the linetype is going to be added.</param>
            <returns>The pointer of the object to the cpp library.</returns>
        </member>
        <member name="M:VectorDraw.Render.LineType.UpdateBinds(System.Boolean)">
            <summary>
            Update the object.
            </summary>
            <param name="isDisposing">If true then the object is deleted and cleared from the memory , else it is marked as updated in order to be recalculated.</param>
        </member>
        <member name="M:VectorDraw.Render.LineType.Update">
            <summary>
            Update the object. <see cref="M:VectorDraw.Render.LineType.UpdateBinds(System.Boolean)"/> and <see cref="M:VectorDraw.Render.LineTypeSegments.UpdateLength"/> methods are called.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.LineType.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.LineType.#ctor(System.Double[],System.Boolean)">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="dashes">A double array that represents the dashes of the linetype.</param>
            <param name="isDPI">A boolean value representing if it is DPI or not.</param>
        </member>
        <member name="M:VectorDraw.Render.LineType.IsSolid">
            <summary>
            Checks if this linetype is a solid linetype.
            </summary>
            <returns>True if the linetype is solid.</returns>
        </member>
        <member name="M:VectorDraw.Render.LineType.IsDrawSolid(VectorDraw.Render.vdRender)">
            <summary>
            Checks if the linetype is to be drawn solid at the specified render object.
            </summary>
            <param name="render">A vdRender object where the linetype will be drawn.</param>
            <returns>Returns true if the linetype is to be drawn solid at the specified view render.</returns>
        </member>
        <member name="M:VectorDraw.Render.LineType.IsInvisible">
            <summary>
            Returns true if all segments of LineType object are LineTypeSegment.LineTypeElementType.Dot with negative DashLen.
            </summary>
            <returns>True if all segments of LineType object are LineTypeSegment.LineTypeElementType.Dot with negative DashLen.</returns>
        </member>
        <member name="M:VectorDraw.Render.LineType.GetHashCode">
            <summary>
            Serves as a hash function for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Render.LineType.Equals(System.Object)">
            <summary>
            Checks if the passed object is a LineType object and if it is equal to this one.
            </summary>
            <param name="obj">A LineType object needed for the check.</param>
            <returns>True if the two objects have equal properties values.</returns>
        </member>
        <member name="M:VectorDraw.Render.LineType.DrawPLine(System.Object,VectorDraw.Render.vdRender,VectorDraw.Geometry.gPoints,System.Double)">
            <summary>
            Draws a polyline to the specified render.
            </summary>
            <param name="sender">The object that called this function(for example a vdLine object).</param>
            <param name="render">The vdRender object where the line is drawn.</param>
            <param name="points">A collection of gPoints of the polyline to be drawn.</param>
            <param name="addelev">A double value representing the elevation(z value) to add to the drawable polyline.</param>
        </member>
        <member name="M:VectorDraw.Render.LineType.DrawPLine3d(System.Object,VectorDraw.Render.vdRender,VectorDraw.Geometry.gPoints,System.Double)">
            <summary>
            Draws a polyline to the specified render.
            </summary>
            <param name="sender">The object that called this function(for example a vdLine object).</param>
            <param name="render">The vdRender object where the line is drawn.</param>
            <param name="points">A collection of gPoints of the polyline to be drawn.</param>
            <param name="addelev">A double value representing the elevation(z value) to add to the drawable polyline.</param>
        </member>
        <member name="M:VectorDraw.Render.LineType.UsesTTF_TEXT">
            <summary>
            Specifies if the linetype contains text segment that reference to a TrueTypeFont.
            </summary>
            <returns>True if the linetype contains text segment that reference to a TrueTypeFont.</returns>
        </member>
        <member name="M:VectorDraw.Render.LineType.DrawSolidLine(System.Object,VectorDraw.Render.vdRender,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="render"></param>
            <param name="p1">In wcs</param>
            <param name="p2">In wcs</param>
        </member>
        <member name="M:VectorDraw.Render.LineType.DrawLine3d(System.Object,VectorDraw.Render.vdRender,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Double,System.Boolean)">
            <summary>
            Draws a line in the selected render.
            </summary>
            <param name="sender">The object that called this function(for example a vdLine object).</param>
            <param name="render">The vdRender object where the line is drawn.</param>
            <param name="p1">Start point of the line in World Coordinate system.</param>
            <param name="p2">End point of the line in World Coordinate system.</param>
            <param name="DXOffset">Used in <see cref="M:VectorDraw.Render.LineType.DrawPLine(System.Object,VectorDraw.Render.vdRender,VectorDraw.Geometry.gPoints,System.Double)"/> and indicates the length of the segment that is already drawn.</param>
            <param name="IsFinalSegment">Used in <see cref="M:VectorDraw.Render.LineType.DrawPLine(System.Object,VectorDraw.Render.vdRender,VectorDraw.Geometry.gPoints,System.Double)"/> and indicates if this is the last segment of a polyline.</param>
            <returns>The rest length to be used in the next segment as DXOffset used in <see cref="M:VectorDraw.Render.LineType.DrawPLine(System.Object,VectorDraw.Render.vdRender,VectorDraw.Geometry.gPoints,System.Double)"/>.</returns>
        </member>
        <member name="M:VectorDraw.Render.LineType.DrawLine(System.Object,VectorDraw.Render.vdRender,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Draws a line in the selected render.
            </summary>
            <param name="sender">The object that called this function(for example a vdLine object).</param>
            <param name="render">The vdRender object where the line is drawn.</param>
            <param name="p1">Start point of the line in World Coordinate system.</param>
            <param name="p2">End point of the line in World Coordinate system.</param>
            <param name="DXOffset">Used in <see cref="M:VectorDraw.Render.LineType.DrawPLine(System.Object,VectorDraw.Render.vdRender,VectorDraw.Geometry.gPoints,System.Double)"/> and indicates the length of the segment that is already drawn.</param>
            <param name="IsFinalSegment">Used in <see cref="M:VectorDraw.Render.LineType.DrawPLine(System.Object,VectorDraw.Render.vdRender,VectorDraw.Geometry.gPoints,System.Double)"/> and indicates if this is the last segment of a polyline.</param>
            <param name="CheckForSolid">If true then checks to see the lenght of the line and acts accordinly to draw it as solid.</param>
            <returns>The rest length to be used in the next segment as DXOffset used in <see cref="M:VectorDraw.Render.LineType.DrawPLine(System.Object,VectorDraw.Render.vdRender,VectorDraw.Geometry.gPoints,System.Double)"/>.</returns>
        </member>
        <member name="M:VectorDraw.Render.LineType.DrawLine(System.Object,VectorDraw.Render.vdRender,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Double,System.Boolean)">
            <summary>
            Draws a line in the selected render.
            </summary>
            <param name="sender">The object that called this function(for example a vdLine object).</param>
            <param name="render">The vdRender object where the line is drawn.</param>
            <param name="p1">Start point of the line in World Coordinate system.</param>
            <param name="p2">End point of the line in World Coordinate system.</param>
            <param name="DXOffset">Used in <see cref="M:VectorDraw.Render.LineType.DrawPLine(System.Object,VectorDraw.Render.vdRender,VectorDraw.Geometry.gPoints,System.Double)"/> and indicates the length of the segment that is already drawn.</param>
            <param name="IsFinalSegment">Used in <see cref="M:VectorDraw.Render.LineType.DrawPLine(System.Object,VectorDraw.Render.vdRender,VectorDraw.Geometry.gPoints,System.Double)"/> and indicates if this is the last segment of a polyline.</param>
            <returns>The rest length to be used in the next segment as DXOffset used in <see cref="M:VectorDraw.Render.LineType.DrawPLine(System.Object,VectorDraw.Render.vdRender,VectorDraw.Geometry.gPoints,System.Double)"/>.</returns>
        </member>
        <member name="M:VectorDraw.Render.LineType.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Render.LineType.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="P:VectorDraw.Render.LineType.DrawMethod">
            <summary>
            Get/Set a value that controls the way that the linetype is drawn on the line segments.
            </summary>
            <remarks>Default value is <see cref="F:VectorDraw.Render.LineType.LineTypeDrawMethod.Center"/></remarks>
        </member>
        <member name="P:VectorDraw.Render.LineType.Segments">
            <summary>
            Get/Set the collection of the linetype's segments.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.LineType.IsDPIScale">
            <summary>
            Get/Set a boolean value representing if the appearence of the linetype will be affected from different zooming views.
            </summary>
            <remarks>If this value is true then zooming in and out will affect the scale(appearence) of the linetype</remarks>
        </member>
        <member name="T:VectorDraw.Render.LineType.LineTypeDrawMethod">
            <summary>
            Controls the way that the linetype is drawn on the line segments.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.LineType.LineTypeDrawMethod.Start">
            <summary>
             Using this value the linetype starts from the beginning of the segment and continues similar to the end.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.LineType.LineTypeDrawMethod.Center">
            <summary>
            The linetype is centered to the length of the segment.
            </summary>
        </member>
        <member name="T:VectorDraw.DrawElements.grFaceRecords">
            <summary>
            Implements a collection of FaceRecords objects.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grFaceRecords.#ctor">
            <summary>
            Initializes the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grFaceRecords.#ctor(System.Int32)">
            <summary>
            Initializes the collection object with a given capacity.
            </summary>
            <param name="capacity">An integer representing the preallocated memory size of the collection.</param>
        </member>
        <member name="T:VectorDraw.DrawElements.grFaceRecord">
            <summary>
            Implements a faceRecord used to specify faces of a polyface.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grFaceRecord.mIndexes">
            <summary>
            start with 1, and will be negative if the edge is invisible or positive if the edge is visible
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grFaceRecord.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a face with the passed points indexes.
            </summary>
            <param name="idx0">First corner point index.</param>
            <param name="idx1">Second corner point index.</param>
            <param name="idx2">Third corner point index.</param>
            <param name="idx3">Fourth corner point index.</param>
            <remarks>The points indices start with 1. Negative index numbers can be used to indicate that the edge that starts at that vertex is to be invisible.</remarks>
            <remarks>If the face this grFaceRecord is to represent has only three vertices, then set idx3 to 0.</remarks>
        </member>
        <member name="M:VectorDraw.DrawElements.grFaceRecord.GetVisibilityAt(System.Int32)">
            <summary>
            Get the visibility of the edge at a specified index.
            </summary>
            <param name="index">A zero based value 0-3 indicating an edge.</param>
            <returns>True if the edge is visible.</returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grFaceRecord.Is4Indexes">
            <summary>
            Get if the last of the indexes is equal to 0.If the last index is 0 then the face is a triangle.
            </summary>
            <returns>True if the last of the idexes is equal to 0.</returns>
        </member>
        <member name="P:VectorDraw.DrawElements.grFaceRecord.Indexes">
            <summary>
            An array of 4 integers indicating the points indeces of the face.
            </summary>
            <remarks>The points indices start with 1. Negative index numbers can be used to indicate that the edge that starts at that vertex is to be invisible.</remarks>
            <remarks>If the face this grFaceRecord is to represent has only three vertices, then set idx3 to 0.</remarks>
        </member>
        <member name="T:VectorDraw.DrawElements.grPolyFace">
            <summary>
            Implements a drawble polyface element.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grPolyFace.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grPolyFace.GetBox">
            <summary>
            Gets Element's BoundingBox
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grPolyFace.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.DrawElements.grPolyFace.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Draws an element to the passed vdRender object.
            </summary>
            <param name="render">A vdRender object where the object is going to be drawn.</param>
            <returns>A status code representing the end of the draw function.</returns>
        </member>
        <member name="P:VectorDraw.DrawElements.grPolyFace.Points">
            <summary>
            A collection of the points used by the faces of the polyface.
            </summary>
        </member>
        <member name="P:VectorDraw.DrawElements.grPolyFace.FaceRecords">
            <summary>
            A collection of FaceRecords objects indicating the faces of the polyface element.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRectangle">
            <summary>
            Stores a set of four integers that represent the location and size of a rectangle.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.IvdRectangle">
            <summary>
            Stores a set of four integers that represent the location and size of a rectangle.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRectangle.Empty">
            <summary>
            Represents a vdRectangle object with its properties left uninitialized.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRectangle.#ctor(VectorDraw.Render.vdRectangle)">
            <summary>
            Initializes the object by setting the properties from an other object.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRectangle.#ctor">
            <summary>
            Initializes the object with zero values to it's properties.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="left">x-coordinate of the left edge.</param>
            <param name="top">y-coordinate of the top edge.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRectangle.FromString(System.String)">
            <summary>
            Sets the object's properties using a ToString string.
            </summary>
            <param name="str">The string to parse.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRectangle.ToString(VectorDraw.Serialize.Serializer)">
            <summary>
            A string that represents the Left,Top,Width,Height values.
            </summary>
            <param name="serializer">the Serializer object where the object is going to be saved.</param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Render.vdRectangle.ToString">
            <summary>
            A string that represents the Left,Top,Width,Height values.
            </summary>
            <returns>A string that represents the object's properties.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRectangle.GetHashCode">
            <summary>
            Returns the hash code for this instance..
            </summary>
            <returns> A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRectangle.Equals(System.Object)">
            <summary>
            Checks if the properties of the passed object are equal to this object.
            </summary>
            <param name="obj">Another vdRectangle object.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRectangle.Equals(VectorDraw.Render.vdRectangle)">
            <summary>
            Checks if the properties of the passed object are equal to this object.
            </summary>
            <param name="p">Another vdRectangle object.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRectangle.op_Equality(VectorDraw.Render.vdRectangle,VectorDraw.Render.vdRectangle)">
            <summary>
            Implements the == operator for two vdRectangle objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRectangle.op_Inequality(VectorDraw.Render.vdRectangle,VectorDraw.Render.vdRectangle)">
            <summary>
            Implements the != operator for two vdRectangle objects.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRectangle.Left">
            <summary>
            Get/Set the x-coordinate of the left edge.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRectangle.Top">
            <summary>
            Get/Set the y-coordinate of the left edge.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRectangle.Width">
            <summary>
            Get/Set the width of the edge
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRectangle.Height">
            <summary>
            Get/Set the height of the edge
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRectangle.IsEmpty">
            <summary>
            Tests whether all numeric properties of this object have values of zero.
            </summary>
        </member>
        <member name="T:VectorDraw.DrawElements.grChars">
            <summary>
            Implements a collection of <see cref="T:VectorDraw.DrawElements.grChar"/> objects.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grChars.#ctor">
            <summary>
            Initializes the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grChars.#ctor(System.Int32)">
            <summary>
            Initializes the collection with the specified number of elements.
            </summary>
            <param name="items">An integer that represents the new created items of the collection.</param>
        </member>
        <member name="T:VectorDraw.DrawElements.grChar">
            <summary>
            Implements a graphical representation of a character.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grChar._gmCellIncX">
            <summary>
            Specifies the horizontal distance from the origin of the current character cell to the origin of the next character cell. 
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grChar._gmCellIncY">
            <summary>
            Specifies the vertical distance from the origin of the current character cell to the origin of the next character cell. 
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grChar._xMin">
            <summary>
            Represents the minimum x of the character cell.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grChar._xMax">
            <summary>
            Represents the maximum x of the character cell.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grChar._yMin">
            <summary>
            Represents the minimum y of the character cell.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grChar._yMax">
            <summary>
            Represents the maximum y of the character cell.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grChar.GetBox">
            <summary>
            Get the Box of the character.
            </summary>
            <returns>A Box object representing the box of the character.</returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grChar.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grChar.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.DrawElements.grChar.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Draws an element to the passed vdRender object.
            </summary>
            <param name="render">A vdRender object where the object is going to be drawn.</param>
            <returns>A status code representing the end of the draw function.</returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grChar.SelectGlyph(VectorDraw.Fonts.Glyph,System.Int32,VectorDraw.Fonts.ttf)">
            <summary>
            Fills this object's properties with the passed glyph object's properties.
            </summary>
            <param name="glyph">A glyph object.</param>
            <param name="code">Character's index.</param>
            <param name="ttffont">The ttf font.</param>
        </member>
        <member name="T:VectorDraw.Render.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRenderGlobalProperties">
            <summary>
            Provides a list of properties used in a vdRender object.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.MinPenWidth">
            <summary>
            Minimun penwidth in output render device in inches
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.MinimumTimerBreakForPeekMessage">
            <summary>
            Gets a value in milliseconds that defines the minimum time elapsed in order to check if messages que is empty.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.MinPatternLineOffset">
            <summary>
            The minimun offset of pattern lines less from which the hatch will be draw as solid
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.FixedPatternLineOffset">
            <summary>
            Standard patternline offset for VdFillModeHatchBDiagonal,
            VdFillModeHatchCross,VdFillModeHatchDiagCross,VdFillModeHatchFDiagonal,VdFillModeHatchHorizontal,VdFillModeHatchVertical  
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.MinLineTypeSegmentLen">
            <summary>
            The minimun length of linetypes less from which the linetype will be draw as solid
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.MinTextHeight">
            <summary>
            The minimun height of text less from which the text will be draw as boundingBox
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.FixedLineTypeScale">
            <summary>
            Used as fixed scale value for DOT0,DASHDOT0,DASHDOTDOT0,INVISIBLE linetypes
            Each segment of DPIScale linetype, is multiply by this value and the result represents the length of the segment in inch on the output drawing device.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.FixedHighLightDash">
            <summary>
            Dashed Linetype length in Device millimeters used by BitmapRender penstyle when ActiveHighLightFilter is HighLightFilter.On
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.FixedShadeOnPenWidth">
            <summary>
            Used for the pen width of edges in render when renderMode is ShadeOn or Hide
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.TimerBreakForBitmap">
            <summary>
            Time between bitmap draw.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.mTimerBreakForDraw">
            <summary>
            This value represents the minimum time elapsed for breaking the draw when a windows message appears to the message que.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.mSelectionPreview">
            <summary>
            Defines the preview method used for entities that are over the mouse position when an action waiting to select an entity.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRenderGlobalProperties.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRenderGlobalProperties.#ctor(System.Boolean)">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRenderGlobalProperties.CopyFrom(VectorDraw.Render.vdRenderGlobalProperties)">
            <summary>
            Copies all properties from another object.
            </summary>
            <param name="from">An other object from which the properties will be copied.</param>
        </member>
        <member name="M:VectorDraw.Render.vdRenderGlobalProperties.GetEvTxt">
            <summary>
            Internally used only.
            </summary>
            <returns></returns>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.mMaxBmpOpenGLImageSize">
            <summary>
            This value represents the Maximum memory in bytes to be used for images.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRenderGlobalProperties.GetImageReduceSize(System.Drawing.Size,System.Int32)">
            <summary>
            Returns a reduced of imput size so the sizewidth * sizeheight * bits_per_pixel / 8 to be smaller or equal with the <see cref="P:VectorDraw.Render.vdRenderGlobalProperties.MaxBmpMemorySize"/> property.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRenderGlobalProperties.CreateFormsPreviewRender">
            <summary>
            Internally used only.Returns a new vdRender object used on Forms previews.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRenderGlobalProperties.ToString">
            <summary>
            Gets an empty System.String.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Render.vdRenderGlobalProperties.Reset">
            <summary>
            Reset serializable properties to default values.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRenderGlobalProperties.Update">
            <summary>
            Update rendering properties
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRenderGlobalProperties.ResetOpenGLContext">
            <summary>
            Internally used only.
            Release selected OpenGL context in order to be recreated with new  <see cref="P:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.DefaultWindowPixelFormat"/> 
            Must be called just before VectorDraw control is disposed.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdRenderGlobalProperties.EnsureOpenGLContext">
            <summary>
            Forces default global opengl context to be created
            </summary>
            <returns>True if opengl context created or false if not.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdRenderGlobalProperties.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the grPatternLine object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Render.vdRenderGlobalProperties.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the grPatternLine object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.Wire2dSectionClip">
            <summary>
             Defines if Section Clips applied with wire2d render mode.
            </summary>
            <remarks>
            Default value is <see cref="F:VectorDraw.Render.vdRenderGlobalProperties.Wire2dSectionClipFlag.On"/> in order Section Clips to be applied with wire2d render mode. </remarks>
            <remarks>In order  section clips not to be applied with wire2d render mode set it to <see cref="F:VectorDraw.Render.vdRenderGlobalProperties.Wire2dSectionClipFlag.On"/>.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.UseControlWindow">
            <summary>
            UseControlWindow is always false now.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.UseGLDIBBitmap">
            <summary>
            UseGLDIBBitmap is always false now.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.ActionHighLightQuality">
            <summary>
            ActionHighLightQuality is always HighSpeed now.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.Enable3dLineTypes">
            <summary>
            Linetypes are always supported in 3D now.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.TransparencyMethod">
            <summary>
            Get/Set the method that used with OpenGl for transparency faces.
            </summary>
            <remarks>Default value is <see cref="F:VectorDraw.Render.vdRenderGlobalProperties.TransparentMethod.DepthMask"/></remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.MappedImageBoundWidth">
            <summary>
            Get/Set the width in pixels of a solid color boundary that will be added arround the image that will be mapped over a polyface using opengl methods.
            </summary>
            <remarks>
            Valid range 0-32. </remarks>
            <remarks>If it is 0 then the 10 percent of Maximum size between width and height of the image is used.</remarks>
            <remarks>Default value is 0 pixel.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.SelectionPreviewBreakDrawTime">
            <summary>
            Get/Set a value in milliseconds that defines the minimum time elapsed for breaking the highlight preview draw of the figures when the mouse is over an entity.
            </summary>
            <remarks>
            It must be in the range between 40 and 140 milliseconds.</remarks>
            <remarks>Default value is 85 milliseconds
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.TimerBreakForSelect">
            <summary>
            This value represents the minimum time elapsed in milliseconds, for breaking selecting loop when a windows message appears to the message que.
            </summary>
            <remarks>
            Valid range between 0 to 80 milliseconds</remarks>
            <remarks>Default value is 20 milliseconds
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.DisableControlColor">
            <summary>
            Get/Set the color that Control Area filled when <see cref="P:System.Windows.Forms.Control.Enabled"/> = false.
            </summary>
            <remarks>
            Default value is <see cref="P:System.Drawing.Color.LightGray"/> with alpha transparency = 192.</remarks>
            <remarks>Set it to <see cref="F:System.Drawing.Color.Empty"/> or <see cref="P:System.Drawing.Color.Transparent"/> in the VectorDraw screen not to be fill with extra color in case the Control.Enable = false.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.Model2dProjectionSize">
            <summary>
            Get/Set a static value that used to initialize rendering context size in pixels used by GetModel2dProjection.
            Default value is 2048
            Set a bigger value for more quality or smaller for less memory usage and more speed.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.MaxRenderingScreenSize">
            <summary>
            Internally used only.
            Get/Set a static value that used to initialize openGL rendering context size in pixels.
            Default value is 4096 x 4096.
            This value can be changed only if there are rendering problems for specific graphic cards.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.NullCursor">
            <summary>
            Returns a contstant full transparent.This is also the default used by <see cref="P:VectorDraw.Render.vdRenderGlobalProperties.ActionCursor"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.ActionCursor">
            <summary>
            Get/Set the cursor used by the Actions.Default value is <see cref="P:VectorDraw.Render.vdRenderGlobalProperties.NullCursor"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.OpenGLVersion">
            <summary>
            Get the opengl version used by the Application.
            An Opengl Render must be run at list once in order to get the OpenGL version
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.GraphicsContext">
            <summary>
            Internally used. This class contains all our Bitmaps where we draw , plus the control and the graphics where these bitmaps are being used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.IsFrontFaceClockWise">
            <summary>
            Returns the Front Face direction used with textures in 3d render mode.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.SortedTransparentLists">
            <summary>
            Controls the draw order of transparency objects.
            If it is true the their draw order is sorted from farest to nearest, in active rendering view.
            </summary>
            <remarks>
            Objects are sorted depended of their the Boundingbox center point.</remarks>
            <remarks>Default value is true.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.CustomRenderTypeName">
            <summary>
            Internally used only.Get/Set Basic Render context used on 3d rendering modes 
            <see cref="F:VectorDraw.Render.vdRender.Mode.Hide"/> , <see cref="F:VectorDraw.Render.vdRender.Mode.Shade"/> , <see cref="F:VectorDraw.Render.vdRender.Mode.ShadeOn"/> , <see cref="F:VectorDraw.Render.vdRender.Mode.Render"/>
            </summary>
            <remarks>
            Set it to "opengllist" in order OpenGL context to be used for rendering -or- Empty string in order the VectorDraw Context to be used.</remarks>
            <remarks>The rendering in 3D modes is faster if the machine has GPU Hardware acceleration for OpenGL.</remarks>
            <remarks>Default value is "opengllist".Set it to Empty string "" in order to use VectorDraw rendering context. Keep in mind that modes Wire2D always use vdraw context.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.DynamicRotFlag">
            <summary>
            Get/Set the <see cref="T:VectorDraw.Render.vdRenderGlobalProperties.DynamicRotFlags"/> value used by the rotate-3d action.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.AttributesMode">
            <summary>
            Get/Set the <see cref="T:VectorDraw.Render.vdRenderGlobalProperties.AttributesModeEnum"/> value used by attributes of the drawing.This value is serialized by the drawing.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.PickBoxVisibility">
            <summary>
            Controls the visibility of pick box during user actions.
            </summary>
            <remarks>Default value is <see cref="F:VectorDraw.Render.vdRenderGlobalProperties.PickBoxVisibilityFlag.HideOnPointActions"/> </remarks>
            <seealso cref="T:VectorDraw.Render.vdRenderGlobalProperties.PickBoxVisibilityFlag"/>
            <seealso cref="P:VectorDraw.Render.vdRenderGlobalProperties.PickSize"/>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.AxisVisibility">
            <summary>
            Controls the visibility of cross axis during select actions.
            </summary>
            <remarks>Default value is <see cref="F:VectorDraw.Render.vdRenderGlobalProperties.AxisVisibilityFlag.HideOnSelectActions"/> </remarks>
            <seealso cref="T:VectorDraw.Render.vdRenderGlobalProperties.AxisVisibilityFlag"/>
            <seealso cref="P:VectorDraw.Render.vdRenderGlobalProperties.AxisSize"/>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.SmoothAngle">
            <summary>
            Get/Set the angle in degrees between 0 and 90 used to calculate normals for each vertex in each face when rendering a polyface object.
            Defines the maximum angle which is compared with the angles between the planes of neighboring faces in order to filter out the normals of the planes that will added in the average calculation.
            </summary>
            <remarks>
            Set it to 0 in order the normals not to be smoothing.</remarks>
            <remarks>Set it to 90 in order the normal of each vertex to be calculated as the average value with all the neighboring faces normals.</remarks>
            <remarks>DeFault value is 0 for no smoothing
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.SelectionPreview">
            <summary>
            Get/Set the preview method <see cref="T:VectorDraw.Render.vdRenderGlobalProperties.SelectionPreviewFlags"/> of entities that are over the mouse position when an action waiting to select an entity.
            </summary>
            <remarks>Default value is <see cref="F:VectorDraw.Render.vdRenderGlobalProperties.SelectionPreviewFlags.OFF"/> </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.SelectionText">
            <summary>
            Get/Set the way that text are selected.<see cref="T:VectorDraw.Render.vdRenderGlobalProperties.SelectionTextFlags"/>
            </summary>
            <remarks>Default value is <see cref="F:VectorDraw.Render.vdRenderGlobalProperties.SelectionTextFlags.TextBox"/> which is faster. </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.MeterProgress">
            <summary>
            Get/Set the <see cref="T:VectorDraw.Professional.Utilities.ProgressMeter"/> object.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.StrechText">
            <summary>
            Specifies if vdText, vdMtext, dimension text, vdPoint, vdInsert with StretchBlockFlag = NoStretch, will be stretched when the selected WorldToView matrix has different x,y scales.
            </summary>
            <remarks>
            Default value is true.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.EdgePenWidth">
            <summary>
             Used for the pen width in inches of edges in render when renderMode is ShadeOn or Hide
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.ActionProperties">
            <summary>
            Specifies values that controls some of BaseAction operations
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.LineDrawQualityMode">
            <summary>
            Specifies the Line Draw quality for wire 2d rendering mode.
            </summary>
            <remarks>Default value is <see cref="F:VectorDraw.Render.vdRender.RenderingQualityMode.HighSpeed"/>.</remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.RenderingQuality">
            <summary>
            Specifies the <see cref="T:VectorDraw.Render.vdRender.RenderingQualityMode"/> quality.
            </summary>
            <remarks>
            Default value is <see cref="F:VectorDraw.Render.vdRender.RenderingQualityMode.HighSpeed"/></remarks>
            <remarks>Value is saved by the document.</remarks>
            <remarks>This mode is used when drawing Images , lines. 
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.ShowHatches">
            <summary>
            Get/Set a boolean value representing if the hatches of filled object will be shown.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.HighLightPerspectiveGrips">
            <summary>
            Get/Set a boolean value representing if the entities whith ShowGrips will be highlighted when perspective mode is on.
            Default value is true.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.LightsFilter">
            <summary>
            Specifies properties that control the behaviour of the Lights application over the object types.
            Default value is <see cref="F:VectorDraw.Render.vdRenderGlobalProperties.LightsFilterEnum.Ignore_None"/>.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.ShowQuickText">
            <summary>
            Get/Set a boolean value representing if the texts will be rendered as rectangles for faster draw. Default value is false so text will be rendered as text and not as a rectangle.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.ApplyLWtoHatchProperties">
            <summary>
            Get/Set a boolean value representing if the LineWeight property of the figures will be applied to the hatchproperties when an object is filled with a hatchpattern.
            </summary>
            <remarks>Default value is false.</remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.SectionClipCoverFaces">
            <summary>
            A boolean value that represents if when section clips are enabled cover faces will be created and drawn to PolyFaces that intersect with the section clips.True , the faces are drawn and false faces are not drawn.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.SectionClipCoverFacesColor">
             <summary>
            Get/Set color that used to fill the Section clip faces.
            Default value is Color.Empty in order the active PolyFace object color to be used.
             </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.TimerBreakForDraw">
            <summary>
            This value represents the minimum time elapsed in milliseconds, for breaking the draw when a windows message appears to the message que.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.SelectingWindowColor">
            <summary>
            Get/Set Solid Transparency color for window selecting.
            </summary>
            <remarks>
            Set it to Color.Empty for no solid transparency fill.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.SelectingCrossColor">
            <summary>
            Get/Set Solid Transparency color for crossing window selecting.
            </summary>
            <remarks>
            Set it to Color.Empty for no solid transparency fill.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.CurveResolution">
            <summary>
            Get/Set the curve resolution of the render object.
            </summary>
            <remarks>
            Controls the appearance of circles, arcs, and ellipses using short vectors (value range 1-20000). Default value : 500.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.CursorAxisColor">
            <summary>
            Get/Set the color used for the draw of the mouse crosshair.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.GridColor">
            <summary>
            Get/Set the color used to draw the grid.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.SplitColor">
            <summary>
            Get/Set the color used to draw the split lines.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.SplitHighLightColor">
            <summary>
            Get/Set the highLight color for the active viewport inside a split layout.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.CursorPickColor">
            <summary>
            Get/Set the color used to draw the mouse rectangle.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.ReferenceCrossColor">
            <summary>
            Get/Set The color used for the reference mouse crosshair.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.RubberBandColor">
            <summary>
            Get/Set the color of the rubber line in mouse actions.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.GripColor">
            <summary>
            Get/Set the grip color of the render.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.GroupGripColor">
            <summary>
            Get/Set the grip color of the groups.This is used when a group is selected.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.OsnapColor">
            <summary>
            Get/Set the osnap color of the render.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.UserDynamicRotColor">
            <summary>
            Get/Set the Action User Dynamic Rotation circle color..
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.SelectionPreviewColor">
            <summary>
            Get/Set the highlight color of all entities when a selecting action is active and the mouse is over an entity.
            </summary>
            <remarks>
            Set it to Color.Empty in order the entity color to be used.</remarks>
            <remarks>Default value is Color.White.</remarks>
            <remarks>If the color is equal to background then the foreground color is used instead.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.EdgeColor">
            <summary>
            Get/Set the display color for edges of all faces when rendering in 3d.(when RenderMode is Wire3d ,Hide or ShadeOn)
            </summary>
            <remarks>
            Default value is Color.Empty and the edges keep their entity color.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.ShowHidenEdges">
            <summary>
            Get/Set a boolean value representing if the edges of the 3dFace object will be shown.
            </summary>
            <remarks>
            If this value is true then all edges of the 3dFace object will be shown ( even if they are invisible).
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.GripSize">
            <summary>
            Get/Set the grip size in pixels used in render.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.OsnapSize">
            <summary>
            Get/Set the osnap size in pixels used in render.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.PickSize">
            <summary>
            Get/Set the mouse rectangle size in pixels.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.AxisSize">
            <summary>
            Get/Set the mouse crosshair size in pixels.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.CrossSize">
            <summary>
            Get/Set the reference mouse crosshair in pixels.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.ShowCursor">
            <summary>
            Get/Set a boolean value representing if the mouse crosshair is visible or not.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.PickAdd">
            <summary>
            Controls whether a user  selection action replace the current selection set (is false) or add to it (true).
            </summary>
            <remarks>
            If value is false:The objects most recently selected by the user become the selection set. Previously selected objects are removed from the selection set. Add more objects to the selection set by pressing SHIFT while selecting.</remarks>
            <remarks>If value is true:Each object(s) selected, is added to the current selection set. To remove objects from the set, press SHIFT while selecting.</remarks>
            <remarks>Default value is true.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.SelectActionKey">
            <summary>
            Get/Set a key value used in combination with mouse-down to add or remove selected item(s) from a selection.
            </summary>
            <remarks>Default value is <see cref="F:System.Windows.Forms.Keys.Shift"/></remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.MaxBmpMemorySize">
            <summary>
            Get/Set the maximum memory in bytes to be used for images.
            </summary>
            <remarks>Used to manipulate very big images.</remarks>
            <remarks>Default value is -16777216  for 32 bit and 0 for 64 bit Applications.</remarks>
            <remarks>Set it to 0 for no size reduce.</remarks>
            <remarks>If the value is negative draw of images, which their size in memory is bigger than this value,
            is divided into sub images with size smaller than this value.</remarks>
            <remarks>If the value is positive then the size of image reduced into lower resolution.</remarks>
            <remarks>Use positive value in range between 67108864 to 134217728 if you are interesting in display equality, 
            else for high quality use a negative value between -16777216 to  -33554432.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.SceneRotationSpeed">
            <summary>
            Get/Set the speed for the Dynamic 3D view rotate command action.
            </summary>
            <remarks>
            Default value = 1.0. For example set it to 2.0 to double the speed or 0.5 to decrease the speed in half.</remarks>
            <remarks>Set it to a negative value for Constrained 3d Orbit .</remarks>
            <remarks>In version 6022 set the document.GlobalRenderProperties.SceneRotationSpeed changed to get also negative values in case to use a different Constrained orbit logic. 
            For example:</remarks>
            <remarks>In this case if value is -1 then </remarks>
            <remarks> 1. moving the mouse horizontally from the left side of screen to the right, the view is rotated around the Z direction in counter clockwise 360 degrees.</remarks>
            <remarks>2. moving the mouse vertically from the bottom side of screen to the top, the view is rotated around the x direction in counter clockwise 180 degrees.</remarks>
            <remarks>If you use a value of -0.5 instead of 1 then the horizontal rotation is 180 degrees and the vertical is 90 degrees 
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.SceneRotationProps">
            <summary>
            Get/Set properties that define how the 3D rotation action behaves.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.EnableMiddleGripForPolylines">
            <summary>
            Get/Set a static boolean value that represents if grips will be shown in the middle of the straight (bulge = 0.0) segments of a polyline.
            </summary>
            <remarks>
            Default value false (The middle grips do not show in straight segments).</remarks>
            <remarks>Note that this static value should be set in the initialization of the application , and in order to see the changes (if is set after opening a file or selecting a polyline) a RegenAll to the Document is required.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.EnableMiddleGripForLines">
            <summary>
            Get/Set a static boolean value that represents if grips will be shown in the middle of the vdLine object.
            </summary>
            <remarks>
            Default value is false (The middle grips do not show in lines).</remarks>
            <remarks>Note that this static value should be set in the initialization of the application, also in order to see the changes (if is set after opening a file or selecting a vdLine) a RegenAll to the Document is required.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.ShowGripsOnActions">
            <summary>
            Get/Set a static boolean value that represents if the already activated grips will be shown while an action is active.
            </summary>
            <remarks>
            Default value false. The grip are not rendered when an action is started.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.OpenGLDoubleBuffered">
            <summary>
            Get/Set a static boolean value that represents if OpenGL and VectorDraw Lists are both kept.
            </summary>
            <remarks>
            Default value true. Set it to false in order to save memory.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.OpenglUseFontOutLines">
            <summary>
            Defines how fonts are drawn with opengl.
            </summary>
            <remarks>
            Default value is <see cref="F:VectorDraw.Render.vdRenderGlobalProperties.OpenGLUseFontOutLinesFlag.Default"/> and uses OpenGL context font lists. Set it to <see cref="F:VectorDraw.Render.vdRenderGlobalProperties.OpenGLUseFontOutLinesFlag.ExcludeSHXFromLists"/>for higher precision with large coordinates.</remarks>
            <remarks>After seting this value a regen is needed in order to update the entities lists.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.OpenGLUseWireEdgeLists">
            <summary>
            Defines if separate list will be used to be drawn wire frames with opengl ShadeOn or Hide render modes.
            </summary>
            <remarks>
            Default value is false. Set it to true in order filled solids to be drawn using background when render mode is Hide.</remarks>
            <remarks>If this value is true takes more memory for opengl lists
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.Wire2dUseFontOutLines">
            <summary>
            Defines how fonts are drawn with wire2d render mode.
            </summary>
            <remarks>
            Default value is <see cref="F:VectorDraw.Render.vdRenderGlobalProperties.Wire2dUseFontOutLinesFlag.Default"/> and uses GdiPlus Graphics context font lists. </remarks>
            <remarks>Set it to <see cref="F:VectorDraw.Render.vdRenderGlobalProperties.Wire2dUseFontOutLinesFlag.UseNativeTTFLists"/> in order text to be displayed with same scale for all zooms.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.OpenglCoordCorrectionLimit">
            <summary>
            Get/Set a static boolean value that defines the limit over which the coordinate correction is applied.
            </summary>
            <remarks>Default value is 50000.Set it to 0 in order to always use correction.</remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.OpenGlAntializing">
            <summary>
            Get/Set a static value that defines the opengl render antialiasing sample number.
            </summary>
            <remarks>
            Common range 0-8. Default value is 4. Higher values offer better quality but slower performance.</remarks>
            <remarks>In order the antialiasing to be activated the value must be greater than 0 , the graphics card must support opengl antialiasing, the <see cref="P:VectorDraw.Render.vdRenderGlobalProperties.RenderingQuality"/> must be set to <see cref="F:VectorDraw.Render.vdRender.RenderingQualityMode.HighQuality"/>
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.OpenGlAntializingWidth">
            <summary>
            Get/Set a static value that defines the minimum opengl render antialiasing line width in pixels.
            </summary>
            <remarks> Common range 1-2. Default value is 2.</remarks>
            <seealso cref="P:VectorDraw.Render.vdRenderGlobalProperties.OpenGlAntializing"/>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.ImageDrawFlag">
            <summary>
            Specifies properties that control the behaviour of the vdImage draw.
            </summary>
            <remarks>Default value is <see cref="F:VectorDraw.Render.vdRenderGlobalProperties.ImageDrawFlagEnum.Default"/>.Set it to <see cref="F:VectorDraw.Render.vdRenderGlobalProperties.ImageDrawFlagEnum.HideUnReferencedImages"/>, in order to not draw vdImages that do not have a valid bitmap (vdImageDef).</remarks>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.ValidPixelFormats">
            <summary>
            Returns the Valid PixelFormats that VectorDraw window supports for openGL render.
            In order to return a valid value the vdDocument.RenderMode must be one of 3d rendering modes (Wire3d, Shade, Hide, ShadeOn, Render) and the vdDocument.GlobalRenderProperties.CustomRenderTypeName 'opengllist' .
            By default VectorDraw uses the first in the list.
            In your application Initialization and before any draw occurs,
            set an other one from the list to <see cref="P:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.DefaultWindowPixelFormat"/> in order to use a deferent one that probably much better than the default.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdRenderGlobalProperties.ActivePixelFormat">
            <summary>
            Returns a structure that contains information about the select pixel format of VectorDraw window device.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRenderGlobalProperties.PickBoxVisibilityFlag">
            <summary>
            Controls the visibility of pick box during user actions.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.PickBoxVisibilityFlag.ShowOnPointActions">
            <summary>
            Pick box is drawn for all actions that wainting for a point. 
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.PickBoxVisibilityFlag.HideOnPointActions">
            <summary>
            Pick box is not drawn when acion is wainting for a point. 
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRenderGlobalProperties.AxisVisibilityFlag">
            <summary>
            Controls the visibility of cross axis during select actions.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.AxisVisibilityFlag.ShowOnSelectActions">
            <summary>
            Axis is drawn for all select actions. 
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.AxisVisibilityFlag.HideOnSelectActions">
            <summary>
            Axis is not drawn when acion is wainting for a selection. 
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRenderGlobalProperties.DynamicRotFlags">
            <summary>
            Defines the method used by rotate-3d action.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.DynamicRotFlags.Auto">
            <summary>
            Rotate-3d action uses the following criteria :
            if an object exists behind the cursor then the clicked point acts as the rotation base point.
            else if the mid point of the model bounding box is inside the view it is used as the rotation base point
            else the center of the view is used as the rotation base point( the center's Z value is set as the bounding box mid point Z value).
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.DynamicRotFlags.AroundViewCenter">
            <summary>
            Rotate-3d action rotates the model around the center of the View (the center's Z value is set as the bounding box mid point Z value).
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.DynamicRotFlags.Default">
            <summary>
            the default flag used by the programm.Same with <see cref="F:VectorDraw.Render.vdRenderGlobalProperties.DynamicRotFlags.Auto"/>
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRenderGlobalProperties.AttributesModeEnum">
            <summary>
            Get/Set the <see cref="T:VectorDraw.Render.vdRenderGlobalProperties.AttributesModeEnum"/> value used by attributes of the drawing.This value is serialized by the drawing.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.AttributesModeEnum.Off">
            <summary>
            All Attributes are not drawn no matter their visibility property.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.AttributesModeEnum.Normal">
            <summary>
            Normal/Default behaviour which follows the attribute's visibility property.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.AttributesModeEnum.On">
            <summary>
            All Attributes are drawn no matter their visibility property.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRenderGlobalProperties.SelectionPreviewFlags">
            <summary>
            This enum is used in <see cref="P:VectorDraw.Render.vdRenderGlobalProperties.SelectionPreview"/> property.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.SelectionPreviewFlags.OFF">
            <summary>
            Selection preview is off.Entities are not hilighting.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.SelectionPreviewFlags.ON">
            <summary>
            Selection preview is on and entities that are over the mouse position are hilighting when an action waiting to select an entity.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.SelectionPreviewFlags.HIDE_SOLID_REGIONS">
            <summary>
            If it is ON disable  draw solid regions
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.SelectionPreviewFlags.ON_HIDE_SOLID_REGIONS">
            <summary>
            Same as <see cref="F:VectorDraw.Render.vdRenderGlobalProperties.SelectionPreviewFlags.ON"/> but without draw solid regions
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.SelectionPreviewFlags.HIGHLIGHT_OFF">
            <summary>
            If it is ON disable hilighting
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.SelectionPreviewFlags.ON_HIGHLIGHT_OFF">
            <summary>
            Same as <see cref="F:VectorDraw.Render.vdRenderGlobalProperties.SelectionPreviewFlags.ON"/> but without hilighting
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.SelectionPreviewFlags.ON_HIDE_SOLID_REGIONS_HIGHLIGHT_OFF">
            <summary>
            Same as <see cref="F:VectorDraw.Render.vdRenderGlobalProperties.SelectionPreviewFlags.ON"/> but without hilighting and without draw solid regions
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.SelectionPreviewFlags.DEFAULT">
            <summary>
            Document default value for all views
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.SelectionPreviewFlags.USE_XOR">
            <summary>
            If it is ON draw selected entities preview by Xoring the source and destination colors in order to guarantee the axis visibility.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.SelectionPreviewFlags.HIGHLIGHT_ONLY_WHEN_FINISHED">
            <summary>
            If selection preview is on, then the entity over the mouse is highlighted only if all entities are checked and the drawing is not break by another mouse move.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRenderGlobalProperties.SelectionTextFlags">
            <summary>
            This enum is used to define the way that text are selected.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.SelectionTextFlags.TextBox">
            <summary>
            Text are selected when user click anywhere inside the text box.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.SelectionTextFlags.OutLine">
            <summary>
            Text are selected when user click over the text outline.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRenderGlobalProperties.ActionFlags">
            <summary>
            Specifies values that controls some of BaseAction operations
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.ActionFlags.Default">
            <summary>
            Deafault operations are used.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.ActionFlags.HideOnMouseLeave">
            <summary>
            The action will hide when the cursor leaves the control. 
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRenderGlobalProperties.TransparentMethod">
            <summary>
            Specifies values that controls the method used with OpenGl for transparency faces.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.TransparentMethod.CullFace">
            <summary>
            Front and Back facing facets are culling.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.TransparentMethod.DepthMask">
            <summary>
            Use depth-buffer comparisons with pixel blending arithmetic.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRenderGlobalProperties.SceneRotationPropsEnum">
            <summary>
            Specifies properties that control the behaviour of the 3D rotation action.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.SceneRotationPropsEnum.none">
            <summary>
            No properties activted.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.SceneRotationPropsEnum.topRestrict">
            <summary>
            Restricts the rotation on the top half of the model. This means that the user cannot see the bottom part of the model. This property applies only when SceneRotationSpeed is set
            to a negative value.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRenderGlobalProperties.LightsFilterEnum">
            <summary>
            Specifies properties that control the behaviour of the Lights application over the object types.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.LightsFilterEnum.Ignore_None">
            <summary>
            Apply lights to all object types.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.LightsFilterEnum.Ignore_vdImage">
            <summary>
            Lights are not applied to vdImages.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRenderGlobalProperties.ImageDrawFlagEnum">
            <summary>
            Specifies properties that control the behaviour of the vdImage draw.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.ImageDrawFlagEnum.Default">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.ImageDrawFlagEnum.HideUnReferencedImages">
            <summary>
            Images that are not reference a valid vdImageDef object (valid bitmap) are not rendered.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRenderGlobalProperties.Wire2dUseFontOutLinesFlag">
            <summary>
            Defines how fonts are drawn with wire2d render mode.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.Wire2dUseFontOutLinesFlag.Default">
            <summary>
            Default value.
            Uses the gdiplus api to draw scaled texts when text plane is parallel to view and not stretched.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.Wire2dUseFontOutLinesFlag.UseNativeTTFLists">
            <summary>
            Use the list created by VectorDraw TrueType Analyzer and not by Gdiplus Graphics context.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.Wire2dUseFontOutLinesFlag.UseAPIWithScaleText">
            <summary>
             Uses the gdiplus api to draw stretched texts when <see cref="F:VectorDraw.Render.vdRenderGlobalProperties.Wire2dUseFontOutLinesFlag.UseNativeTTFLists"/> is not included and the text plane is parallel to view.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRenderGlobalProperties.Wire2dSectionClipFlag">
            <summary>
            Defines if Section Clips applied with wire2d render mode.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.Wire2dSectionClipFlag.On">
            <summary>
            Section Clips applied with wire2d render mode
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.Wire2dSectionClipFlag.Off">
            <summary>
             Section Clips does not applied with wire2d render mode
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRenderGlobalProperties.OpenGLUseFontOutLinesFlag">
            <summary>
            Defines how fonts are drawn with opengl.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.OpenGLUseFontOutLinesFlag.Default">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.OpenGLUseFontOutLinesFlag.ExcludeSHXFromLists">
            <summary>
            Exclude SHX fonts from opengl lists.It uses more memory but it offers higher precision with large coordinates.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.OpenGLUseFontOutLinesFlag.UseNativeTTFLists">
            <summary>
            Use the list created by VectorDraw TrueType Analyzer and not by OpenGL analyzer.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.OpenGLUseFontOutLinesFlag.IgnoreThickness">
            <summary>
            Thickness for TrueType Fonts is not applied. This make the rendering faster.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRenderGlobalProperties.OpenGLUseFontOutLinesFlag.DisableLighting">
            <summary>
            Disable the lighting for all texts
            </summary>
        </member>
        <member name="T:VectorDraw.Render.grTextStyleExtra">
            <summary>
            Implements some extra drawing properties for the texts.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.grTextStyleExtra.#ctor">
            <summary>
            Initializes the grTextStyleExtra object.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.grTextStyleExtra.#ctor(VectorDraw.Render.grTextStyleExtra)">
            <summary>
            Initializes the grTextStyleExtra object taking properties from another object.
            </summary>
            <param name="from">Another object from which the properties will be copied.</param>
        </member>
        <member name="M:VectorDraw.Render.grTextStyleExtra.CopyFrom(VectorDraw.Render.grTextStyleExtra)">
            <summary>
            Copies all properties from another object.
            </summary>
            <param name="from">Another object from which the properties will be copied.</param>
        </member>
        <member name="M:VectorDraw.Render.grTextStyleExtra.ToString">
            <summary>
            Gets a System.String that represents the TextLine,ObliquingAngle and Bold values
            of the grTextStyleExtra Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.grTextStyleExtra.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the grTextStyleExtra object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Render.grTextStyleExtra.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the grTextStyleExtra object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="P:VectorDraw.Render.grTextStyleExtra.IsItalic">
            <summary>
            Checks if the text is italic(has oblique angle).
            </summary>
        </member>
        <member name="P:VectorDraw.Render.grTextStyleExtra.IsOverLine">
            <summary>
            Checks if the line over the text is drawn.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.grTextStyleExtra.IsUnderLine">
            <summary>
            Checks if the line under the text is drawn.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.grTextStyleExtra.IsStrikeOut">
            <summary>
            Checks if the strikeout line of the text is drawn.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.grTextStyleExtra.Bold">
            <summary>
            Checks if the text is bold.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.grTextStyleExtra.DrawOutline">
            <summary>
            This draws the TTF texts as outline vector but it decreases the text 
            display quality when texts have very small height in screen.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.grTextStyleExtra.TextLine">
            <summary>
            Get/Set the Textline flag of the style.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.grTextStyleExtra.DefaultObliquingAngle">
            <summary>
            Get the oblique angle for italic (value 21 degrees).
            </summary>
        </member>
        <member name="P:VectorDraw.Render.grTextStyleExtra.ObliquingAngle">
            <summary>
            Get/Set the oblique angle of the text.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.grTextStyleExtra.TextLineFlags">
            <summary>
            Specifies the drawn lines for a text.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyleExtra.TextLineFlags.None">
            <summary>
            Does not draw any line.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyleExtra.TextLineFlags.UnderLine">
            <summary>
            Draws a line under the text.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyleExtra.TextLineFlags.OverLine">
            <summary>
            Draws a line over the text.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyleExtra.TextLineFlags.CenterLine">
            <summary>
            Draws a strikeout line.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyleExtra.TextLineFlags.All">
            <summary>
            Draws all lines(under,strikeout,over).
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyleExtra.TextLineFlags.UnderAndOver">
            <summary>
            Draws over and under lines.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyleExtra.TextLineFlags.UnderAndCenter">
            <summary>
            Draws under and strikeout lines.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyleExtra.TextLineFlags.OverAndCenter">
            <summary>
            Draws over and strikeout lines.
            </summary>
        </member>
        <member name="T:VectorDraw.DrawElements.grText">
            <summary>
            Implements a drawable text element.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grText._inspoint">
            <summary>
            The insertion point of the text.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grText._height">
            <summary>
            The height of the text.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grText._rotation">
            <summary>
            The rotation of the text in radians.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grText._textstring">
            <summary>
            The text string of the text.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grText._style">
            <summary>
            The textstyle of the text.It is recommended to use the property instead.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grText.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grText.#ctor(System.String)">
            <summary>
            Initializes the object with the given string text.
            </summary>
            <param name="textstring"></param>
        </member>
        <member name="M:VectorDraw.DrawElements.grText.#ctor(VectorDraw.Render.grTextStyle,System.String)">
            <summary>
            Initializes the text with the given text string and the given textstyle.
            </summary>
            <param name="style">The textstyle of the object.</param>
            <param name="textstring">The text string of the object.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grText.#ctor(VectorDraw.Render.grTextStyle,System.String,System.Double)">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="style">The textstyle of the object.</param>
            <param name="textstring">The text string of the object.</param>
            <param name="height">The height of the object.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grText.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Draws an element to the passed vdRender object.
            </summary>
            <param name="render">A vdRender object where the object is going to be drawn.</param>
            <returns>A status code representing the end of the draw function.</returns>
        </member>
        <member name="P:VectorDraw.DrawElements.grText.TextStyle">
            <summary>
            Get/Set the textstyle of the object.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdGdiPenStyles">
            <summary>
            Implements a collection of vdGdiPenStyle objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyles.#ctor">
            <summary>
            Initializes the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyles.#ctor(System.Int32)">
            <summary>
            Initializes the vdArray object with a given capacity.
            </summary>
            <param name="capacity">An integer representing the preallocated memory size of the collection.</param>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyles.AddItem(VectorDraw.Render.vdGdiPenStyle)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
            <param name="value">An object to be added to the collection.</param>
            <returns>True if the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyles.SetBkColorFixForground(System.Drawing.Color)">
            <summary>
            Sets the background color and also fixes the foreground color to be the opposite.
            </summary>
            <param name="incolor">A system color to be set as background.</param>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyles.GetVisibleColor(System.Drawing.Color)">
            <summary>
            Returns the Forground color if incolor is equal to Background.
            </summary>
            <param name="incolor">Color to be tested.</param>
            <returns>Returns a color deferent than Background.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyles.GetNearestColor(System.Drawing.Color)">
            <summary>
            Returns a <see cref="T:System.Drawing.Color"/> that belongs into this collection and it is nearest to the input color.
            </summary>
            <param name="color">A <see cref="T:System.Drawing.Color"/> object.</param>
            <returns>A <see cref="T:System.Drawing.Color"/> that belongs into this collection and it is nearest to the input color.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyles.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyles.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyles.Background">
            <summary>
            Get/Set the color used for background.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyles.Forground">
            <summary>
            Get the Foreground color which is the color with index 6 as system color.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdGdiPenStyle">
            <summary>
            Implements the vdGdiPenStyle which is the Penstyle for objects that are rendered in a vdRender object.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyle.#ctor(System.Drawing.Color,System.Byte)">
            <summary>
            Initializes a new instance of the object.
            </summary>
            <param name="rgbcolor">New color value for the object.</param>
            <param name="alphaBlending">New AplhaBlending value for the object.</param>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyle.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyle.#ctor(System.Drawing.Color,System.Byte,System.Boolean,System.Double)">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="rgbcolor">The color of the penstyle.</param>
            <param name="alphaBlending">The alpha blending of the penstyle.</param>
            <param name="IsWidthDU">A boolean value representing if it is widthDU.Set false to use LW values.</param>
            <param name="width">The width of the penstyle.</param>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyle.#ctor(System.Drawing.Color,VectorDraw.Render.LineType,System.Double)">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="rgbcolor">The color of the penstyle.</param>
            <param name="linetype">The linetype of the penstyle.</param>
            <param name="linetypescale">A double value representing the linetype's scale. </param>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyle.#ctor(VectorDraw.Render.vdRender,VectorDraw.Render.LineType,System.Double)">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="render">The vdRender object where the penstyle is going to be used.</param>
            <param name="linetype">The <see cref="P:VectorDraw.Render.vdGdiPenStyle.LineType"/> to be used.</param>
            <param name="linetypescale">A double value representing the linetype's scale. </param>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyle.#ctor(VectorDraw.Render.vdRender)">
            <summary>
            Initializes the object with CopyFrom render.PenStyle.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyle.#ctor(VectorDraw.Render.vdRender,System.Boolean)">
            <summary>
            Initializes the object with CopyFrom render.PenStyle.
            </summary>
            <param name="render">a vdRender object from which will copy the PenStyle</param>
            <param name="isBackground">True in order the color to be same as render.Palette.Background</param>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyle.#ctor(VectorDraw.Render.vdGdiPenStyle)">
            <summary>
            Initializes the object applying the passed object's properties to this object.
            </summary>
            <param name="penstyle">A vdGdiPenStyle object from which the properties will be copied.</param>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyle.GetFinalColor(VectorDraw.Render.vdRender)">
            <summary>
            Translate a Color depend of the active <see cref="P:VectorDraw.Render.vdRender.ColorPalette"/> and other render properties.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyle.GetPixelWidth(VectorDraw.Render.vdRender)">
            <summary>
            Calculates the pixel width to use to the passed vdRender object for this pen style.
            </summary>
            <param name="render">A vdRender object where the object is going to be used.</param>
            <returns>The pixel width to use to the specified vdRender object.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyle.SetStdWidth(System.Double)">
            <summary>
            Set a standard width in drawing units for the pen style.
            </summary>
            <param name="width">A double value representing the width of the pen style.</param>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyle.SetLwWidth(System.Double,VectorDraw.Geometry.DoubleArray)">
            <summary>
            Set the width of the pen style in output device mm.
            </summary>
            <param name="width">A double value representing the width of the pen style.</param>
            <param name="printerscale">A double array of two values representing the printing scale(numerator,denumerator).</param>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyle.CopyFrom(VectorDraw.Render.vdGdiPenStyle,System.Boolean)">
            <summary>
            Copies the passed object's properties to this object.
            </summary>
            <param name="obj">A vdGdiPenStyle object from which the properties will be copied.</param>
            <param name="copyMaterials">If false then the MaterialBind and MaterialMatrix properties are not copied.</param>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyle.DisposeGradientFillBrush">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyle.CreateGradientFillBrush(VectorDraw.Render.vdRender,VectorDraw.Geometry.Box)">
            <summary>
            Internally used only.Update gradient internal values.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyle.CreateGradientFillBrush(VectorDraw.Render.vdRender,System.Drawing.Rectangle)">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyle.CopyFrom(VectorDraw.Render.vdGdiPenStyle)">
            <summary>
            Copies the passed object's properties to this object.
            </summary>
            <param name="obj">A vdGdiPenStyle object from which the properties will be copied.</param>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyle.GetHashCode">
            <summary>
            Serves as a hash function for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyle.Equals(System.Object)">
            <summary>
            Checks if the passed object is a vdGdiPenStyle and if it is equal to this object.
            </summary>
            <param name="obj">A vdGdiPenStyle object to be checked if it is equal to this object.</param>
            <returns>True if the two objects are reference equal or their properties have equal values.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyle.Equals(VectorDraw.Render.vdGdiPenStyle)">
            <summary>
            Checks if the passed vdGdiPenStyle object is equal to this one.
            </summary>
            <param name="o">Another vdGdiPenStyle object needed.</param>
            <returns>True if the properties of the two objects are equal.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyle.op_Equality(VectorDraw.Render.vdGdiPenStyle,VectorDraw.Render.vdGdiPenStyle)">
            <summary>
            Implements the == operator for two vdGdiPenStyle objects.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyle.op_Inequality(VectorDraw.Render.vdGdiPenStyle,VectorDraw.Render.vdGdiPenStyle)">
            <summary>
            Implemetns the != operator for two vdGdiPenStyle objects.
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyle.AreEqualWidth(VectorDraw.Render.vdGdiPenStyle,VectorDraw.Render.vdGdiPenStyle)">
            <summary>
            Checks if the passed objects are equal.
            </summary>
            <param name="obj1">A vdGdiPenStyle object to be checked.</param>
            <param name="obj2">A vdGdiPenStyle object to be checked.</param>
            <returns>True if the two objects are reference equal or their properties have equal values.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyle.GetGrayColor(System.Drawing.Color)">
            <summary>
            Returns the nearest gray scale color of the input true color.
            </summary>
            <param name="color">A true color</param>
            <returns>The nearest gray scale color of the input true color.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyle.FromArgb(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
             Creates a System.Drawing.Color structure from the four ARGB component (alpha, red, green, and blue) values.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyle.FromArgb(System.Byte,System.Drawing.Color)">
            <summary>
            Creates a System.Drawing.Color structure from the specified System.Drawing.Color structure, but with the new specified alpha value.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyle.FromArgb(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a System.Drawing.Color structure from the specified 8-bit color values (red, green, and blue). The alpha value is implicitly 255 (fully opaque).
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyle.Extra">
            <summary>
            Get/Set the structure object that contains the properties of :
            <see cref="P:VectorDraw.Render.vdGdiPenStyle.color"/> 
            <see cref="P:VectorDraw.Render.vdGdiPenStyle.AlphaBlending"/> 
            <see cref="P:VectorDraw.Render.vdGdiPenStyle.Transmit"/> 
            <see cref="P:VectorDraw.Render.vdGdiPenStyle.Ambient"/> 
            <see cref="P:VectorDraw.Render.vdGdiPenStyle.Diffuse"/> 
            <see cref="P:VectorDraw.Render.vdGdiPenStyle.Specular"/> 
            <see cref="P:VectorDraw.Render.vdGdiPenStyle.Roughness"/> 
            <see cref="P:VectorDraw.Render.vdGdiPenStyle.Reflection"/> 
            <see cref="P:VectorDraw.Render.vdGdiPenStyle.Refraction"/> 
            <see cref="P:VectorDraw.Render.vdGdiPenStyle.Metallic"/> 
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyle.Transmit">
            <summary>
            Specifies the amount of non-filtered light that is transmitted through a surface. <see cref="P:VectorDraw.Render.vdGdiPenStyle.AlphaBlending"/>
            </summary>
            <remarks>
            Some real-world examples of non-filtered transparency are thin see-through cloth, fine mesh netting and dust on a surface.</remarks>
            <remarks>Valid range 0 to 1.0.</remarks>
            <remarks>Default values is <see cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Transmit"/>.</remarks>
            <remarks>The color of the object and the color transmitted through the object together contribute 100% of the final color. </remarks>
            <remarks>So if transmit is set to 0.6 (60 percent), the transmitted color contributes 60% and the <see cref="T:System.Drawing.Color"/> of the object contributes only 10%.</remarks>
            <remarks>A value of 1.0 means no Transmit and the full <see cref="T:System.Drawing.Color"/> value is filtered transparency.
            </remarks>
            <seealso cref="T:System.Drawing.Color"/>
            <seealso cref="P:VectorDraw.Render.vdGdiPenStyle.AlphaBlending"/>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyle.Ambient">
            <summary>
            Simulate the amount of the light that is scattered around the scene that does not come directly from a light source on a surface
            </summary>
            <remarks>
            Valid range 0 to 1.0.</remarks>
            <remarks>Default values is <see cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Ambient"/>.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyle.Diffuse">
            <summary>
            Diffuse determines how much of the light that is seen comes directly from a light source on a surface.
            </summary>
            <remarks>
            Valid range 0 to 1.0.</remarks>
            <remarks>Default values is <see cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Diffuse"/>.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyle.Specular">
            <summary>
            Specifies the saturation to the light source's color around the brightest area (center) of the highlight
            </summary>
            <remarks>
            Valid range 0 to 1.0.</remarks>
            <remarks>Default values is <see cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Specular"/>.</remarks>
            <remarks>A value of 1.0 causes complete saturation to the light source's color at the brightest area (center) of the highlight
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyle.Roughness">
            <summary>
            Specifies the amount of a spot light highlighting on a surface.
            </summary>
            <remarks>
            Valid range 0.01 to 1.0.</remarks>
            <remarks>Default values is <see cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Roughness"/>.</remarks>
            <remarks>If specular is not specified Roughness has no effect</remarks>
            <remarks>A value of 1.0 means (very rough - large highlight)</remarks>
            <remarks>A value of 0.01 means  (very smooth - small highlight) like  (plastic). </remarks>
            <remarks><seealso cref="P:VectorDraw.Render.vdGdiPenStyle.Specular"/>
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyle.Reflection">
            <summary>
            Specifies the amount of mirrored finish for a surface.
            </summary>
            <remarks>
            Valid range 0 to 1.0.</remarks>
            <remarks>Default values is <see cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Reflection"/>.</remarks>
            <remarks>A value of 1 means a perfect mirror
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyle.Refraction">
            <summary>
            Specifies the blending of the ray of light passing throw a transparency surface.
            </summary>
            <remarks>
            Valid range 1 to INFINITY.</remarks>
            <remarks>Default values is <see cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Refraction"/>.</remarks>
            <remarks>The index of refraction for air is 1.0, water is 1.33, glass is 1.5 and diamond is 2.4
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyle.Metallic">
            <summary>
            Specifies the amount of metallic finish for a surface.
            </summary>
            <remarks>
            Valid range 0 to 1.0.</remarks>
            <remarks>Default values is <see cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Metallic"/>.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyle.gradientTypeProp">
            <summary>
            Get/Set the gradient fill type.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyle.gradientColor2">
            <summary>
            Get/Set the gradient ending color
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyle.gradientAngle">
            <summary>
            Get/Set the gradient direction angle in degrees.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyle.PrintingExtraWidth">
            <summary>
            Get/Set a value representing the extra width to apply to this linetype when printing.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyle.MaterialBind">
            <summary>
            Represents the image for the penstyle used in hatching.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyle.MaterialMatrix">
            <summary>
            Get/Set a Matrix used for scaling the material.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyle.AlphaBlending">
            <summary>
            Specifies the amount of filtered transparency of a surface. 
            </summary>
            <remarks>
            Some real-world examples of transparency are stained glass windows or tinted cellophane.</remarks>
            <remarks>Valid range 0 to 255.</remarks>
            <remarks>Default values is <see cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Transparency"/>.</remarks>
            <remarks>A value of 255 means no transparency.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyle.LineTypeScale">
            <summary>
            Get/Set the scale of the linetype.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyle.LineType">
            <summary>
            Get/Set the <see cref="P:VectorDraw.Render.vdGdiPenStyle.LineType"/> object that uses this linetype.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyle.color">
            <summary>
            Get/Set the color of the linetype.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyle.PenWidth">
            <summary>
            Returns the selected pen Width  in Draing Units or in DPI depend on <see cref="P:VectorDraw.Render.vdGdiPenStyle.PenWidthTypeProp"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyle.PenWidthTypeProp">
            <summary>
            Returns the selected pen width type.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyle.IndexId">
            <summary>
            Get/Set the index id if this object is an item of a a <see cref="T:VectorDraw.Render.vdGdiPenStyles"/> collection
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyle.ByBlockProperties">
            <summary>
             Get/Set the properties that returns the owner block penstyle values. 
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdGdiPenStyle.PenWidthType">
            <summary>
            Defines the values that used by <see cref="P:VectorDraw.Render.vdGdiPenStyle.PenWidthTypeProp"/>
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdGdiPenStyle.PenWidthType.Lw">
            <summary>
            The vdGdiPenStyle.PenWidth> represent a value in hundrends of device millimeters
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdGdiPenStyle.PenWidthType.Std">
            <summary>
            The vdGdiPenStyle.PenWidth> represent a value inDrawing Units
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdGdiPenStyle.GradientType">
            <summary>
            gradient fill type
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdGdiPenStyle.GradientType.None">
            <summary>
            No gradient fill
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdGdiPenStyle.GradientType.Linear">
            <summary>
            Linear gradient fill
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdGdiPenStyle.GradientType.Spherical">
            <summary>
            Spherical gradient fill
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdGdiPenStyle.GradientType.LinearInverted">
            <summary>
            Linear gradient fill by inverting the colors
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdGdiPenStyle.GradientType.SphericalInverted">
            <summary>
            Spherical gradient fill by inverting the colors
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdGdiPenStyle.GradientType.HemiSpherical">
            <summary>
            HemiSpherical gradient fill
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdGdiPenStyle.GradientType.HemiSphericalInverted">
            <summary>
            HemiSpherical gradient fill by inverting the colors
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdGdiPenStyle.ByblockTypeEnum">
            <summary>
            Defines the properties that returns the owner block penstyle values. 
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdGdiPenStyle.ByblockTypeEnum.None">
            <summary>
            Keep own properties
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdGdiPenStyle.ByblockTypeEnum.Color">
            <summary>
            color , Extra Transmit Ambient Diffuse Specular Roughness Reflection Refraction Metallic MaterialBind MaterialMatrix properties returns the owner block penstyle values.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdGdiPenStyle.ByblockTypeEnum.AlphaBlending">
            <summary>
            AlphaBlending property returns the owner block penstyle value.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdGdiPenStyle.ByblockTypeEnum.LineWeight">
            <summary>
            GetPixelWidth for PenWidthType.Lw selecting type, calculate the width based on the owner block penstyle value.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdGdiPenStyle.ByblockTypeEnum.LineType">
            <summary>
            Linetype and LinetypeScale properties returns the owner block penstyle values.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdGdiPenStyle.ByblockTypeEnum.All">
            <summary>
            All properties returns the owner block penstyle values.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.IgrPrinterProperties">
            <summary>
            Implements some of vdPrint properties
            </summary>
        </member>
        <member name="M:VectorDraw.Render.IgrPrinterProperties.GetExtents">
            <summary>
            Gets the Bounding Box that completely encloses all visible Figure.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.IgrPrinterProperties.PrintScaleValue">
            <summary>
            Get the PrinterScale of the vdPrint object.Is defined as the ratio of the number of millimeters in the printer paper to the number of drawing units in printable drawing area.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.IgrPrinterProperties.IsModelLayout">
            <summary>
            Returns true if the vdPrint object is reference to a document.Model layout
            </summary>
        </member>
        <member name="P:VectorDraw.Render.IgrPrinterProperties.IsViewPort">
            <summary>
            Checks if the object that implements this interface is a viewport. This is used in the vdRender object to verify if a render is rendering into a viewport or a regular layout.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.IgrPrinterProperties.ContainsViewPorts">
            <summary>
            Returns true if the object contains any non deleted layout.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.IDocumentProperties">
            <summary>
            This interface is used to pass some Document properties to the Action dll
            </summary>
        </member>
        <member name="M:VectorDraw.Render.IDocumentProperties.ActionOsnapMode(System.Object)">
            <summary>
            Internally used. Returns the osnap mode used by the passed BaseAction object.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.IDocumentProperties.SelectionPreviewDownKey">
            <summary>
            Internally used to pass the SelectionPreviewDownKey property to the Action dll.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.IDocumentProperties.SelectionPreviewUpKey">
            <summary>
            Internally used to pass the SelectionPreviewUpKey property to the Action dll.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.IHasDocument">
            <summary>
            Internally used.This interface is used to pass some Document properties to the Action dll
            </summary>
        </member>
        <member name="P:VectorDraw.Render.IHasDocument.DocProperties">
            <summary>
            Internally used.This interface is used to pass some Document properties to the Action dll
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.LightManager">
            <summary>
            An object used to calculate a valid Light for OpenGL device.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.LightManager.Clear">
            <summary>
            Removes all elements from the collection 
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.LightManager.GetLight(System.String)">
            <summary>
            Returns a valid OpenGL light id according to the passed name parameter.
            </summary>
            <param name="name">The Name of the selected light</param>
            <returns>Returns a valid OpenGL light id .</returns>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.LightManager.#ctor">
            <summary>
            The default constructor of of the object.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.OpenGL.LightManager.maxLights">
            <summary>
            Returns the maximum number of lights that can be applied  at the same time on rendering scene.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.LightManager.LightMode">
            <summary>
            Light mode used for drawing Polyface with OpenGL context.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.LightManager.LightMode.SMOOTH">
            <summary>
            Normals are calculating for each vertex of Polyface according the faces that have common vertex.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.LightManager.LightMode.FLAT">
            <summary>
             Normals are calculating for each vertex of Polyface according the face plane where they belogs to.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports">
            <summary>
            A class that wrapper opengl method  and property calls.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLU_TESS_MAX_COORD">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.GetGLMatrix(VectorDraw.Geometry.Matrix)">
            <summary>
            Returns an opengl matrix array from a <see cref="T:VectorDraw.Geometry.Matrix"/> object.
            </summary>
            <param name="mat">A <see cref="T:VectorDraw.Geometry.Matrix"/> object to be converted.</param>
            <returns>An opengl matrix array.</returns>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.OpenGL2VdrawMatrix(System.Double[])">
            <summary>
            Returns a <see cref="T:VectorDraw.Geometry.Matrix"/> from opengl matrix array.
            </summary>
            <param name="dm">&gt;An opengl matrix array to be converted.</param>
            <returns>A <see cref="T:VectorDraw.Geometry.Matrix"/> from opengl matrix array.</returns>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.gluOrtho2D(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.gluPerspective(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.gluBuild2DMipmaps(VectorDraw.Render.OpenGL.OpenGLImports.TargetTexture,System.Int32,System.Int32,System.Int32,VectorDraw.Render.OpenGL.OpenGLImports.TexturePixelFormat,VectorDraw.Render.OpenGL.OpenGLImports.PixelType,System.IntPtr)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.gluUnProject(System.Double,System.Double,System.Double,System.Double[],System.Double[],System.Int32[],System.Double@,System.Double@,System.Double@)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.gluProject(System.Double,System.Double,System.Double,System.Double[],System.Double[],System.Int32[],System.Double@,System.Double@,System.Double@)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.gluNewTess">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.gluDeleteTess(System.IntPtr)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.gluTessBeginPolygon(System.IntPtr,System.IntPtr)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.gluTessBeginContour(System.IntPtr)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.gluTessVertex(System.IntPtr,System.Double[],System.Double[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.gluTessEndContour(System.IntPtr)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.gluTessEndPolygon(System.IntPtr)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.gluTessProperty(System.IntPtr,VectorDraw.Render.OpenGL.OpenGLImports.TessProperty,System.Double)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.gluTessNormal(System.IntPtr,System.Double,System.Double,System.Double)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.GetTessBeginDelegate">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.GetTessEndDelegate">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.GetTessVertexDelegate">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.GetTessErrorDelegate">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.gluTessCallBack_Begin(System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.gluTessCallBack_End">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.gluTessCallBack_Error(System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.gluTessCallBack_Vertex(System.Double[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.gluTessCallback(System.IntPtr,VectorDraw.Render.OpenGL.OpenGLImports.TessCallback,System.IntPtr)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.wglUseFontOutlines(System.IntPtr,System.UInt32,System.UInt32,System.UInt32,System.Single,System.Single,VectorDraw.Render.OpenGL.OpenGLImports.WGLFontFormat,VectorDraw.Render.OpenGL.OpenGLImports.GLYPHMETRICSFLOAT[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.wglCreateContext(System.IntPtr)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.wglMakeCurrent(System.IntPtr,System.IntPtr)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.wglDeleteContext(System.IntPtr)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.wglShareLists(System.IntPtr,System.IntPtr)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glAlphaFunc(VectorDraw.Render.OpenGL.OpenGLImports.ComparisonFunction,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glBegin(VectorDraw.Render.OpenGL.OpenGLImports.Primitives)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glBindTexture(VectorDraw.Render.OpenGL.OpenGLImports.TargetTexture,System.UInt32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glBlendFunc(VectorDraw.Render.OpenGL.OpenGLImports.BlendingFactorSrc,VectorDraw.Render.OpenGL.OpenGLImports.BlendingFactorDest)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glCallList(System.UInt32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glClear(VectorDraw.Render.OpenGL.OpenGLImports.ClearMask)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glClearColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glClearDepth(System.Double)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glClipPlane(VectorDraw.Render.OpenGL.OpenGLImports.ClipPlaneName,System.Double[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColor4d(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColor4ub(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColor4ubv(System.Byte[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColorMask(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColorMaterial(VectorDraw.Render.OpenGL.OpenGLImports.FaceMode,VectorDraw.Render.OpenGL.OpenGLImports.ColorMaterialParameter)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glDeleteLists(System.UInt32,System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glDeleteTextures(System.Int32,System.UInt32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glDepthFunc(VectorDraw.Render.OpenGL.OpenGLImports.ComparisonFunction)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glDepthMask(System.Byte)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glDepthRange(System.Double,System.Double)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glDisable(VectorDraw.Render.OpenGL.OpenGLImports.GLCap)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glDrawBuffer(VectorDraw.Render.OpenGL.OpenGLImports.ColorBuffers)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glEdgeFlag(System.Byte)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glEnable(VectorDraw.Render.OpenGL.OpenGLImports.GLCap)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glEnd">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glEndList">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glFinish">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glFlush">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glFrontFace(VectorDraw.Render.OpenGL.OpenGLImports.FrontFaceDirection)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glGenLists(System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glGenTextures(System.Int32,System.UInt32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glGetIntegerv(VectorDraw.Render.OpenGL.OpenGLImports.Parameters,System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glGetBooleanv(VectorDraw.Render.OpenGL.OpenGLImports.Parameters,System.Byte[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glGetDoublev(VectorDraw.Render.OpenGL.OpenGLImports.Parameters,System.Double[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glGetError">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.CheckError">
            <summary>
            Check if an OpenGL error occurs.Returns ErrorCode.GL_NO_ERROR in case no error occurs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glHint(VectorDraw.Render.OpenGL.OpenGLImports.HintTarget,VectorDraw.Render.OpenGL.OpenGLImports.HintMode)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glIsEnabled(VectorDraw.Render.OpenGL.OpenGLImports.GLCap)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glIsList(System.UInt32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glIsTexture(System.UInt32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glLightModelfv(VectorDraw.Render.OpenGL.OpenGLImports.LightModelParameter,System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glLightModeli(VectorDraw.Render.OpenGL.OpenGLImports.LightModelParameter,System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glLightModeliv(VectorDraw.Render.OpenGL.OpenGLImports.LightModelParameter,System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glLightf(VectorDraw.Render.OpenGL.OpenGLImports.LightName,VectorDraw.Render.OpenGL.OpenGLImports.LightSourceParameter,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glLightfv(VectorDraw.Render.OpenGL.OpenGLImports.LightName,VectorDraw.Render.OpenGL.OpenGLImports.LightParameter,System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glLineStipple(System.Int32,System.UInt16)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glLineWidth(System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glLoadIdentity">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glLoadMatrixd(System.Double[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glMaterialfv(VectorDraw.Render.OpenGL.OpenGLImports.FaceMode,VectorDraw.Render.OpenGL.OpenGLImports.MaterialParameter,System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glMaterialiv(VectorDraw.Render.OpenGL.OpenGLImports.FaceMode,VectorDraw.Render.OpenGL.OpenGLImports.MaterialParameter,System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glMatrixMode(VectorDraw.Render.OpenGL.OpenGLImports.MatrixMode)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glMultMatrixd(System.Double[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glMultMatrixf(System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glNewList(System.UInt32,VectorDraw.Render.OpenGL.OpenGLImports.ListMode)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glNormal3d(System.Double,System.Double,System.Double)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glOrtho(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glPixelStorei(VectorDraw.Render.OpenGL.OpenGLImports.PixelStore,System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glPixelTransferi(VectorDraw.Render.OpenGL.OpenGLImports.PixelTransfer,System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glPolygonMode(VectorDraw.Render.OpenGL.OpenGLImports.FaceMode,VectorDraw.Render.OpenGL.OpenGLImports.PolygonMode)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glPolygonOffset(System.Single,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glPolygonStipple(System.Byte[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glPopAttrib">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glPopClientAttrib">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glPopMatrix">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glPushAttrib(VectorDraw.Render.OpenGL.OpenGLImports.AttribMask)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glPushMatrix">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRasterPos4d(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glReadBuffer(VectorDraw.Render.OpenGL.OpenGLImports.ColorBuffers)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glReadPixels(System.Int32,System.Int32,System.Int32,System.Int32,VectorDraw.Render.OpenGL.OpenGLImports.PixelFormat,VectorDraw.Render.OpenGL.OpenGLImports.PixelType,System.IntPtr)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glReadPixelsFloat(System.Int32,System.Int32,System.Int32,System.Int32,VectorDraw.Render.OpenGL.OpenGLImports.PixelFormat,VectorDraw.Render.OpenGL.OpenGLImports.PixelType,System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glReadPixelsUInt(System.Int32,System.Int32,System.Int32,System.Int32,VectorDraw.Render.OpenGL.OpenGLImports.PixelFormat,VectorDraw.Render.OpenGL.OpenGLImports.PixelType,System.UInt32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glReadPixelDepth(System.Int32,System.Int32)">
            <summary>
            Returns the depth value  at specified pixel position
            </summary>
            <param name="x">X coordinate in pixels</param>
            <param name="y">Y coordinate in pixels</param>
            <returns>The depth value  at specified pixel position</returns>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glDrawPixels(System.Int32,System.Int32,VectorDraw.Render.OpenGL.OpenGLImports.PixelFormat,VectorDraw.Render.OpenGL.OpenGLImports.PixelType,System.IntPtr)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRenderMode(VectorDraw.Render.OpenGL.OpenGLImports.RenderingMode)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRotated(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRotatef(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glScaled(System.Double,System.Double,System.Double)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glShadeModel(VectorDraw.Render.OpenGL.OpenGLImports.ShadingModel)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord2d(System.Double,System.Double)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexGendv(VectorDraw.Render.OpenGL.OpenGLImports.TextureCoordName,VectorDraw.Render.OpenGL.OpenGLImports.TextureGenParameter,System.Double[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexGeni(VectorDraw.Render.OpenGL.OpenGLImports.TextureCoordName,VectorDraw.Render.OpenGL.OpenGLImports.TextureGenParameter,VectorDraw.Render.OpenGL.OpenGLImports.TextureGenMode)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexImage2D(VectorDraw.Render.OpenGL.OpenGLImports.TargetTexture,System.Int32,VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats,System.Int32,System.Int32,System.Int32,VectorDraw.Render.OpenGL.OpenGLImports.TexturePixelFormat,VectorDraw.Render.OpenGL.OpenGLImports.PixelType,System.IntPtr)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexParameteri(VectorDraw.Render.OpenGL.OpenGLImports.TargetTexture,VectorDraw.Render.OpenGL.OpenGLImports.TextureParameterName,VectorDraw.Render.OpenGL.OpenGLImports.TextureFilters)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTranslated(System.Double,System.Double,System.Double)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glVertex3d(System.Double,System.Double,System.Double)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glViewport(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glEdgeFlagv(System.Byte[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.gluLookAt(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.gluPickMatrix(System.Double,System.Double,System.Double,System.Double,System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.wglUseFontBitmaps(System.IntPtr,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.wglSwapBuffers(System.IntPtr)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.wglSwapLayerBuffers(System.IntPtr,VectorDraw.Render.OpenGL.OpenGLImports.mainplanes)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.wglGetCurrentContext">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.wglGetCurrentDC">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glAccum(VectorDraw.Render.OpenGL.OpenGLImports.AccumOp,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glAreTexturesResident(System.Int32,System.UInt32[],System.Byte[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glArrayElement(System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glBitmap(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.IntPtr)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glClearAccum(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glClearIndex(System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glClearStencil(System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColor3b(System.Byte,System.Byte,System.Byte)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColor3bv(System.SByte[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColor3d(System.Double,System.Double,System.Double)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColor3dv(System.Double[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColor3f(System.Single,System.Single,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColor3fv(System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColor3i(System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColor3iv(System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColor3s(System.Int16,System.Int16,System.Int16)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColor3sv(System.Int16[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColor3ub(System.Byte,System.Byte,System.Byte)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColor3ubv(System.Byte[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColor3ui(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColor3uiv(System.UInt32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColor3us(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColor3usv(System.UInt16[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColor4b(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColor4bv(System.SByte[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColor4dv(System.Double[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColor4f(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColor4fv(System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.lgColor4i(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColor4iv(System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColor4s(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColor4sv(System.Int16[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColor4ui(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColor4uiv(System.UInt32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColor4us(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColor4usv(System.UInt16[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glCopyPixels(System.Int32,System.Int32,System.Int32,System.Int32,VectorDraw.Render.OpenGL.OpenGLImports.PixelCopyType)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glCopyTexImage1D(VectorDraw.Render.OpenGL.OpenGLImports.TargetTexture,System.Int32,VectorDraw.Render.OpenGL.OpenGLImports.PixelFormat,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glCopyTexImage2D(VectorDraw.Render.OpenGL.OpenGLImports.TargetTexture,System.Int32,VectorDraw.Render.OpenGL.OpenGLImports.PixelFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glCopyTexSubImage1D(VectorDraw.Render.OpenGL.OpenGLImports.TargetTexture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glCopyTexSubImage2D(VectorDraw.Render.OpenGL.OpenGLImports.TargetTexture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glCullFace(VectorDraw.Render.OpenGL.OpenGLImports.FaceMode)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glEvalCoord1d(System.Double)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glEvalCoord1dv(System.Double[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glEvalCoord1f(System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glEvalCoord1fv(System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glEvalCoord2d(System.Double,System.Double)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glEvalCoord2dv(System.Double[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glEvalCoord2f(System.Single,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glEvalCoord2fv(System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glEvalMesh1(VectorDraw.Render.OpenGL.OpenGLImports.PolygonMode,System.Int32,System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glEvalMesh2(VectorDraw.Render.OpenGL.OpenGLImports.PolygonMode,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glEvalPoint1(System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glEvalPoint2(System.Int32,System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glFeedbackBuffer(System.Int32,VectorDraw.Render.OpenGL.OpenGLImports.FeedBackMode,System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glFogf(VectorDraw.Render.OpenGL.OpenGLImports.FogParameter,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glFogfv(VectorDraw.Render.OpenGL.OpenGLImports.FogParameter,System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glFogi(VectorDraw.Render.OpenGL.OpenGLImports.FogParameter,System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glFogiv(VectorDraw.Render.OpenGL.OpenGLImports.FogParameter,System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glFrustum(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glGetClipPlane(VectorDraw.Render.OpenGL.OpenGLImports.ClipPlaneName,System.Double[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glGetFloatv(VectorDraw.Render.OpenGL.OpenGLImports.Parameters,System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glGetLightfv(VectorDraw.Render.OpenGL.OpenGLImports.LightName,VectorDraw.Render.OpenGL.OpenGLImports.LightParameter,System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glGetLightiv(VectorDraw.Render.OpenGL.OpenGLImports.LightName,VectorDraw.Render.OpenGL.OpenGLImports.LightParameter,System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glGetMapdv(VectorDraw.Render.OpenGL.OpenGLImports.MapTarget,VectorDraw.Render.OpenGL.OpenGLImports.GetMapTarget,System.Double[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glGetMapfv(VectorDraw.Render.OpenGL.OpenGLImports.MapTarget,VectorDraw.Render.OpenGL.OpenGLImports.GetMapTarget,System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glGetMapiv(VectorDraw.Render.OpenGL.OpenGLImports.MapTarget,VectorDraw.Render.OpenGL.OpenGLImports.GetMapTarget,System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glGetMaterialfv(VectorDraw.Render.OpenGL.OpenGLImports.FaceMode,VectorDraw.Render.OpenGL.OpenGLImports.MaterialParameter,System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glGetMaterialiv(VectorDraw.Render.OpenGL.OpenGLImports.FaceMode,VectorDraw.Render.OpenGL.OpenGLImports.MaterialParameter,System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glGetPixelMapfv(VectorDraw.Render.OpenGL.OpenGLImports.PixelMap,System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glGetPixelMapuiv(VectorDraw.Render.OpenGL.OpenGLImports.PixelMap,System.UInt32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glGetPixelMapusv(VectorDraw.Render.OpenGL.OpenGLImports.PixelMap,System.UInt16[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glGetPolygonStipple(System.Byte[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glGetTexEnvfv(VectorDraw.Render.OpenGL.OpenGLImports.TextureEnvTarget,VectorDraw.Render.OpenGL.OpenGLImports.TextureEnvParameter,System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glGetTexEnviv(VectorDraw.Render.OpenGL.OpenGLImports.TextureEnvTarget,VectorDraw.Render.OpenGL.OpenGLImports.TextureEnvParameter,System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glGetTexGendv(VectorDraw.Render.OpenGL.OpenGLImports.TextureCoordName,VectorDraw.Render.OpenGL.OpenGLImports.TextureGenParameter,System.Double[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glGetTexGenfv(VectorDraw.Render.OpenGL.OpenGLImports.TextureCoordName,VectorDraw.Render.OpenGL.OpenGLImports.TextureGenParameter,System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glGetTexGeniv(VectorDraw.Render.OpenGL.OpenGLImports.TextureCoordName,VectorDraw.Render.OpenGL.OpenGLImports.TextureGenParameter,System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glGetTexLevelParameterfv(VectorDraw.Render.OpenGL.OpenGLImports.TextureTarget,System.Int32,VectorDraw.Render.OpenGL.OpenGLImports.TextureParameter,System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glGetTexLevelParameteriv(VectorDraw.Render.OpenGL.OpenGLImports.TextureTarget,System.Int32,VectorDraw.Render.OpenGL.OpenGLImports.TextureParameter,System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glGetTexParameterfv(VectorDraw.Render.OpenGL.OpenGLImports.TargetTexture,VectorDraw.Render.OpenGL.OpenGLImports.TextureParameterName,System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glGetTexParameteriv(VectorDraw.Render.OpenGL.OpenGLImports.TargetTexture,VectorDraw.Render.OpenGL.OpenGLImports.TextureParameterName,System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glIndexMask(System.UInt32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glIndexd(System.Double)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glIndexdv(System.Double[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glIndexf(System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glIndexfv(System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glIndexi(System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glIndexiv(System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glIndexs(System.Int16)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glIndexsv(System.Int16[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glIndexub(System.Byte)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glIndexubv(System.Byte[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glInitNames">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glLightModelf(VectorDraw.Render.OpenGL.OpenGLImports.LightModelParameter,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glLighti(VectorDraw.Render.OpenGL.OpenGLImports.LightName,VectorDraw.Render.OpenGL.OpenGLImports.LightSourceParameter,System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glLightiv(VectorDraw.Render.OpenGL.OpenGLImports.LightName,VectorDraw.Render.OpenGL.OpenGLImports.LightSourceParameter,System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glListBase(System.UInt32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glLoadName(System.UInt32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glMaterialf(VectorDraw.Render.OpenGL.OpenGLImports.FaceMode,VectorDraw.Render.OpenGL.OpenGLImports.MaterialParameter,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glLogicOp(VectorDraw.Render.OpenGL.OpenGLImports.LogicOp)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glMap1d(VectorDraw.Render.OpenGL.OpenGLImports.MapTarget,System.Double,System.Double,System.Int32,System.Int32,System.Double[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glMap1f(VectorDraw.Render.OpenGL.OpenGLImports.MapTarget,System.Single,System.Single,System.Int32,System.Int32,System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glMap2d(VectorDraw.Render.OpenGL.OpenGLImports.MapTarget,System.Double,System.Double,System.Int32,System.Int32,System.Double[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glMap2f(VectorDraw.Render.OpenGL.OpenGLImports.MapTarget,System.Single,System.Single,System.Int32,System.Int32,System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glMapGrid1d(System.Int32,System.Double,System.Double)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glMapGrid1f(System.Int32,System.Single,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glMapGrid2d(System.Int32,System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glMapGrid2f(System.Int32,System.Single,System.Single,System.Int32,System.Single,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glMateriali(VectorDraw.Render.OpenGL.OpenGLImports.FaceMode,VectorDraw.Render.OpenGL.OpenGLImports.MaterialParameter,System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glNormal3b(System.Byte,System.Byte,System.Byte)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glNormal3bv(System.Byte[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glNormal3dv(System.Double[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glNormal3f(System.Single,System.Single,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glNormal3fv(System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glNormal3i(System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glNormal3iv(System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glNormal3s(System.Int16,System.Int16,System.Int16)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glNormal3sv(System.Int16[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glPassThrough(VectorDraw.Render.OpenGL.OpenGLImports.FeedBackToken)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glPixelMapfv(VectorDraw.Render.OpenGL.OpenGLImports.PixelMap,System.Int32,System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glPixelMapuiv(VectorDraw.Render.OpenGL.OpenGLImports.PixelMap,System.Int32,System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glPixelMapusv(VectorDraw.Render.OpenGL.OpenGLImports.PixelMap,System.Int32,System.Int16[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glPixelStoref(VectorDraw.Render.OpenGL.OpenGLImports.PixelStore,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glPixelTransferf(VectorDraw.Render.OpenGL.OpenGLImports.PixelTransfer,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glLoadMatrixf(System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glPixelZoom(System.Single,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glPointSize(System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glPopName">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glPrioritizeTextures(System.Int32,System.UInt32[],System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glPushClientAttrib(System.UInt32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glPushName(System.UInt32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRasterPos2d(System.Double,System.Double)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRasterPos2dv(System.Double[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRasterPos2f(System.Single,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRasterPos2fv(System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRasterPos2i(System.Int32,System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRasterPos2iv(System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRasterPos2s(System.Int16,System.Int16)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRasterPos2sv(System.Int16[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRasterPos3d(System.Double,System.Double,System.Double)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRasterPos3dv(System.Double[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRasterPos3f(System.Single,System.Single,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRasterPos3fv(System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRasterPos3i(System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRasterPos3iv(System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRasterPos3s(System.Int16,System.Int16,System.Int16)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRasterPos3sv(System.Int16[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRasterPos4dv(System.Double[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRasterPos4f(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRasterPos4fv(System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRasterPos4i(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRasterPos4iv(System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRasterPos4s(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRasterPos4sv(System.Int16[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRectd(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRectdv(System.Double[],System.Double[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRectf(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRectfv(System.Single[],System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRecti(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRectiv(System.Int32[],System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRects(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glRectsv(System.Int16[],System.Int16[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glScalef(System.Single,System.Single,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glScissor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glSelectBuffer(System.Int32,System.UInt32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glStencilFunc(VectorDraw.Render.OpenGL.OpenGLImports.ComparisonFunction,System.Int32,System.UInt32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glStencilMask(System.UInt32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glStencilOp(VectorDraw.Render.OpenGL.OpenGLImports.StencilOp,VectorDraw.Render.OpenGL.OpenGLImports.StencilOp,VectorDraw.Render.OpenGL.OpenGLImports.StencilOp)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord1d(System.Double)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord1dv(System.Double[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord1f(System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord1fv(System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord1i(System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord1iv(System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord1s(System.Int16)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord1sv(System.Int16[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord2dv(System.Double[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord2f(System.Single,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord2fv(System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord2i(System.Int32,System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord2iv(System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord2s(System.Int16,System.Int16)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord2sv(System.Int16[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord3d(System.Double,System.Double,System.Double)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord3dv(System.Double[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord3f(System.Single,System.Single,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord3fv(System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord3i(System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord3iv(System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord3s(System.Int16,System.Int16,System.Int16)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord3sv(System.Int16[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord4d(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord4dv(System.Double[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord4f(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord4fv(System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord4i(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord4iv(System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord4s(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoord4sv(System.Int16[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexEnvf(VectorDraw.Render.OpenGL.OpenGLImports.TextureEnvTarget,VectorDraw.Render.OpenGL.OpenGLImports.TextureEnvParameter,VectorDraw.Render.OpenGL.OpenGLImports.TextureEnvMode)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexEnvfv(VectorDraw.Render.OpenGL.OpenGLImports.TextureEnvTarget,VectorDraw.Render.OpenGL.OpenGLImports.TextureEnvParameter,System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexEnvi(VectorDraw.Render.OpenGL.OpenGLImports.TextureEnvTarget,VectorDraw.Render.OpenGL.OpenGLImports.TextureEnvParameter,VectorDraw.Render.OpenGL.OpenGLImports.TextureEnvMode)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexEnviv(VectorDraw.Render.OpenGL.OpenGLImports.TextureEnvTarget,VectorDraw.Render.OpenGL.OpenGLImports.TextureEnvParameter,System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexGend(VectorDraw.Render.OpenGL.OpenGLImports.TextureCoordName,VectorDraw.Render.OpenGL.OpenGLImports.TextureGenParameter,VectorDraw.Render.OpenGL.OpenGLImports.TextureGenMode)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexGenf(VectorDraw.Render.OpenGL.OpenGLImports.TextureCoordName,VectorDraw.Render.OpenGL.OpenGLImports.TextureGenParameter,VectorDraw.Render.OpenGL.OpenGLImports.TextureGenMode)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexGenfv(VectorDraw.Render.OpenGL.OpenGLImports.TextureCoordName,VectorDraw.Render.OpenGL.OpenGLImports.TextureGenParameter,System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexGeniv(VectorDraw.Render.OpenGL.OpenGLImports.TextureCoordName,VectorDraw.Render.OpenGL.OpenGLImports.TextureGenParameter,System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexImage1D(VectorDraw.Render.OpenGL.OpenGLImports.TargetTexture,System.Int32,VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats,System.Int32,System.Int32,VectorDraw.Render.OpenGL.OpenGLImports.TexturePixelFormat,VectorDraw.Render.OpenGL.OpenGLImports.PixelType,System.IntPtr)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexParameterf(VectorDraw.Render.OpenGL.OpenGLImports.TargetTexture,VectorDraw.Render.OpenGL.OpenGLImports.TextureParameterName,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexParameterfv(VectorDraw.Render.OpenGL.OpenGLImports.TargetTexture,VectorDraw.Render.OpenGL.OpenGLImports.TextureParameterName,System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexParameteriv(VectorDraw.Render.OpenGL.OpenGLImports.TargetTexture,VectorDraw.Render.OpenGL.OpenGLImports.TextureParameterName,System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexSubImage1D(VectorDraw.Render.OpenGL.OpenGLImports.TargetTexture,System.Int32,System.Int32,System.Int32,VectorDraw.Render.OpenGL.OpenGLImports.TexturePixelFormat,VectorDraw.Render.OpenGL.OpenGLImports.PixelType,System.IntPtr)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexSubImage2D(VectorDraw.Render.OpenGL.OpenGLImports.TargetTexture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,VectorDraw.Render.OpenGL.OpenGLImports.TexturePixelFormat,VectorDraw.Render.OpenGL.OpenGLImports.PixelType,System.IntPtr)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTranslatef(System.Single,System.Single,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glVertex2d(System.Double,System.Double)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glVertex2dv(System.Double[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glVertex2f(System.Single,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glVertex2fv(System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glVertex2i(System.Int32,System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glVertex2iv(System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glVertex2s(System.Int16,System.Int16)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glVertex2sv(System.Int16[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glVertex3dv(System.Double[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glVertex3f(System.Single,System.Single,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glVertex3fv(System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glVertex3i(System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glVertex3iv(System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glVertex3s(System.Int16,System.Int16,System.Int16)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glVertex3sv(System.Int16[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glVertex4d(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glVertex4dv(System.Double[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glVertex4f(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glVertex4fv(System.Single[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glVertex4i(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glVertex4iv(System.Int32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glVertex4s(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glVertex4sv(System.Int16[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glVertexPointer(System.Int32,VectorDraw.Render.OpenGL.OpenGLImports.PixelType,System.Int32,System.IntPtr)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glNormalPointer(VectorDraw.Render.OpenGL.OpenGLImports.PixelType,System.Int32,System.IntPtr)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glColorPointer(System.Int32,VectorDraw.Render.OpenGL.OpenGLImports.PixelType,System.Int32,System.IntPtr)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glTexCoordPointer(System.Int32,VectorDraw.Render.OpenGL.OpenGLImports.TexCoordPointerType,System.Int32,System.IntPtr)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glEdgeFlagPointer(System.Int32,System.Byte*)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glDisableClientState(VectorDraw.Render.OpenGL.OpenGLImports.Arrays)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glDrawArrays(VectorDraw.Render.OpenGL.OpenGLImports.Primitives,System.Int32,System.Int32)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glEnableClientState(VectorDraw.Render.OpenGL.OpenGLImports.Arrays)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.glDrawElements(VectorDraw.Render.OpenGL.OpenGLImports.Primitives,System.Int32,VectorDraw.Render.OpenGL.OpenGLImports.PixelType,System.UInt32[])">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.LightName">
            <summary>
            Light constant values used by opengl context.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LightName.GL_LIGHT0">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LightName.GL_LIGHT1">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LightName.GL_LIGHT2">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LightName.GL_LIGHT3">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LightName.GL_LIGHT4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LightName.GL_LIGHT5">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LightName.GL_LIGHT6">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LightName.GL_LIGHT7">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LightName.GL_MAX_LIGHT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LightName.GL_MIN_LIGHT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.Primitives">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Primitives.GL_POINTS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Primitives.GL_LINES">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Primitives.GL_LINE_LOOP">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Primitives.GL_LINE_STRIP">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Primitives.GL_TRIANGLES">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Primitives.GL_TRIANGLE_STRIP">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Primitives.GL_TRIANGLE_FAN">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Primitives.GL_QUADS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Primitives.GL_QUAD_STRIP">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Primitives.GL_POLYGON">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.BlendingFactorSrc">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.BlendingFactorSrc.GL_ZERO">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.BlendingFactorSrc.GL_ONE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.BlendingFactorSrc.GL_DST_COLOR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.BlendingFactorSrc.GL_ONE_MINUS_DST_COLOR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.BlendingFactorSrc.GL_SRC_ALPHA_SATURATE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.BlendingFactorSrc.GL_SRC_ALPHA">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.BlendingFactorSrc.GL_ONE_MINUS_SRC_ALPHA">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.BlendingFactorSrc.GL_DST_ALPHA">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.BlendingFactorSrc.GL_ONE_MINUS_DST_ALPHA">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.AttribMask">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.AttribMask.GL_NONE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.AttribMask.GL_CURRENT_BIT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.AttribMask.GL_POINT_BIT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.AttribMask.GL_LINE_BIT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.AttribMask.GL_POLYGON_BIT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.AttribMask.GL_POLYGON_STIPPLE_BIT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.AttribMask.GL_PIXEL_MODE_BIT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.AttribMask.GL_LIGHTING_BIT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.AttribMask.GL_FOG_BIT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.AttribMask.GL_DEPTH_BUFFER_BIT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.AttribMask.GL_ACCUM_BUFFER_BIT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.AttribMask.GL_STENCIL_BUFFER_BIT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.AttribMask.GL_VIEWPORT_BIT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.AttribMask.GL_TRANSFORM_BIT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.AttribMask.GL_ENABLE_BIT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.AttribMask.GL_COLOR_BUFFER_BIT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.AttribMask.GL_HINT_BIT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.AttribMask.GL_EVAL_BIT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.AttribMask.GL_LIST_BIT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.AttribMask.GL_TEXTURE_BIT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.AttribMask.GL_SCISSOR_BIT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.AttribMask.GL_ALL_ATTRIB_BITS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.BlendingFactorDest">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.BlendingFactorDest.GL_ZERO">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.BlendingFactorDest.GL_ONE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.BlendingFactorDest.GL_SRC_COLOR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.BlendingFactorDest.GL_ONE_MINUS_SRC_COLOR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.BlendingFactorDest.GL_SRC_ALPHA">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.BlendingFactorDest.GL_ONE_MINUS_SRC_ALPHA">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.BlendingFactorDest.GL_DST_ALPHA">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.BlendingFactorDest.GL_ONE_MINUS_DST_ALPHA">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.ClearMask">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ClearMask.GL_COLOR_BUFFER_BIT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ClearMask.GL_DEPTH_BUFFER_BIT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ClearMask.GL_ACCUM_BUFFER_BIT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ClearMask.GL_STENCIL_BUFFER_BIT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.ClipPlaneName">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ClipPlaneName.GL_CLIP_PLANE0">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ClipPlaneName.GL_CLIP_PLANE1">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ClipPlaneName.GL_CLIP_PLANE2">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ClipPlaneName.GL_CLIP_PLANE3">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ClipPlaneName.GL_CLIP_PLANE4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ClipPlaneName.GL_CLIP_PLANE5">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ClipPlaneName.GL_MAX_CLIP_PLANES">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.FaceMode">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.FaceMode.GL_FRONT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.FaceMode.GL_BACK">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.FaceMode.GL_FRONT_AND_BACK">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.ColorMaterialParameter">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ColorMaterialParameter.GL_EMISSION">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ColorMaterialParameter.GL_AMBIENT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ColorMaterialParameter.GL_DIFFUSE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ColorMaterialParameter.GL_SPECULAR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ColorMaterialParameter.GL_AMBIENT_AND_DIFFUSE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.TargetTexture">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TargetTexture.GL_TEXTURE_1D">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TargetTexture.GL_TEXTURE_2D">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_1">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_2">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_3">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_ALPHA">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_RGB">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_RGBA">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_LUMINANCE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_LUMINANCE_ALPHA">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_ALPHA4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_ALPHA8">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_ALPHA12">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_ALPHA16">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_LUMINANCE4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_LUMINANCE8">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_LUMINANCE12">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_LUMINANCE16">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_LUMINANCE4_ALPHA4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_LUMINANCE6_ALPHA2">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_LUMINANCE8_ALPHA8">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_LUMINANCE12_ALPHA4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_LUMINANCE12_ALPHA12">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_LUMINANCE16_ALPHA16">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_INTENSITY">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_INTENSITY4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_INTENSITY8">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_INTENSITY12">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_INTENSITY16">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_R3_G3_B2">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_RGB4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_RGB5">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_RGB8">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_RGB10">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_RGB12">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_RGB16">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_RGBA2">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_RGBA4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_RGB5_A1">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_RGBA8">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_RGB10_A2">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_RGBA12">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_RGBA16">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_COLOR_INDEX">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_STENCIL_INDEX">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormats.GL_DEPTH_COMPONENT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.ComparisonFunction">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ComparisonFunction.GL_NEVER">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ComparisonFunction.GL_LESS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ComparisonFunction.GL_EQUAL">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ComparisonFunction.GL_LEQUAL">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ComparisonFunction.GL_GREATER">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ComparisonFunction.GL_NOTEQUAL">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ComparisonFunction.GL_GEQUAL">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ComparisonFunction.GL_ALWAYS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.GLCap">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_FOG">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_LIGHTING">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_TEXTURE_1D">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_TEXTURE_2D">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_LINE_STIPPLE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_POLYGON_STIPPLE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_CULL_FACE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_ALPHA_TEST">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_BLEND">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_INDEX_LOGIC_OP">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_COLOR_LOGIC_OP">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_DITHER">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_STENCIL_TEST">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_DEPTH_TEST">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_CLIP_PLANE0">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_CLIP_PLANE1">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_CLIP_PLANE2">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_CLIP_PLANE3">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_CLIP_PLANE4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_CLIP_PLANE5">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_LIGHT0">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_LIGHT1">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_LIGHT2">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_LIGHT3">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_LIGHT4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_LIGHT5">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_LIGHT6">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_LIGHT7">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_TEXTURE_GEN_S">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_TEXTURE_GEN_T">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_TEXTURE_GEN_R">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_TEXTURE_GEN_Q">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_MAP1_VERTEX_3">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_MAP1_VERTEX_4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_MAP2_COLOR_4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_MAP2_INDEX">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_MAP2_NORMAL">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_MAP2_TEXTURE_COORD_1">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_MAP2_TEXTURE_COORD_2">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_MAP2_TEXTURE_COORD_3">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_MAP2_TEXTURE_COORD_4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_MAP2_VERTEX_3">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_MAP2_VERTEX_4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_MAP1_COLOR_4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_MAP1_INDEX">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_MAP1_NORMAL">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_MAP1_TEXTURE_COORD_1">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_MAP1_TEXTURE_COORD_2">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_MAP1_TEXTURE_COORD_3">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_MAP1_TEXTURE_COORD_4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_POINT_SMOOTH">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_LINE_SMOOTH">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_POLYGON_SMOOTH">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_SCISSOR_TEST">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_COLOR_MATERIAL">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_NORMALIZE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_AUTO_NORMAL">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_VERTEX_ARRAY">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_NORMAL_ARRAY">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_COLOR_ARRAY">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_INDEX_ARRAY">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_TEXTURE_COORD_ARRAY">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_EDGE_FLAG_ARRAY">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_POLYGON_OFFSET_POINT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_POLYGON_OFFSET_LINE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_POLYGON_OFFSET_FILL">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLCap.GL_MULTISAMPLE_ARB">
            <summary>
            Antialiasing Extension
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.ColorBuffers">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ColorBuffers.GL_NONE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ColorBuffers.GL_FRONT_LEFT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ColorBuffers.GL_FRONT_RIGHT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ColorBuffers.GL_BACK_LEFT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ColorBuffers.GL_BACK_RIGHT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ColorBuffers.GL_FRONT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ColorBuffers.GL_BACK">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ColorBuffers.GL_LEFT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ColorBuffers.GL_RIGHT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ColorBuffers.GL_FRONT_AND_BACK">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ColorBuffers.GL_AUX0">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ColorBuffers.GL_AUX1">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ColorBuffers.GL_AUX2">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ColorBuffers.GL_AUX3">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.PolygonMode">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PolygonMode.GL_POINT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PolygonMode.GL_LINE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PolygonMode.GL_FILL">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.FrontFaceDirection">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.FrontFaceDirection.GL_CW">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.FrontFaceDirection.GL_CCW">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.Parameters">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_CURRENT_COLOR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_CURRENT_INDEX">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_CURRENT_NORMAL">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_CURRENT_TEXTURE_COORDS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_CURRENT_RASTER_COLOR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_CURRENT_RASTER_INDEX">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_CURRENT_RASTER_TEXTURE_COORDS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_CURRENT_RASTER_POSITION">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_CURRENT_RASTER_POSITION_VALID">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_CURRENT_RASTER_DISTANCE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_POINT_SMOOTH">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_POINT_SIZE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_POINT_SIZE_RANGE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_POINT_SIZE_GRANULARITY">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_LINE_SMOOTH">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_LINE_WIDTH">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_LINE_WIDTH_RANGE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_LINE_WIDTH_GRANULARITY">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_LINE_STIPPLE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_LINE_STIPPLE_PATTERN">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_LINE_STIPPLE_REPEAT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_LIST_MODE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAX_LIST_NESTING">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_LIST_BASE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_LIST_INDEX">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_POLYGON_MODE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_POLYGON_SMOOTH">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_POLYGON_STIPPLE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_EDGE_FLAG">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_CULL_FACE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_CULL_FACE_MODE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_FRONT_FACE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_LIGHTING">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_LIGHT_MODEL_LOCAL_VIEWER">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_LIGHT_MODEL_TWO_SIDE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_LIGHT_MODEL_AMBIENT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_SHADE_MODEL">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_COLOR_MATERIAL_FACE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_COLOR_MATERIAL_PARAMETER">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_COLOR_MATERIAL">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_FOG">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_FOG_INDEX">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_FOG_DENSITY">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_FOG_START">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_FOG_END">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_FOG_MODE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_FOG_COLOR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_DEPTH_RANGE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_DEPTH_TEST">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_DEPTH_WRITEMASK">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_DEPTH_CLEAR_VALUE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_DEPTH_FUNC">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_ACCUM_CLEAR_VALUE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_STENCIL_TEST">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_STENCIL_CLEAR_VALUE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_STENCIL_FUNC">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_STENCIL_VALUE_MASK">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_STENCIL_FAIL">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_STENCIL_PASS_DEPTH_FAIL">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_STENCIL_PASS_DEPTH_PASS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_STENCIL_REF">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_STENCIL_WRITEMASK">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MATRIX_MODE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_NORMALIZE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_VIEWPORT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MODELVIEW_STACK_DEPTH">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_PROJECTION_STACK_DEPTH">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_TEXTURE_STACK_DEPTH">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MODELVIEW_MATRIX">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_PROJECTION_MATRIX">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_TEXTURE_MATRIX">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_ATTRIB_STACK_DEPTH">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_CLIENT_ATTRIB_STACK_DEPTH">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_ALPHA_TEST">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_ALPHA_TEST_FUNC">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_ALPHA_TEST_REF">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_DITHER">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_BLEND_DST">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_BLEND_SRC">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_BLEND">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_LOGIC_OP_MODE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_INDEX_LOGIC_OP">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_COLOR_LOGIC_OP">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_AUX_BUFFERS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_DRAW_BUFFER">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_READ_BUFFER">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_SCISSOR_BOX">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_SCISSOR_TEST">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_INDEX_CLEAR_VALUE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_INDEX_WRITEMASK">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_COLOR_CLEAR_VALUE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_COLOR_WRITEMASK">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_INDEX_MODE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_RGBA_MODE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_DOUBLEBUFFER">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_STEREO">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_RENDER_MODE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_PERSPECTIVE_CORRECTION_HINT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_POINT_SMOOTH_HINT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_LINE_SMOOTH_HINT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_POLYGON_SMOOTH_HINT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_FOG_HINT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_TEXTURE_GEN_S">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_TEXTURE_GEN_T">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_TEXTURE_GEN_R">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_TEXTURE_GEN_Q">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_PIXEL_MAP_I_TO_I">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_PIXEL_MAP_S_TO_S">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_PIXEL_MAP_I_TO_R">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_PIXEL_MAP_I_TO_G">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_PIXEL_MAP_I_TO_B">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_PIXEL_MAP_I_TO_A">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_PIXEL_MAP_R_TO_R">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_PIXEL_MAP_G_TO_G">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_PIXEL_MAP_B_TO_B">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_PIXEL_MAP_A_TO_A">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_PIXEL_MAP_I_TO_I_SIZE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_PIXEL_MAP_S_TO_S_SIZE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_PIXEL_MAP_I_TO_R_SIZE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_PIXEL_MAP_I_TO_G_SIZE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_PIXEL_MAP_I_TO_B_SIZE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_PIXEL_MAP_I_TO_A_SIZE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_PIXEL_MAP_R_TO_R_SIZE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_PIXEL_MAP_G_TO_G_SIZE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_PIXEL_MAP_B_TO_B_SIZE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_PIXEL_MAP_A_TO_A_SIZE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_UNPACK_SWAP_BYTES">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_UNPACK_LSB_FIRST">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_UNPACK_ROW_LENGTH">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_UNPACK_SKIP_ROWS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_UNPACK_SKIP_PIXELS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_UNPACK_ALIGNMENT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_PACK_SWAP_BYTES">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_PACK_LSB_FIRST">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_PACK_ROW_LENGTH">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_PACK_SKIP_ROWS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_PACK_SKIP_PIXELS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_PACK_ALIGNMENT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAP_COLOR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAP_STENCIL">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_INDEX_SHIFT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_INDEX_OFFSET">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_RED_SCALE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_RED_BIAS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_ZOOM_X">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_ZOOM_Y">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_GREEN_SCALE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_GREEN_BIAS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_BLUE_SCALE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_BLUE_BIAS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_ALPHA_SCALE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_ALPHA_BIAS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_DEPTH_SCALE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_DEPTH_BIAS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAX_EVAL_ORDER">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAX_LIGHTS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAX_CLIP_PLANES">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAX_TEXTURE_SIZE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAX_PIXEL_MAP_TABLE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAX_ATTRIB_STACK_DEPTH">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAX_MODELVIEW_STACK_DEPTH">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAX_NAME_STACK_DEPTH">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAX_PROJECTION_STACK_DEPTH">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAX_TEXTURE_STACK_DEPTH">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAX_VIEWPORT_DIMS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAX_CLIENT_ATTRIB_STACK_DEPTH">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_SUBPIXEL_BITS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_INDEX_BITS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_RED_BITS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_GREEN_BITS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_BLUE_BITS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_ALPHA_BITS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_DEPTH_BITS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_STENCIL_BITS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_ACCUM_RED_BITS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_ACCUM_GREEN_BITS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_ACCUM_BLUE_BITS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_ACCUM_ALPHA_BITS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_NAME_STACK_DEPTH">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_AUTO_NORMAL">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAP1_COLOR_4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAP1_INDEX">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAP1_NORMAL">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAP1_TEXTURE_COORD_1">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAP1_TEXTURE_COORD_2">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAP1_TEXTURE_COORD_3">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAP1_TEXTURE_COORD_4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAP1_VERTEX_3">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAP1_VERTEX_4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAP2_COLOR_4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAP2_INDEX">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAP2_NORMAL">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAP2_TEXTURE_COORD_1">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAP2_TEXTURE_COORD_2">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAP2_TEXTURE_COORD_3">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAP2_TEXTURE_COORD_4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAP2_VERTEX_3">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAP2_VERTEX_4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAP1_GRID_DOMAIN">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAP1_GRID_SEGMENTS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAP2_GRID_DOMAIN">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_MAP2_GRID_SEGMENTS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_TEXTURE_1D">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_TEXTURE_2D">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_FEEDBACK_BUFFER_POINTER">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_FEEDBACK_BUFFER_SIZE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_FEEDBACK_BUFFER_TYPE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_SELECTION_BUFFER_POINTER">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_SELECTION_BUFFER_SIZE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_TEXTURE_BINDING_1D">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_TEXTURE_BINDING_2D">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_VERTEX_ARRAY">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_NORMAL_ARRAY">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_COLOR_ARRAY">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_INDEX_ARRAY">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_TEXTURE_COORD_ARRAY">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_EDGE_FLAG_ARRAY">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_VERTEX_ARRAY_SIZE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_VERTEX_ARRAY_TYPE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_VERTEX_ARRAY_STRIDE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_NORMAL_ARRAY_TYPE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_NORMAL_ARRAY_STRIDE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_COLOR_ARRAY_SIZE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_COLOR_ARRAY_TYPE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_COLOR_ARRAY_STRIDE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_INDEX_ARRAY_TYPE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_INDEX_ARRAY_STRIDE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_TEXTURE_COORD_ARRAY_SIZE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_TEXTURE_COORD_ARRAY_TYPE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_TEXTURE_COORD_ARRAY_STRIDE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>p
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_EDGE_FLAG_ARRAY_STRIDE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_POLYGON_OFFSET_FACTOR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Parameters.GL_POLYGON_OFFSET_UNITS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.ErrorCode">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ErrorCode.GL_NO_ERROR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ErrorCode.GL_INVALID_ENUM">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ErrorCode.GL_INVALID_VALUE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ErrorCode.GL_INVALID_OPERATION">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ErrorCode.GL_STACK_OVERFLOW">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ErrorCode.GL_STACK_UNDERFLOW">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ErrorCode.GL_OUT_OF_MEMORY">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.LightParameter">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LightParameter.GL_AMBIENT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LightParameter.GL_DIFFUSE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LightParameter.GL_SPECULAR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LightParameter.GL_POSITION">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LightParameter.GL_SPOT_DIRECTION">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LightParameter.GL_SPOT_EXPONENT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LightParameter.GL_SPOT_CUTOFF">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LightParameter.GL_CONSTANT_ATTENUATION">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LightParameter.GL_LINEAR_ATTENUATION">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LightParameter.GL_QUADRATIC_ATTENUATION">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.MaterialParameter">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.MaterialParameter.GL_EMISSION">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.MaterialParameter.GL_AMBIENT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.MaterialParameter.GL_DIFFUSE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.MaterialParameter.GL_SPECULAR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.MaterialParameter.GL_SHININESS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.MaterialParameter.GL_AMBIENT_AND_DIFFUSE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.MaterialParameter.GL_COLOR_INDEXES">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.TextureCoordName">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureCoordName.GL_S">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureCoordName.GL_T">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureCoordName.GL_R">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureCoordName.GL_Q">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.TextureGenParameter">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureGenParameter.GL_TEXTURE_GEN_MODE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureGenParameter.GL_OBJECT_PLANE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureGenParameter.GL_EYE_PLANE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.TextureParameterName">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureParameterName.GL_TEXTURE_MAG_FILTER">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureParameterName.GL_TEXTURE_MIN_FILTER">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureParameterName.GL_TEXTURE_WRAP_S">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureParameterName.GL_TEXTURE_WRAP_T">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureParameterName.GL_TEXTURE_BORDER_COLOR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureParameterName.GL_TEXTURE_PRIORITY">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureParameterName.GL_TEXTURE_RESIDENT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureParameterName.GL_TEXTURE_COMPARE_MODE_ARB">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureParameterName.GL_TEXTURE_COMPARE_FUNC_ARB">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureParameterName.GL_DEPTH_TEXTURE_MODE_ARB">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.HintTarget">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.HintTarget.GL_PERSPECTIVE_CORRECTION_HINT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.HintTarget.GL_POINT_SMOOTH_HINT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.HintTarget.GL_LINE_SMOOTH_HINT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.HintTarget.GL_POLYGON_SMOOTH_HINT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.HintTarget.GL_FOG_HINT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.HintMode">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.HintMode.GL_DONT_CARE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.HintMode.GL_FASTEST">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.HintMode.GL_NICEST">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.LightModelParameter">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LightModelParameter.GL_LIGHT_MODEL_LOCAL_VIEWER">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LightModelParameter.GL_LIGHT_MODEL_TWO_SIDE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LightModelParameter.GL_LIGHT_MODEL_AMBIENT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.LightSourceParameter">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LightSourceParameter.GL_SPOT_EXPONENT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LightSourceParameter.GL_SPOT_CUTOFF">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LightSourceParameter.GL_CONSTANT_ATTENUATION">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LightSourceParameter.GL_LINEAR_ATTENUATION">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LightSourceParameter.GL_QUADRATIC_ATTENUATION">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.MatrixMode">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.MatrixMode.GL_MODELVIEW">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.MatrixMode.GL_PROJECTION">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.MatrixMode.GL_TEXTURE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.ListMode">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ListMode.GL_COMPILE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ListMode.GL_COMPILE_AND_EXECUTE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.PixelStore">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelStore.GL_UNPACK_SWAP_BYTES">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelStore.GL_UNPACK_LSB_FIRST">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelStore.GL_UNPACK_ROW_LENGTH">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelStore.GL_UNPACK_SKIP_ROWS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelStore.GL_UNPACK_SKIP_PIXELS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelStore.GL_UNPACK_ALIGNMENT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelStore.GL_PACK_SWAP_BYTES">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelStore.GL_PACK_LSB_FIRST">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelStore.GL_PACK_ROW_LENGTH">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelStore.GL_PACK_SKIP_ROWS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelStore.GL_PACK_SKIP_PIXELS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelStore.GL_PACK_ALIGNMENT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.PixelTransfer">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelTransfer.GL_MAP_COLOR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelTransfer.GL_MAP_STENCIL">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelTransfer.GL_INDEX_SHIFT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelTransfer.GL_INDEX_OFFSET">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelTransfer.GL_RED_SCALE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelTransfer.GL_RED_BIAS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelTransfer.GL_GREEN_SCALE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelTransfer.GL_GREEN_BIAS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelTransfer.GL_BLUE_SCALE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelTransfer.GL_BLUE_BIAS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelTransfer.GL_ALPHA_SCALE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelTransfer.GL_ALPHA_BIAS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelTransfer.GL_DEPTH_SCALE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelTransfer.GL_DEPTH_BIAS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormat">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormat.GL_COLOR_INDEX">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormat.GL_STENCIL_INDEX">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormat.GL_DEPTH_COMPONENT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormat.GL_RED">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormat.GL_GREEN">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormat.GL_BLUE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormat.GL_ALPHA">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormat.GL_RGB">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormat.GL_RGBA">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormat.GL_LUMINANCE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormat.GL_LUMINANCE_ALPHA">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormat.GL_BGR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormat.GL_BGRA">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelFormat.GL_DEPTH_STENCIL">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.PixelType">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelType.GL_BITMAP">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelType.GL_BYTE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelType.GL_UNSIGNED_BYTE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelType.GL_SHORT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelType.GL_UNSIGNED_SHORT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelType.GL_INT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelType.GL_UNSIGNED_INT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelType.GL_FLOAT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelType.GL_DOUBLE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelType.GL_UNSIGNED_INT_24_8">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.RenderingMode">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.RenderingMode.GL_RENDER">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.RenderingMode.GL_FEEDBACK">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.RenderingMode.GL_SELECT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.ShadingModel">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ShadingModel.GL_FLAT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.ShadingModel.GL_SMOOTH">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.TextureGenMode">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureGenMode.GL_EYE_LINEAR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureGenMode.GL_OBJECT_LINEAR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureGenMode.GL_SPHERE_MAP">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.TexturePixelFormat">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TexturePixelFormat.GL_COLOR_INDEX">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TexturePixelFormat.GL_RED">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TexturePixelFormat.GL_GREEN">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TexturePixelFormat.GL_BLUE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TexturePixelFormat.GL_ALPHA">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TexturePixelFormat.GL_RGB">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TexturePixelFormat.GL_RGBA">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TexturePixelFormat.GL_LUMINANCE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TexturePixelFormat.GL_LUMINANCE_ALPHA">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TexturePixelFormat.GL_BGR_EXT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TexturePixelFormat.GL_BGRA_EXT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TexturePixelFormat.GL_STENCIL_INDEX">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TexturePixelFormat.GL_DEPTH_COMPONENT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.TextureFilters">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureFilters.GL_NEAREST">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureFilters.GL_LINEAR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureFilters.GL_NEAREST_MIPMAP_NEAREST">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureFilters.GL_LINEAR_MIPMAP_NEAREST">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureFilters.GL_NEAREST_MIPMAP_LINEAR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureFilters.GL_LINEAR_MIPMAP_LINEAR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureFilters.GL_CLAMP">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureFilters.GL_REPEAT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureFilters.GL_COMPARE_R_TO_TEXTURE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureFilters.GL_NEVER">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureFilters.GL_LESS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureFilters.GL_EQUAL">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureFilters.GL_LEQUAL">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureFilters.GL_GREATER">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureFilters.GL_NOTEQUAL">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureFilters.GL_GEQUAL">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureFilters.GL_ALWAYS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureFilters.GL_INTENSITY">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureFilters.GL_INTENSITY4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureFilters.GL_INTENSITY8">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureFilters.GL_INTENSITY12">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureFilters.GL_INTENSITY16">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.DescFlags">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.DescFlags.PFD_NONE">
            <summary>
            Empty value equals to zero(0).
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.DescFlags.PFD_DOUBLEBUFFER">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.DescFlags.PFD_STEREO">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.DescFlags.PFD_DRAW_TO_WINDOW">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.DescFlags.PFD_DRAW_TO_BITMAP">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.DescFlags.PFD_SUPPORT_GDI">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.DescFlags.PFD_SUPPORT_OPENGL">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.DescFlags.PFD_GENERIC_FORMAT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.DescFlags.PFD_NEED_PALETTE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.DescFlags.PFD_NEED_SYSTEM_PALETTE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.DescFlags.PFD_SWAP_EXCHANGE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.DescFlags.PFD_SWAP_COPY">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.DescFlags.PFD_SWAP_LAYER_BUFFERS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.DescFlags.PFD_GENERIC_ACCELERATED">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.DescFlags.PFD_SUPPORT_DIRECTDRAW">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.DescFlags.PFD_DIRECT3D_ACCELERATED">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.DescFlags.PFD_SUPPORT_COMPOSITION">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.WGLFontFormat">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.WGLFontFormat.WGL_FONT_LINES">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.WGLFontFormat.WGL_FONT_POLYGONS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.AccumOp">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.AccumOp.GL_ACCUM">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.AccumOp.GL_LOAD">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.AccumOp.GL_RETURN">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.AccumOp.GL_MULT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.AccumOp.GL_ADD">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.PixelCopyType">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelCopyType.GL_COLOR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelCopyType.GL_DEPTH">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelCopyType.GL_STENCIL">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.Arrays">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Arrays.GL_VERTEX_ARRAY">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Arrays.GL_NORMAL_ARRAY">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Arrays.GL_COLOR_ARRAY">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Arrays.GL_INDEX_ARRAY">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Arrays.GL_TEXTURE_COORD_ARRAY">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Arrays.GL_EDGE_FLAG_ARRAY">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.FeedBackMode">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.FeedBackMode.GL_2D">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.FeedBackMode.GL_3D">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.FeedBackMode.GL_3D_COLOR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.FeedBackMode.GL_3D_COLOR_TEXTURE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.FeedBackMode.GL_4D_COLOR_TEXTURE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.FogParameter">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.FogParameter.GL_FOG_COLOR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.FogParameter.GL_FOG_DENSITY">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.FogParameter.GL_FOG_END">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.FogParameter.GL_FOG_INDEX">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.FogParameter.GL_FOG_MODE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.FogParameter.GL_FOG_START">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.MapTarget">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.MapTarget.GL_MAP1_COLOR_4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.MapTarget.GL_MAP1_INDEX">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.MapTarget.GL_MAP1_NORMAL">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.MapTarget.GL_MAP1_TEXTURE_COORD_1">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.MapTarget.GL_MAP1_TEXTURE_COORD_2">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.MapTarget.GL_MAP1_TEXTURE_COORD_3">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.MapTarget.GL_MAP1_TEXTURE_COORD_4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.MapTarget.GL_MAP1_VERTEX_3">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.MapTarget.GL_MAP1_VERTEX_4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.MapTarget.GL_MAP2_COLOR_4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.MapTarget.GL_MAP2_INDEX">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.MapTarget.GL_MAP2_NORMAL">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.MapTarget.GL_MAP2_TEXTURE_COORD_1">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.MapTarget.GL_MAP2_TEXTURE_COORD_2">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.MapTarget.GL_MAP2_TEXTURE_COORD_3">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.MapTarget.GL_MAP2_TEXTURE_COORD_4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.MapTarget.GL_MAP2_VERTEX_3">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.MapTarget.GL_MAP2_VERTEX_4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.GetMapTarget">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GetMapTarget.GL_COEFF">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GetMapTarget.GL_ORDER">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GetMapTarget.GL_DOMAIN">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.PixelMap">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelMap.GL_PIXEL_MAP_I_TO_I">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelMap.GL_PIXEL_MAP_S_TO_S">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelMap.GL_PIXEL_MAP_I_TO_R">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelMap.GL_PIXEL_MAP_I_TO_G">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelMap.GL_PIXEL_MAP_I_TO_B">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelMap.GL_PIXEL_MAP_I_TO_A">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelMap.GL_PIXEL_MAP_R_TO_R">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelMap.GL_PIXEL_MAP_G_TO_G">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelMap.GL_PIXEL_MAP_B_TO_B">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PixelMap.GL_PIXEL_MAP_A_TO_A">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.Pointers">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Pointers.GL_VERTEX_ARRAY_POINTER">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Pointers.GL_NORMAL_ARRAY_POINTER">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Pointers.GL_COLOR_ARRAY_POINTER">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Pointers.GL_INDEX_ARRAY_POINTER">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Pointers.GL_TEXTURE_COORD_ARRAY_POINTER">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.Pointers.GL_EDGE_FLAG_ARRAY_POINTER">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.TextureEnvTarget">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureEnvTarget.GL_TEXTURE_ENV">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.TextureEnvParameter">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureEnvParameter.GL_TEXTURE_ENV_MODE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureEnvParameter.GL_TEXTURE_ENV_COLOR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.TextureTarget">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureTarget.GL_TEXTURE_1D">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureTarget.GL_TEXTURE_2D">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureTarget.GL_PROXY_TEXTURE_1D">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureTarget.GL_PROXY_TEXTURE_2D">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.TextureParameter">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureParameter.GL_TEXTURE_WIDTH">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureParameter.GL_TEXTURE_HEIGHT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureParameter.GL_TEXTURE_INTERNAL_FORMAT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureParameter.GL_TEXTURE_BORDER_COLOR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureParameter.GL_TEXTURE_BORDER">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureParameter.GL_TEXTURE_RED_SIZE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureParameter.GL_TEXTURE_GREEN_SIZE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureParameter.GL_TEXTURE_BLUE_SIZE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureParameter.GL_TEXTURE_ALPHA_SIZE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureParameter.GL_TEXTURE_LUMINANCE_SIZE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureParameter.GL_TEXTURE_INTENSITY_SIZE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureParameter.GL_TEXTURE_COMPONENTS">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.LogicOp">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LogicOp.GL_CLEAR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LogicOp.GL_AND">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LogicOp.GL_AND_REVERSE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LogicOp.GL_COPY">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LogicOp.GL_AND_INVERTED">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LogicOp.GL_NOOP">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LogicOp.GL_XOR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LogicOp.GL_OR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LogicOp.GL_NOR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LogicOp.GL_EQUIV">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LogicOp.GL_INVERT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LogicOp.GL_OR_REVERSE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LogicOp.GL_COPY_INVERTED">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LogicOp.GL_OR_INVERTED">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LogicOp.GL_NAND">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.LogicOp.GL_SET">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.FeedBackToken">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.FeedBackToken.GL_PASS_THROUGH_TOKEN">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.FeedBackToken.GL_POINT_TOKEN">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.FeedBackToken.GL_LINE_TOKEN">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.FeedBackToken.GL_POLYGON_TOKEN">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.FeedBackToken.GL_BITMAP_TOKEN">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.FeedBackToken.GL_DRAW_PIXEL_TOKEN">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.FeedBackToken.GL_COPY_PIXEL_TOKEN">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.FeedBackToken.GL_LINE_RESET_TOKEN">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.StencilOp">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.StencilOp.GL_ZERO">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.StencilOp.GL_KEEP">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.StencilOp.GL_REPLACE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.StencilOp.GL_INCR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.StencilOp.GL_DECR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.StencilOp.GL_INVERT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.TexCoordPointerType">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TexCoordPointerType.GL_SHORT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TexCoordPointerType.GL_INT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TexCoordPointerType.GL_FLOAT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TexCoordPointerType.GL_DOUBLE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.TextureEnvMode">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureEnvMode.GL_MODULATE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureEnvMode.GL_DECAL">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureEnvMode.GL_BLEND">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TextureEnvMode.GL_REPLACE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.CoordinateType">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.CoordinateType.GL_INT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.CoordinateType.GL_FLOAT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.CoordinateType.GL_DOUBLE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.CoordinateType.GL_SHORT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.mainplanes">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.mainplanes.WGL_SWAP_MAIN_PLANE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.POINTFLOAT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.POINTFLOAT.x">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.POINTFLOAT.y">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.GLYPHMETRICSFLOAT">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLYPHMETRICSFLOAT.gmfBlackBoxX">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLYPHMETRICSFLOAT.gmfBlackBoxY">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLYPHMETRICSFLOAT.gmfptGlyphOrigin">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLYPHMETRICSFLOAT.gmfCellIncX">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.GLYPHMETRICSFLOAT.gmfCellIncY">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.nSize">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.nVersion">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.dwFlags">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.iPixelType">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.cColorBits">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.cRedBits">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.cRedShift">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.cGreenBits">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.cGreenShift">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.cBlueBits">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.cBlueShift">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.cAlphaBits">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.cAlphaShift">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.cAccumBits">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.cAccumRedBits">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.cAccumGreenBits">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.cAccumBlueBits">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.cAccumAlphaBits">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.cDepthBits">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.cStencilBits">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.cAuxBuffers">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.iLayerType">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.bReserved">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.dwLayerMask">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.dwVisibleMask">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.dwDamageMask">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.Empty">
            <summary>
                Represents a PIXELFORMATDESCRIPTOR that is null.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.Create">
            <summary>
            Returns a new instance of the object with initial property values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.IsValid">
            <summary>
             Specifies if object contains a valid properties.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.ToString">
            <summary>
            Gets a System.String that represents this object.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.ChoosePixelFormat(System.IntPtr,VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR@)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.SetPixelFormat(System.IntPtr,System.UInt32,VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR@)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.DescribePixelFormat(System.IntPtr,System.UInt32,System.UInt32,VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR@)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.GetPixelFormat(System.IntPtr)">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.ChoosePixelFormat(System.IntPtr,System.UInt32,VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.PixelFormatSearchOrder)">
            <summary>
            Sets the pixel format of the specified device context to the first valid format specified by the format index
            </summary>
            <param name="hDC">Device context whose pixel format the function attempts to set.</param>
            <param name="format">Pixel format index (one-based).Set it to Zero(0) in order to select the first valid  supported pixel format.</param>
            <param name="searchorder">Search order to continue search for first valid pixel format if the input format can not be selected for the specied HDC.</param>
            <returns>Returns the selected pixel format or zero(0) if fuction fails.</returns>
        </member>
        <member name="P:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.Flags">
            <summary>
            A set of bit flags that specify properties of the pixel buffer.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.FlagsEx">
            <summary>
            A set of bit flags that specify properties of the pixel buffer except bitmap or window defaults.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.ColorBits">
            <summary>
            Specifies the number of color bitplanes in each color buffer. 
            </summary>
        </member>
        <member name="P:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.AlphaBits">
            <summary>
            Zero or greater. 
            </summary>
        </member>
        <member name="P:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.AccumRedBits">
            <summary>
            Zero or greater. 
            </summary>
        </member>
        <member name="P:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.DepthBits">
            <summary>
            Specifies the depth of the depth (z-axis) buffer. 
            </summary>
        </member>
        <member name="P:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.StencilBits">
            <summary>
            Zero or greater. 
            </summary>
        </member>
        <member name="P:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.AuxBuffers">
            <summary>
            Zero or greater. 
            </summary>
        </member>
        <member name="P:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.LayerType">
            <summary>
            Specifies the layer type .
            </summary>
        </member>
        <member name="P:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.DefaultFormatSearchOrder">
            <summary>
            Get/Set the default SearchOrder used to find the first valid pixel format.
            </summary>
            <remarks>Default value is <see cref="F:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.PixelFormatSearchOrder.Positive"/></remarks>
        </member>
        <member name="P:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.DefaultWindowPixelFormat">
            <summary>
            Get/Set the pixel format that has the first priority to be selected on a Screen Device context.
            </summary>
            <remarks>Default value is zero(0).</remarks>
        </member>
        <member name="P:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.UseDriverBestPixelFormat">
            <summary>
            Get/Set a boolean that defines if the recommended best driver pixel format will be selected.
            </summary>
            <remarks>Default value is true.</remarks>
        </member>
        <member name="P:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.DefaultBitmapPixelFormat">
            <summary>
            Get/Set the pixel format that has the first priority to be selected on a Memomory Bitmap Device context.
            </summary>
            <remarks>Default value is zero(0).</remarks>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.PixelFormatSearchOrder">
            <summary>
            Search order used with <see cref="M:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.ChoosePixelFormat(System.IntPtr,System.UInt32,VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.PixelFormatSearchOrder)"/>
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.PixelFormatSearchOrder.Positive">
            <summary>
            Positive search from smaller to biger values.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.PIXELFORMATDESCRIPTOR.PixelFormatSearchOrder.Negative">
            <summary>
            Negative search from biger to smaller values.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.TessProperty">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessProperty.GLU_TESS_WINDING_RULE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessProperty.GLU_TESS_BOUNDARY_ONLY">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessProperty.GLU_TESS_TOLERANCE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.TessWinding">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessWinding.GLU_TESS_WINDING_ODD">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessWinding.GLU_TESS_WINDING_NONZERO">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessWinding.GLU_TESS_WINDING_POSITIVE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessWinding.GLU_TESS_WINDING_NEGATIVE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessWinding.GLU_TESS_WINDING_ABS_GEQ_TWO">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.TessCallback">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessCallback.GLU_TESS_BEGIN">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessCallback.GLU_TESS_VERTEX">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessCallback.GLU_TESS_END">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessCallback.GLU_TESS_ERROR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessCallback.GLU_TESS_EDGE_FLAG">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessCallback.GLU_TESS_COMBINE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessCallback.GLU_TESS_BEGIN_DATA">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessCallback.GLU_TESS_VERTEX_DATA">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessCallback.GLU_TESS_END_DATA">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessCallback.GLU_TESS_ERROR_DATA">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessCallback.GLU_TESS_EDGE_FLAG_DATA">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessCallback.GLU_TESS_COMBINE_DATA">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.TessError">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessError.GLU_TESS_ERROR1">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessError.GLU_TESS_ERROR2">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessError.GLU_TESS_ERROR3">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessError.GLU_TESS_ERROR4">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessError.GLU_TESS_ERROR5">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessError.GLU_TESS_ERROR6">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessError.GLU_TESS_ERROR7">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessError.GLU_TESS_ERROR8">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessError.GLU_TESS_MISSING_BEGIN_POLYGON">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessError.GLU_TESS_MISSING_BEGIN_CONTOUR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessError.GLU_TESS_MISSING_END_POLYGON">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessError.GLU_TESS_MISSING_END_CONTOUR">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessError.GLU_TESS_COORD_TOO_LARGE">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="F:VectorDraw.Render.OpenGL.OpenGLImports.TessError.GLU_TESS_NEED_COMBINE_CALLBACK">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.TessCallBack_Begin_Delegate">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.TessCallBack_End_Delegate">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.TessCallBack_Error_Delegate">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.OpenGL.OpenGLImports.TessCallBack_Vertex_Delegate">
            <summary>
            Implements the OpenGL Importing Functionality
            </summary>
        </member>
        <member name="T:VectorDraw.Render.RasterImageType">
            <summary>
            Specifies the format of the image and the format of the color data for each pixel in the image.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RasterImageType.UNDEFINED">
            <summary>
            The image type and pixel format is undefined.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RasterImageType.JPEG">
            <summary>
            Joint Photographic Experts Group (JPEG) image type.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RasterImageType.PNG">
            <summary>
            W3C Portable Network Graphics (PNG) image format.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RasterImageType.GIF">
            <summary>
            Graphics Interchange Format (GIF) image format.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RasterImageType.TIF">
            <summary>
            Tag Image File Format (TIFF) image format.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RasterImageType.BMP1bpp">
            <summary>
             Bitmap image format (BMP) with 1 bit per pixel indexed format.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RasterImageType.BMP4bpp">
            <summary>
             Bitmap image format (BMP) with 4 bit per pixel indexed format.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RasterImageType.BMP8bpp">
            <summary>
             Bitmap image format (BMP) with 8 bit per pixel indexed format.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RasterImageType.BMP24bpp">
            <summary>
             Bitmap image format (BMP) with 24 bit per pixel format.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RasterImageType.BMP32bpp">
            <summary>
             Bitmap image format (BMP) with 32 bit per pixel format.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdRotateFlipTypeEnum">
            <summary>
            Specifies the direction of an image's rotation and the axis used to flip the image.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRotateFlipTypeEnum.Rotate180FlipXY">
            <summary>
            Specifies a 180-degree rotation followed by a horizontal and vertical flip.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRotateFlipTypeEnum.RotateNoneFlipNone">
            <summary>
            Specifies no rotation and no flipping.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRotateFlipTypeEnum.Rotate270FlipXY">
            <summary>
            Specifies a 270-degree rotation followed by a horizontal and vertical flip.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRotateFlipTypeEnum.Rotate90FlipNone">
            <summary>
            Specifies a 90-degree rotation without flipping.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRotateFlipTypeEnum.Rotate180FlipNone">
            <summary>
            Specifies a 180-degree rotation without flipping.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRotateFlipTypeEnum.RotateNoneFlipXY">
            <summary>
            Specifies no rotation followed by a horizontal and vertical flip.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRotateFlipTypeEnum.Rotate270FlipNone">
            <summary>
            Specifies a 270-degree rotation without flipping.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRotateFlipTypeEnum.Rotate90FlipXY">
            <summary>
            Specifies a 90-degree rotation followed by a horizontal and vertical flip.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRotateFlipTypeEnum.Rotate180FlipY">
            <summary>
            Specifies a 180-degree rotation followed by a vertical flip.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRotateFlipTypeEnum.RotateNoneFlipX">
            <summary>
            Specifies no rotation followed by a horizontal flip.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRotateFlipTypeEnum.Rotate90FlipX">
            <summary>
            Specifies a 90-degree rotation followed by a horizontal flip.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRotateFlipTypeEnum.Rotate270FlipY">
            <summary>
            Specifies a 270-degree rotation followed by a vertical flip.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRotateFlipTypeEnum.RotateNoneFlipY">
            <summary>
            Specifies no rotation followed by a vertical flip.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRotateFlipTypeEnum.Rotate180FlipX">
            <summary>
            Specifies a 180-degree rotation followed by a horizontal flip.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRotateFlipTypeEnum.Rotate90FlipY">
            <summary>
            Specifies a 90-degree rotation followed by a vertical flip.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdRotateFlipTypeEnum.Rotate270FlipX">
            <summary>
            Specifies a 270-degree rotation followed by a horizontal flip.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.IImageBind">
            <summary>
            Provides the functionality for the vdImageDef object.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.ImageBind">
            <summary>
            Implements the ImageBind object which controls all functionality for a System.Drawing.Image object.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.ImageBind.mTransparency">
            <summary>
            Key is the width of additional bound rectangle or 0 by default
            </summary>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.GetBindPtr(System.IntPtr)">
            <summary>
            Internally used.Passes the passed pattern pointer to the cpp library and get the pointer from that object.
            </summary>
            <param name="vdrawGlContext">The context (cpp) of the render where the image is going to be added.</param>
            <returns>The pointer of the object to the cpp library.</returns>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.IsValid">
            <summary>
            Specifies if object contains a valid Image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.GetImageBytes(System.Drawing.Image)">
            <summary>
            Writes the image contents to a byte array that represent a Bitmap format
            </summary>
            <param name="image">Source Image to get the bytes.</param>
            <returns>A new byte array.</returns>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.GetImageBytes(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Writes the image contents to a byte array
            </summary>
            <param name="image">Source Image to get the bytes.</param>
            <param name="imageformat">The <see cref="T:System.Drawing.Imaging.ImageFormat"/> of exported bytes or null to keep the source image format.</param>
            <returns>A new byte array.</returns>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.GetImageBytes">
            <summary>
            Writes the image contents to a byte array that represent a Bmp image format.
            </summary>
            <returns>A new byte array.</returns>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.GetImageBytes(System.Boolean)">
            <summary>
            Writes the image contents to a byte array
            </summary>
            <param name="AsBmpImageFormat">Set it true in order the return bytes to represent a BMP image format or false in order the return bytes to represent the Selected Image Format.</param>
            <returns>A new byte array.</returns>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.GetHbitmap">
            <summary>
            Creates a GDI bitmap object if the selected image is a System.Drawing.Bitmap.
            </summary>
            <returns>A GDI bitmap object if the selected image is a System.Drawing.Bitmap.</returns>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.GetBitmapImage(System.Boolean)">
            <summary>
            Get the selected image as <see cref="T:System.Drawing.Image"/> object.
            </summary>
            <param name="asClone">
            Specifies if it will return a clone of the object.
            </param>
            <returns>The selected image as <see cref="T:System.Drawing.Image"/> object.</returns>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.SelectImage(System.String)">
            <summary>
            Select an image from an existing File.
            </summary>
            <param name="filename">The full path filename of the image file.</param>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.SelectImage(System.IO.Stream)">
            <summary>
            Select an image from a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> that defines a <see cref="T:System.Drawing.Image"/> object. </param>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.DrawImage(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Byte)">
            <summary>
             Draws a portion of the image object
             at the specified location and with the specified size.
            </summary>
            <param name="graphics">
            The output GDI+ drawing surface.
            </param>
            <param name="dstRect">
            <see cref="T:System.Drawing.Rectangle"/> structure that specifies the location and size of
            the drawn image. The image is scaled to fit the rectangle.
            </param>
            <param name="srcRect">
             <see cref="T:System.Drawing.Rectangle"/> structure that specifies the portion of the image object to draw.
            </param>
            <param name="AlphaBlending">
            Alpha transparency for each color pixel.
            </param>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.DrawImage(VectorDraw.Render.vdRender,System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Byte)">
             <summary>
              Draws a portion of the image object
              at the specified location and with the specified size.
             </summary>
             <param name="render">A <see cref="T:VectorDraw.Render.vdRender"/> object where the image will be drawn</param>
             <param name="graphics">
             The output GDI+ drawing surface.
             </param>
             <param name="dstRect">
             <see cref="T:System.Drawing.Rectangle"/> structure that specifies the location and size of
             the drawn image. The image is scaled to fit the rectangle.
             </param>
             <param name="srcRect">
              <see cref="T:System.Drawing.Rectangle"/> structure that specifies the portion of the image object to draw.
             </param>
             <param name="AlphaBlending">
             Alpha transparency for each color pixel.
             </param>
            <returns>A value that represents the end status of the function.</returns>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.DrawImage(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Draws the image object at the specified location
            and with the specified shape and size.
            </summary>
            <param name="graphics">
            The output GDI+ drawing surface.
            </param>
            <param name="upperleft">
            A <see cref="T:System.Drawing.Point"/> structure that define the upper-left corner of destination parallelogram.
            </param>
            <param name="upperright">
             A <see cref="T:System.Drawing.Point"/> structure that define the upper-right corner of destination parallelogram.
            </param>
            <param name="lowerleft">
             A <see cref="T:System.Drawing.Point"/> structure that define the lower-left corner of destination parallelogram.
            </param>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.DrawImage(VectorDraw.Render.vdRender,System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
             <summary>
             Draws the image object at the specified location
             and with the specified shape and size.
             </summary>
             <param name="render">A <see cref="T:VectorDraw.Render.vdRender"/> object where the image will be drawn</param>
             <param name="graphics">
             The output GDI+ drawing surface.
             </param>
             <param name="upperleft">
             A <see cref="T:System.Drawing.Point"/> structure that define the upper-left corner of destination parallelogram.
             </param>
             <param name="upperright">
              A <see cref="T:System.Drawing.Point"/> structure that define the upper-right corner of destination parallelogram.
             </param>
             <param name="lowerleft">
              A <see cref="T:System.Drawing.Point"/> structure that define the lower-left corner of destination parallelogram.
             </param>
            <returns>A value that represents the end status of the function.</returns>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.DrawImage(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Byte)">
            <summary>
            Draws the image object at the specified location
            and with the specified shape and size.
            </summary>
            <param name="graphics">
            The output GDI+ drawing surface.
            </param>
            <param name="upperleft">
            A <see cref="T:System.Drawing.Point"/> structure that define the upper-left corner of destination parallelogram.
            </param>
            <param name="upperright">
             A <see cref="T:System.Drawing.Point"/> structure that define the upper-right corner of destination parallelogram.
            </param>
            <param name="lowerleft">
             A <see cref="T:System.Drawing.Point"/> structure that define the lower-left corner of destination parallelogram.
            </param>
            <param name="AlphaBlending">
            Alpha transparency for each color pixel.
            </param>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.DrawImage(VectorDraw.Render.vdRender,System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Byte)">
             <summary>
             Draws the image object at the specified location
             and with the specified shape and size.
             </summary>
             <param name="render">A <see cref="T:VectorDraw.Render.vdRender"/> object where the image will be drawn</param>
             <param name="graphics">
             The output GDI+ drawing surface.
             </param>
             <param name="upperleft">
             A <see cref="T:System.Drawing.Point"/> structure that define the upper-left corner of destination parallelogram.
             </param>
             <param name="upperright">
              A <see cref="T:System.Drawing.Point"/> structure that define the upper-right corner of destination parallelogram.
             </param>
             <param name="lowerleft">
              A <see cref="T:System.Drawing.Point"/> structure that define the lower-left corner of destination parallelogram.
             </param>
             <param name="AlphaBlending">
             Alpha transparency for each color pixel.
             </param>
            <returns>A value that represents the end status of the function.</returns>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.DrawImage(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Rectangle,System.Byte)">
            <summary>
            Draws the image object at the specified location
            and with the specified shape and size.
            </summary>
            <param name="graphics">
            The output GDI+ drawing surface.
            </param>
            <param name="upperleft">
            A <see cref="T:System.Drawing.Point"/> structure that define the upper-left corner of destination parallelogram.
            </param>
            <param name="upperright">
             A <see cref="T:System.Drawing.Point"/> structure that define the upper-right corner of destination parallelogram.
            </param>
            <param name="lowerleft">
             A <see cref="T:System.Drawing.Point"/> structure that define the lower-left corner of destination parallelogram.
            </param>
            <param name="srcRect">A <see cref="T:System.Drawing.Rectangle"/> structure that specifies the portion of the image object to draw.</param>
            <param name="AlphaBlending">
            Alpha transparency for each color pixel.
            </param>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.DrawImage(VectorDraw.Render.vdRender,System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Rectangle,System.Byte)">
             <summary>
             Draws the image object at the specified location
             and with the specified shape and size.
             </summary>
             <param name="render">A <see cref="T:VectorDraw.Render.vdRender"/> object where the image will be drawn</param>
             <param name="graphics">
             The output GDI+ drawing surface.
             </param>
             <param name="upperleft">
             A <see cref="T:System.Drawing.Point"/> structure that define the upper-left corner of destination parallelogram.
             </param>
             <param name="upperright">
              A <see cref="T:System.Drawing.Point"/> structure that define the upper-right corner of destination parallelogram.
             </param>
             <param name="lowerleft">
              A <see cref="T:System.Drawing.Point"/> structure that define the lower-left corner of destination parallelogram.
             </param>
             <param name="srcRect">A <see cref="T:System.Drawing.Rectangle"/> structure that specifies the portion of the image object to draw.</param>
             <param name="AlphaBlending">
             Alpha transparency for each color pixel.
             </param>
            <returns>A value that represents the end status of the function.</returns>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.Crop(System.Drawing.Rectangle)">
            <summary>
            Returns a Bitmap that is a portion of this image defined by passed Rectangle.
            </summary>
            <param name="r">A Rectangle portion of this Image.This must be completely inside the rectangle of this Image, else the method returns null.</param>
            <returns>A Bitmap that is a portion of this image defined by passed Rectangle.Returns null if the passed rectancle  is not completely inside to this Image -or- this Image is not a <see cref="T:System.Drawing.Bitmap"/> type.</returns>
            <remarks>The return Bitmap is in 32 bit per pixel format.</remarks>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.DrawImage(System.Drawing.Graphics,System.Int32,System.Int32)">
            <summary>
             Draws the image, using its original physical size, at the location
             specified by a coordinate pair.
            </summary>
            <param name="graphics">
             The output GDI+ drawing surface.
            </param>
            <param name="x">x-coordinate of the upper-left corner of the drawn image.</param>
            <param name="y">y-coordinate of the upper-left corner of the drawn image.</param>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.SelectImage(VectorDraw.Geometry.ByteArray)">
            <summary>
            Select an image from a <see cref="T:VectorDraw.Geometry.ByteArray"/>
            </summary>
            <param name="bytes">A <see cref="T:VectorDraw.Geometry.ByteArray"/> that defines a <see cref="T:System.Drawing.Image"/> object. </param>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.SelectImage(System.Drawing.Image)">
            <summary>
             Select an image from a <see cref="T:System.Drawing.Image"/>
            </summary>
            <param name="img">A <see cref="T:System.Drawing.Image"/> object.</param>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.Export(System.IO.Stream,System.Drawing.Imaging.ImageFormat,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Export the selected image into a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="stream">Stream where the select image wil be exported.</param>
            <param name="RasterType">The <see cref="T:System.Drawing.Imaging.ImageFormat"/> for the exported image.</param>
            <param name="pixelFormat"> The <see cref="T:System.Drawing.Imaging.PixelFormat"/> enumeration for  the exported image.</param>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.Export(System.IO.Stream,System.Drawing.Imaging.ImageFormat,System.Drawing.Imaging.PixelFormat,System.Drawing.Color)">
            <summary>
            Export the selected image into a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="stream">Stream where the select image wil be exported.</param>
            <param name="RasterType">The <see cref="T:System.Drawing.Imaging.ImageFormat"/> for the exported image.</param>
            <param name="pixelFormat"> The <see cref="T:System.Drawing.Imaging.PixelFormat"/> enumeration for  the exported image.</param>
            <param name="BackgroundColor">Color to be used as background when saving transparent images to different  RasterType and pixelFormat than the source image.</param>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.Export(System.String,System.Drawing.Imaging.ImageFormat,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Export the selected image into a File.
            </summary>
            <param name="pathname">The full path file name where the select image wil be exported.</param>
            <param name="RasterType">The <see cref="T:System.Drawing.Imaging.ImageFormat"/> for the exported image.</param>
            <param name="pixelFormat"> The <see cref="T:System.Drawing.Imaging.PixelFormat"/> enumeration for  the exported image.</param>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.Export(System.String,System.Drawing.Imaging.ImageFormat,System.Drawing.Imaging.PixelFormat,System.Drawing.Color)">
            <summary>
            Export the selected image into a File.
            </summary>
            <param name="pathname">The full path file name where the select image wil be exported.</param>
            <param name="RasterType">The <see cref="T:System.Drawing.Imaging.ImageFormat"/> for the exported image.</param>
            <param name="pixelFormat"> The <see cref="T:System.Drawing.Imaging.PixelFormat"/> enumeration for  the exported image.</param>
            <param name="BackgroundColor">Color to be used as background when saving transparent images to different  RasterType and pixelFormat than the source image.</param>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Save the selected image into a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="stream">Stream where the select image wil be exported.</param>
            <param name="RasterType">The <see cref="T:System.Drawing.Imaging.ImageFormat"/> enumeration for the exported image.</param>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat,System.Drawing.Color)">
            <summary>
            Save the selected image into a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="stream">Stream where the select image wil be exported.</param>
            <param name="RasterType">The <see cref="T:System.Drawing.Imaging.ImageFormat"/> enumeration for the exported image.</param>
            <param name="BackgroundColor">Color to be used as background when saving transparent images to different  RasterType and pixelFormat than the source image.</param>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.Save(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Save the selected image into a File
            </summary>
            <param name="pathname">The full path file name where the select image wil be exported.</param>
            <param name="RasterType">The <see cref="T:System.Drawing.Imaging.ImageFormat"/> enumeration for the exported image.</param>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.Save(System.String,System.Drawing.Imaging.ImageFormat,System.Drawing.Color)">
            <summary>
            Save the selected image into a File
            </summary>
            <param name="pathname">The full path file name where the select image wil be exported.</param>
            <param name="RasterType">The <see cref="T:System.Drawing.Imaging.ImageFormat"/> enumeration for the exported image.</param>
            <param name="BackgroundColor">Color to be used as background when saving transparent images to different  RasterType and pixelFormat than the source image.</param>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.Save(System.String,VectorDraw.Render.RasterImageType)">
            <summary>
            Save the selected image into a File
            </summary>
            <param name="pathname">The full path file name where the select image wil be exported.</param>
            <param name="RasterFormat">The <see cref="T:VectorDraw.Render.RasterImageType"/> enumeration for the exported image.</param>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.Save(System.String,VectorDraw.Render.RasterImageType,System.Drawing.Color)">
            <summary>
            Save the selected image into a File
            </summary>
            <param name="pathname">The full path file name where the select image wil be exported.</param>
            <param name="RasterFormat">The <see cref="T:VectorDraw.Render.RasterImageType"/> enumeration for the exported image.</param>
            <param name="BackgroundColor">Color to be used as background when saving transparent images to different  RasterType and pixelFormat than the source image.</param>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.Save(System.String)">
            <summary>
            Save the selected image into a File
            </summary>
            <param name="pathname">The full path file name where the select image wil be exported.</param>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.Save(System.String,System.Int32)">
            <summary>
             Save the selected image into a File using the passed quality
            </summary>
            <param name="pathname">The file full path name where the image will be saved.</param>
            <param name="Quality">The quality when exporting to Jpeg format.Valid range between (0=lowest to 100=highest) and -1 for default.Default value is -1.</param>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.Save(System.String,System.Drawing.Color)">
            <summary>
            Save the selected image into a File
            </summary>
            <param name="pathname">The full path file name where the select image wil be exported.</param>
            <param name="BackgroundColor">Color to be used as background when saving transparent images to different  RasterType and pixelFormat than the source image.</param>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.RasterType(System.String)">
            <summary>
            Returns the <see cref="T:System.Drawing.Imaging.ImageFormat"/> of an existing filename depend of its extension.
            </summary>
            <param name="filename">An existing full path filename that defines an Image.</param>
            <returns>Returns the <see cref="T:System.Drawing.Imaging.ImageFormat"/> of an existing filename.</returns>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.GetPaletteColor">
            <summary>
            Gets an array of System.Drawing.Color structures used by <see cref="P:VectorDraw.Render.ImageBind.Palette"/> of the Image.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.SetPaletteColors(System.Drawing.Color[])">
            <summary>
            Select an array of System.Drawing.Color structures to be used by <see cref="P:VectorDraw.Render.ImageBind.Palette"/> of the Image.
            </summary>
            <param name="colors">An array of colors with length 2 or 16 or 256 or 0.</param>
            <returns>True is the Palette was updated properly.</returns>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.UpdateBinds(System.Boolean)">
            <summary>
            Update the object.
            </summary>
            <param name="isDisposing">If true then the object is deleted and cleared from the memory , else it is marked as updated in order to be recalculated.</param>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.ApplyRotationFlip(VectorDraw.Render.vdRotateFlipTypeEnum)">
            <summary>
            This method changes the ImageBind's Bitmap by applying the passed RotateFlipType Rotation and Flip.
            </summary>
            <param name="type">A <seealso cref="T:VectorDraw.Render.vdRotateFlipTypeEnum"/> type to apply to this ImageBind's Bitmap.</param>
            <remarks>
            If you want to apply rotation and flip to an Image in VectorDraw it is recommended to use the vdImageDef's method ApplyRotationFlip(RotateFlipType)."/&gt;.</remarks>
            <remarks>If you use this method then you have to Embed the ImageBind to the vdImageDef object.
            </remarks>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.ApplyEffects(System.Drawing.Bitmap,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Byte[]@)">
            <summary>
            This static method will apply the passed effects controlled from the parameters to the passed b Bitmap.
            </summary>
            <param name="b">The Bitmap object to apply the effects.</param>
            <param name="Grayscale">A boolean value representing if a gray effect will be applied. Pass true in order to apply the Grayscale effect.</param>
            <param name="Sepia">A boolean value representing if a sepia effect will be applied. Pass true in order to apply the sepia effect.A standard value of 20 is used for this effect.</param>
            <param name="Invert">A boolean value representing is the colors of the Bitmap will be inverted. Pass true in order to Invert the colors.</param>
            <param name="brightness">An Integer value representing the Brightness to be applied to the Bitmap. Values should be from -255 to 255. Pass 0 to not apply any Brightness to the Bitmap.</param>
            <param name="contrast">An Integer value representing the Contrast to be applied to the Bitmap.Values should be from -100 to 100. Pass 0 to not apply any Contrast to the Bitmap.</param>
            <param name="ColorsRed">An Integer value representing the Red alteration of the Bitmap. Values should be from -255 to 255. Pass 0 to not apply any red effect to the Bitmap.</param>
            <param name="ColorsGreen">An Integer value representing the Green alteration of the Bitmap. Values should be from -255 to 255. Pass 0 to not apply any Green effect to the Bitmap.</param>
            <param name="ColorsBlue">An Integer value representing the Blue alteration of the Bitmap. Values should be from -255 to 255. Pass 0 to not apply any Blue effect to the Bitmap.</param>
            <param name="GammaRed">A double value that represents the Red Gamma effect to be applied. Valid values are from 0.2 to 5.0. Pass 1.0 to not apply any Red Gamma effect to the Bitmap.</param>
            <param name="GammaGreen">A double value that represents the Green Gamma effect to be applied. Valid values are from 0.2 to 5.0. Pass 1.0 to not apply any Green Gamma effect to the Bitmap.</param>
            <param name="GammaBlue">A double value that represents the Blue Gamma effect to be applied. Valid values are from 0.2 to 5.0. Pass 1.0 to not apply any Blue Gamma effect to the Bitmap.</param>
            <param name="retbytes">If the PixelFormat of the Bitmap is not 24bit then changes to 24bit and this array contains the changed 24bit bytes of the Image.This is used in palette images mostly.</param>
            <returns>True if the operation was succesfull.</returns>
            <remarks>If the passed Bitmap's pixelformat is Format24bppRgb then the Bitmap passed Bitmap bytes are changed and the retbytes will be null. If the PixelFormat is something else the the retbytes will contain the desired bytes in Format24bppRgb format.</remarks>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.Dispose">
            <summary>
            Releases all resources used by this System.Drawing.Image.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.GetBitmap(VectorDraw.Render.vdRectangle,System.Double@)">
            <summary>
            Returns a thumbnail for the selected Image.
            </summary>
            <returns>Returns a thumbnail for the selected Image.</returns>
            <remarks>
            The size of return Bitmap is reduced in order to not exist the 4095 bytes.</remarks>
            <remarks>Internally used to bind an image in OpenGL render.
            </remarks>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.GetBitmap(VectorDraw.Render.vdRender,System.Drawing.Graphics,System.Boolean,VectorDraw.Render.vdRectangle,System.Drawing.Color,System.Int32,System.Double@)">
            <summary>
            Returns a thumbnail for the selected Image.
            </summary>
            <returns>Returns a thumbnail for the selected Image.</returns>
            <remarks>
            The size of return Bitmap is reduced in order to not exist the 33,554.432 bytes.</remarks>
            <remarks>Internally used to bind an image in OpenGL render.
            </remarks>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.GetThumbnailImage(System.Drawing.Size)">
            <summary>
            Returns a thumbnail for this System.Drawing.Image.
            </summary>
            <param name="fittingSize">The size in pixels, of the requested thumbnail image.</param>
            <returns>An <see cref="T:System.Drawing.Image"/> that represents the thumbnail.</returns>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.GetBitmap">
            <summary>
            Internally used.Returns a thumbnail for the selected Image.
            </summary>
            <returns>Returns a thumbnail for the selected Image.</returns>
            <remarks>
            The size of return Bitmap is reduced in order to not pass the 4095 bytes.</remarks>
            <remarks>Internally used to bind an image in OpenGL render.
            </remarks>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.StreamDataFromPixelData(System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Returns a MemoryStream that represent a Bitmap from the passed parameteres
            </summary>
            <param name="bitsPerPixel">The bits per pixel of the passed pixelData.Must be 24 or 32</param>
            <param name="width">The width of the  image that pixelData reference.</param>
            <param name="height">The height of the  image that pixelData reference.</param>
            <param name="pixelData">An array of RGB values for 24bit or RGBA values for 32bit, of a row formated image. </param>
            <returns>A MemoryStream that represent a Bitmap stream from the passed pixelData, or null if passed parameters are out of valid range.</returns>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.DibBytesToImageBytes(System.Byte[])">
            <summary>
            Convert Dib bitmap bytes into valid Bitmap Image bytes.
            </summary>
            <param name="DibBytes">An array of bytes that represent a Dib bitmap.</param>
            <returns>Returns an array of bytes that can be used to constract a Bitmap Image object.</returns>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.GetEncoderInfo(System.String)">
            <summary>
            Returns the <see cref="T:System.Drawing.Imaging.ImageCodecInfo"/> for a specific MIME type
            </summary>
        </member>
        <member name="P:VectorDraw.Render.ImageBind.Transparency">
            <summary>
            Get/Set the color to be used as transparent for the image.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.ImageBind.InterpolationMode">
            <summary>
            specifies the algorithm that is used when images are scaled
            </summary>
        </member>
        <member name="P:VectorDraw.Render.ImageBind.Width">
            <summary>
            The Width of the image in Pixels.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.ImageBind.Height">
            <summary>
            The Height of the image in Pixels.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.ImageBind.IsThrowOnError">
            <summary>
            Returns true is SelectImage method was faild.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.ImageBind.FrameCount">
            <summary>
            Get the number of pages the image has.
            </summary>
            <remarks>Only some special TIFF files have multiple pages.</remarks>
        </member>
        <member name="P:VectorDraw.Render.ImageBind.ActiveFrame">
            <summary>
            Get/Set the number of page the vdImageDef will be used when draw.
            </summary>
            <remarks>Only some special TIFF files have multiple pages.</remarks>
        </member>
        <member name="P:VectorDraw.Render.ImageBind.Palette">
            <summary>
            Gets the color palette used for the selected image.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.ImageBind.Image">
            <summary>
            The System.Drawing.Image of the object.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.ImageBind.ImageInterpolationMode">
            <summary>
            specifies the algorithm that is used when images are scaled
            </summary>
        </member>
        <member name="F:VectorDraw.Render.ImageBind.ImageInterpolationMode.Bilinear">
            <summary>
            Set the destination pixel color as mix of the surrounded pixels of the source pixel.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.ImageBind.ImageInterpolationMode.NearestNeighbor">
            <summary>
            Set the destination pixel color to the nearest source pixel.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.ImageBind.ImagePalette">
            <summary>
            Image palette manager utilities
            </summary>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.ImagePalette.Default256ColorPallete">
            <summary>
            Returns a standard 256 color palette
            </summary>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.ImagePalette.DefaultGrayPallete(System.Int32)">
            <summary>
            Returns a gray scale palette with ncolors items
            </summary>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.ImagePalette.GetBitmapBytes(System.Drawing.Image,System.Drawing.Color[])">
            <summary>
            Returns the pixel data of passed Image depend of the passed palette
            </summary>
            <param name="Source"></param>
            <param name="pallete">An array of RGB Color with length 2 (monochrome) 16 , 256 or 0 for 24bit per pixel data</param>
        </member>
        <member name="M:VectorDraw.Render.ImageBind.ImagePalette.MakeGrayscale(System.Drawing.Bitmap,System.Boolean,System.Drawing.Color)">
            <summary>
            Convert a True Color Image to Grayscale 
            </summary>
            <param name="original">Image to be converted.</param>
            <param name="blackWhite">If true the the image is convrted into a black and White colors.</param>
            <param name="Transparency"></param>
            <returns>A new Image with colors from a Grayscale palette.</returns>
        </member>
        <member name="T:VectorDraw.Render.GDIPlusRender">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.WrapperRender">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.WrapperRender.#ctor(VectorDraw.Render.vdRender)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.WrapperRender.InitTimer(System.Boolean)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.WrapperRender.TestTimerEvent">
            <summary>
            Test if the default time between drawing entities is passed and Fires the <see cref="E:VectorDraw.Render.vdRender.OnTimerPassed"/> event
            </summary>
        </member>
        <member name="M:VectorDraw.Render.WrapperRender.GetIdAtPixel(System.Int32,System.Int32)">
            <summary>
            Overrides the <see cref="M:VectorDraw.Render.vdRender.GetIdAtPixel(System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.WrapperRender.GetDepthAtPixel(System.Int32,System.Int32)">
            <summary>
            Overrides the <see cref="M:VectorDraw.Render.vdRender.GetDepthAtPixel(System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.WrapperRender.UnprojectPixel2View(VectorDraw.Geometry.gPoint)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.UnprojectPixel2View(VectorDraw.Geometry.gPoint)"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.UseDifferentGraphics">
            <summary>
            Get/Set a value that defines if this render object have its own graphics,memorybitmap,timer event and breakmessage properties.
            </summary>
            <remarks>Default value is False.</remarks>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.MemoryBitmap">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.graphics">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.BreakOnMessage">
            <summary>
            Get/Set a boolean value representing if the draw will break when a windows message appears in the message que.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.StatusDraw">
            <summary>
            Get/Set the curent <see cref="T:VectorDraw.Render.vdRender.DrawStatus"/>.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.Display">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.highLightFilterStack">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.PenStyle">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.PenStyleStack">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.DrawFigureList">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.Palette">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.ControlRender">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.OwnerObject">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.ShowUCSAxis">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.GlobalProperties">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.GraphicsContext">
            <summary>
            Overrides the <see cref="P:VectorDraw.Render.vdRender.GraphicsContext"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.ColorPalette">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.FadeEffectStack">
            <summary>
            Get the Fade effect stack of the vdRender object.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.FadeEffect">
            <summary>
            Get the selected Fade effect of the vdRender object.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.ShowHidenEdges">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.EdgeColor">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.LensAngle">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.FocalLength">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.PerspectiveMod">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.OwnerGraphicsOffset">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.UpperLeft">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.Width">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.Height">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.VportScale">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.VportScaleMultiplier">
            <summary>
            Internally used only.Get/Set an extra value which is used to multiply the <see cref="P:VectorDraw.Render.WrapperRender.VportScale"/>.
            </summary>
            <remarks>By default this value is 1.0.</remarks>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.ViewportLTScale">
            <summary>
            Controls the scaling of linetypes drawn inside a viewport.
            </summary>
            <remarks>Default value is <see cref="F:VectorDraw.Render.vdRender.ViewportLTScaleFlag.ViewportBased"/></remarks>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.Pure_ViewSize">
            <summary>
            Returns the internally used value of ViewSize field for this object.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.ViewSize">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.ViewCenter">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.BkColor">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.BkColor"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.BkGradientColor">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.BkGradientAngle">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.RenderMode">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.CurveResolution">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.DrawingExtents">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.LayoutRender">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.IvalidateRect">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.PixelSize">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.ClipBounds">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.maxDepth">
            <summary>
            Returns the near to far depth of current view in drawing units
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.ProjectionMatrix">
            <summary>
            Get the Matrix used for Projection view.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.View2PixelMatrix">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.Pixel2ViewMatrix">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.StartedWorldToViewMatrix">
            <summary>
            overrides <see cref="P:VectorDraw.Render.vdRender.StartedWorldToViewMatrix"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.StartedViewToWorldMatrix">
            <summary>
            overrides <see cref="P:VectorDraw.Render.vdRender.StartedViewToWorldMatrix"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.CurrentMatrix">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.TwistAngle">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.ClippingRegion">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.WindowControlHandle">
            <summary>
            Returns the Output control window handle for this render object.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.WrapperRender.ElementFlagEx">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.ElementFlagEx"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.GDIPlusRender.SetLineJoinRound">
            <summary>
            Select a circular join between line segments
            </summary>
        </member>
        <member name="M:VectorDraw.Render.GDIPlusRender.SetLineJoinDefault">
            <summary>
            Select the default join between line segments depend on <see cref="F:VectorDraw.Render.vdRender.PenCapsSquare"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.GDIPlusRender.PenStyleChanged(VectorDraw.Render.vdGdiPenStyle)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.GDIPlusRender.#ctor(VectorDraw.Render.vdRender)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.GDIPlusRender.Init">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.GDIPlusRender.StartDraw(System.Boolean)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.GDIPlusRender.EndDraw">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.GDIPlusRender.Clear(System.Drawing.Color,System.Boolean)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.GDIPlusRender.GetFinalColor(System.Drawing.Color,System.Byte)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.GetFinalColor(System.Drawing.Color,System.Byte)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.GDIPlusRender.Refresh(System.Drawing.Graphics,System.Int32,System.Int32)">
            <summary>
            Draws the Selected MemoryBitmap into a graphics. Run after EndDraw()
            </summary>
        </member>
        <member name="M:VectorDraw.Render.GDIPlusRender.PixelLineDraw(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.GDIPlusRender.DrawImage(System.Object,VectorDraw.Render.ImageBind,System.Double,System.Double)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.GDIPlusRender.MatrixViewChanged">
            <summary>
            override the <see cref="M:VectorDraw.Render.vdRender.MatrixViewChanged"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.GDIPlusRender.DrawLine(System.Object,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.GDIPlusRender.DrawPoint(System.Object,VectorDraw.Geometry.gPoint)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.GDIPlusRender.DrawPLine(System.Object,VectorDraw.Geometry.gPoints)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.GDIPlusRender.DrawImagePolygon(System.Object,VectorDraw.Render.ImageBind,System.Double,System.Double,VectorDraw.Geometry.gPoints)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.GDIPlusRender.DrawBoundBox(System.Object,VectorDraw.Geometry.Box)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.GDIPlusRender.DrawSolidBoundBox(System.Object,VectorDraw.Geometry.Box)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.GDIPlusRender.DrawSolidPolygon(System.Object,VectorDraw.Geometry.gPoints,VectorDraw.Render.vdRender.PolygonType)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.GDIPlusRender.DrawString(System.Object,VectorDraw.Render.grTextStyle,VectorDraw.Render.grTextStyleExtra,System.String,VectorDraw.Geometry.Box)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.GDIPlusRender.PushClipPolygon(VectorDraw.Geometry.gPoints)">
            <summary>
            Push a polygon from the passed parameter as a clip boundary for the render.
            </summary>
            <param name="pts">A collection of points that represent the clip polygon in World coordinate system.</param>
            <returns>True if the clip was set succesfully.</returns>
        </member>
        <member name="M:VectorDraw.Render.GDIPlusRender.PopClipPolygon">
            <summary>
            Use this method to pop the clip polygon that was set whit <see cref="M:VectorDraw.Render.GDIPlusRender.PushClipPolygon(VectorDraw.Geometry.gPoints)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.GDIPlusRender.OnUpdateClipping(System.Boolean)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.GDIPlusRender.GdiPen">
            <summary>
            Returns the current selected pen.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.GDIPlusRender.GdiBrush">
            <summary>
            Returns the current selected brush.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.GDIPlusRender.DpiY">
            <summary>
            Get a float value representing the dots per inch of the selected graphic device.Default value 96.
            </summary>
        </member>
        <member name="F:VectorDraw.Fonts.ttf.WinCodePagesId">
            The code pages possible for a True Type font.
        </member>
        <member name="F:VectorDraw.Fonts.ttf.hhea">
            The content of table 'head'.
        </member>
        <member name="F:VectorDraw.Fonts.ttf.os_2">
            The content of table 'hhea'. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.maxp">
            The content of table 'OS/2'.
        </member>
        <member name="F:VectorDraw.Fonts.ttf.loca">
            The content of table 'loca'.
        </member>
        <member name="P:VectorDraw.Fonts.ttf.Descent">
            The content of table 'loca'.
        </member>
        <member name="T:VectorDraw.Fonts.ttf.FontHeader">
            The components of table 'head'. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.FontHeader.flags">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.FontHeader.unitsPerEm">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.FontHeader.xMin">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.FontHeader.yMin">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.FontHeader.xMax">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.FontHeader.yMax">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.FontHeader.macStyle">
            A variable. 
        </member>
        <member name="T:VectorDraw.Fonts.ttf.HorizontalHeader">
            The components of table 'hhea'. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.HorizontalHeader.Ascender">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.HorizontalHeader.Descender">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.HorizontalHeader.LineGap">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.HorizontalHeader.advanceWidthMax">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.HorizontalHeader.minLeftSideBearing">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.HorizontalHeader.minRightSideBearing">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.HorizontalHeader.xMaxExtent">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.HorizontalHeader.caretSlopeRise">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.HorizontalHeader.caretSlopeRun">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.HorizontalHeader.numberOfHMetrics">
            A variable. 
        </member>
        <member name="T:VectorDraw.Fonts.ttf.WindowsMetrics">
            The components of table 'OS/2'.  
        </member>
        <member name="F:VectorDraw.Fonts.ttf.WindowsMetrics.xAvgCharWidth">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.WindowsMetrics.usWeightClass">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.WindowsMetrics.usWidthClass">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.WindowsMetrics.fsType">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.WindowsMetrics.ySubscriptXSize">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.WindowsMetrics.ySubscriptYSize">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.WindowsMetrics.ySubscriptXOffset">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.WindowsMetrics.ySubscriptYOffset">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.WindowsMetrics.ySuperscriptXSize">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.WindowsMetrics.ySuperscriptYSize">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.WindowsMetrics.ySuperscriptXOffset">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.WindowsMetrics.ySuperscriptYOffset">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.WindowsMetrics.yStrikeoutSize">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.WindowsMetrics.yStrikeoutPosition">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.WindowsMetrics.sFamilyClass">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.WindowsMetrics.panose">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.WindowsMetrics.achVendID">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.WindowsMetrics.fsSelection">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.WindowsMetrics.usFirstCharIndex">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.WindowsMetrics.usLastCharIndex">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.WindowsMetrics.sTypoAscender">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.WindowsMetrics.sTypoDescender">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.WindowsMetrics.sTypoLineGap">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.WindowsMetrics.usWinAscent">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.WindowsMetrics.usWinDescent">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.WindowsMetrics.ulCodePageRange1">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.WindowsMetrics.ulCodePageRange2">
            A variable. 
        </member>
        <member name="F:VectorDraw.Fonts.ttf.WindowsMetrics.sCapHeight">
            A variable. 
        </member>
        <member name="T:VectorDraw.DrawElements.grPatternLine">
            <summary>
            Implements an object used to calculate and draw hatch patterns.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLine.Clone">
            <summary>
            Creates and returns a new object with equal properties (as clone) as this one.
            </summary>
            <returns>Returns a new created grPatternLine object as clone to this one.</returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLine.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLine.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double[],System.Boolean)">
             <summary>
             Initializes the object with the passed parameters
             </summary>
             <param name="angle">The angle of the pattern.</param>
             <param name="originX">X value of the origin point.</param>
             <param name="originY">Y value of the origin point.</param>
             <param name="offsetX">X value of the offset point.</param>
             <param name="offsetY">Y value of the offset point.</param>
             <param name="dashes">A collection of double representing the dashes of the pattern.</param>
             <param name="applytransforms">If true then the offset point is tranformed depending the given angle.</param>
             <remarks >
             Important Notes: grPatternLine(angle, originX, originY, offsetX, offsetY, double[] dashes, bool applytransforms)
            - When you use the applytransforms = true then you have to use degrees (like 90 degrees) and not radians (like PI/2) in the angle
            - The point(OriginX,OriginY) remains the same as when you use applytransforms = false
            - The offset distance is translated accordingly with the angle. In the above example the offset distance x=6 and y=0 when is transformed by angle=90 becomes
            - the opposite; x=0 and y=6
             </remarks>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLine.Transform(System.Double,System.Double)">
            <summary>
            Tranforms all pattern's properties with the given rotation and scale.
            </summary>
            <param name="rotation">A double value representing the rotation in radians.</param>
            <param name="scale">A double value representing the scale to be applied.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLine.CalcSegmentLength">
            <summary>
            Returns the sum of dashes length
            </summary>
            <returns>The sum of dashes length</returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLine.Draw(VectorDraw.Render.vdRender,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Double)">
            <summary>
            Draws one line of the pattern to the passed vdRender object.
            </summary>
            <param name="render">A vdRender object where the object is going to be drawn.</param>
            <param name="_p1">First point of the line in Current selected render matrix coordinate plane.</param>
            <param name="_p2">Second point of the line in Current selected render matrix coordinate plane.</param>
            <param name="DXOffset">Extra offset to be added to the patterns offset if needed.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLine.Draw(System.Object,VectorDraw.Render.vdRender,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Double)">
            <summary>
            Draws one line of the pattern to the passed vdRender object.
            </summary>
            <param name="sender">The object that called this function,can be null.</param>
            <param name="render">A vdRender object where the object is going to be drawn.</param>
            <param name="_p1">First point of the line in Current selected render matrix coordinate plane.</param>
            <param name="_p2">Second point of the line in Current selected render matrix coordinate plane.</param>
            <param name="DXOffset">Extra offset to be added to the patterns offset if needed.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLine.ToString">
            <summary>
            Gets a System.String that represents the angle,origin,offset and dashes values
            of the grPatternLine Object.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLine.FromString(System.String)">
            <summary>
            Fills the object's properties from a given string using the ToString format.
            </summary>
            <param name="str">A string using the ToString format.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLine.ToString(VectorDraw.Serialize.Serializer)">
            <summary>
            Gets a System.String that represents the angle,origin,offset and dashes values
            of the grPatternLine Object.
            </summary>
            <param name="serializer">the Serializer object where the object is going to be saved.</param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLine.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the grPatternLine object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLine.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the grPatternLine object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="P:VectorDraw.DrawElements.grPatternLine.Angle">
            <summary>
            Get/Set the angle of the pattern in radians.
            </summary>
        </member>
        <member name="P:VectorDraw.DrawElements.grPatternLine.Origin">
            <summary>
            Get/Set the origin (start point) of the pattern.
            </summary>
        </member>
        <member name="P:VectorDraw.DrawElements.grPatternLine.Offset">
            <summary>
            Get/Set the offset point of the pattern that influences the distance between the pattern lines.
            </summary>
        </member>
        <member name="P:VectorDraw.DrawElements.grPatternLine.Dashes">
            <summary>
            Get/Set a collection of doubles that represents the pattern line display.
            </summary>
        </member>
        <member name="E:VectorDraw.DrawElements.grPatternLine.OnDrawLine">
            <summary>
            Fired before before a line is drawn.
            </summary>
        </member>
        <member name="T:VectorDraw.DrawElements.grPatternLine.DrawLine">
            <summary>
            Represents the method that will handle the <see cref="E:VectorDraw.DrawElements.grPatternLine.OnDrawLine"/> event.
            </summary>
            <param name="patternline">The <see cref="T:VectorDraw.DrawElements.grPatternLine"/> object for which the method is fired</param>
            <param name="render">A <see cref="T:VectorDraw.Render.vdRender"/> object into which the primitives will be drawn.</param>
            <param name="p1">Reference to the first point of line in Current selected render matrix coordinate plane</param>
            <param name="p2">Reference to the second point of line in Current selected render matrix coordinate plane</param>
            <param name="DXOffset">Extra offset to be added to the patterns offset if needed.</param>
            <param name="cancel">Set this as true in order not to run the default VectorDraw event code.</param>
        </member>
        <member name="T:VectorDraw.DrawElements.grPatternLines">
            <summary>
            Implements a collection of grPattern objects.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLines.ToString">
            <summary>
            Gets a System.String that represents the count of the collection's Objects.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLines.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLines.AddItem(VectorDraw.DrawElements.grPatternLine)">
            <summary>
            Adds a grPatternLine object to the collection.
            </summary>
            <param name="value">The grPatternLine object to be added to the collection.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLines.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLines.ChangeOrder(VectorDraw.DrawElements.grPatternLine,System.Boolean)">
            <summary>
            Changes the position of a grPatternLine object to the front or the end of the collection.
            </summary>
            <param name="Object">The grPatternLine object.</param>
            <param name="ToBack">If true moves the object to the beginning of the collection.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLines.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLines.EnsureCapacity(System.Int32)">
            <summary>
            Changes the capacity of the collection to the given value if the existing capacity is less than this value.
            </summary>
            <param name="min">A value representing the new capacity of the collection.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLines.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLines.InsertAt(System.Int32,VectorDraw.DrawElements.grPatternLine)">
            <summary>
            Insert a grPatternLine object at a specified index.
            </summary>
            <param name="index">The index where the object will be inserted.</param>
            <param name="Object">The grPatternLine object to be inserted.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLines.RemoveAt(System.Int32)">
            <summary>
            Removes an object from a specified index of the collection.
            </summary>
            <param name="index">The index of the object to be removed.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLines.RemoveItem(VectorDraw.DrawElements.grPatternLine)">
            <summary>
            Removes a specified object from the list.
            </summary>
            <param name="Object">The object to be removed from the collection.</param>
            <returns>True if the object was removed and false if the object was not found.</returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLines.Reverse">
            <summary>
            Changes the order of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLines.Clone">
            <summary>
            Creates and returns a new collection as copy of this one.
            </summary>
            <returns>A new created collection having all the objects of this one.</returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLines.AddRange(VectorDraw.DrawElements.grPatternLines)">
            <summary>
            Adds the objects of one list to the end of this list.
            </summary>
            <param name="c">A grPatternLines collection to be added to this list.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLines.Transform(System.Double,System.Double)">
            <summary>
            Transforms all the collection's objects with the specified angle and scale.
            </summary>
            <param name="angle">The angle to apply in radians.</param>
            <param name="scale">The scale to apply.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLines.Transform(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all the collection's objects with the specified matrix.
            </summary>
            <param name="mat">The matrix to be applied to the collection.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLines.#ctor">
            <summary>
            Initializes the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLines.#ctor(System.Int32)">
            <summary>
            Initializes the collection with a given capacity.
            </summary>
            <param name="capacity">An integer representing the preallocated memory size of the collection.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLines.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the grPatternLines object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternLines.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the grPatternLines object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="P:VectorDraw.DrawElements.grPatternLines.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.DrawElements.grPatternLines.Item(System.Int32)">
            <summary>
            Get a grPatternLine object from the collection at a specified index.
            </summary>
            <param name="index">A zero based index of the collection.</param>
            <returns>The grPatternLine object at the specified index.</returns>
        </member>
        <member name="T:VectorDraw.DrawElements.grPatternInvisible">
            <summary>
            Provides a INVISIBLE hatch pattern.The invisible hatch pattens are selected like solid but they are not draw any pattern lines.
            </summary>
        </member>
        <member name="T:VectorDraw.DrawElements.grPattern">
            <summary>
            Implements an object used to draw hatch patterns.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grPattern.GetBindPtr(System.IntPtr)">
            <summary>
            Internally used.Passes the passed pattern pointer to the cpp library and get the pointer from that object.
            </summary>
            <param name="vdrawGlContext">The context (cpp) of the render where the pattern is going to be added.</param>
            <returns>The pointer of the object to the cpp library.</returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grPattern.UpdateBinds(System.Boolean)">
            <summary>
            Update the object.
            </summary>
            <param name="isDisposing">If true then the object is deleted and cleared from the memory , else it is marked as updated in order to be recalculated.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grPattern.Update">
            <summary>
            Updates the object. <see cref="M:VectorDraw.DrawElements.grPattern.UpdateBinds(System.Boolean)"/> method is called.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grPattern._patterns">
            <summary>
            A collection of grPatternLines providing information about the hatch pattern.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grPattern.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grPattern.ModifyByDpiY(System.Single,System.Double,System.Double,VectorDraw.Geometry.MatrixProperties)">
            <summary>
            if the object is <see cref="M:VectorDraw.DrawElements.grPattern.IsByDpiy"/> modifies its pattern lines depend on the active zoom.
            </summary>
            <param name="dpi">Dots per Inch of the active rendering</param>
            <param name="pixelsize">The size in Drawing Units of one pixel of the active render drawing context.</param>
            <param name="PatternLineOffset">Offset between pattern lines in inches.</param>
            <param name="matprops">Active render world to view matrix properties.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grPattern.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grPattern.#ctor(System.String)">
            <summary>
            Initializes ther object with the given name.
            </summary>
            <param name="name">A string representing the name of the pattern.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grPattern.IsByDpiy">
            <summary>
            Checks if this object represents a specific hatch pattern(standard patterns:u10,u20,U10_45,U10_135,U10_90,U10_45_135).
            </summary>
            <returns>A boolean value representing if this pattern is one of the following:u10,u20,U10_45,U10_135,U10_90,U10_45_135.</returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grPattern.IsSolid">
            <summary>
            Checks if the pattern is a solid pattern.
            </summary>
            <returns>True if the hatch pattern is solid.</returns>
        </member>
        <member name="P:VectorDraw.DrawElements.grPattern.Name">
            <summary>
            Get/Set the name of the hatch pattern.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternInvisible.#ctor">
            <summary>
            Initializes a solid hatch pattern named INVISIBLE.
            </summary>
        </member>
        <member name="T:VectorDraw.DrawElements.grPatternSolid">
            <summary>
            Provides a solid hatch pattern.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternSolid.#ctor">
            <summary>
            Initializes a solid hatch pattern named SOLID.
            </summary>
        </member>
        <member name="T:VectorDraw.DrawElements.grPatternSingle">
            <summary>
            Provides a single line hatch pattern.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternSingle.#ctor">
            <summary>
            Initializes a single line hatch pattern name U1.
            </summary>
        </member>
        <member name="T:VectorDraw.DrawElements.grPatternDouble">
            <summary>
            Provides a double line hatch pattern.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternDouble.#ctor">
            <summary>
            Initializes a double crossed line hatch pattern named U2.
            </summary>
        </member>
        <member name="T:VectorDraw.DrawElements.grPatternHorizontal">
            <summary>
            Provides a horizontal line hatch pattern.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternHorizontal.#ctor">
            <summary>
            Initilizes a horizontal line hatch pattern names U10.
            </summary>
        </member>
        <member name="T:VectorDraw.DrawElements.grPatternCross">
            <summary>
            Provides a cross line hatch pattern.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternCross.#ctor">
            <summary>
            Initializes a cross line hatch pattern named U20.
            </summary>
        </member>
        <member name="T:VectorDraw.DrawElements.grPatternBDiagonal">
            <summary>
            Provides a 45 degrees angled line hatch pattern.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternBDiagonal.#ctor">
            <summary>
            Initializes a 45 degrees angled line hatch pattern named U10_45.
            </summary>
        </member>
        <member name="T:VectorDraw.DrawElements.grPatternFDiagonal">
            <summary>
            Provides a 135 degrees angled line hatch pattern.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternFDiagonal.#ctor">
            <summary>
            Initializes a 135 degrees angled line hatch pattern named U10_135.
            </summary>
        </member>
        <member name="T:VectorDraw.DrawElements.grPatternVertical">
            <summary>
            Provides a vertical line hatch pattern.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternVertical.#ctor">
            <summary>
            Initializes a vertical line hatch pattern named U10_90.
            </summary>
        </member>
        <member name="T:VectorDraw.DrawElements.grPatternDiagCross">
            <summary>
            Provides a 45 degrees cross line hatch pattern.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grPatternDiagCross.#ctor">
            <summary>
            Initializes a 45 degrees cross line hatch pattern named U10_45_135.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.LineTypeSegment">
            <summary>
            Implements the LineTypeSegment object used to store information about linetype's segments.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.LineTypeSegment.shapefontfilename">
            <summary>
            Internally used to set the shape's style name.It is recomended to use the <see cref="P:VectorDraw.Render.LineTypeSegment.ShapeStyleName"/> property instead.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegment.Clone">
            <summary>
            Creates and returnes a LineTypeSegment segment equal to this one.
            </summary>
            <returns>A new created LineTypeSegment segment as clone to this one.</returns>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegment.#ctor(System.Double)">
            <summary>
            Initializes a dashLen length Dot segment.
            </summary>
            <param name="dashLen">The length of the Dot segment.</param>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegment.#ctor">
            <summary>
            Initializes a 0 length Dor segment.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegment.GetHashCode">
            <summary>
            Serves as a hash function for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegment.Equals(System.Object)">
            <summary>
            Checks if the passed object is a LineTypeSegment object and all it's properties are equal to this one.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegment.op_Equality(VectorDraw.Render.LineTypeSegment,VectorDraw.Render.LineTypeSegment)">
            <summary>
            Implements the == operator for two linetype segments.
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegment.op_Inequality(VectorDraw.Render.LineTypeSegment,VectorDraw.Render.LineTypeSegment)">
            <summary>
            Implements the != operator for two LineTypeSegment objects.
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegment.ToString">
            <summary>
            Gets a System.String that represents the properties values of the LineTypeSegment Object.
            </summary>
            <remarks>
            Properties represented: flag, dashLen, shapenumber, shapeOffsetX, shapeOffsetY, shapeScale, shapeRotation and shapeText.
            </remarks>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegment.FromString(System.String)">
            <summary>
            Fill the object's properties from a passed string that uses the ToString format.
            </summary>
            <param name="str">A string using the ToString format.</param>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegment.ToString(VectorDraw.Serialize.Serializer)">
            <summary>
            Gets a System.String that represents the properties values of the LineTypeSegment Object.
            </summary>
            <param name="serializer">the Serializer object where the object is going to be saved.</param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegment.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the LineTypeSegment object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegment.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the LineTypeSegment object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="P:VectorDraw.Render.LineTypeSegment.Flag">
            <summary>
            Get/Set the type of the Segment.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.LineTypeSegment.DashLen">
            <summary>
            Get/Set the legth of the segment when flag is DOT.
            </summary>
            <remarks>
            A positive decimal number indicates a pen-down (dash) segment of that length. </remarks>
            <remarks>A negative decimal number indicates a pen-up (space) segment of that length. </remarks>
            <remarks>A dash length of 0 draws a dot.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.LineTypeSegment.ShapeOffsetX">
            <summary>
            Get/Set the segment's text shape offset at the x direction when flag is TTF or SHX text.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.LineTypeSegment.ShapeOffsetY">
            <summary>
            Get/Set the segment's text shape offset at the y direction when flag is TTF or SHX text.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.LineTypeSegment.ShapeScale">
            <summary>
            Get/Set the scale of the segment when flag is TTF or SHX text.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.LineTypeSegment.ShapeRotation">
            <summary>
            Get/Set the rotation in radians of the segment's text shape when flag is TTF or SHX text.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.LineTypeSegment.Shapenumber">
            <summary>
            A number that represents the character number used for flag SHX text.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.LineTypeSegment.ShapeText">
            <summary>
            A string that represents the text used in the linetype when flag is TTF text.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.LineTypeSegment.ShapeStyle">
            <summary>
            Get/Set the grTextStyle object used if the linetype uses texts when flag is TTF or SHX text.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.LineTypeSegment.ShapeStyleName">
            <summary>
            Get the name of the vdTextstyle used if the linetype uses texts.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.LineTypeSegment.LineTypeElementType">
            <summary>
            Type of the linetype segment.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.LineTypeSegment.LineTypeElementType.Dot">
            <summary>
            The segment is a regular dot segment.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.LineTypeSegment.LineTypeElementType.TTF_TEXT">
            <summary>
            The segment uses True Type Font text.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.LineTypeSegment.LineTypeElementType.SHX_TEXT">
            <summary>
            The segment uses SHX text.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.LineTypeSegments">
            <summary>
            Implements a collection of linetype segments that cosnsist a linetype.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegments.AddItem(VectorDraw.Render.LineTypeSegment)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
            <param name="value">An object to be added to the collection.</param>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegments.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegments.ChangeOrder(VectorDraw.Render.LineTypeSegment,System.Boolean)">
            <summary>
            Places an existing object of the collection to the beginning or the end of the list.
            </summary>
            <param name="Object">The object to be placed.</param>
            <param name="ToBack">If this value is true then the object will be placed to the end of the list else it will be placed to the beginning.</param>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegments.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegments.EnsureCapacity(System.Int32)">
            <summary>
            Changes the capacity of the collection to the given value if the existing capacity is less than this value.
            </summary>
            <param name="min">A value representing the new capacity of the collection.</param>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegments.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegments.InsertAt(System.Int32,VectorDraw.Render.LineTypeSegment)">
            <summary>
            Insert an object at a specified index.
            </summary>
            <param name="index">The index where the object will be inserted.</param>
            <param name="Object">The object to be inserted.</param>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegments.RemoveAt(System.Int32)">
            <summary>
            Removes an object from a specified index of the collection.
            </summary>
            <param name="index">The index of the object to be removed.</param>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegments.RemoveItem(VectorDraw.Render.LineTypeSegment)">
            <summary>
            Removes a specified object from the list.
            </summary>
            <param name="Object">The object to be removed from the collection.</param>
            <returns>True if the object was removed and false if the object was not found.</returns>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegments.Reverse">
            <summary>
            Changes the order of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegments.AddRange(VectorDraw.Render.LineTypeSegments)">
            <summary>
            Adds the objects of the passed collection to the end of this collection.
            </summary>
            <param name="c">Another LineTypeSegments collection to be added to this collection.</param>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegments.Clone">
            <summary>
            Creates and returnes a LineTypeSegments collection as clone to this one.
            </summary>
            <returns>A LineTypeSegments collection as clone to this one.</returns>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegments.UpdateLength">
            <summary>
            Updates the total segment length of the collection.Use this function to update the length of a linetype after a change to a segment's length.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegments.MaxTextHeight">
            <summary>
            Calculates and returns the maximum text height of the texts that consist the linetype if any.
            </summary>
            <returns>A double value representing the maximum text height of the linetype.</returns>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegments.#ctor(System.Double[])">
            <summary>
            Initializes the collection by adding <see cref="T:VectorDraw.Render.LineTypeSegment"/> of <see cref="F:VectorDraw.Render.LineTypeSegment.LineTypeElementType.Dot"/> type Flag getting the values from dashes input parameter for each ellement.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegments.#ctor">
            <summary>
            Initializes the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegments.#ctor(System.Int32)">
            <summary>
            Initializes the collection object with a given capacity.
            </summary>
            <param name="capacity">An integer representing the preallocated memory size of the collection.</param>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegments.ToString">
            <summary>
            Gets a System.String that represents the items count of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegments.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the LineTypeSegments object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Render.LineTypeSegments.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the LineTypeSegments object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="P:VectorDraw.Render.LineTypeSegments.Count">
            <summary>
            Get the number of items in the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.LineTypeSegments.Item(System.Int32)">
            <summary>
            Get/Set the object at a specified index of the collection.
            </summary>
            <param name="index">The index of the object.</param>
            <returns>The object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Render.LineTypeSegments.OverAllLength">
            <summary>
            Get the total sum of the collection's segment lengths.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.MultiRender">
            <summary>
            Internal class that implements a MultiRender object.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.IRenderList">
            <summary>
            This interface is used in order to pass properties from the VectorDraw.Professional.dll to the VectorDraw.Render.dll
            </summary>
        </member>
        <member name="M:VectorDraw.Render.IRenderList.GenList">
            <summary>
            This interface is used in order to pass properties from the VectorDraw.Professional.dll to the VectorDraw.Render.dll
            </summary>
            <remarks><see cref="M:VectorDraw.Render.MultiRender.GenList"/></remarks>
        </member>
        <member name="M:VectorDraw.Render.IRenderList.NewList(VectorDraw.Render.IRenderListItem)">
            <summary>
            This interface is used in order to pass properties from the VectorDraw.Professional.dll to the VectorDraw.Render.dll
            </summary>
            <remarks><see cref="M:VectorDraw.Render.MultiRender.NewList(VectorDraw.Render.IRenderListItem)"/></remarks>
        </member>
        <member name="M:VectorDraw.Render.IRenderList.EndList(VectorDraw.Render.IRenderListItem)">
            <summary>
            This interface is used in order to pass properties from the VectorDraw.Professional.dll to the VectorDraw.Render.dll
            </summary>
            <remarks><see cref="M:VectorDraw.Render.MultiRender.EndList(VectorDraw.Render.IRenderListItem)"/></remarks>
        </member>
        <member name="M:VectorDraw.Render.IRenderList.DrawList(VectorDraw.Render.IRenderListItem)">
            <summary>
            This interface is used in order to pass properties from the VectorDraw.Professional.dll to the VectorDraw.Render.dll
            </summary>
            <remarks><see cref="M:VectorDraw.Render.MultiRender.DrawList(VectorDraw.Render.IRenderListItem)"/></remarks>
        </member>
        <member name="M:VectorDraw.Render.IRenderList.DrawBindMappedImageList(VectorDraw.Render.IRenderListItem,VectorDraw.Render.ISupportdMappedImages)">
            <summary>
            This interface is used in order to pass properties from the VectorDraw.Professional.dll to the VectorDraw.Render.dll
            </summary>
            <remarks><see cref="M:VectorDraw.Render.MultiRender.DrawBindMappedImageList(VectorDraw.Render.IRenderListItem,VectorDraw.Render.ISupportdMappedImages)"/></remarks>
        </member>
        <member name="M:VectorDraw.Render.IRenderList.ListDeleted(VectorDraw.Render.IRenderListItem)">
            <summary>
            This interface is used in order to pass properties from the VectorDraw.Professional.dll to the VectorDraw.Render.dll
            </summary>
            <remarks><see cref="M:VectorDraw.Render.MultiRender.ListDeleted(VectorDraw.Render.IRenderListItem)"/></remarks>
        </member>
        <member name="P:VectorDraw.Render.IRenderList.SupportLists">
            <summary>
            This interface is used in order to pass properties from the VectorDraw.Professional.dll to the VectorDraw.Render.dll
            </summary>
            <remarks><see cref="P:VectorDraw.Render.MultiRender.SupportLists"/></remarks>
        </member>
        <member name="P:VectorDraw.Render.IRenderList.CurentListDepth">
            <summary>
            This interface is used in order to pass properties from the VectorDraw.Professional.dll to the VectorDraw.Render.dll
            </summary>
            <remarks><see cref="P:VectorDraw.Render.MultiRender.CurentListDepth"/></remarks>
        </member>
        <member name="P:VectorDraw.Render.IRenderList.IsSelectingMode">
            <summary>
            This interface is used in order to pass properties from the VectorDraw.Professional.dll to the VectorDraw.Render.dll
            </summary>
            <remarks><see cref="P:VectorDraw.Render.MultiRender.IsSelectingMode"/></remarks>
        </member>
        <member name="P:VectorDraw.Render.IRenderList.vdContext">
            <summary>
            Returns the drawing context that controls the pixelization to the output device.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.#ctor">
            <summary>
            Initializes a new instance of the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.#ctor(System.Type)">
            <summary>
            Initializes the object with the passed parameter.
            </summary>
            <param name="basicRenderType">A type that represents the type of the render for example <see cref="T:VectorDraw.Render.vdrawglRender"/></param>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.PushHighLightFilter(VectorDraw.Render.vdRender.HighLightFilter)">
            <summary>
            Activates a new highlight property for the vdRender object.
            </summary>
            <param name="nvalue">The new highlight object to be activated.</param>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.PopHighLightFilter">
            <summary>
            Returns to the previous selected highlight.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.PushAlignToView(VectorDraw.Render.vdRender.MatrixPushFlag,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector,System.Int32,System.Double,System.Double)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.PushAlignToView(VectorDraw.Render.vdRender.MatrixPushFlag,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector,System.Int32,System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.PopAlignToView">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.PopAlignToView"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.SetDrawStipple(System.Boolean)">
            <summary>
            Se to the vdRender a boolean value either to use a stipple filter or not. Striple filter is used for the SectionClip extended highlight filter.
            </summary>
            <param name="bval">True or false to enable this stipple filter.</param>
            <returns> the previous selected stipple. </returns>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.PushMatrix(VectorDraw.Geometry.Matrix)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.PopMatrix">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.MatrixView2PixelChanged">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.MatrixViewChanged">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.LockToPixelMatrix">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.LockToPixelMatrix"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.UnLockToPixelMatrix">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.UnLockToPixelMatrix"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.PushDrawFigureList(System.Object)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.PopDrawFigureList">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.PenStyleChanged(VectorDraw.Render.vdGdiPenStyle)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.FadeEffectChanged">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.FadeEffectChanged"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.IsBoundaryClip(VectorDraw.Geometry.Box)">
            <summary>
            Checks if the passed Box object is inside the clipping rectangle of the vdRender object.
            </summary>
            <param name="bound">A Box object needed.</param>
            <returns>True if the Box is inside the clipping rectangle.</returns>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.Lock">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.UnLock">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.ApplyColorPalette">
            <summary>
            Applies the color palette to the render.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.MultiRender.mNewStarted">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.StartDraw(System.Boolean)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.EndDraw">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.CloseOpenPolygon">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.CloseOpenPolygon"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.Update">
            <summary>
            Updates the object temporary object resources.
            </summary>
            <remarks >
            Call this method to force object resources to be recalculated.
            </remarks>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.Init">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.Destroy(System.Boolean)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.Refresh(System.Drawing.Graphics,System.Int32,System.Int32)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.Refresh">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.OnUpdateClipping(System.Boolean)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.GetIdAtPixel(System.Int32,System.Int32)">
            <summary>
            Overrides the <see cref="M:VectorDraw.Render.vdRender.GetIdAtPixel(System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.GetDepthAtPixel(System.Int32,System.Int32)">
            <summary>
            Overrides the <see cref="M:VectorDraw.Render.vdRender.GetDepthAtPixel(System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.UnprojectPixel2View(VectorDraw.Geometry.gPoint)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.UnprojectPixel2View(VectorDraw.Geometry.gPoint)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.SetLineJoinRound">
            <summary>
            Select a circular join between line segments
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.SetLineJoinDefault">
            <summary>
            Select the default join between line segments depend on <see cref="F:VectorDraw.Render.vdRender.PenCapsSquare"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.EnableLighting(System.Boolean)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.Clear(System.Drawing.Color,System.Boolean)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.ClearDepthBuffer">
            <summary>
            Overrides the <see cref="M:VectorDraw.Render.vdRender.ClearDepthBuffer"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.ClearAllSectionClips">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.ClearAllSectionClips"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.ApplySectionClips(VectorDraw.Geometry.ISectionClips)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.ApplySectionClips(VectorDraw.Geometry.ISectionClips)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.SelectTexture(System.Boolean)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.StartBlendingRender">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.SetTransparentOn">
            <summary>
            overrides the  <see cref="M:VectorDraw.Render.vdRender.SetTransparentOn"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.SetBlendDrawMode(System.Boolean)">
            <summary>
            Select the active blend mode.
            </summary>
            <param name="isFront">True to select the front blending, False for the back blending.</param>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.StopBlendingRender">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.StartEdgeRender">
            <summary>
            Overrides the <see cref="M:VectorDraw.Render.vdRender.StartEdgeRender"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.StopEdgeRender">
            <summary>
            Overrides the <see cref="M:VectorDraw.Render.vdRender.StopEdgeRender"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.DrawLight(System.Object,VectorDraw.Render.IRenderingLight)">
            <summary>
            Overrides the <see cref="M:VectorDraw.Render.vdRender.DrawLight(System.Object,VectorDraw.Render.IRenderingLight)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.PixelLineDraw(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Overrides the <see cref="M:VectorDraw.Render.vdRender.PixelLineDraw(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.PushClipPolygon(VectorDraw.Geometry.gPoints)">
            <summary>
            Push a polygon from the passed parameter as a clip boundary for the render.
            </summary>
            <param name="pts">A collection of points that represent the clip polygon in World coordinate system.</param>
            <returns>True if the clip was set succesfully.</returns>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.PopClipPolygon">
            <summary>
            Use this method to pop the clip polygon that was set whit <see cref="M:VectorDraw.Render.MultiRender.PushClipPolygon(VectorDraw.Geometry.gPoints)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.DrawLine(System.Object,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32)">
            <summary>
            Overrides the <see cref="M:VectorDraw.Render.vdRender.DrawLine(System.Object,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.DrawLine(System.Object,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.DrawPoint(System.Object,VectorDraw.Geometry.gPoint)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.DrawPolyface(System.Object,VectorDraw.Geometry.Int32Array,VectorDraw.Geometry.gPoints)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.DrawPLine(System.Object,VectorDraw.Geometry.gPoints,System.Double,VectorDraw.Render.vdRender.PolylineFlag)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.DrawPLine(System.Object,VectorDraw.Geometry.gPoints)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.DrawImagePolygon(System.Object,VectorDraw.Render.ImageBind,System.Double,System.Double,VectorDraw.Geometry.gPoints)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.DrawPolygon(System.Object,VectorDraw.Geometry.gPoints,VectorDraw.Geometry.Vector,System.Boolean)">
            <summary>
            Draws a closed polygon.
            </summary>
            <param name="sender">The object that called this function(for example a vdPolyline object),can be null</param>
            <param name="points">A collection of gPoint of the polygon in World Coordinate System.</param>
            <param name="PlaneNormal">A normal perpedicular to the plane of polygon.</param>
            <param name="FillOn">True in order to fill the polygon with the current selected solid brush.</param>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.DrawSolidPolygon(System.Object,VectorDraw.Geometry.gPoints,VectorDraw.Render.vdRender.PolygonType)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.DrawFace4(System.Object,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.DrawString(System.Object,VectorDraw.Render.grTextStyle,VectorDraw.Render.grTextStyleExtra,System.String,VectorDraw.Geometry.Box)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.DrawImage(System.Object,VectorDraw.Render.ImageBind,System.Double,System.Double)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.DrawGdiBox(System.Drawing.Point,System.Int32)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.DrawGdiLine(System.Int32,System.Int32,System.Double,System.Int32,System.Int32,System.Double)">
            <summary>
            Overrides the <see cref="M:VectorDraw.Render.vdRender.DrawGdiLine(System.Int32,System.Int32,System.Double,System.Int32,System.Int32,System.Double)"/>
            </summary>
            <param name="sx"></param>
            <param name="sy"></param>
            <param name="sz"></param>
            <param name="ex"></param>
            <param name="ey"></param>
            <param name="ez"></param>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.DrawBoundBox(System.Object,VectorDraw.Geometry.Box)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.DrawSolidBoundBox(System.Object,VectorDraw.Geometry.Box)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.ClearDisplayLists(System.Boolean)">
            <summary>
            Destroy all created Display lists and free the memory.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.EnableBufferId(System.Boolean)">
            <summary>
            Overrides the <see cref="M:VectorDraw.Render.vdRender.EnableBufferId(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.EnableDepthBuffer(System.Boolean)">
            <summary>
            Overrides the <see cref="M:VectorDraw.Render.vdRender.EnableDepthBuffer(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.EnableDepthBufferWrite(System.Boolean)">
            <summary>
            Overrides the <see cref="M:VectorDraw.Render.vdRender.EnableDepthBufferWrite(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.EnableTexture(System.Boolean)">
            <summary>
            Overrides the <see cref="M:VectorDraw.Render.vdRender.EnableTexture(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.EnableColorBuffer(System.Boolean)">
            <summary>
            Overrides the <see cref="M:VectorDraw.Render.vdRender.EnableColorBuffer(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.EnableCoordCorrection(System.Boolean)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.EnableCoordCorrection(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.GenList">
            <summary>
            Generates a list and returns the pointer of the created list.
            </summary>
            <returns>The pointer of the created list.</returns>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.NewList(VectorDraw.Render.IRenderListItem)">
            <summary>
            Implements the <see cref="M:VectorDraw.Render.IRenderList.NewList(VectorDraw.Render.IRenderListItem)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.EndList(VectorDraw.Render.IRenderListItem)">
            <summary>
            Implements the <see cref="M:VectorDraw.Render.IRenderList.EndList(VectorDraw.Render.IRenderListItem)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.DrawList(VectorDraw.Render.IRenderListItem)">
            <summary>
            Implements the <see cref="M:VectorDraw.Render.IRenderList.DrawList(VectorDraw.Render.IRenderListItem)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.DrawBindMappedImageList(VectorDraw.Render.IRenderListItem,VectorDraw.Render.ISupportdMappedImages)">
            <summary>
            Implements the <see cref="M:VectorDraw.Render.IRenderList.DrawBindMappedImageList(VectorDraw.Render.IRenderListItem,VectorDraw.Render.ISupportdMappedImages)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.MultiRender.ListDeleted(VectorDraw.Render.IRenderListItem)">
            <summary>
            Implements the <see cref="M:VectorDraw.Render.IRenderList.ListDeleted(VectorDraw.Render.IRenderListItem)"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.MultiRender.IsOpenGLRender">
            <summary>
            Returns true if the <see cref="P:VectorDraw.Render.MultiRender.ActiveRender"/> implements an opengl device context.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.MultiRender.Select3dRender">
            <summary>
            Returns the render object that used to select objects  that are sorted depend of their depth form current eye view from nearest to farest.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.MultiRender.ActiveRender">
            <summary>
            Returns the active render object.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.MultiRender.ActionRender">
            <summary>
            Internally used.The render used to draw action.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.MultiRender.WindowControlHandle">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.MultiRender.IsEnableCoordCorrection">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.IsEnableCoordCorrection"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.MultiRender.IsAlignToViewOn">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.IsAlignToViewOn"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.MultiRender.PolygonMode">
            <summary>
            Overrides the <see cref="P:VectorDraw.Render.vdRender.PolygonMode"/> 
            </summary>
        </member>
        <member name="P:VectorDraw.Render.MultiRender.LockPenStyle">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.LockPenStyle"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.MultiRender.IsLock">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.MultiRender.IsContextCreated">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.IsContextCreated"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.MultiRender.Started">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.MultiRender.RenderMode">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.RenderMode"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.MultiRender.StartBreakDrawTime">
            <summary>
            Overrides the <see cref="P:VectorDraw.Render.vdRender.StartBreakDrawTime"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.MultiRender.DpiY">
            <summary>
            Get a float value representing the dots per inch of the selected graphic device.Default value 96.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.MultiRender.IsCreatingList">
            <summary>
            Returns true if the draw primitives are called while creating display list.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.MultiRender.SupportLights">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.MultiRender.SupportSectionClips">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.MultiRender.SectionClips">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.SectionClips"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.MultiRender.IsBlendingOn">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.IsBlendingOn"/> property.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.MultiRender.IsDrawEdgeOn">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.IsDrawEdgeOn"/> property.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.MultiRender.IsDepthBufferEnable">
            <summary>
            Overrides the <see cref="P:VectorDraw.Render.vdRender.IsDepthBufferEnable"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.MultiRender.IsBufferIdEnable">
            <summary>
            Overrides the <see cref="P:VectorDraw.Render.vdRender.IsBufferIdEnable"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.MultiRender.vdContext">
            <summary>
            Returns the drawing context that controls the pixelization to the output device.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.MultiRender.CurentListDepth">
            <summary>
            Implements the <see cref="P:VectorDraw.Render.IRenderList.CurentListDepth"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.MultiRender.IsSelectingMode">
            <summary>
            Implements the <see cref="P:VectorDraw.Render.IRenderList.IsSelectingMode"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.MultiRender.SupportLists">
            <summary>
            Implements the <see cref="P:VectorDraw.Render.IRenderList.SupportLists"/>
            </summary>
        </member>
        <member name="T:VectorDraw.Render.VportMultiRender">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.VportMultiRender.IsDrawable">
            <summary>
            Internally used only.Get/Set a value that defines if the owner viewport is drawing.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.VportMultiRender.IsViewportActive">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.VportMultiRender.Center">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.VportMultiRender.VportWidth">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.VportMultiRender.VportHeight">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.VportMultiRender.ClipBox">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.VportMultiRender.ViewMaximized">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.VportMultiRender.Width">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.VportMultiRender.Height">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.VportMultiRender.UpperLeft">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.VportMultiRender.VportScale">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.grTextStyle">
            <summary>
            Implements the grTextStyle object used to draw the text style of drawable strings.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.DefaultTTFName">
            <summary>
            Default True Type Font Name used by TextStyles
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.wincode">
            <summary>
            Internally used only to convert VDF files.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.grTextStyle.asWinCodePage(System.Int32)">
            <summary>
            Internally used only to convert VDF files.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.grTextStyle.GetDefaultRes">
            <summary>
            Returns the default grTextStyle object embeded in the resources
            </summary>
            <returns>The default grTextStyle object embeded in the resources</returns>
        </member>
        <member name="M:VectorDraw.Render.grTextStyle.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.grTextStyle.#ctor(System.String)">
            <summary>
            Initializes the object with the given fontfile.
            </summary>
            <param name="fontfile">A string representing the fontfile of the style.</param>
        </member>
        <member name="M:VectorDraw.Render.grTextStyle.FindShxShapeNumber(System.String,System.UInt16@)">
            <summary>
            Find the shape number for a shape description name when <see cref="P:VectorDraw.Render.grTextStyle.FontFile"/> is a SHX font file tpe.
            </summary>
            <param name="description">The description name to search for.</param>
            <param name="shapeNumber">On successed returns the shape number for the specific shape name.</param>
            <returns>True if the shape name exist in the selected SHX font file.  Note that the SHX font should be already loaded in the document and not substituted by a TTF.</returns>
        </member>
        <member name="M:VectorDraw.Render.grTextStyle.FindShxShapeName(System.UInt16,System.String@)">
            <summary>
            Find the shape name for a shape number when <see cref="P:VectorDraw.Render.grTextStyle.FontFile"/> is a SHX font file tpe.
            </summary>
            <param name="shapeNumber">The shape number to search for.</param>
            <param name="shapeName">On successed returns the shape name for the specific shape number.</param>
            <returns>True if the shape number exist in the selected SHX font file. Note that the SHX font should be already loaded in the document and not substituted by a TTF.</returns>
        </member>
        <member name="M:VectorDraw.Render.grTextStyle.IsBigFont(System.String)">
            <summary>
            Checks if the passed font is SHX big font. 
            </summary>
            <param name="filename">The filename of the font.</param>
            <returns>True if the passed font is SHX big font.</returns>
        </member>
        <member name="M:VectorDraw.Render.grTextStyle.Dispose">
            <summary>
            Dispose of the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.grTextStyle.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.Render.grTextStyle.StringToCharArray(System.String)">
            <summary>
            Copies the characters of passed string to a Unicode character array.
            </summary>
            <param name="str">A string object to be converted.</param>
            <returns>
             A Unicode character array whose elements are the individual characters of the passed string.
            </returns>
        </member>
        <member name="M:VectorDraw.Render.grTextStyle.IsClear">
            <summary>
            Check if the font file of the style is valid.
            </summary>
            <returns>True if not valid font file is selected to the style.</returns>
        </member>
        <member name="M:VectorDraw.Render.grTextStyle.FindFile(System.String)">
            <summary>
            Find the fullpath of the passed font file usfull for SHX fonts.
            </summary>
            <param name="fileName">The font file to search.</param>
            <returns>A string representing the full path of the font file.</returns>
        </member>
        <member name="M:VectorDraw.Render.grTextStyle.FindTTFName(System.String)">
            <summary>
            Returns a valid Existing True Type Font Name.
            </summary>
            <param name="name">True Type Font Name to check.</param>
            <returns>Returns a valid Existing True Type Font Name</returns>
        </member>
        <member name="M:VectorDraw.Render.grTextStyle.DisposeGlobals">
            <summary>
            Dispose and clear all global calculating grTextStyle.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.grTextStyle.Calculate">
            <summary>
            Calculate the resources of the object used to draw the text.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.grTextStyle.GetBaseTextBox(System.String,VectorDraw.Render.grTextStyleExtra)">
            <summary>
            Calculates and returns a Box object which includes the passed string drawn with the passed extras.
            </summary>
            <param name="str">The string to calculate it's boundary.</param>
            <param name="extra">The extra features to use when draw the object.</param>
            <returns>The bounding box of the passed drawn string.</returns>
        </member>
        <member name="M:VectorDraw.Render.grTextStyle.DrawTTFString(System.Object,VectorDraw.Render.vdRender,VectorDraw.Render.grTextStyleExtra,System.String)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.grTextStyle.DrawTTFString(System.Object,VectorDraw.Render.vdRender,VectorDraw.Render.grTextStyleExtra,System.String,System.Boolean)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.grTextStyle.DrawSHXString(System.Object,VectorDraw.Render.vdRender,VectorDraw.Render.grTextStyleExtra,System.String)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.grTextStyle.ShxShapeDesc(System.Char,System.Double@,System.Double@,System.Double@)">
            <summary>
            Internally used.Get the horizontal and vertical offset of the character origin to the next draw character.
            </summary>
            <param name="glyphId"></param>
            <param name="horiz_adv_x"></param>
            <param name="vert_adv_y"></param>
            <param name="characterwidth"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Render.grTextStyle.getShapeInfo(System.Char,VectorDraw.Render.grTextStyleExtra,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Calculate the passed character bounds for this style using specified grTextStyleExtra.
            </summary>
            <param name="chr">Character in Unicode range.</param>
            <param name="extra"><see cref="T:VectorDraw.Render.grTextStyleExtra"/> to be used for calculations or null in order this object <see cref="P:VectorDraw.Render.grTextStyle.Extra"/></param>
            <param name="horiz_adv_x">The x distance from character origin to the next character origin x</param>
            <param name="vert_adv_y">The y distance from character origin to the next character origin y</param>
            <param name="xmin">Minimum x of bounding box that complete enclose the character draw</param>
            <param name="ymin">Minimum y of bounding box that complete enclose the character draw</param>
            <param name="xmax">Maximum x of bounding box that complete enclose the character draw</param>
            <param name="ymax">Maximum y of bounding box that complete enclose the character draw</param>
        </member>
        <member name="M:VectorDraw.Render.grTextStyle.IsValidTTTFile(System.String)">
            <summary>
            Check if a fontfile with .ttf extension exist and is a valid True Type Font
            </summary>
        </member>
        <member name="M:VectorDraw.Render.grTextStyle.GetTTFFileNames">
            <summary>
            Returns a dictionary containing TrueType Font names and their .ttf fontfile
            </summary>
            <returns>Returns a dictionary containing TrueType Font names and their .ttf fontfile</returns>
        </member>
        <member name="M:VectorDraw.Render.grTextStyle.GetTTFFileName(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Returns the font file for a specific TTF Font name.
            </summary>
            <param name="TTFFontName">A TrueType font face name as it used in TextStyles Fontfile property.</param>
            <param name="TTFdict">A dictionary previous calculated from <see cref="M:VectorDraw.Render.grTextStyle.GetTTFFileNames"/> method.</param>
            <returns>Returns the font file for a specific TTF Font name.</returns>
        </member>
        <member name="P:VectorDraw.Render.grTextStyle.OwnerStyleName">
            <summary>
            Get the vdTextstyle name that belong this style.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.grTextStyle.Thickness">
            <summary>
            Get/Set the thickness that the string will use when drawn.
            </summary>
            <remarks>If the selected font file is True Type and the render mode is Wire2D then the thickness is not drawn.</remarks>
        </member>
        <member name="P:VectorDraw.Render.grTextStyle.BigShxDrawingCodePage">
            <summary>
            Get/Set the codepage used in the SHX big font character translations.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.grTextStyle.Ascent">
            <summary>
            Get the default Ascent length of all characters in the font.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.grTextStyle.Descent">
            <summary>
            Get the Descent Ascent length of all characters in the font.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.grTextStyle.EmHeight">
             <summary>
            Gets the height, in font design units, of the em square for the specified style for True Type fonts.In SHX fonts the emHeight is equal to the sum of Ascent and Descent.
             </summary>
        </member>
        <member name="P:VectorDraw.Render.grTextStyle.SpaceWidth">
            <summary>
            Get the default width of the space character for this textstyle.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.grTextStyle.SpaceToNextChar">
            <summary>
            Get the default distance between two characters for the textstyle.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.grTextStyle.LineSpacing">
            <summary>
            Get the default distance between two lines for the textstyle.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.grTextStyle.FamilyAscent">
             <summary>
            Returns the cell ascent, in design units, of the System.Drawing.FontFamily of the specified style in True Type fonts.In SHX it is equal to the Ascent property.
             </summary>
        </member>
        <member name="P:VectorDraw.Render.grTextStyle.FamilyDescent">
             <summary>
            Returns the cell descent, in design units, of the System.Drawing.FontFamily of the specified style in True Type fonts.In SHX it is equal to the Descent property.
             </summary>
        </member>
        <member name="P:VectorDraw.Render.grTextStyle.TopLeftOffsetX">
            <summary>
            The offset distance in the x direction where the character's draw will start.In SHX is always 0.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.grTextStyle.TopLeftOffsetY">
            <summary>
            The offset distance in the y direction where the character's draw will start.In SHX is always 0.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.grTextStyle.FontFamily">
            <summary>
            Get the FontFamily object for the True Type fonts.For SHX is always null.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.grTextStyle.DrawFont">
            <summary>
            Get the Font object for the True Type fonts.For SHX is always null.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.grTextStyle.IsSHX">
            <summary>
            Get a boolean value that represents if the font file is SHX.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.grTextStyle.IsgrFont">
            <summary>
            Get a boolean value that represents if the font file is an existing with .ttf extension that Implemented by <see cref="T:VectorDraw.DrawElements.grFont"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.grTextStyle.SelectedTrueTypeFont">
            <summary>
            Returns the selected TrueType <see cref="T:VectorDraw.DrawElements.grFont"/> object .Returns null if <see cref="P:VectorDraw.Render.grTextStyle.IsgrFont"/> is false.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.grTextStyle.FontFile">
            <summary>
            Get/Set the Font file of the style.The true type fonts must be set as represented in the character map tool of windows.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.grTextStyle.SHXBigFontFile">
            <summary>
            Get/Set the extra big font file selected for the SHX style.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.grTextStyle.Extra">
            <summary>
            Get/Set extra drawable parameters for the style.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.grTextStyle.VdConstCodePage">
            <summary>
            Represents the code page of the file.A code page provides 
            support for character sets used in different languages.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.ansi_1200">
            <summary>
            ansi 1200 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.ansi_1250">
            <summary>
            ansi 1250 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.ansi_1251">
            <summary>
            ansi 1251 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.ansi_1252">
            <summary>
            ansi 1252 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.ansi_1253">
            <summary>
            ansi 1253 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.ansi_1254">
            <summary>
            ansi 1254 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.ansi_1255">
            <summary>
            ansi 1255 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.ansi_1256">
            <summary>
            ansi 1256 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.ansi_1257">
            <summary>
            ansi 1257 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.ansi_1258">
            <summary>
            ansi 1258 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.ansi_1361">
            <summary>
            ansi 1361 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.ansi_874">
            <summary>
            ansi 874 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.ansi_932">
            <summary>
            ansi 932 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.ansi_936">
            <summary>
            ansi 936 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.ansi_949">
            <summary>
            ansi 949 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.ansi_950">
            <summary>
            ansi 950 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.ascii">
            <summary>
            ascii codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.big5">
            <summary>
            big 5 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.dos437">
            <summary>
            dos 437 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.dos850">
            <summary>
            dos 850 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.dos852">
            <summary>
            dos 852 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.dos855">
            <summary>
            dos 855 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.dos857">
            <summary>
            dos 857 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.dos860">
            <summary>
            dos 860 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.dos861">
            <summary>
            dos 861 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.dos863">
            <summary>
            dos 863 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.dos864">
            <summary>
            dos 864 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.dos865">
            <summary>
            dos 865 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.dos866">
            <summary>
            dos 866 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.dos869">
            <summary>
            dos 869 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.dos932">
            <summary>
            dos 932 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.gb2312">
            <summary>
            gb 2312 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.iso8859_1">
            <summary>
            iso 8859_1 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.iso8859_2">
            <summary>
            iso 8859_2 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.iso8859_3">
            <summary>
            iso 8859_3 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.iso8859_4">
            <summary>
            iso 8859_4 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.iso8859_5">
            <summary>
            iso 8859_5 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.iso8859_6">
            <summary>
            iso 8859_6 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.iso8859_7">
            <summary>
            iso 8859_7 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.iso8859_8">
            <summary>
            iso 8859_8 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.iso8859_9">
            <summary>
            iso 8859_9 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.johab">
            <summary>
            johab codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.ksc5601">
            <summary>
            ksc 5601 codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.mac_roman">
            <summary>
            mac roman codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.SYSTEM">
            <summary>
            System codepage
            </summary>
        </member>
        <member name="F:VectorDraw.Render.grTextStyle.VdConstCodePage.DrawingDefault">
            <summary>
            DrawingDefault codepage
            </summary>
        </member>
        <member name="T:VectorDraw.Render.TrueTypeAnalyzer">
            <summary>
            Get the character glyph outlines for a specific font file used to draw the character.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.TrueTypeAnalyzer.DefaultTTFontResolution">
            <summary>
            Used to calculate the number of line segments that an arc of TrueType Font will be divided.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.TrueTypeAnalyzer.getShapePoly(VectorDraw.Render.grTextStyle,VectorDraw.Render.grTextStyleExtra,System.Char,System.Boolean,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Int32@)">
            <summary>
            creates a set of polylines, for a specific charecter glyph.
            </summary>
        </member>
        <member name="T:VectorDraw.DrawElements.grSolids">
            <summary>
            Implements a collection of grSolid objects.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grSolids.#ctor">
            <summary>
            Initializes the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grSolids.#ctor(System.Int32)">
            <summary>
            Initializes the collection object with a given capacity.
            </summary>
            <param name="capacity">An integer representing the preallocated memory size of the collection.</param>
        </member>
        <member name="T:VectorDraw.DrawElements.grSolid">
            <summary>
            Implements a solid 4 point polygon.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grSolid._pts">
            <summary>
            A collection of the polygon's points initialized as a 4 items collection.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grSolid.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grSolid.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Initializes the object with the passed points.
            </summary>
            <param name="p1">First point of the polygon.</param>
            <param name="p2">Second point of the polygon.</param>
            <param name="p3">Third point of the polygon.</param>
            <param name="p4">Fourth point of the polygon.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grSolid.GetBox">
            <summary>
            Gets Element's BoundingBox
            </summary>
            <remarks >The Bounding box of subelements(Childs) is not included</remarks>
        </member>
        <member name="M:VectorDraw.DrawElements.grSolid.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Draws an element to the passed vdRender object.
            </summary>
            <param name="render">A vdRender object where the object is going to be drawn.</param>
            <returns>A status code representing the end of the draw function.</returns>
        </member>
        <member name="T:VectorDraw.DrawElements.grFont">
            <summary>
            Implements a TTF(True Type Font) font object.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grFont._Ascent">
            <summary>
            The Ascent length of the font.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grFont._Descent">
            <summary>
            The Descent length of the font.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grFont.#ctor(System.String)">
            <summary>
            Initializes the object with the given TTF font filename.
            </summary>
            <param name="filename">The filename of the TTF font.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grFont.getcodePagesSupported">
            <summary>
            Returns the supported codepages for the selected font.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grFont.IsCodePageSupported(System.Int32)">
            <summary>
            Checks if a codepage id is supported by the selected font.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grFont.NumGlyphChars">
            <summary>
            Returns the number of characters for the selected true type font.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grFont.#ctor(System.IO.MemoryStream)">
            <summary>
            Initializes the object with the given TTF font stream.
            </summary>
            <param name="stream">The stream of the TTF font.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grFont.SelectTTFFontFile(System.String)">
            <summary>
            Select the given TTF font filename to be the font of the object.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:VectorDraw.DrawElements.grFont.SelectTTFFontFile(System.IO.MemoryStream)">
            <summary>
            Select the given TTF font stream to be the font of the object.
            </summary>
            <param name="stream">The stream of the TTF font.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grFont.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grFont.IsNull">
            <summary>
            Get a boolean value that represents if a TTF font filename has been initializes to the object.
            </summary>
            <returns>A boolean value that represents if a TTF font filename has been initializes to the object.</returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grFont.getCharCode(System.Int32)">
            <summary>
            Get a grChar object located at a specified position of the TTF font.
            </summary>
            <param name="code">The code of the char at the selected TTF font.</param>
            <returns>A grChar object located at the specified char code of the font.</returns>
        </member>
        <member name="P:VectorDraw.DrawElements.grFont.ShapeBox">
            <summary>
            Returns a box that enclose all shapes.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdGdiPenStyleMaterialExtra">
            <summary>
            Represents an object that contains properties which are used to apply materials over the drawing faces.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Transparency">
            <summary>
            The default value (255) for <see cref="P:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Transparency"/> property.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Transmit">
            <summary>
            The default value (1.0) for <see cref="P:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Transmit"/> property.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Ambient">
            <summary>
            The default value (0.2) for <see cref="P:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Ambient"/> property.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Diffuse">
            <summary>
            The default value (0.6) for <see cref="P:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Diffuse"/> property.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Specular">
            <summary>
            The default value (0.75) for <see cref="P:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Specular"/> property.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Roughness">
            <summary>
            The default value (0.05) for <see cref="P:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Roughness"/> property.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Reflection">
            <summary>
            The default value (0) for <see cref="P:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Reflection"/> property.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Refraction">
            <summary>
            The default value (1.0) for <see cref="P:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Refraction"/> property.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Metallic">
            <summary>
            The default value (0) for <see cref="P:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Metallic"/> property.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyleMaterialExtra.CreateDefault">
            <summary>
            Creates a new <see cref="T:VectorDraw.Render.vdGdiPenStyleMaterialExtra"/> object with default property values.
            </summary>
            <returns>A new <see cref="T:VectorDraw.Render.vdGdiPenStyleMaterialExtra"/> object with default property values.</returns>
            <seealso cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Transparency"/>
            <seealso cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Transmit"/>
            <seealso cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Ambient"/>
            <seealso cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Diffuse"/>
            <seealso cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Specular"/>
            <seealso cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Roughness"/>
            <seealso cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Reflection"/>
            <seealso cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Refraction"/>
            <seealso cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Metallic"/>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyleMaterialExtra.SetToDefault">
            <summary>
            Set all values to default except the color.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Equals(System.Object)">
            <summary>
            Checks if the passed object is a vdGdiPenStyleMaterialExtra and if it is equal to this object.
            </summary>
            <param name="obj">A vdGdiPenStyleMaterialExtra object to be checked if it is equal to this object.</param>
            <returns>True if the two objects are reference equal or their properties have equal values.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyleMaterialExtra.GetHashCode">
            <summary>
            Serves as a hash function for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Equals(VectorDraw.Render.vdGdiPenStyleMaterialExtra)">
            <summary>
            Checks if the passed vdGdiPenStyleMaterialExtra object is equal to this one.
            </summary>
            <param name="o">Another vdGdiPenStyleMaterialExtra object needed.</param>
            <returns>True if the properties of the two objects are equal.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Torgb">
            <summary>
             Gets the 32-bit RGB value 
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyleMaterialExtra.RGBToInt(System.Byte,System.Byte,System.Byte)">
            <summary>
            Convert a red , green and blue value to single 32-bit value.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Fromrgb(System.Int32)">
            <summary>
            Set the red,green and blue values from passed 32-bit value
            </summary>
            <param name="rgbm">A value specifying the 32-bit RGB value</param>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyleMaterialExtra.ToString(System.String)">
            <summary>
            Gets a System.String that represents the properties of the object using the format parameter for visualization.
            </summary>
            <param name="format">A parameter used to specify the format the properties should be displayed.</param>
            <returns>A string representing the properties of the object with the following syntax: red,green,bue,Transparency,Transmit,Ambient,Diffuse,Specular,Roughness,Reflection,Refraction,Metallic.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyleMaterialExtra.FromString(System.String)">
            <summary>
            Sets the properties values of the object from a given string.
            </summary>
            <param name="str">A string representing a vdGdiPenStyleMaterialExtra with the following syntax: red,green,bue,Transparency,Transmit,Ambient,Diffuse,Specular,Roughness,Reflection,Refraction,Metallic .</param>
        </member>
        <member name="M:VectorDraw.Render.vdGdiPenStyleMaterialExtra.ToString(VectorDraw.Serialize.Serializer)">
            <summary>
            Gets a System.String that represents the properties of the object using the format parameter for visualization.
            </summary>
            <param name="serializer">The Serializer object where the object is going to be saved.</param>
            <returns>A string representing the properties of the object with the following syntax: red,green,bue,Transparency,Transmit,Ambient,Diffuse,Specular,Roughness,Reflection,Refraction,Metallic.</returns>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Red">
            <summary>
            Specifies the red component value.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Green">
            <summary>
            Specifies the green component value.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Blue">
            <summary>
            Specifies the blue component value.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Color">
            <summary>
            Specifies the red, green and blue component values
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Transparency">
            <summary>
            Specifies the amount of filtered transparency of a surface. 
            </summary>
            <remarks>
            Some real-world examples of transparency are stained glass windows or tinted cellophane.</remarks>
            <remarks>Valid range 0 to 255.</remarks>
            <remarks>Default values is <see cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Transparency"/>.</remarks>
            <remarks>A value of 255 means no transparency.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Transmit">
            <summary>
            Specifies the amount of non-filtered light that is transmitted through a surface. <see cref="P:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Transparency"/>
            </summary>
            <remarks>
            Some real-world examples of non-filtered transparency are thin see-through cloth, fine mesh netting and dust on a surface.</remarks>
            <remarks>Valid range 0 to 1.0.</remarks>
            <remarks>Default values is <see cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Transmit"/>.</remarks>
            <remarks>The color of the object and the color transmitted through the object together contribute 100% of the final color. </remarks>
            <remarks>So if transmit is set to 0.6 (60 percent), the transmitted color contributes 60% and the <see cref="P:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Color"/> of the object contributes only 10%.</remarks>
            <remarks>A value of 1.0 means no Transmit and the full <see cref="P:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Color"/> value is filtered transparency.
            </remarks>
            <seealso cref="P:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Color"/>
            <seealso cref="P:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Transparency"/>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Ambient">
            <summary>
            Simulate the amount of the light that is scattered around the scene that does not come directly from a light source on a surface
            </summary>
            <remarks>
            Valid range 0 to 1.0.</remarks>
            <remarks>Default values is <see cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Ambient"/>.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Diffuse">
            <summary>
            Diffuse determines how much of the light that is seen comes directly from a light source on a surface.
            </summary>
            <remarks>
            Valid range 0 to 1.0.</remarks>
            <remarks>Default values is <see cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Diffuse"/>.
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Specular">
            <summary>
            Specifies the saturation to the light source's color around the brightest area (center) of the highlight
            </summary>
            <remarks>
            Valid range 0 to 1.0.</remarks>
            <remarks>Default values is <see cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Specular"/>.</remarks>
            <remarks>A value of 1.0 causes complete saturation to the light source's color at the brightest area (center) of the highlight
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Roughness">
            <summary>
            Specifies the amount of a spot light highlighting on a surface.
            </summary>
            <remarks>
            Valid range 0 to 1.0.</remarks>
            <remarks>Default values is <see cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Roughness"/>.</remarks>
            <remarks>If specular is not specified Roughness has no effect</remarks>
            <remarks>A value of 1.0 means (very rough - large highlight)</remarks>
            <remarks>A value of 0.01 means  (very smooth - small highlight) like  (plastic).</remarks> 
            <remarks><seealso cref="P:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Specular"/>
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Reflection">
            <summary>
            Specifies the amount of mirrored finish for a surface.
            </summary>
            <remarks>
            Valid range 0 to 1.0.</remarks>
            <remarks>Default values is <see cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Reflection"/>.</remarks>
            <remarks>A value of 1 means a perfect mirror
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Refraction">
            <summary>
            Specifies the blending of the ray of light passing throw a transparency surface.
            </summary>
            <remarks>
            Valid range 1 to INFINITY.</remarks>
            <remarks>Default values is <see cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Refraction"/>.</remarks>
            <remarks>The index of refraction for air is 1.0, water is 1.33, glass is 1.5 and diamond is 2.4
            </remarks>
        </member>
        <member name="P:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Metallic">
            <summary>
            Specifies the amount of metallic finish for a surface.
            </summary>
            <remarks>
            Valid range 0 to 1.0.</remarks>
            <remarks>Default values is <see cref="F:VectorDraw.Render.vdGdiPenStyleMaterialExtra.Default_Metallic"/>.
            </remarks>
        </member>
        <member name="T:VectorDraw.DrawElements.grSPline">
            <summary>
            Implements a drawble spline polyline element.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grSPline.mSplineFlag">
            <summary>
            Specifies the type of the polyline element.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grSPline.mKnots">
            <summary>
            A collection of double that specify the Knots values of the spline element.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grSPline.mWeights">
            <summary>
            A collection of double that specify the weight values of the spline element.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grSPline.startTangent">
            <summary>
            Specifies the start Tangent of the spline element.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grSPline.endTangent">
            <summary>
            Specifies the end tangent of the spline element.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grSPline.#ctor(VectorDraw.Geometry.Vertexes)">
            <summary>
            Initializes the spline with the passed vertexes.
            </summary>
            <param name="QPoints">A collection of Vertex objects specifying the points and bulges of the polyline element.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grSPline.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grSPline.GetBox">
            <summary>
            Gets Element's BoundingBox
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grSPline.GetLength">
            <summary>
            Calculate the length of the Element.
            </summary>
            <returns>Returns a double value representing the length of the element.</returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grSPline.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.DrawElements.grSPline.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Draws an element to the passed vdRender object.
            </summary>
            <param name="render">A vdRender object where the object is going to be drawn.</param>
            <returns>A status code representing the end of the draw function.</returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grSPline.GetSamplePoints(System.Int32,System.Double)">
            <summary>
            Returns a list of points on the arc from the start to the end point of the arc.
            </summary>
            <param name="curveResolution">valid values (1 to 20000)</param>
            <param name="pixelSize">valid values possitive decimal ( &gt;=0)</param>
            <returns>A collection of points belonging to the arc in Entity Coordinate System(ECS).</returns>
            <seealso cref="M:VectorDraw.DrawElements.grElement.GetSamplePoints(System.Int32,System.Double)"/>
        </member>
        <member name="T:VectorDraw.DrawElements.grSPline.SplineFlag">
            <summary>
            Specifies the type of a polyline.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grSPline.SplineFlag.None">
            <summary>
            Straight lines.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grSPline.SplineFlag.Fitting">
            <summary>
            Fitting curves.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grSPline.SplineFlag.Cubic">
            <summary>
            Cubic Spline.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grSPline.SplineFlag.Quadradic">
            <summary>
            Quadratic Spline.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grSPline.SplineFlag.FQuadradic">
            <summary>
            Quadratic spline used in fonts.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.PickEntityMode">
            <summary>
            Controls the method used for single entity picking operation.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.PickEntityMode.DrawOrder">
            <summary>
            The entity picking operation returns the first entity that passes throw pick rect, searching from the last to the first item in entities list.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.PickEntityMode.Closest">
            <summary>
            The entity picking operation returns the closest entity to the picking point.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.PickEntityMode.EyeNearest">
            <summary>
            The entity picking operation returns the entity that is nearest to the picking point in the Current View Z-order.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.PickEntityMode.Auto">
            <summary>
            Uses the DrawOrder is active render is Wire2d and EyeNearest is it is 3d render
            </summary>
        </member>
        <member name="T:VectorDraw.Render.IBoundingBox">
            <summary>
            Interface used by drawing objects that support Bounding Box.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.IBoundingBox.BoundingBox">
            <summary>
            Gets the Bounding Box of the object in WorldCoordinate System.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.SupportListFlag">
            <summary>
            This flag identifies the use of lists inside our library.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.SupportListFlag.None">
            <summary>
            If the Render has <see>vdRender.SupportLists</see> None then the objects are always drawn without the use of lists.
            </summary>
            <remarks>For example the RenderSelect uses this option to always draw the objects without calling their lists.</remarks>
        </member>
        <member name="F:VectorDraw.Render.SupportListFlag.Draw">
            <summary>
            If the Render has <see>vdRender.SupportLists</see> Draw then the objects are drawn with the use of lists.If the list exists then it is used.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.SupportListFlag.Create">
            <summary>
            If the Render has <see>vdRender.SupportLists</see> Create then creates lists for objects.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.SupportListFlag.CreateAndDraw">
            <summary>
            The render both creates and uses lists to draw objects.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdgl">
            <summary>
            This is the main class for our vdgl rendering engine.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdgl.Status(System.IntPtr,VectorDraw.Render.vdgl._STATUS@)">
            <summary>
            Returns a <see cref="T:VectorDraw.Render.vdgl._STATUS"/> that hold information for the drawing context <see cref="P:VectorDraw.Render.IRenderList.vdContext"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdgl.GetMemoryStatus">
            <summary>
            Returns a struct that hold information for the memory used by drawing context
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdgl.BindImage(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create an Image structure that used by drawing context.
            </summary>
            <param name="contextPtr">The drawing context.</param>
            <param name="bindId">The previous created structure pointer in order to be modified or zero to create a new one.</param>
            <param name="bytes">The bytes of the image </param>
            <param name="size">The size of bytes.</param>
            <param name="width">The width of the image in Pixels.</param>
            <param name="height">The height of the image in Pixels.</param>
            ?<param name="interpolationMode"> specifies the algorithm that is used when image is scaled</param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Render.vdgl.DeleteImage(System.IntPtr)">
            <summary>
            Delete the image structure previous created by <see cref="M:VectorDraw.Render.vdgl.BindImage(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)"/>
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:VectorDraw.Render.vdgl.CreateSectionCoverFacesList(System.IntPtr,System.IntPtr,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Internally used only.Create a list that used by Section to draw cover faces.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdgl.DeleteList(System.IntPtr)">
            <summary>
            Deletes a list of an object.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:VectorDraw.Render.vdgl.MarkListForUpdate(System.IntPtr)">
            <summary>
            Set the list as marked for update. This is used to update an inner object's list to be updated. The outer object is also marked to be updated.
            </summary>
            <param name="list">The list to be marked.</param>
            <remarks>This is used for example to update a vdAttrib object of an insert.</remarks>
        </member>
        <member name="M:VectorDraw.Render.vdgl.IsListNeedUpdate(System.IntPtr)">
            <summary>
            Get the value of the passed list if needs update or not.
            </summary>
            <param name="list">The list to know if it requires update.</param>
            <returns>A boolean value representing if the passed list needs update.</returns>
            <remarks>This is used for example to update a vdAttrib object of an insert.</remarks>
        </member>
        <member name="M:VectorDraw.Render.vdgl.PushClipPolygon(System.IntPtr,System.Double[],System.Int32)">
            <summary>
            Push a polygon from the passed parameter as a clip boundary for the render.
            </summary>
            <param name="context">The context of the render.</param>
            <param name="pts">A collection of points that represent the clip polygon in World coordinate system.</param>
            <param name="npts">The number of passed pointes.</param>
            <returns>True if the clip was set succesfully.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdgl.PopClipPolygon(System.IntPtr)">
            <summary>
            Use this method to pop the clip polygon that was set whit <see cref="M:VectorDraw.Render.vdgl.PushClipPolygon(System.IntPtr,System.Double[],System.Int32)"/>
            </summary>
            <param name="context">The context of the render.</param>
        </member>
        <member name="T:VectorDraw.Render.vdgl._STATUS">
            <summary>
            Holds information for the drawing context <see cref="P:VectorDraw.Render.IRenderList.vdContext"/>
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdgl._STATUS.AllocBytes">
            <summary>
            Allocated used by <see cref="P:VectorDraw.Render.IRenderList.vdContext"/> drawing context.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdgl.MemoryStatus">
            <summary>
            Holds information for the drawing context <see cref="P:VectorDraw.Render.IRenderList.vdContext"/>
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdgl.MemoryStatus.AllocBytes">
            <summary>
            Allocated used by <see cref="P:VectorDraw.Render.IRenderList.vdContext"/> drawing context.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdgl.MemoryStatus.GLNumLists">
            <summary>
            Number of valid OpenGL lists 
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdgl.MemoryStatus.GLNumTextures">
            <summary>
            Number of valid OpenGL Textures 
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdgl.COLOR_MIX">
            <summary>
            Control the way the the final color on pixel is calculated
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdgl.COLOR_MIX.None">
            <summary>
            The pixel is getting the input pen color.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdgl.COLOR_MIX.Visible">
            <summary>
            If the input pen color is same as the existing screen color,
               then the final color is inverted, so it is always different than existing screen and visible.
            If not then the pixel is getting the input pen color.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdgl.ScanFlag">
            <summary>
            This flag is used while selecting polyfaces in an action.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdgl.ScanFlag.NONE">
            <summary>
            Regular selecting mode.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdgl.ScanFlag.ALLEDGES">
            <summary>
            Uses the Edges of the polyface to select it.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdgl.ScanFlag.OSNAPS">
            <summary>
            Scan entities for osnaps also.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdgl.ScanFlag.TOOLTIP">
            <summary>
            Scan entities only for tooltip or url
            </summary>
        </member>
        <member name="T:VectorDraw.Render.RenderSelect">
            <summary>
            This render class is used for selecting objects.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdrawglRender">
            <summary>
            VectorDraw render class.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.EnableLighting(System.Boolean)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.EnableLighting(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.EnableTexture(System.Boolean)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.EnableDepthBuffer(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.EnableBufferId(System.Boolean)">
            <summary>
            Overrides the <see cref="M:VectorDraw.Render.vdRender.EnableBufferId(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.EnableDepthBuffer(System.Boolean)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.EnableDepthBuffer(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.EnableDepthBufferWrite(System.Boolean)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.EnableDepthBufferWrite(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.EnableColorBuffer(System.Boolean)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.EnableColorBuffer(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.GetIdAtPixel(System.Int32,System.Int32)">
            <summary>
            Overrides the <see cref="M:VectorDraw.Render.vdRender.GetIdAtPixel(System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.GetDepthAtPixel(System.Int32,System.Int32)">
            <summary>
            Overrides the <see cref="M:VectorDraw.Render.vdRender.GetDepthAtPixel(System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.MatrixView2PixelChanged">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.MatrixView2PixelChanged"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.MatrixViewChanged">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.MatrixViewChanged"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.StartDraw(System.Boolean)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.StartDraw(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.EndDraw">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.EndDraw"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.StartEdgeRender">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.StartEdgeRender"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.StopEdgeRender">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.StopEdgeRender"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.#ctor(VectorDraw.Render.vdRender)">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.SetTransparentOn">
            <summary>
             overrides the <see cref="M:VectorDraw.Render.vdRender.SetTransparentOn"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.StartBlendingRender">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.StartBlendingRender"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.SetBlendDrawMode(System.Boolean)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.SetBlendDrawMode(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.StopBlendingRender">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.StopBlendingRender"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.PushDrawFigureList(System.Object)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.PushDrawFigureList(System.Object)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.PopDrawFigureList">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.PopDrawFigureList"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.GetFinalColor(System.Drawing.Color,System.Byte)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.GetFinalColor(System.Drawing.Color,System.Byte)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.PenStyleChanged(VectorDraw.Render.vdGdiPenStyle)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.PenStyleChanged(VectorDraw.Render.vdGdiPenStyle)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.FadeEffectChanged">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.FadeEffectChanged"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.OnUpdateClipping(System.Boolean)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.OnUpdateClipping(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.Refresh(System.Drawing.Graphics,System.Int32,System.Int32)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.Refresh(System.Drawing.Graphics,System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.Lock">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.Lock"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.UnLock">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.UnLock"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.PushAlignToView(VectorDraw.Render.vdRender.MatrixPushFlag,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector,System.Int32,System.Double,System.Double)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.PushAlignToView(VectorDraw.Render.vdRender.MatrixPushFlag,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector,System.Int32,System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.PopAlignToView">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.PopAlignToView"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.ApplyColorPalette">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.ApplyColorPalette"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.Destroy(System.Boolean)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.Destroy(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.ClearDepthBuffer">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.ClearDepthBuffer"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.Clear(System.Drawing.Color,System.Boolean)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.Clear(System.Drawing.Color,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.DrawLight(System.Object,VectorDraw.Render.IRenderingLight)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.DrawLight(System.Object,VectorDraw.Render.IRenderingLight)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.ClearAllSectionClips">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.ClearAllSectionClips"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.ApplySectionClips(VectorDraw.Geometry.ISectionClips)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.ApplySectionClips(VectorDraw.Geometry.ISectionClips)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.PushHighLightFilter(VectorDraw.Render.vdRender.HighLightFilter)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.PushHighLightFilter(VectorDraw.Render.vdRender.HighLightFilter)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.PopHighLightFilter">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.PopHighLightFilter"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.SetDrawStipple(System.Boolean)">
            <summary>
            Se to the vdRender a boolean value either to use a stipple filter or not. Striple filter is used for the SectionClip extended highlight filter.
            </summary>
            <param name="bval">True or false to enable this stipple filter.</param>
            <returns> the previous selected stipple. </returns>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.DrawGdiBox(System.Drawing.Point,System.Int32)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.DrawGdiBox(System.Drawing.Point,System.Int32)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.PixelLineDraw(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.PixelLineDraw(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.DrawGdiLine(System.Int32,System.Int32,System.Double,System.Int32,System.Int32,System.Double)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.DrawGdiLine(System.Int32,System.Int32,System.Double,System.Int32,System.Int32,System.Double)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.PushClipPolygon(VectorDraw.Geometry.gPoints)">
            <summary>
            Push a polygon from the passed parameter as a clip boundary for the render.
            </summary>
            <param name="pts">A collection of points that represent the clip polygon in World coordinate system.</param>
            <returns>True if the clip was set succesfully.</returns>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.PopClipPolygon">
            <summary>
            Use this method to pop the clip polygon that was set whit <see cref="M:VectorDraw.Render.vdrawglRender.PushClipPolygon(VectorDraw.Geometry.gPoints)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.DrawLine(System.Object,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32)">
            <summary>
            Overrides the <see cref="M:VectorDraw.Render.vdRender.DrawLine(System.Object,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Int32)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.DrawLine(System.Object,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.DrawLine(System.Object,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.DrawPLine(System.Object,VectorDraw.Geometry.gPoints)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.DrawPLine(System.Object,VectorDraw.Geometry.gPoints)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.DrawPLine(System.Object,VectorDraw.Geometry.gPoints,System.Double,VectorDraw.Render.vdRender.PolylineFlag)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.DrawPLine(System.Object,VectorDraw.Geometry.gPoints,System.Double)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.DrawPolyface(System.Object,VectorDraw.Geometry.Int32Array,VectorDraw.Geometry.gPoints)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.DrawPolyface(System.Object,VectorDraw.Geometry.Int32Array,VectorDraw.Geometry.gPoints)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.DrawFace4(System.Object,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.DrawFace4(System.Object,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.DrawPolygon(System.Object,VectorDraw.Geometry.gPoints,VectorDraw.Geometry.Vector,System.Boolean)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.DrawPolygon(System.Object,VectorDraw.Geometry.gPoints,VectorDraw.Geometry.Vector,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.DrawSolidPolygon(System.Object,VectorDraw.Geometry.gPoints,VectorDraw.Render.vdRender.PolygonType)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.DrawSolidPolygon(System.Object,VectorDraw.Geometry.gPoints,VectorDraw.Render.vdRender.PolygonType)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.DrawHatchedPolyPolygon(System.Object,VectorDraw.Generics.vdArray{VectorDraw.Geometry.gPoints},VectorDraw.DrawElements.grPattern,VectorDraw.Geometry.gPoint)">
            <summary>
            Fills an array of closed regions with the passed pattern
            </summary>
            <param name="sender">The object that call this method.</param>
            <param name="inpoints">An array of closed regions in World coord system</param>
            <param name="pattern">A that will fill the passed regions.</param>
            <param name="origin">A point in World coord system that the pattern will begin the filling.</param>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.DrawHatchedPolyPolygon(System.Object,VectorDraw.Generics.vdArray{VectorDraw.Geometry.gPoints},VectorDraw.DrawElements.grPattern,VectorDraw.Geometry.gPoint,System.Boolean)">
             <summary>
             Fills an array of closed regions with the passed pattern
             </summary>
             <param name="sender">The object that call this method.</param>
             <param name="inpoints">An array of closed regions in World coord system</param>
             <param name="pattern">A that will fill the passed regions.</param>
             <param name="origin">A point in World coord system that the pattern will begin the filling.</param>
            <param name="Wire2dSolidFill">True in order to be filled on wire render mode and when pattern is null or solid.</param>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.DrawImagePolygon(System.Object,VectorDraw.Render.ImageBind,System.Double,System.Double,VectorDraw.Geometry.gPoints)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.DrawImagePolygon(System.Object,VectorDraw.Render.ImageBind,System.Double,System.Double,VectorDraw.Geometry.gPoints)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.DrawImage(System.Object,VectorDraw.Render.ImageBind,System.Double,System.Double)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.DrawImage(System.Object,VectorDraw.Render.ImageBind,System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.DrawString(System.Object,VectorDraw.Render.grTextStyle,VectorDraw.Render.grTextStyleExtra,System.String,VectorDraw.Geometry.Box)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.DrawString(System.Object,VectorDraw.Render.grTextStyle,VectorDraw.Render.grTextStyleExtra,System.String,VectorDraw.Geometry.Box)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.IsBoundaryClip(VectorDraw.Geometry.Box)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.IsBoundaryClip(VectorDraw.Geometry.Box)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.TestTimerEvent">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.TestTimerEvent"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.GenList">
            <summary>
            Implements the <see cref="M:VectorDraw.Render.IRenderList.GenList"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.NewList(VectorDraw.Render.IRenderListItem)">
            <summary>
            Implements the <see cref="M:VectorDraw.Render.IRenderList.NewList(VectorDraw.Render.IRenderListItem)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.EndList(VectorDraw.Render.IRenderListItem)">
            <summary>
            Implements the <see cref="M:VectorDraw.Render.IRenderList.EndList(VectorDraw.Render.IRenderListItem)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.DrawList(VectorDraw.Render.IRenderListItem)">
            <summary>
            Implements the <see cref="M:VectorDraw.Render.IRenderList.DrawList(VectorDraw.Render.IRenderListItem)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.ListDeleted(VectorDraw.Render.IRenderListItem)">
            <summary>
            Implements the <see cref="M:VectorDraw.Render.IRenderList.ListDeleted(VectorDraw.Render.IRenderListItem)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.DrawBindMappedImageList(VectorDraw.Render.IRenderListItem,VectorDraw.Render.ISupportdMappedImages)">
            <summary>
            Implements the <see cref="M:VectorDraw.Render.IRenderList.DrawBindMappedImageList(VectorDraw.Render.IRenderListItem,VectorDraw.Render.ISupportdMappedImages)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.PushGroupIdFlag(VectorDraw.Render.vdrawglRender.GroupIdFlag)">
            <summary>
            Begings a new group with passed flag id.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender.PopGroupIdFlag">
            <summary>
            Ends the group that started by <see cref="M:VectorDraw.Render.vdrawglRender.PushGroupIdFlag(VectorDraw.Render.vdrawglRender.GroupIdFlag)"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdrawglRender.IsDepthBufferEnable">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.IsDepthBufferEnable"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdrawglRender.IsBufferIdEnable">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.IsBufferIdEnable"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdrawglRender.RenderMode">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.RenderMode"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdrawglRender.ShowHidenEdges">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.ShowHidenEdges"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdrawglRender.PolygonMode">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.PolygonMode"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdrawglRender.IsDrawEdgeOn">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.IsDrawEdgeOn"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdrawglRender.vdContext">
            <summary>
            Returns the drawing context that controls the pixelization to the output device.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdrawglRender.IsBlendingOn">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.IsBlendingOn"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdrawglRender.SystemPenColor">
            <summary>
            Get the System color of the active color of the render.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdrawglRender.LockPenStyle">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.LockPenStyle"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdrawglRender.SupportLights">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.SupportLights"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdrawglRender.IsSelectingMode">
            <summary>
            Implements the <see cref="P:VectorDraw.Render.IRenderList.IsSelectingMode"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdrawglRender.IsContextCreated">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.IsContextCreated"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdrawglRender.BreakOnMessage">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.BreakOnMessage"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdrawglRender.DpiY">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.DpiY"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdrawglRender.IsCreatingList">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.IsCreatingList"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdrawglRender.SupportSectionClips">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.SupportSectionClips"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdrawglRender.SupportLists">
            <summary>
            Implements the <see cref="P:VectorDraw.Render.IRenderList.SupportLists"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdrawglRender.CurentListDepth">
            <summary>
            Implements the <see cref="P:VectorDraw.Render.IRenderList.CurentListDepth"/>
            </summary>
        </member>
        <member name="T:VectorDraw.Render.vdrawglRender.GroupIdFlag">
            <summary>
            This flag identifies a group of drawing elements.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdrawglRender.GroupIdFlag.None">
            <summary>
            Empty flag usually when drawing elements are not inside a group defined by <see cref="M:VectorDraw.Render.vdrawglRender.PushGroupIdFlag(VectorDraw.Render.vdrawglRender.GroupIdFlag)"/> and <see cref="M:VectorDraw.Render.vdrawglRender.PopGroupIdFlag"/> 
            </summary>
        </member>
        <member name="F:VectorDraw.Render.vdrawglRender.GroupIdFlag.HatchBlock">
            <summary>
            Defines a group of hatch block filled regions.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.RenderSelect.PushDrawFigureList(System.Object)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.PushDrawFigureList(System.Object)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.RenderSelect.PopDrawFigureList">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.PopDrawFigureList"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.RenderSelect.IsBoundaryClip(VectorDraw.Geometry.Box)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.IsBoundaryClip(VectorDraw.Geometry.Box)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.RenderSelect.Finish">
            <summary>
            Must be called after in conjunction with <see cref="M:VectorDraw.Render.RenderSelect.SetSelectionProperties(System.Boolean,VectorDraw.Render.RenderSelect.SelectingMode,VectorDraw.Render.PickEntityMode,System.Object,VectorDraw.Render.vdgl.ScanFlag,System.Boolean)"/> and after the <see cref="M:VectorDraw.Render.vdRender.EndDraw"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.RenderSelect.SetSelectionProperties(System.Boolean,VectorDraw.Render.RenderSelect.SelectingMode,VectorDraw.Render.PickEntityMode,System.Object,VectorDraw.Render.vdgl.ScanFlag,System.Boolean)">
            <summary>
            Set the selection properties before the scan start ( <see cref="M:VectorDraw.Render.vdRender.StartDraw(System.Boolean)"/>).
            </summary>
            <param name="FindInner">Controls if inner entities inside blocks are also scan and return by <see cref="P:VectorDraw.Render.RenderSelect.SelectedObjects"/> .</param>
            <param name="smode">The <see cref="T:VectorDraw.Render.RenderSelect.SelectingMode"/> for the passed region.</param>
            <param name="sortingOrder">The <see cref="T:VectorDraw.Render.PickEntityMode"/> sorting order of return entities by <see cref="P:VectorDraw.Render.RenderSelect.SelectedObjects"/> . </param>
            <param name="ClipRegionPoints">The region used to scan entities.If it is a <see cref="T:System.Drawing.Point"/> array is on pixels relative to Drawing area.Else it must be a <see cref="T:VectorDraw.Geometry.gPoints"/> in Current View Coord-System.</param>
            <param name="scanFlag">This <see cref="T:VectorDraw.Render.vdgl.ScanFlag"/> is used while selecting polyfaces in an action.</param>
            <param name="isSinglePoint">True in case of single MosePosition select. Example for GetEntityFromPoint,GetOsnapPoint,GetToolTipFigure methods</param>
            <remarks>The <see cref="M:VectorDraw.Render.RenderSelect.Finish"/> method must be also called after the scan finished by <see cref="M:VectorDraw.Render.vdRender.EndDraw"/></remarks>
        </member>
        <member name="M:VectorDraw.Render.RenderSelect.#ctor(VectorDraw.Render.vdRender)">
            <summary>
            This render is used for selecting figures.
            </summary>
            <param name="OriginalRender"></param>
        </member>
        <member name="M:VectorDraw.Render.RenderSelect.PenStyleChanged(VectorDraw.Render.vdGdiPenStyle)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.PenStyleChanged(VectorDraw.Render.vdGdiPenStyle)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.RenderSelect.StartDraw(System.Boolean)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.StartDraw(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.RenderSelect.EndDraw">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.EndDraw"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.RenderSelect.Lock">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.Lock"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.RenderSelect.UnLock">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.UnLock"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.RenderSelect.TestTimerEvent">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.TestTimerEvent"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.RenderSelect.DrawPolyface(System.Object,VectorDraw.Geometry.Int32Array,VectorDraw.Geometry.gPoints)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.DrawPolyface(System.Object,VectorDraw.Geometry.Int32Array,VectorDraw.Geometry.gPoints)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.RenderSelect.DrawFace4(System.Object,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.DrawFace4(System.Object,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.RenderSelect.DrawString(System.Object,VectorDraw.Render.grTextStyle,VectorDraw.Render.grTextStyleExtra,System.String,VectorDraw.Geometry.Box)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.DrawString(System.Object,VectorDraw.Render.grTextStyle,VectorDraw.Render.grTextStyleExtra,System.String,VectorDraw.Geometry.Box)"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.RenderSelect.ObjectSnapMode">
            <summary>
            Get/Set the active <see cref="T:VectorDraw.Geometry.OsnapMode"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.RenderSelect.IsOnsnapSelecting">
            <summary>
            Returns true is scan entities for osnaps.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.RenderSelect.IsWindowSelectingMode">
            <summary>
            Returns true is the Selecting Mode is Window Rectangle or Window Polygon.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.RenderSelect.IsToolTipSelecting">
            <summary>
             Returns true is scan entities only for tooltip.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.RenderSelect.TimerBreakForDraw">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.TimerBreakForDraw"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.RenderSelect.SelectedObjects">
            <summary>
            The result is a class containing information about the selected items. <see cref="T:VectorDraw.Render.RenderSelect.RenterSelectObjectArray"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.RenderSelect.SupportLists">
            <summary>
            Implements the <see cref="P:VectorDraw.Render.IRenderList.SupportLists"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.RenderSelect.UseDifferentGraphics">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.WrapperRender.UseDifferentGraphics"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.RenderSelect.SupportLights">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.SupportLights"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.RenderSelect.IsSelectingMode">
            <summary>
            Implements the <see cref="P:VectorDraw.Render.IRenderList.IsSelectingMode"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.RenderSelect.Display">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.Display"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.RenderSelect.UseSortingOrder">
            <summary>
            Get/Set a boolean value that defines if the passed <see cref="T:VectorDraw.Render.PickEntityMode"/> in <see cref="M:VectorDraw.Render.RenderSelect.SetSelectionProperties(System.Boolean,VectorDraw.Render.RenderSelect.SelectingMode,VectorDraw.Render.PickEntityMode,System.Object,VectorDraw.Render.vdgl.ScanFlag,System.Boolean)"/> method will be used.
            Defaulst value is true.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.RenderSelect.SelectingMode">
            <summary>
            Represents the selecting entities mode.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RenderSelect.SelectingMode.SingleEntitiyPoint">
            <summary>
            Single entity select.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RenderSelect.SelectingMode.WindowRectangle">
            <summary>
            Window select.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RenderSelect.SelectingMode.CrossingWindowRectangle">
            <summary>
            Crossing window select.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RenderSelect.SelectingMode.Fence">
            <summary>
            Fence window select.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RenderSelect.SelectingMode.WindowPolygon">
            <summary>
            Window polygon select.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RenderSelect.SelectingMode.CrossingWindowPolygon">
            <summary>
            Crossing window select.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RenderSelect.SelectingMode.All">
            <summary>
            All objects select.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RenderSelect.SelectingMode.Last">
            <summary>
            Last object select.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.RenderSelect.FigureStackItem">
            <summary>
            This class is used while selecting figures.It provides the figure and also the transformation matrix of the figure.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RenderSelect.FigureStackItem.mFigure">
            <summary>
            The figure object.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RenderSelect.FigureStackItem.mMatrix">
            <summary>
            The Transformation Matrix of the figure that transforms the figure from object coordinate system to World.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.RenderSelect.FigureStackItem.#ctor(System.Object,VectorDraw.Geometry.Matrix)">
            <summary>
            Initialize the object with the passed parameters.
            </summary>
            <param name="figure">The figure object.</param>
            <param name="matrix">The Transformation Matrix of the figure that transforms the figure from object coordinate system to World.</param>
        </member>
        <member name="T:VectorDraw.Render.RenderSelect.RenterSelectObject">
            <summary>
            This class is used while selecing objects and provide crusial information about the selected items.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RenderSelect.RenterSelectObject.mFigStackItem">
            <summary>
            An array of the selected items from inner to outer.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RenderSelect.RenterSelectObject.UserId">
            <summary>
            The ID of the inner element usefull for polyfaces and polyline with thickness.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RenderSelect.RenterSelectObject.segmentIndex">
            <summary>
            The segment Index of the entity.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RenderSelect.RenterSelectObject.isFill">
            <summary>
            Filled item or not.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RenderSelect.RenterSelectObject.DistFromViewCenter">
            <summary>
            The distance from the view center of the scene.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RenderSelect.RenterSelectObject.depth">
            <summary>
            The depth value of the inner entity.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RenderSelect.RenterSelectObject.Deleted">
            <summary>
            A boolean value representing if this object is deleted and should not be taken into consideration.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RenderSelect.RenterSelectObject.segments">
            <summary>
            A collection of <see cref="T:VectorDraw.Render.RenderSelect.RenterSelectObject.SEGMENT_ID"/> objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.RenderSelect.RenterSelectObject.ToString">
            <summary>
            Provides a string that describes the object.
            </summary>
            <returns>Returns a string that has all the hashcodes of the items in the <see cref="T:VectorDraw.Render.RenderSelect.FigureStackItem"/> list.</returns>
        </member>
        <member name="M:VectorDraw.Render.RenderSelect.RenterSelectObject.Equals(System.Object)">
            <summary>
            Checks if the passed object is equal to this object.
            </summary>
            <param name="obj">The object to check.</param>
            <returns>Returns true if the passed object is reference equal to this OR if their hashcodes are equal.</returns>
        </member>
        <member name="M:VectorDraw.Render.RenderSelect.RenterSelectObject.GetHashCode">
            <summary>
            Return the hashcode of this object.
            </summary>
            <returns>An integer that represents the hashcode for this object.</returns>
        </member>
        <member name="M:VectorDraw.Render.RenderSelect.RenterSelectObject.Outer">
            <summary>
            Returns the top most object .Depends on the sorting in the Finish method of RenterSelectObjectArray.
            </summary>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Render.RenderSelect.RenterSelectObject.SEGMENT_ID">
            <summary>
            A structure that contains information that reference a <see cref="T:VectorDraw.Render.RenderSelect.RenterSelectObject"/>
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RenderSelect.RenterSelectObject.SEGMENT_ID.segmentIndex">
            <summary>
            The segment Index of the entity.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RenderSelect.RenterSelectObject.SEGMENT_ID.UserId">
            <summary>
            The ID of the inner element usefull for polyfaces and polyline with thickness.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RenderSelect.RenterSelectObject.SEGMENT_ID.DistFromViewCenter">
            <summary>
            The distance from the view center of the scene.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RenderSelect.RenterSelectObject.SEGMENT_ID.depth">
            <summary>
            The depth value of the inner entity.
            </summary>
        </member>
        <member name="F:VectorDraw.Render.RenderSelect.RenterSelectObject.SEGMENT_ID.isFill">
            <summary>
            Filled item or not.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.RenderSelect.RenterSelectObject.SEGMENT_ID.#ctor(System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Initialize a new instance of the object
            </summary>
        </member>
        <member name="T:VectorDraw.Render.RenderSelect.RenterSelectObjectArray">
            <summary>
            An array of <see cref="T:VectorDraw.Render.RenderSelect.RenterSelectObject"/> objects used for selecting purposes.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.RenderSelect.RenterSelectObjectArray.AddItem(VectorDraw.Render.RenderSelect.RenterSelectObject)">
            <summary>
            Adds a <see cref="T:VectorDraw.Render.RenderSelect.RenterSelectObject"/> to the array.
            </summary>
            <param name="value">The object to be added to the array.</param>
            <returns>True if the object was succesfully added to the collection.</returns>
        </member>
        <member name="M:VectorDraw.Render.RenderSelect.RenterSelectObjectArray.RemoveAll">
            <summary>
            Removes all objects from the array.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdrawglRender_nolist.SupportLists">
            <summary>
            implements the <see cref="P:VectorDraw.Render.IRenderList.SupportLists"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender_nolist_2d.DrawBindMappedImageList(VectorDraw.Render.IRenderListItem,VectorDraw.Render.ISupportdMappedImages)">
            <summary>
            Implements the <see cref="M:VectorDraw.Render.IRenderList.DrawBindMappedImageList(VectorDraw.Render.IRenderListItem,VectorDraw.Render.ISupportdMappedImages)"/>
            </summary>
        </member>
        <member name="T:VectorDraw.Render.IvdOpenGLRender">
            <summary>
            Interface that implements OpenGl Functionality
            </summary>
        </member>
        <member name="M:VectorDraw.Render.IvdOpenGLRender.Vertex3d(System.Double,System.Double,System.Double)">
            <summary>
            Calls the opengl glVertex3d by appling additional matrix offset information.
            </summary>
            <param name="x">In world coord system</param>
            <param name="y">In world coord system</param>
            <param name="z">In world coord system</param>
        </member>
        <member name="M:VectorDraw.Render.IvdOpenGLRender.Vertex3d(VectorDraw.Geometry.gPoint)">
            <summary>
            Calls the opengl glVertex3d by appling additional matrix offset information.
            </summary>
            <param name="pt">In world coord system</param>
        </member>
        <member name="M:VectorDraw.Render.IvdOpenGLRender.SetNormal(System.Double,System.Double,System.Double)">
            <summary>
            Calls the opengl glNormal3d function with passed normal 
            </summary>
        </member>
        <member name="M:VectorDraw.Render.IvdOpenGLRender.SetNormal(VectorDraw.Geometry.Vector)">
            <summary>
            Calls the opengl glNormal3d function with passed normal 
            </summary>
        </member>
        <member name="M:VectorDraw.Render.IvdOpenGLRender.SetColor(System.Drawing.Color)">
            <summary>
            Set the active color for the opengl context.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.IvdOpenGLRender.SetLineWidth(System.Double)">
            <summary>
            Set the active line width in pixels for the opengl context.
            </summary>
            <param name="width">Width in pixels</param>
            <returns>The previous selected wpen width.</returns>
        </member>
        <member name="M:VectorDraw.Render.IvdOpenGLRender.SetEdgeFlag(System.Byte)">
            <summary>
            Set the visibilty of Edge lines
            </summary>
            <param name="flag">Set to 1 for visible edge lines or 0 for invisible.</param>
        </member>
        <member name="M:VectorDraw.Render.IvdOpenGLRender.DrawPrimitiveBegin(VectorDraw.Render.OpenGL.OpenGLImports.Primitives)">
            <summary>
            Begin an opengl drawing primitive
            </summary>
        </member>
        <member name="M:VectorDraw.Render.IvdOpenGLRender.DrawPrimitiveEnd">
            <summary>
            Finish an opengl drawing primitive
            </summary>
        </member>
        <member name="M:VectorDraw.Render.IvdOpenGLRender.UpdatePixels">
            <summary>
            Internally used only.Draw the Selected MemoryBitmap Pixels to opengl context.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.IvdOpenGLRender.PushOffsetMatrix(System.Boolean)">
            <summary>
            Pushes <see cref="P:VectorDraw.Render.IvdOpenGLRender.OffsetPt"/> used for lagre coordinate correction.
            </summary>
            <param name="useOpenGL">Set it to true just before calling <see cref="M:VectorDraw.Render.OpenGL.OpenGLImports.glCallList(System.UInt32)"/> .</param>
        </member>
        <member name="M:VectorDraw.Render.IvdOpenGLRender.PopOffsetMatrix(System.Boolean)">
            <summary>
            Pop previous <see cref="M:VectorDraw.Render.IvdOpenGLRender.PushOffsetMatrix(System.Boolean)"/>
            </summary>
            <param name="useOpenGL">Set it to true just after calling <see cref="M:VectorDraw.Render.OpenGL.OpenGLImports.glCallList(System.UInt32)"/> . </param>
        </member>
        <member name="M:VectorDraw.Render.IvdOpenGLRender.LockTovdRender">
            <summary>
            Re-activates opengl render that previous was de-activated by <see cref="M:VectorDraw.Render.IvdOpenGLRender.UnlockTovdRender"/> call
            </summary>
            <remarks>
            After this call all render properties will be restored to state before <see cref="M:VectorDraw.Render.IvdOpenGLRender.UnlockTovdRender"/> method call.
            </remarks>
        </member>
        <member name="M:VectorDraw.Render.IvdOpenGLRender.UnlockTovdRender">
            <summary>
            De-activates opengl render and activates default VectorDraw rendering engine.
            </summary>
            <remarks>
            Depth buffer is also disabled and transparency (Alphablend of Penstyle) is applied for each drawing pixel in relation to existing destination.</remarks>
            <remarks>This method must be called after the <see cref="M:VectorDraw.Render.vdRender.StartDraw(System.Boolean)"/> and before <see cref="M:VectorDraw.Render.vdRender.EndDraw"/>, usually inside DrawAfter event of vdDocument.</remarks>
            <remarks><see cref="M:VectorDraw.Render.IvdOpenGLRender.LockTovdRender"/> must be called after finish drawings with UnlockTovdRender
            </remarks>
            <example>
            <para> 
            Draw a transparency box and a text after draw all elements.
            By using the UnlockTovdRender when openglrender is active we can apply transparency and high quality TrueType text draw ,
            without depth buffer test, but always in the view plane.
            </para>
            <code>
                            //add a drawafter event for the vdDocument object
                            doc.OnDrawAfter += new vdDocument.DrawAfterEventHandler(doc_OnDrawAfter);
                            // Draw a transparency box and a text after draw all elements
                            // By using the UnlockTovdRender when openglrender is active we can apply transparency and high quality TrueType text draw ,without depth buffer test, but always in the view plane.
                            void doc_OnDrawAfter(object sender, vdRender render)
                            {
                                //Apply this only on Layout Render and not for viewports
                                if (render.OwnerObject is vdViewport) return;
                                //disable depth buffer test, so drawing elements are overlapped, depend on draw order.
                                bool enableDepthBuffer = render.EnableDepthBuffer(false);
                                //De-activates opengl render and activates default vectorDraw rendering engine.
                                if (render.IsOpenGLRender) render.OpenGLRender.UnlockTovdRender();
            
                                //temporary create a text to draw.Initialize it to the center of the view and height 5 percent of the view size.
                                vdText text = new vdText(doc, "VectorDraw Test", render.ViewCenter, render.ViewSize * 0.05, VdConstHorJust.VdTextHorCenter, VdConstVerJust.VdTextVerCen, doc.TextStyles.Standard);
                                //make the elements to be drawn always on view plane.
                                render.PushToViewMatrix();
            
                                //translate the drawing elements from text ECS matrix to current render matrix
                                render.PushMatrix(text.ECSMatrix);
            
                                //draw a blue transparent box that completely enclose the text.
                                render.PushPenstyle(Color.Blue, false, 100);
                                render.DrawSolidBoundBox(this,text.TextBox);
                                render.PopPenstyle();
            
                                //draw the text string
                                render.PushPenstyle(Color.Red, false, 255);
                                render.DrawString(this, text.Style.GrTextStyle, null, text.TextString, text.TextBox);
                                render.PopPenstyle();
                                
                                //pop previous pushed matrixes
                                render.PopMatrix();
                                render.PopMatrix();
            
                                //Re-activates opengl render that previous was de-activated by UnlockTovdRender call
                                if (render.IsOpenGLRender) render.OpenGLRender.LockTovdRender();
            
                                //restore depth buffer test property.
                                render.EnableDepthBuffer(enableDepthBuffer);
            
                            }
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Render.IvdOpenGLRender.IsLockOpenGLContect">
            <summary>
            Returns true if OpenGLCOntext is active and valid
            </summary>
        </member>
        <member name="M:VectorDraw.Render.IvdOpenGLRender.LockOpenGLContect">
            <summary>
            Make OpenGL context active
            </summary>
        </member>
        <member name="M:VectorDraw.Render.IvdOpenGLRender.UnLockOpenGLContect">
            <summary>
            Deactivate OpenGL context
            </summary>
        </member>
        <member name="P:VectorDraw.Render.IvdOpenGLRender.BasicRender">
            <summary>
            Returns the <see cref="T:VectorDraw.Render.vdRender"/> object that Implements this <see cref="T:VectorDraw.Render.IvdOpenGLRender"/> interface.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.IvdOpenGLRender.OffsetPt">
            <summary>
            Returns the extra offset point that is used with Current matrix when the current viewcenter coordinates are to large.May be null.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender_opengl.SetDrawStipple(System.Boolean)">
            <summary>
            Se to the vdRender a boolean value either to use a stipple filter or not. Striple filter is used for the SectionClip extended highlight filter.
            </summary>
            <param name="bval">True or false to enable this stipple filter.</param>
            <returns> the previous selected stipple. </returns>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender_opengl.UpdatePixels">
            <summary>
            Internally used only.Draw the Selected MemoryBitmap Pixels to opengl context.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender_opengl.UnlockTovdRender">
            <summary>
            De-activates opengl render and activates default VectorDraw rendering engine.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender_opengl.LockTovdRender">
            <summary>
            Re-activates opengl render that previous was de-activated by <see cref="M:VectorDraw.Render.vdrawglRender_opengl.UnlockTovdRender"/> call
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender_opengl.PushOffsetMatrix(System.Boolean)">
            <summary>
            Pushes <see cref="P:VectorDraw.Render.vdrawglRender_opengl.OffsetPt"/> used for lagre coordinate correction.
            </summary>
            <param name="useOpenGL">Set it to true just before calling <see cref="M:VectorDraw.Render.OpenGL.OpenGLImports.glCallList(System.UInt32)"/> .</param>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender_opengl.PopOffsetMatrix(System.Boolean)">
            <summary>
            Pop previous <see cref="M:VectorDraw.Render.vdrawglRender_opengl.PushOffsetMatrix(System.Boolean)"/>
            </summary>
            <param name="useOpenGL">Set it to true just after calling <see cref="M:VectorDraw.Render.OpenGL.OpenGLImports.glCallList(System.UInt32)"/> . </param>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender_opengl.ListDeleted(VectorDraw.Render.IRenderListItem)">
            <summary>
            Implements the <see cref="M:VectorDraw.Render.IRenderList.ListDeleted(VectorDraw.Render.IRenderListItem)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender_opengl.DrawList(VectorDraw.Render.IRenderListItem)">
            <summary>
            Implements the <see cref="M:VectorDraw.Render.IRenderList.DrawList(VectorDraw.Render.IRenderListItem)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender_opengl.CloseOpenPolygon">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.CloseOpenPolygon"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender_opengl.GenerateStringList(System.Boolean,VectorDraw.Render.grTextStyle,System.String)">
            <summary>
            Generate display lists for a specific text style and string characters.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender_opengl.SetEdgeFlag(System.Byte)">
            <summary>
            Set the visibilty of Edge lines
            </summary>
            <param name="flag">Set to 1 for visible edge lines or 0 for invisible.</param>
        </member>
        <member name="M:VectorDraw.Render.vdrawglRender_opengl.DrawBindMappedImageList(VectorDraw.Render.IRenderListItem,VectorDraw.Render.ISupportdMappedImages)">
            <summary>
            Implements the <see cref="M:VectorDraw.Render.IRenderList.DrawBindMappedImageList(VectorDraw.Render.IRenderListItem,VectorDraw.Render.ISupportdMappedImages)"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdrawglRender_opengl.Status">
            <summary>
            Returns a status code for diagnostic purposes.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdrawglRender_opengl.OffsetPt">
            <summary>
            Returns the extra offset point that is used with Current matrix when the current viewcenter coordinates are to large.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.vdrawglRender_opengl.SupportLists">
            <summary>
            Implements the <see cref="P:VectorDraw.Render.IRenderList.SupportLists"/>
            </summary>
        </member>
        <member name="T:VectorDraw.Actions.ActionWrapperRender">
            <summary>
            A render object reference BaseActions that implements visual drawings by a user input.
            </summary>
        </member>
        <member name="M:VectorDraw.Actions.ActionWrapperRender.#ctor(VectorDraw.Render.vdRender)">
            <summary>
            Initialize a new instace of the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Actions.ActionWrapperRender.SetScreenMode(System.Boolean)">
            <summary>
            Internally used.
            Set the drawing mode of the <see cref="T:VectorDraw.Actions.ActionWrapperRender"/> used by user actions.
            </summary>
            <param name="bvalue">New drawing mode value.</param>
            <returns>The old selected value.</returns>
        </member>
        <member name="M:VectorDraw.Actions.ActionWrapperRender.Refresh">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.Refresh"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Actions.ActionWrapperRender.OnUpdateClipping(System.Boolean)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.OnUpdateClipping(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Actions.ActionWrapperRender.Clear(System.Drawing.Color,System.Boolean)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.Clear(System.Drawing.Color,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Actions.ActionWrapperRender.ClearScreen">
            <summary>
            Internally used.
            clear the screen graphics form user action drawning objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Actions.ActionWrapperRender.Hide">
            <summary>
            Internally used.
            Usually called when an Action that reference this object is hidden from the screen
            </summary>
        </member>
        <member name="M:VectorDraw.Actions.ActionWrapperRender.StartDraw(System.Boolean)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.StartDraw(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Actions.ActionWrapperRender.EndDraw">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.EndDraw"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Actions.ActionWrapperRender.Lock">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.Lock"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Actions.ActionWrapperRender.UnLock(System.Boolean)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.UnLock"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Actions.ActionWrapperRender.UnLock">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.UnLock"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Actions.ActionWrapperRender.DrawGdiLine(System.Int32,System.Int32,System.Double,System.Int32,System.Int32,System.Double)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.DrawGdiLine(System.Int32,System.Int32,System.Double,System.Int32,System.Int32,System.Double)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Actions.ActionWrapperRender.DrawGdiBox(System.Drawing.Point,System.Int32)">
            <summary>
            overrides the <see cref="M:VectorDraw.Render.vdRender.DrawGdiBox(System.Drawing.Point,System.Int32)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Actions.ActionWrapperRender.SetColorMixMode(VectorDraw.Render.vdgl.COLOR_MIX)">
            <summary>
            Set the active <see cref="T:VectorDraw.Render.vdgl.COLOR_MIX"/> color mix mode
            </summary>
            <param name="mixmode">The value of new color mix mode.</param>
            <returns>The previous selected value.</returns>
        </member>
        <member name="M:VectorDraw.Actions.ActionWrapperRender.ContainsMouse">
            <summary>
            Get a boolean value that represents if the mouse is contained on the render window.
            </summary>
            <returns>A boolean value that represents if the mouse is contained on the render window.</returns>
        </member>
        <member name="M:VectorDraw.Actions.ActionWrapperRender.BeginBreakCount(VectorDraw.WinMessages.MessageManager.BreakMessageMethod)">
            <summary>
            Internally used.
            Set the active <see cref="P:VectorDraw.Render.vdRender.BreakOnMessage"/> for this object.
            </summary>
            <param name="breakMethod"></param>
        </member>
        <member name="M:VectorDraw.Actions.ActionWrapperRender.EndBreakCount">
            <summary>
            Internally used.
            Restore the <see cref="P:VectorDraw.Render.vdRender.BreakOnMessage"/> value previous set by <see cref="M:VectorDraw.Actions.ActionWrapperRender.BeginBreakCount(VectorDraw.WinMessages.MessageManager.BreakMessageMethod)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Actions.ActionWrapperRender.MousePosition">
            <summary>
            The Mouse position in pixels on the control.
            </summary>
            <returns>A Point that represents the mouse position in pixels on the control.</returns>
        </member>
        <member name="P:VectorDraw.Actions.ActionWrapperRender.ColorPalette">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.ColorPalette"/> . Always returns <see cref="F:VectorDraw.Render.vdRender.ColorDisplay.TrueColor"/> for <see cref="T:VectorDraw.Actions.ActionWrapperRender"/> render type.
            </summary>
        </member>
        <member name="P:VectorDraw.Actions.ActionWrapperRender.MemoryBitmap">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.MemoryBitmap"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Actions.ActionWrapperRender.graphics">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.graphics"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Actions.ActionWrapperRender.RenderMode">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.RenderMode"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Actions.ActionWrapperRender.SupportLights">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.SupportLights"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Actions.ActionWrapperRender.SupportSectionClips">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.SupportSectionClips"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Actions.ActionWrapperRender.SupportLists">
            <summary>
            implements the <see cref="P:VectorDraw.Render.IRenderList.SupportLists"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Actions.ActionWrapperRender.IsValid">
            <summary>
            Check if the render is valid. A valid render is not null and is not cleared.
            </summary>
        </member>
        <member name="P:VectorDraw.Actions.ActionWrapperRender.BitmapGraphics">
            <summary>
            Returns the windows API <see cref="T:System.Drawing.Graphics"/> context that selected to this <see cref="T:System.Drawing.GraphicsContext"/> property.
            </summary>
        </member>
        <member name="P:VectorDraw.Actions.ActionWrapperRender.GdiPlusGraphics">
            <summary>
            Get the graphics object of the render.
            </summary>
        </member>
        <member name="P:VectorDraw.Actions.ActionWrapperRender.WindowControlHandle">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.WindowControlHandle"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Actions.ActionWrapperRender.UseDifferentGraphics">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.WrapperRender.WindowControlHandle"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Actions.ActionWrapperRender.Display">
            <summary>
            overrides the <see cref="P:VectorDraw.Render.vdRender.Display"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Actions.ActionWrapperRender.control">
            <summary>
            Returns a <see cref="T:System.Windows.Forms.Control"/> where this render is drawing on.
            </summary>
        </member>
        <member name="P:VectorDraw.Actions.ActionWrapperRender.HideSolidRegions">
            <summary>
            Get/Set a value that represents if solid regions will be drawn as filled or as single polyline
            </summary>
        </member>
        <member name="M:VectorDraw.Render.GDIDraw.GDI.IMAGE_STRIDE_WIDTH(System.Int32,System.Int32)">
            <summary>
            Returns the raw width of an image depend on pixel width and image BitsPerPixel
            </summary>
        </member>
        <member name="M:VectorDraw.Render.GDIDraw.GDI.CopyGraphics(System.Drawing.Graphics,System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             performs a bit-block transfer of the color data corresponding to a rectangle of pixels from the specified source device context into a destination device context.  
            </summary>
            <param name="source">source DC graphics</param>
            <param name="dest">destination DC graphics </param>
            <param name="srcX">x-coordinate of source upper-left corner</param>
            <param name="srcY">y-coordinate of source upper-left corner</param>
            <param name="dstX">x-coord of destination upper-left corner</param>
            <param name="dstY">y-coord of destination upper-left corner</param>
            <param name="dstWidth">width of destination rectangle</param>
            <param name="dstHeight">height of destination rectangle</param>
            <returns>True if method succeeds.</returns>
        </member>
        <member name="T:VectorDraw.DrawElements.grArc">
            <summary>
            Implements a drawable arc object.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grArc.Center">
            <summary>
            Get/Set a gPoint that represents the center of the arc element.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grArc.Radius">
            <summary>
            Get/Set a double value that represents the radius of the arc.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grArc.StartAngle">
            <summary>
            Get/Set a double value that represents the start angle of the arc.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grArc.EndAngle">
            <summary>
            Get/Set a double value that represents the end angle of the arc.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grArc.#ctor">
            <summary>
            Initializes the arc element.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grArc.#ctor(VectorDraw.Geometry.gPoint,System.Double,System.Double,System.Double)">
            <summary>
            Initializes the arc element with the passed parameters.
            </summary>
            <param name="center">The center of the arc.</param>
            <param name="radius">The radius of the arc.</param>
            <param name="startAngle">The start angle of the arc.</param>
            <param name="endAngle">The end angle of the arc.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grArc.GetBox">
            <summary>
            Gets Element's BoundingBox
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grArc.GetSamplePoints(System.Int32,System.Double)">
            <summary>
            Returns a list of points on the arc from the start to the end point of the arc.
            </summary>
            <param name="curveResolution">valid values (1 to 20000)</param>
            <param name="pixelSize">valid values possitive decimal ( &gt;=0)</param>
            <returns>A collection of points belonging to the arc in Entity Coordinate System(ECS).</returns>
            <seealso cref="M:VectorDraw.DrawElements.grElement.GetSamplePoints(System.Int32,System.Double)"/>
        </member>
        <member name="M:VectorDraw.DrawElements.grArc.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.DrawElements.grArc.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Draws an element to the passed vdRender object.
            </summary>
            <param name="render">A vdRender object where the object is going to be drawn.</param>
            <returns>A status code representing the end of the draw function.</returns>
        </member>
        <member name="T:VectorDraw.Render.IElevatedGradientColors">
            <summary>
            Provides all functionality of ElevatedGradientColors object.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.ElevatedGradientColors">
            <summary>
            This is a sorted list of System.Colors and elevations.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.ElevatedGradientColors.#ctor">
            <summary>
            Initializes the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.ElevatedGradientColors.GetAt(System.Double,System.Drawing.Color)">
            <summary>
            Returns the Color for a specific elevation in the collection. 
            </summary>
            <param name="Elevation">A value that represent the elevation z value in drawing units. </param>
            <param name="defaultValue">A color value that will be returned if the collection is empty.</param>
            <returns>
            The Color for a specific elevation in the collection.If the specified elevation key is not found, 
            returns the interpolation color between nearest upper and lower elevations or defaultValue if the collection is empty
            </returns>
        </member>
        <member name="M:VectorDraw.Render.ElevatedGradientColors.SetAt(System.Double,System.Drawing.Color)">
            <summary>
            Set the color value at a specific elevation.
            If specified elevation is not exist , operation creates a new element with the specified elevation key and assign the colorValue.
            </summary>
            <param name="Elevation">The elevation z value in drawing units.</param>
            <param name="colorValue">A System.Drawing.Color for the specified elevation.</param>
        </member>
        <member name="M:VectorDraw.Render.ElevatedGradientColors.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.ElevatedGradientColors.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Render.ElevatedGradientColors.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Render.ElevatedGradientColors.Clone">
            <summary>
            Create a new ElevatedGradientColors collection having a copy of all items of this collection.
            </summary>
            <returns>A new created ElevatedGradientColors collection.</returns>
        </member>
        <member name="M:VectorDraw.Render.ElevatedGradientColors.GetEnumerator">
            <summary>
             Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Render.ElevatedGradientColors.Add(System.Object)">
            <summary>
            Adds a <see cref="T:VectorDraw.Render.ElevatedGradientColors.vdElevatedGradientColorKeyValuePair"/> to the collection.
            </summary>
            <param name="item"> a <see cref="T:VectorDraw.Render.ElevatedGradientColors.vdElevatedGradientColorKeyValuePair"/> item type to be added in collection.</param>
        </member>
        <member name="P:VectorDraw.Render.ElevatedGradientColors.Count">
            <summary>
            Get the number of items in the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.ElevatedGradientColors.Elevations">
            <summary>
            Returns an array of the elevations in the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.ElevatedGradientColors.Item(System.Double)">
            <summary>
            Get the Color for a specific elevation in the collection. 
            </summary>
            <param name="ElevationKey">A value that represent the elevation z value in drawing units. </param>
            <returns>
            The Color for a specific elevation in the collection.If the specified elevation key is not found, 
            returns the interpolation color between nearest upper and lower elevations or a Color.Empty if the collection is empty
            </returns>
        </member>
        <member name="T:VectorDraw.Render.ElevatedGradientColors.vdElevatedGradientColorKeyValuePair">
            <summary>
            Defines a key/value pair for ElevatedGradientColors items.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.ElevatedGradientColors.vdElevatedGradientColorKeyValuePair.#ctor">
            <summary>
            Initializes the vdElevatedGradientColorKeyValuePair object.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.ElevatedGradientColors.vdElevatedGradientColorKeyValuePair.#ctor(VectorDraw.Render.ElevatedGradientColors,System.Double)">
            <summary>
            Initialize a new instance of the object
            </summary>
            <param name="owner"></param>
            <param name="key"></param>
        </member>
        <member name="M:VectorDraw.Render.ElevatedGradientColors.vdElevatedGradientColorKeyValuePair.ToString">
            <summary>
            Gets a System.String that represents the elevation key of the object.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.ElevatedGradientColors.vdElevatedGradientColorKeyValuePair.Key">
            <summary>
            The elevation in drawing units.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.ElevatedGradientColors.vdElevatedGradientColorKeyValuePair.Value">
            <summary>
            The color value assign into the key elevation
            </summary>
        </member>
        <member name="T:VectorDraw.DrawElements.grPLine">
            <summary>
            Implements a drawble polyline element.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grPLine.Points">
            <summary>
            Get/Set a collection of gPoints that represent the points of the polyline's in Entity Coordinate System.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grPLine.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grPLine.#ctor(VectorDraw.Geometry.gPoints)">
            <summary>
            Initializes the object with the passed points.
            </summary>
            <param name="points">A collection of gPoints that represent the polyline's points in Entity Coordinate System.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grPLine.GetBox">
            <summary>
            Gets Element's BoundingBox
            </summary>
            <remarks >The Bounding box of subelements(Childs) is not included</remarks>
        </member>
        <member name="M:VectorDraw.DrawElements.grPLine.GetSamplePoints(System.Int32,System.Double)">
            <summary>
            Returns a list of points on the arc from the start to the end point of the arc.
            </summary>
            <param name="curveResolution">valid values (1 to 20000)</param>
            <param name="pixelSize">valid values possitive decimal ( &gt;=0)</param>
            <returns>A collection of points belonging to the arc in Entity Coordinate System(ECS).</returns>
            <seealso cref="M:VectorDraw.DrawElements.grElement.GetSamplePoints(System.Int32,System.Double)"/>
        </member>
        <member name="M:VectorDraw.DrawElements.grPLine.GetLength">
            <summary>
            Calculate the length of the Element.
            </summary>
            <returns>Returns a double value representing the length of the element.</returns>
        </member>
        <member name="M:VectorDraw.DrawElements.grPLine.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.DrawElements.grPLine.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Draws an element to the passed vdRender object.
            </summary>
            <param name="render">A vdRender object where the object is going to be drawn.</param>
            <returns>A status code representing the end of the draw function.</returns>
        </member>
        <member name="T:VectorDraw.DrawElements.grEllipse">
            <summary>
            Implements a drawable ellipse element.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grEllipse.Center">
            <summary>
            Get/Set the center of the ellipse.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grEllipse.MajorAxis">
            <summary>
            Get/Set the major axis length of the ellipse.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grEllipse.MinorAxis">
            <summary>
            Get/Set the Minor axis length of the ellipse.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grEllipse.MajorAngle">
            <summary>
            Get/Set the major angle of the ellipse.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grEllipse.StartAngle">
            <summary>
            Get/Set the start angle of the ellipse.
            </summary>
        </member>
        <member name="F:VectorDraw.DrawElements.grEllipse.EndAngle">
            <summary>
            Get/Set the end angle of the ellipse.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grEllipse.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.DrawElements.grEllipse.#ctor(VectorDraw.Geometry.gPoint,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="center">The center of the ellipse.</param>
            <param name="majorAxis">The major axis length of the ellipse.</param>
            <param name="minorAxis">The minor axis length of the ellipse.</param>
            <param name="majorAngle">The major angle of the ellipse.</param>
            <param name="startAngle">The start angle of the ellipse.</param>
            <param name="endAngle">The end angle of the ellipse.</param>
        </member>
        <member name="M:VectorDraw.DrawElements.grEllipse.GetBox">
            <summary>
            Gets Element's BoundingBox
            </summary>
            <remarks >The Bounding box of subelements(Childs) is not included</remarks>
        </member>
        <member name="M:VectorDraw.DrawElements.grEllipse.GetSamplePoints(System.Int32,System.Double)">
            <summary>
            Returns a list of points on the arc from the start to the end point of the arc.
            </summary>
            <param name="curveResolution">valid values (1 to 20000)</param>
            <param name="pixelSize">valid values possitive decimal ( &gt;=0)</param>
            <returns>A collection of points belonging to the arc in Entity Coordinate System(ECS).</returns>
            <seealso cref="M:VectorDraw.DrawElements.grElement.GetSamplePoints(System.Int32,System.Double)"/>
        </member>
        <member name="M:VectorDraw.DrawElements.grEllipse.Update">
            <summary>
            Updates the object after change of properties.
            </summary>
            <remarks >
            Call this method after changing properties that influences the geometry of the object. The update method
            will force other properties to be recalculated (e.g Bounding Box).
            </remarks>
        </member>
        <member name="M:VectorDraw.DrawElements.grEllipse.Draw(VectorDraw.Render.vdRender)">
            <summary>
            Draws an element to the passed vdRender object.
            </summary>
            <param name="render">A vdRender object where the object is going to be drawn.</param>
            <returns>A status code representing the end of the draw function.</returns>
        </member>
    </members>
</doc>
