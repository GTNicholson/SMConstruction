<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VectorDraw.Geometry</name>
    </assembly>
    <members>
        <member name="T:VectorDraw.Geometry.Int32Array">
            <summary>
            Represents a collection of integers.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.BaseObject">
            <summary>
            This is the base object for the VectorDraw.Geometry dll.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.BaseObject.#ctor">
            <summary>
            Initializes the Base object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Int32Array.#ctor">
            <summary>
            Initializes the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Int32Array.#ctor(System.Int32[])">
            <summary>
            Fill the collection with passed integer items.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Int32Array.GetHashCode">
            <summary>
            Serves as a hash function for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.Int32Array.Equals(System.Object)">
            <summary>
            Checks if the parameter object is equal to this collection.
            </summary>
            <param name="obj">A collection to be checked if it is equal with this collection.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Int32Array.ToString">
            <summary>
            Gets a System.String that represents the count of the Int32Array Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Int32Array.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.Int32Array.AddItem(System.Int32)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
            <param name="value">An object to be added to the collection.</param>
            <returns>True if the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Int32Array.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Int32Array.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Int32Array.RemoveAt(System.Int32)">
            <summary>
            Removes an object from a specified index of the collection.
            </summary>
            <param name="index">The index of the object to be removed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the index is less than 0 or bigger or equal to <see cref="P:VectorDraw.Geometry.Int32Array.Count"/> property. </exception>
        </member>
        <member name="M:VectorDraw.Geometry.Int32Array.AddRange(VectorDraw.Geometry.Int32Array)">
            <summary>
            Adds the objects of one list to the end of this list.
            </summary>
            <param name="c">A vdArray collection to be added to this list.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Int32Array.Reverse">
            <summary>
            Changes the order of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Int32Array.Clone">
            <summary>
            Returns a new created collection having a copy of all the objects of this collection.
            </summary>
            <returns>A new created collection filled with all the objects of this collection.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Int32Array.Contains(System.Int32)">
            <summary>
            Checks if an Int32 object exists in the collection.
            </summary>
            <param name="value">An Int32 value to be checked if it exists in the collection.</param>
            <returns>True if the object exists in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Int32Array.ContainsPos(System.Int32)">
            <summary>
            Checks if an Int32 object exists in the collection.
            </summary>
            <param name="value">An Int32 value to be checked if it exists in the collection.</param>
            <returns>The index of the collection where the value was found..</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Int32Array.shortAscending">
            <summary>
            Shorts the collection's object with ascending order. 
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Int32Array.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the Int32Array object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Geometry.Int32Array.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the Int32Array object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Geometry.Int32Array.SetValue(System.Int32,System.Object)">
            <summary>
            Set the passed object value to the specified index of the array.
            </summary>
            <param name="Index">The zero based index where the object is going to be set.</param>
            <param name="item">An Int32 object value to be set to the specified index.</param>
        </member>
        <member name="P:VectorDraw.Geometry.Int32Array.ArrayItems">
            <summary>
            Get the items of the collection in a returned array.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Int32Array.Item(System.Int32)">
            <summary>
            Get/Set the object at a specified index of the collection.
            </summary>
            <param name="index">The index of the object.</param>
            <returns>The object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Geometry.Int32Array.Count">
            <summary>
            Get the number of items in the collection.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.DoubleAngularConverter">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleAngularConverter.getAunits(VectorDraw.Geometry.AUnits)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleAngularConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleAngularConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleAngularConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleAngularConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Geometry.DoubleAngularConverterDecDegreesDefault">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleAngularConverterDecDegreesDefault.getAunits(VectorDraw.Geometry.AUnits)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.DoubleAngularConverterNoDirection">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleAngularConverterNoDirection.getAunits(VectorDraw.Geometry.AUnits)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.DoubleLinearConverterDecimalDefault">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.DoubleLinearConverter">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleLinearConverter.getLunits(VectorDraw.Geometry.LUnits)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleLinearConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleLinearConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleLinearConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleLinearConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleLinearConverterDecimalDefault.getLunits(VectorDraw.Geometry.LUnits)">
            <summary>
            Internally used.
            </summary>
            <param name="inputUnits"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Geometry.LUnits">
            <summary>
            Implements all functionality for presentation of linear units.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.LUnits.DefaultTypeConverter">
            <summary>
            The defualt units used to convert no document register objects from string to double.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.LUnits.#ctor">
            <summary>
            Initializes the LUnits object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.LUnits.Clone">
            <summary>
            Creates a clone of this object
            </summary>
            <returns>Returnes a clone of this object.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.LUnits.#ctor(VectorDraw.Geometry.LUnits.LUnitType,System.Int16,VectorDraw.Geometry.LUnits.LZeroSuppression)">
            <summary>
            Initializes the LUnits object.
            </summary>
            <param name="_type">The type of the LUnits object.</param>
            <param name="_precision">Decimal precision of the LUnits object.</param>
            <param name="zeros">Zeros suppression type of the LUnits object.</param>
        </member>
        <member name="M:VectorDraw.Geometry.LUnits.FormatDecimalPrecision(System.Double,System.Int16)">
            <summary>
            Formates a specified double into a string using a specific precision.
            </summary>
            <param name="length">The double to be formatted.</param>
            <param name="_precision">The desired precision.</param>
            <returns>Returns a formated string.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.LUnits.FormatDecimalPrecision(System.Double,System.Int16,VectorDraw.Geometry.LUnits.LZeroSuppression)">
            <summary>
            Formates a specified double into a string using a specific precision.
            </summary>
            <param name="length">The double to be formatted.</param>
            <param name="_precision">The desired precision.</param>
            <param name="zeros">Enumeration value for suppresssing Leading or Trailing zeros .</param>
            <returns>Returns a formated string.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.LUnits.FormatLength(System.Double)">
            <summary>
            Formats a double using the object's LUnits parameters.
            </summary>
            <param name="length">The double to be formatted.</param>
            <returns>Returns a formated string.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.LUnits.LengthFromString(System.String)">
            <summary>
            Converts a formatted string into a double.
            </summary>
            <param name="str">The formatted string.</param>
            <returns>A double that the parameter string represents.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.LUnits.ToString">
            <summary>
            Gets a System.String that represents the properties of this Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.LUnits.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the LUnits object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Geometry.LUnits.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the LUnits object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Geometry.LUnits.FromString(System.String)">
            <summary>
            Sets the property values of the object from a given string.
            </summary>
            <param name="str">A string representing the object.</param>
        </member>
        <member name="M:VectorDraw.Geometry.LUnits.ToString(VectorDraw.Serialize.Serializer)">
            <summary>
            Sets the object's properties using a ToString string, according to the Serializer precision
            </summary>
            <param name="serializer">the Serializer object where the object is going to be saved.</param>
            <returns></returns>
        </member>
        <member name="P:VectorDraw.Geometry.LUnits.Precision">
            <summary>
            Represents the decimal precision.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.LUnits.UType">
            <summary>
            Represents the linear units type.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.LUnits.ZerosSuppression">
            <summary>
            Represents the zeros suppression type.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.LUnits.LUnitType">
            <summary>
            Enumeration for setting Linear Units mode.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.LUnits.LUnitType.lu_Scientific">
            <summary>
            Scientific (1.6449E+001)
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.LUnits.LUnitType.lu_Decimal">
            <summary>
            Decimal  (16.4492)
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.LUnits.LUnitType.lu_Engineering">
            <summary>
             Engineering  (1' - 4.4492")
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.LUnits.LUnitType.lu_Architectural">
            <summary>
            Architectural (1' - 4  7/16")
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.LUnits.LUnitType.lu_Fractional">
            <summary>
            Fractional  (16 7/16)
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.LUnits.LUnitType.lu_windesk">
            <summary>
            Windows desktop
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.LUnits.LZeroSuppression">
            <summary>
            Enumeration for suppresssing zeros in linear units.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.LUnits.LZeroSuppression.Feet">
            <summary>
            Suppresses zero feet and precisely zero inches
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.LUnits.LZeroSuppression.None">
            <summary>
            Includes zero feet and precisely zero inches
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.LUnits.LZeroSuppression.Inches">
            <summary>
            Includes zero feet and suppresses zero inches
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.LUnits.LZeroSuppression.DecimalLeading">
            <summary>
            Suppresses leading zeros in decimal dimensions (for example, 0.5000 becomes .5000)
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.LUnits.LZeroSuppression.DecimalTrailing">
            <summary>
            Suppresses trailing zeros in decimal dimensions (for example, 12.5000 becomes 12.5)
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.LUnits.LZeroSuppression.DecimalAll">
            <summary>
            Suppresses all.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.AUnits">
            <summary>
            Implements all functionality for presentation of angular units.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.AUnits.DefaultTypeConverter">
            <summary>
            The defualt units used to convert no document register objects from string angle to double.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.AUnits.#ctor">
            <summary>
            Initializes the AUnits object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.AUnits.Clone">
            <summary>
            Creates a clone of this object
            </summary>
            <returns>Returnes a clone of this object.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.AUnits.#ctor(VectorDraw.Geometry.AUnits.AUnitType,System.Int16,VectorDraw.Geometry.AUnits.AZeroSuppression)">
            <summary>
            Initializes the AUnits object.
            </summary>
            <param name="_type">The type of the AUnits object.</param>
            <param name="_precision">Decimal precision of the AUnits object.</param>
            <param name="zeros">Zeros suppression type of the AUnits object.</param>
        </member>
        <member name="M:VectorDraw.Geometry.AUnits.AsRadians(System.Double)">
            <summary>
            Convert input value to Radians depend the selected <see cref="F:VectorDraw.Geometry.AUnits.type"/>
            </summary>
            <param name="value">A value to be converted expressed in <see cref="F:VectorDraw.Geometry.AUnits.type"/> units.</param>
            <returns>The value converted to radians.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.AUnits.FormatAngle(System.Double)">
            <summary>
            Formats an angle double value into it's sring representation.
            </summary>
            <param name="inputAngle">The angle stored in radians.</param>
            <returns>Returns the formatted string.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.AUnits.AngleFromString(System.String)">
            <summary>
            Converts a string representing an angle into it's double representation.
            </summary>
            <param name="str">The angle string.</param>
            <returns>Returns a double converting the parameter string.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.AUnits.ToString">
            <summary>
            Gets an empty System.String.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.AUnits.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the AUnits object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Geometry.AUnits.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the AUnits object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Geometry.AUnits.FromString(System.String)">
            <summary>
            Sets the property values of the object from a given string.
            </summary>
            <param name="str">A string representing the object.</param>
        </member>
        <member name="M:VectorDraw.Geometry.AUnits.ToString(VectorDraw.Serialize.Serializer)">
            <summary>
            Sets the object's properties using a ToString string, according to the Serializer precision
            </summary>
            <param name="serializer">the Serializer object where the object is going to be saved.</param>
            <returns></returns>
        </member>
        <member name="P:VectorDraw.Geometry.AUnits.Direction">
            <summary>
            Get/Set the setting for clockwise or counterclockwise angle direction.
            </summary>
            <remarks>
            Default value:COUNTER_CLOCKWISE
            </remarks>
        </member>
        <member name="P:VectorDraw.Geometry.AUnits.AngleBase">
            <summary>
            Returns and sets where the direction start angle is in radians.
            </summary>
            <remarks >
            Valid Values are from 0 to 2*Pi in Radians and default value is 0.
            </remarks>
        </member>
        <member name="P:VectorDraw.Geometry.AUnits.Precision">
            <summary>
            Represents the decimal precision for angular units.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.AUnits.UType">
            <summary>
            Represents the angular units type.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.AUnits.ZerosSuppression">
            <summary>
            Represents the zerro suppression type for angular units.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.AUnits.AngleDirection">
            <summary>
            Represents if the direction of the angle is clockwise or not.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.AUnits.AngleDirection.CLOCKWISE">
            <summary>
            It is clockwise.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.AUnits.AngleDirection.COUNTER_CLOCKWISE">
            <summary>
            It is not clockwise.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.AUnits.AUnitType">
            <summary>
            Represents the units mode for angular dimensions.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.AUnits.AUnitType.au_Decdegrees">
            <summary>
            Decimal degrees
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.AUnits.AUnitType.au_Degrees">
            <summary>
            Degrees/minutes/seconds
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.AUnits.AUnitType.au_Gradians">
            <summary>
            Gradians
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.AUnits.AUnitType.au_Radians">
            <summary>
            Radians
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.AUnits.AUnitType.au_Surveyor">
            <summary>
            Gradians
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.AUnits.AZeroSuppression">
            <summary>
            Represents the zeros suppression.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.AUnits.AZeroSuppression.None">
            <summary>
            Displays all leading and trailing zeros
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.AUnits.AZeroSuppression.Leading">
            <summary>
            Suppresses leading zeros in decimal dimensions (for example, 0.5000 becomes .5000)
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.AUnits.AZeroSuppression.Trailing">
            <summary>
            Suppresses trailing zeros in decimal dimensions (for example, 12.5000 becomes 12.5)
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.AUnits.AZeroSuppression.All">
            <summary>
            Suppresses leading and trailing zeros.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.Globals">
            <summary>
            Containes several Geometrical Constants and implementations.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.INCH_MM">
            <summary>
            Represents the millimiters of one inch.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.EPSILON">
            <summary>
            Represents the smallest positive System.Double greater than zero.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.HALF_PI">
            <summary>
            A value equal to 1/2 * 3.14....
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.PI">
            <summary>
            A value equal to 3.14....
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.VD_TWOPI">
            <summary>
            A value equal to 2 * 3.14....
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.VD_270PI">
            <summary>
            A value equal to 3/2 * 3.14....
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.VD_PI_OVER_180">
            <summary>
            A value equal to 1/180 * 3.14....
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.VD_ZERO2">
            <summary>
            Value indiacting 2 decimal precision.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.VD_ZERO3">
            <summary>
            Value indiacting 3 decimal precision.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.VD_ZERO4">
            <summary>
            Value indiacting 4 decimal precision.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.VD_ZERO5">
            <summary>
            Value indiacting 5 decimal precision.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.VD_ZERO6">
            <summary>
            Value indiacting 6 decimal precision.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.VD_ZERO7">
            <summary>
            Value indiacting 7 decimal precision.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.VD_ZERO8">
            <summary>
            Value indiacting 8 decimal precision.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.VD_ZERO10">
            <summary>
            Value indiacting 10 decimal precision.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.DefaultOffsetEquality">
            <summary>
            Get the equality used to offset curves.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.DefaultFilletEquality">
            <summary>
            Get the equality used to fillet curves.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.DefaultOsnapPointEquality">
            <summary>
            Get the equality used to get OsnapPoints.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.mEnableFullCircleArc">
            <summary>
            If true then an arc with same start,end angles is considered as circle else not(is like a dot).
            </summary>
            <remarks >See also VectorDraw.Professional.vdObjects.vdDocument.EnableFullCircleArc</remarks>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.DefaultDepthRangeEquality">
            <summary>
            Get / Set the Depth range equality.
            </summary>
            <remarks>
            Default value is 4095, that converts a depth value to a value from 0 to 4095.
            </remarks>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.DefaultPixelEquality">
            <summary>
            Default minimun pixel size length.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.DefaultScaleEquality">
            <summary>
            Get/Set default equality used to compare scale properties.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.Default2DMatrixEquality">
            <summary>
            Get/Set default equality used to compare 3x3 Matrix properties.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.DefaultTextSizeEquality">
            <summary>
            Get/Set default equality used for text calculations.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.MaximunPixelSize">
            <summary>
            maximun pixel size length.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.Default3DMatrixEquality">
            <summary>
            Get/Set default equality used to compare 3x3 Matrix properties.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.DefaultPointOnPlaneEquality">
            <summary>
            Get/Set default equality used to test if a Point is on a Plane.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.DefaultAreaEquality">
            <summary>
            Get/Set default equality used to compare area of regions.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.DefaultAngularEquality">
            <summary>
            Get/Set default equality used to compare angle properties.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.DefaultMouseMoveEquality">
            <summary>
            Get/Set default equality used to compare two mouse positions in Drwing Units.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.DefaultLinearEquality">
            <summary>
            Get/Set default equality used to compare linear length properties.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.DefaultPointEquality">
            <summary>
            Get/Set default equality used to compare <see cref="T:VectorDraw.Geometry.gPoint"/> properties.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.DefaultVectorEquality">
            <summary>
            Get/Set default equality used to compare <see cref="T:VectorDraw.Geometry.Vector"/> properties.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.DefaultBulgeEquality">
            <summary>
            Get/Set default equality used to compare polyline bulge properties.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.DefaultCompareZEquality">
            <summary>
            Get/Set default equality used to compare z value between <see cref="T:VectorDraw.Geometry.gPoint"/> objects.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.DefaultSelectingEquality">
            <summary>
            Get/Set the minimum length in drawing units that is used with selecting methods.
            Default value is zero. For better selecting equality change this value for example 0.001 .
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Globals.DefaultIntersectEquality">
            <summary>
            Get the equality used for intersection calculations.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.ArcNearestTo(VectorDraw.Geometry.gPoint,System.Double,System.Double,System.Double,VectorDraw.Geometry.gPoint)">
            <summary>
            Returns a point on the given arc closest to a given point.
            </summary>
            <param name="cen">The center of the arc.</param>
            <param name="radius">The radius of the arc.</param>
            <param name="startangle">The start angle of the arc.</param>
            <param name="endangle">The end angle of the arc.</param>
            <param name="pickPoi">The reference point needed.The pickpoint must be in the same Entity coordinate system as the arc.</param>
            <returns>Returns a point on the arc whjich is closest to the reference passed point.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.LineNearestTo(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Boolean)">
            <summary>
            Calculates and returns a point on the line closest to the passed pickPoi point.
            </summary>
            <param name="sp">Start point of the line.</param>
            <param name="ep">End point of the line.</param>
            <param name="pickPoi">A gPoint in the same Coordinate System as the line.</param>
            <param name="bInside">A boolean value that represents if the expected returned point should be inside the line or not.</param>
            <returns>A point on the line closest to the passed pickPoi point.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.LineNearestTo(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Boolean,System.Boolean)">
            <summary>
            Calculates and returns a point on the line closest to the passed pickPoi point.
            </summary>
            <param name="sp">Start point of the line.</param>
            <param name="ep">End point of the line.</param>
            <param name="pickPoi">A gPoint in the same Coordinate System as the line.</param>
            <param name="bInside">A boolean value that represents if the expected returned point should be inside the line or not.</param>
            <param name="use2dMethod">Find the nearest point ingoring the z value of input point parameters.</param>
            <returns>A point on the line closest to the passed pickPoi point.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.LineNearestTo(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Calculates and returns a point on the line closest to the passed pickPoi point.
            </summary>
            <param name="sp">Start point of the line.</param>
            <param name="ep">End point of the line.</param>
            <param name="pickPoi">A gPoint in the same Coordinate System as the line.</param>
            <param name="bInside">A boolean value that represents if the expected returned point should be inside the line or not.</param>
            <param name="use2dMethod">Find the nearest point ingoring the z value of input point parameters.</param>
            <param name="correctPoint">If true then the return point is recalculated in order to avoid point comparison issues.</param>
            <returns>A point on the line closest to the passed pickPoi point.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.getPlaneZatXY(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates a gPoint point perpedicular to a plane.
            </summary>
            <param name="p1">First point of the plane.</param>
            <param name="p2">Second point of the plane.</param>
            <param name="p3">Third point of the plane.</param>
            <param name="ret">A gPoint outside the plane needed.</param>
            <returns>A point on the plane perpedicular to the ret point.If null is returned that means that the 3 points do not define a plane(belong to a line).</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.getPlaneAngle(VectorDraw.Geometry.Matrix,System.Double)">
            <summary>
            Calculates the projected angle on a plane.
            </summary>
            <param name="mat">A Matrix defining the transormation from the projected plane to the plane of the input angle. Usually the ECSMatrix of an object.</param>
            <param name="angle">Angle in radians that will projected.</param>
            <returns>An Angle in radias on the projected pane.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.getPlaneZatXY(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates a gPoint point perpedicular to a plane.
            </summary>
            <param name="mat">A Matrix defining a plane.</param>
            <param name="ret">A gPoint outside the plane needed.</param>
            <returns>A point on the plane perpedicular to the ret point.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.getLineZatXY(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates and changes the z parameter of the passed ret point so this point is projected to the line.
            </summary>
            <param name="p1">First point of the line.</param>
            <param name="p2">Second point of the line.</param>
            <param name="ret">Another point outside the line.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.IntersectionLE2D(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Double,System.Double,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the intersection between an ellipse(with center 0,0 and angle 0) and a line.
            </summary>
            <param name="Line1">First point of the line.</param>
            <param name="Line2">Second point of the line.</param>
            <param name="MajorAxis">MajorAxis of the ellipse.</param>
            <param name="MinorAxis">MinorAxis of the ellipse.</param>
            <param name="retpt1">First return point if exist in Entity Coordinate System of the ellipse.</param>
            <param name="retpt2">Second return point if exist in Entity Coordinate System of the ellipse.</param>
            <returns>Returns 0 or 1 or 2 depending how many points found.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.IntersectionEE2D(VectorDraw.Geometry.gPoint,System.Double,System.Double,System.Double,VectorDraw.Geometry.gPoint,System.Double,System.Double,System.Double,VectorDraw.Geometry.gPoints@)">
            <summary>
            Calculate the intersection between two ellipses. All coordinates are in World Coordinate System.
            </summary>
            <param name="Center1">The center point of the first ellipse.</param>
            <param name="Major1">The Major Length of the first ellipse.</param>
            <param name="Minor1">The Minor length of the first ellipse.</param>
            <param name="rotation1">The rotation of the Major axis of the first ellipse. </param>
            <param name="Center2">The center point of the second ellipse.</param>
            <param name="Major2">The Major length of the second ellipse.</param>
            <param name="Minor2">The minor length of the second ellipse.</param>
            <param name="rotation2">The rotation of the major axis of the second ellipse.</param>
            <param name="intpts">A reference gPoints collection to get the intersection points in WCS.</param>
            <returns>The number of intersection points.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.IntersectionCE2D(VectorDraw.Geometry.gPoint,System.Double,VectorDraw.Geometry.gPoint,System.Double,System.Double,System.Double,VectorDraw.Geometry.gPoints@)">
            <summary>
            Calculate the intersection between an ellipse and a circle. All coordinates are in World Coordinate System.
            </summary>
            <param name="CCenter">The center of the circle in World Coordinate system.</param>
            <param name="CRadius">The radius of the circle.</param>
            <param name="ECenter">The center of the ellipse in World Coordinate System.</param>
            <param name="EMajor">The Major axis length of the ellipse.</param>
            <param name="EMinor">The Minor axis length of the ellipse.</param>
            <param name="Erotation">The rotation of the ellipse.</param>
            <param name="intpts">A gPoints collection to return the intersection points.</param>
            <returns>The number of intersection points found.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.PointOnEllipse(System.Double,System.Double,VectorDraw.Geometry.gPoint)">
            <summary>
            Checks if a passed point is on an ellipse with center 0,0 and angle 0.
            </summary>
            <param name="MajorAxis">MajorAxis of the ellipse.</param>
            <param name="MinorAxis">MinorAxis of the ellipse.</param>
            <param name="pt">A point in Entity Coordinate System of the ellipse.</param>
            <returns>True if the point is on the ellipse.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.PointOnEllipticArc(System.Double,System.Double,System.Double,System.Double,VectorDraw.Geometry.gPoint)">
            <summary>
            Checks if a passed point is on an elliptic arc with center 0,0 and angle 0.
            </summary>
            <param name="MajorAxis">MajorAxis of the ellipse.</param>
            <param name="MinorAxis">MinorAxis of the ellipse.</param>
            <param name="sa">Start angle of the elliptiuc arc.</param>
            <param name="ea">End angle of the elliptic arc.</param>
            <param name="pt">A point in Entity Coordinate System of the ellipse.</param>
            <returns>True if the point is on the elliptic arc.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.IntersOnBoth2D(VectorDraw.Geometry.gPoints,VectorDraw.Geometry.gPoints)">
            <summary>
            Calculates all the intersections between two passed polylines that are on the polylines.
            </summary>
            <param name="pts1">A collection of the first polyline's points needed.</param>
            <param name="pts2">A collection of the second polyline's points needed.</param>
            <returns>A collection of intersections that belong to both polylines.</returns>
            <remarks>Both passed collections must have equal z values.</remarks>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.IntersOnBoth3D(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the intersection between two lines in 3D that are on both lines.
            </summary>
            <param name="pt1">Start point of first line.</param>
            <param name="pt2">End point of first line.</param>
            <param name="pt3">Start point of second line.</param>
            <param name="pt4">End point of second line.</param>
            <param name="intersection">The returned intersection point</param>
            <returns>True if the intersection is on both lines</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.IntersOnBoth2D(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the intersection between two lines in 2D that are on both lines.
            </summary>
            <param name="pt1">Start point of first line.</param>
            <param name="pt2">End point of first line.</param>
            <param name="pt3">Start point of second line.</param>
            <param name="pt4">End point of second line.</param>
            <param name="intersection">The returned intersection point</param>
            <returns>True if the intersection is on both lines</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.IntersectionLL3D(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the intersection point between two lines.
            </summary>
            <param name="p1">First point of the first line.</param>
            <param name="p2">Second point of the first line.</param>
            <param name="p3">First point of the second line.</param>
            <param name="p4">Second point of the second line.</param>
            <param name="retpt">Returned intersection point if exist.</param>
            <returns>0 or 1 depending how many intersection points found.</returns>
            <remarks><seealso cref="P:VectorDraw.Geometry.Globals.IntersectionViewMatrix"/></remarks>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.IntersectionLL2D(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Double,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the intersection point between two lines that belong to the same plane(z values of the lines are equal).
            </summary>
            <param name="p1">First point of the first line.</param>
            <param name="p2">Second point of the first line.</param>
            <param name="p3">First point of the second line.</param>
            <param name="p4">Second point of the second line.</param>
            <param name="equality">A double value representing the equality(for example 0.000001).</param>
            <param name="retpt">Returned intersection point if exist.</param>
            <returns>0 or 1 depending how many intersection points found.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.IntersectionLL2D(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the intersection point between two lines that belong to the same plane(z values of the lines are equal).
            </summary>
            <param name="p1">First point of the first line.</param>
            <param name="p2">Second point of the first line.</param>
            <param name="p3">First point of the second line.</param>
            <param name="p4">Second point of the second line.</param>
            <param name="retpt">Returned intersection point if exist.</param>
            <returns>0 or 1 depending how many intersection points found.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.IntersectionCC2D(VectorDraw.Geometry.gPoint,System.Double,VectorDraw.Geometry.gPoint,System.Double,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calqulates the intersection between two circles that belong to the same plane(z values are equal).
            </summary>
            <param name="o1">Center of the first circle.</param>
            <param name="r1">Radius of the first circle.</param>
            <param name="o2">Center of the second circle.</param>
            <param name="r2">Radius of the second circle.</param>
            <param name="int1">First intersection point if exist.</param>
            <param name="int2">Second intersection point of exist.</param>
            <returns>0 or 1 or 2 depending how many points found.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.IntersectionLC2D(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Double,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the intersection between a line and a circle in the same plane(z values are equal).
            </summary>
            <param name="p1">First point of the line.</param>
            <param name="p2">Second point of the line.</param>
            <param name="cen">Center point of the circle.</param>
            <param name="rad">Radius of the circle.</param>
            <param name="int1">First returned intersection point if exist.</param>
            <param name="int2">Second returned intersection point if exist.</param>
            <returns>0 or 1 or 2 dependinf how many points found.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.IsCircle(System.Double,System.Double)">
            <summary>
            Checks if an arc is a full circle or not.
            </summary>
            <param name="startAngle">Start angle of the arc.</param>
            <param name="endAngle">End angle of the arc.</param>
            <returns>True if the given arc parameters draw a circle.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.PointOnArc(VectorDraw.Geometry.gPoint,System.Double,System.Double,System.Double,VectorDraw.Geometry.gPoint)">
            <summary>
            Checks if the passed point is on the arc.
            </summary>
            <param name="Center">Center of the arc.</param>
            <param name="Radius">Radius of the arc.</param>
            <param name="arcStartAngle">Start angle of the arc.</param>
            <param name="arcEndAngle">End angle of the arc.</param>
            <param name="pointToTest">The required point to be checked.</param>
            <returns>True if the point is on the arc.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.PointOnCircle(VectorDraw.Geometry.gPoint,System.Double,VectorDraw.Geometry.gPoint)">
            <summary>
            Checks if the passed point is on a circle.
            </summary>
            <param name="Center">Center point of the circle.</param>
            <param name="Radius">Radius of the circle.</param>
            <param name="pointToTest">The point to be checked.</param>
            <returns>True if the passed point is on the circle.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.PointOnLine(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Double)">
            <summary>
            Checks if the passed point is on a line.
            </summary>
            <param name="p1">First point of the line.</param>
            <param name="p2">Second point of the line.</param>
            <param name="pt">The point to be checked.</param>
            <param name="equality">A double value representing the equality length(for example 0.000001).</param>
            <returns>True if the point is on the line.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.PointOnLine(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Checks if the passed point is on a line using the <see cref="F:VectorDraw.Geometry.Globals.DefaultLinearEquality"/>.
            </summary>
            <param name="p1">First point of the line.</param>
            <param name="p2">Second point of the line.</param>
            <param name="pt">The point to be checked.</param>
            <returns>True if the point is on the line.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.PointOnLine3d(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Checks if the passed point is on a line.
            </summary>
            <param name="p1">First point of the line.</param>
            <param name="p2">Second point of the line.</param>
            <param name="pt">The point to be checked.</param>
            <returns>True if the point is on the line.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.distPointFromLine(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the distance of a point from a line.
            </summary>
            <param name="pt">The point required.</param>
            <param name="p1">First point of the line.</param>
            <param name="p2">Second point of the line.</param>
            <returns>The distance between the given point and the line.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.getQSPLineSegments(System.Int32,System.Double,VectorDraw.Geometry.Vertexes,System.Boolean)">
            <summary>
            Calculates the number of segments deviding each segment of an spline.
            </summary>
            <param name="curveResolution">valid values (1 to 20000)</param>
            <param name="pixelSize">valid values possitive decimal ( >=0)</param>
            <param name="_QPoints">The vertexes of the spline.</param>
            <param name="isclosed">A boolean value representing if the spline is closed.</param>
            <returns>The number of segments deviding each segment of an spline.The maximum return value is 32767.</returns>
            <remarks>
            The greater the curveResolution the biggest the number of segments that the curve is 
            divided in(The Smoother the curve).The greater PixelSize the smallest the 
            number of curves that the curve is divided in(which means bigger segments).
            Usually it is used to draw the curve into small polygon segments.</remarks>
            <remarks>If you want to devide the curve into a specific number of segments then use pixelsize=0 and curveresolution = number of segments.
            </remarks>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.getArcNumSegments(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the number of segments that an arc will be devided.
            </summary>
            <param name="curveResolution">valid values (1 to 20000)</param>
            <param name="pixelSize">valid values possitive decimal ( >=0)</param>
            <param name="Radius">The radius of the arc.</param>
            <param name="IncludedAngle">The included arc angle.</param>
            <returns>The number of segments that an arc will be devided.</returns>
            <remarks>
            The greater the curveResolution the biggest the number of segments that the curve is 
            divided in(The Smoother the curve).The greater PixelSize the smallest the 
            number of curves that the curve is divided in(which means bigger segments).
            Usually it is used to draw the curve into small polygon segments.</remarks>
            <remarks>If you want to devide the curve into a specific number of segments then use pixelsize=0 and curveresolution = number of segments.
            </remarks>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.getEllipseNumSegments(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the number of segments that an arc will be devided.
            </summary>
            <param name="curveResolution">valid values (1 to 20000)</param>
            <param name="pixelSize">valid values possitive decimal ( >=0)</param>
            <param name="MajorAxis">Major Axis of the allipse.</param>
            <param name="IncludedAngle">The included ellipses angle.</param>
            <returns>The number of segments that an ellipse will be devided.</returns>
            <remarks>
            The greater the curveResolution the biggest the number of segments that the curve is 
            divided in(The Smoother the curve).The greater PixelSize the smallest the 
            number of curves that the curve is divided in(which means bigger segments).
            Usually it is used to draw the curve into small polygon segments.</remarks>
            <remarks>If you want to devide the curve into a specific number of segments then use pixelsize=0 and curveresolution = number of segments.
            </remarks>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.GetArcSamplePoints(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates n sample points of an arc(with center 0,0) on specified elevation.
            </summary>
            <param name="nSegments">An integer representing the count of the returned points.</param>
            <param name="rad">Radius of the arc.</param>
            <param name="sa">Start angle of the arc.</param>
            <param name="ea">End angle of the arc.</param>
            <param name="elevation">The elevation for all points in the return collection.</param>
            <returns>A collection of gPoints representing n points of the arc.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.GetArcSamplePoints(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Calculates n sample points of an arc(with center 0,0).
            </summary>
            <param name="nSegments">An integer representing the count of the returned points.</param>
            <param name="rad">Radius of the arc.</param>
            <param name="sa">Start angle of the arc.</param>
            <param name="ea">End angle of the arc.</param>
            <returns>A collection of gPoints representing n points of the arc.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.GetHelixSamplePoints(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Double)">
            <summary>
            Calculates n sample points of a Helix(with center 0,0)
            </summary>
            <param name="nSegments">An integer representing the count of the returned points.</param>
            <param name="BaseRadius">Base radius of the Helix.</param>
            <param name="TopRadius">Top radius of the helix.</param>
            <param name="mHeight">Height (on z axis) of the helix.</param>
            <param name="turns">Represents how many turns will the helix have.</param>
            <param name="Clockwise">A boolean value representing if the points are clockwise or anticlockwise.</param>
            <param name="sa">Start angle of the helix.</param>
            <returns>A collection of gPoints representing n points of the helix.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.GetEllipseSamplePoints(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates n sample points of an ellipse(with center 0,0).
            </summary>
            <param name="nSegments">An integer representing the count of the returned points.</param>
            <param name="MajorAxis">MajorAxis of the ellipse.</param>
            <param name="MinorAxis">MinorAxis of the ellipse.</param>
            <param name="sa">Start angle of the ellipse.</param>
            <param name="ea">End angle of the ellipse.</param>
            <returns>A collection of gPoints representing n points of the ellipse.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.GetQuadraticSPlineSamplePoints(System.Int32,VectorDraw.Geometry.gPoints,VectorDraw.Geometry.DoubleArray,VectorDraw.Geometry.DoubleArray,System.Boolean)">
            <summary>
            Tesselates a Quadratic spline into n segments using the DeBour Algorithm.
            </summary>
            <param name="nPerSegment">An integer representing the count of the returned points.</param>
            <param name="pControlPoints">Control points of the spline.</param>
            <param name="weights">Weights of the spline.</param>
            <param name="knots">Knots of the spline.</param>
            <param name="isclosed">A boolean value if the spline is closed or not.</param>
            <returns>A collection of n gPoints that belong to the spline.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.GetQuadraticBezierSPlineSamplePoints(System.Int32,VectorDraw.Geometry.gPoints,System.Boolean)">
            <summary>
            Tesselates a Quadratic Bezier spline into n segments.
            </summary>
            <param name="nPerSegment">An integer representing the count of the returned points.</param>
            <param name="pControlPoints">Control points of the spline.</param>
            <param name="isclosed">A boolean value if the spline is closed or not.</param>
            <returns>A collection of n gPoints that belong to the spline.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.GetFitQubicSPlineSamplePoints(System.Int32,VectorDraw.Geometry.gPoints,System.Boolean,VectorDraw.Geometry.Vector,VectorDraw.Geometry.Vector)">
            <summary>
            Tesselates a Fitting spline into n segments using the DeBoor's algorithm for a qubic spline.
            </summary>
            <param name="nPerSegment">An integer representing the count of the returned points.</param>
            <param name="pFittingPoints">Fitting points of the spline.</param>
            <param name="isclosed">A boolean value if the spline is closed or not.</param>
            <param name="stangent">Start tangent of the spline.</param>
            <param name="etangent">End tangent of the spline.</param>
            <returns>A collection of n gPoints that belong to the spline.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.GetQubicSPlineSamplePoints(System.Int32,VectorDraw.Geometry.gPoints,VectorDraw.Geometry.DoubleArray,VectorDraw.Geometry.DoubleArray,System.Boolean)">
            <summary>
            Tessalates a qubic spline using the DeBour Algorithm.
            </summary>
            <param name="nPerSegment">An integer representing the count of the returned points.</param>
            <param name="pControlPoints">Control points of the spline.</param>
            <param name="weights">Weights of the spline.</param>
            <param name="knots">Knots of the spline.</param>
            <param name="isclosed">A boolean value if the spline is closed or not.</param>
            <returns>A collection of n gPoints that belong to the spline.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.IncludedAngle(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the angle between p2-p1 and p2-p3.
            </summary>
            <param name="p1">First point needed.</param>
            <param name="p2">Second point needed.</param>
            <param name="p3">Third point needed.</param>
            <returns>The angle between these three point in radians.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.GetEllipsePerpendicularPoints(VectorDraw.Geometry.gPoint,System.Double,System.Double)">
            <summary>
            Returns a list of maximun 4 gPoints that are perpendicular from a given point to a give ellipse.
            </summary>
            <param name="reference">The point from which we need to find the perpendicular oSnaps</param>
            <param name="MajorAxis">The major axis length of said ellipse.</param>
            <param name="MinorAxis">The minor axis length of said ellipse.</param>
            <returns>A list of gPoints that represent the osnap points, or null if none was found.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.GetEllipseTangents(VectorDraw.Geometry.gPoint,System.Double,System.Double)">
            <summary>
             Calculates Tangent points on a horizontal ellipse with center 0.0,0.0,0.0 and the given parameters..
            </summary>
            <param name="reference">A point for tangent calculation.</param>
            <param name="MajorAxis">MajorAxis of the ellipse.</param>
            <param name="MinorAxis">MinorAxis of the ellipse.</param>
            <returns>Ellipse Tangent points.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.getEllipsePointOnAngle(System.Double,System.Double,System.Double)">
            <summary>
            Calculates a point on an ellipse with center 0.0,0.0,0.0 and the given parameters.
            </summary>
            <param name="angle">The angle where the point is located.</param>
            <param name="MajorAxis">MajorAxis of the ellipse.</param>
            <param name="MinorAxis">MinorAxis of the ellipse.</param>
            <returns>A gPoint located on the ellipse.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.getCircleCenFrom3Pts(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the center of the circle that passes from the three given points.
            </summary>
            <param name="p1">First point of the circle.</param>
            <param name="p2">Second point of the circle.</param>
            <param name="p3">Third point of the circle.</param>
            <returns>A gPoint representing the center of the circle that passes from the three given points.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.getArcBox(VectorDraw.Geometry.gPoint,System.Double,System.Double,System.Double)">
            <summary>
            Calculates a box that fully contains the arc.
            </summary>
            <param name="Center">The center of the arc.</param>
            <param name="Radius">The radius of the arc.</param>
            <param name="StartAngle">Start angle of the arc.</param>
            <param name="EndAngle">End angle of the arc.</param>
            <returns>A box that contains the arc.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.Intersection3DTrianglePlane(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint@,VectorDraw.Geometry.gPoint@)">
            <summary>
            Checks if a triangle intersects with a plane
            </summary>
            <param name="Tp1">Triangle's first point</param>
            <param name="Tp2">Triangle's second point</param>
            <param name="Tp3">Triangle's third point</param>
            <param name="planeNormal">A vector showing the plane's direction</param>
            <param name="PlanePoint">A point in the plane</param>
            <param name="p1">If triangle intersects plane, p1 is the first point of the intersection segment</param>
            <param name="p2">If triangle intersects plane, p2 is the second point of the intersection segment</param>
            <returns>0 = disjoint (no intersection) 
                     1 = intersection in the unique segment p1,p2 which is the more interesting case
                     2 = the triangle intersects only in the unique point p1=p2
                     3 = the triangle lies entirly on the plane, no intersetion is returned
            </returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.Intersection3DSegmentPlane(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint@)">
            <summary>
            Checks if a line segment intersects a plane.If the intersection point is exist it must be inside the line.
            </summary>
            <param name="LinePoint1">Line's first point</param>
            <param name="LinePoint2">Line's second point</param>
            <param name="PlaneNormal">A vector showing the plane's direction</param>
            <param name="PlanePoint">A point in the plane</param>
            <param name="I">If intersection is found I is the point of intersection inside the line. </param>
            <returns>0 = disjoint (no intersection) 
                     1 = intersection in the unique point I 
                     2 = the segment lies in the plane
            </returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.Intersection3DSegmentPlane(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector,VectorDraw.Geometry.gPoint,System.Boolean,VectorDraw.Geometry.gPoint@)">
            <summary>
            Checks if a line segment intersects a plane.If the intersection point is exist and bInsideLine is true it must be inside the line.
            </summary>
            <param name="LinePoint1">Line's first point</param>
            <param name="LinePoint2">Line's second point</param>
            <param name="planeNormal">A vector showing the plane's direction</param>
            <param name="PlanePoint">A point in the plane</param>
            <param name="bInsideLine">Set it to true in order to success only is intersection point is inside the line.</param>
            <param name="I">If intersection is found and bInsideLine is true, I is the point of intersection inside the line. </param>
            <returns>0 = disjoint (no intersection) 
                     1 = intersection in the unique point I 
                     2 = the segment lies in the plane
            </returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.DistancePointToPlane(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector,VectorDraw.Geometry.gPoint)">
            <summary>
            Caclulates the signed distance of an arbitary point to a plane
            </summary>
            <param name="point">The arbitary point</param>
            <param name="PlaneNormal">A vector showing the plane's direction</param>
            <param name="PlanePoint">A point in the plane</param>
            <returns>The signed distance from point to the plane 
                     returnValue > 0 if point on the same direction as the plane's normal
                     0 > retValue if point on the oposite direction from the plane's normal
            </returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.ConvertToMesh(VectorDraw.Generics.vdArray{VectorDraw.Geometry.gPoints},System.Double,System.Boolean,System.Boolean)">
            <summary>
            Internally used to convert an array of closed polylines to a Mesh.
            </summary>
            <param name="_samplepoints"></param>
            <param name="thickness"></param>
            <param name="Faces"></param>
            <param name="EdgeVisibility"></param>
            <returns></returns>
            <example>
            <code>
                       private void SubTract_Demo()
                       {
                           VectorDraw.Professional.vdObjects.vdDocument doc = vdFramedControl1.BaseControl.ActiveDocument;
                       
                           //Create a collection of points that defines a closed perigram and assign it to ptsPl1 parameter
                           VectorDraw.Geometry.gPoints ptsPl1 = new VectorDraw.Geometry.gPoints();
                           ptsPl1.Add(0, 0, 0);
                           ptsPl1.Add(3, 0, 0);
                           ptsPl1.Add(3, 3, 0);
                           ptsPl1.Add(0, 3, 0);
                           ptsPl1.makeClosed();
                           
                           //Create a collection of points that defines a closed perigram and assign it to ptsPl2 parameter
                           VectorDraw.Geometry.gPoints ptsPl2 = new VectorDraw.Geometry.gPoints();
                           ptsPl2.Add(-1, -1, 0);
                           ptsPl2.Add(1, -1, 0);
                           ptsPl2.Add(1, 1, 0);
                           ptsPl2.Add(-1, 1, 0);
                           ptsPl2.makeClosed();
                           
                           //Create a collection of points that defines a closed perigram and assign it to ptsPl3 parameter
                           VectorDraw.Geometry.gPoints ptsPl3 = new VectorDraw.Geometry.gPoints();
                           ptsPl3.Add(2, -1, 0);
                           ptsPl3.Add(4, -1, 0);
                           ptsPl3.Add(4, 1, 0);
                           ptsPl3.Add(2, 1, 0);
                           ptsPl3.makeClosed();
                           
                           //Create a collection of points that defines a closed perigram and assign it to ptsPl4 parameter
                           VectorDraw.Geometry.gPoints ptsPl4 = new VectorDraw.Geometry.gPoints();
                           ptsPl4.Add(2, 2, 0);
                           ptsPl4.Add(4, 2, 0);
                           ptsPl4.Add(4, 4, 0);
                           ptsPl4.Add(2, 4, 0);
                           ptsPl4.makeClosed();
                           
                           //Calculate an array of closed perigrams that is the result of the required clipping operation.
                           VectorDraw.Generics.vdArray&lt;VectorDraw.Geometry.GpcWrapper.ClippingOperation&gt; operationFlag = new VectorDraw.Generics.vdArray&lt;VectorDraw.Geometry.GpcWrapper.ClippingOperation&gt;();
                           VectorDraw.Generics.vdArray&lt;VectorDraw.Geometry.gPoints&gt; inputCountours = new VectorDraw.Generics.vdArray&lt;VectorDraw.Geometry.gPoints&gt;();
                           inputCountours.AddItem(ptsPl1);
                           operationFlag.AddItem(VectorDraw.Geometry.GpcWrapper.ClippingOperation.Union);
                           inputCountours.AddItem(ptsPl2);
                           operationFlag.AddItem(VectorDraw.Geometry.GpcWrapper.ClippingOperation.Difference);
                           inputCountours.AddItem(ptsPl3);
                           operationFlag.AddItem(VectorDraw.Geometry.GpcWrapper.ClippingOperation.Difference);
                           inputCountours.AddItem(ptsPl4);
                           operationFlag.AddItem(VectorDraw.Geometry.GpcWrapper.ClippingOperation.Difference);
                           object ClippingObject = VectorDraw.Geometry.PolygonClipper.getCountoursPolygonObject(inputCountours, operationFlag);
                           if (ClippingObject == null) return;
                           VectorDraw.Generics.vdArray&lt;VectorDraw.Geometry.gPoints&lt; Polygons = VectorDraw.Geometry.PolygonClipper.getCountours(ClippingObject, inputCountours);
                           if (Polygons == null || Polygons.Count == 0) return;
                           
                           //Convert the array result of the required clipping operation into a PolyFace object with a thickness of 0.2 drawing units and add it into the vdDocument object.
                           VectorDraw.Geometry.GpcWrapper.ClippingPolyFace pFace = VectorDraw.Geometry.Globals.ConvertToMesh(Polygons, 0.2d, true, false);
                           if (pFace == null) return;
                           VectorDraw.Professional.vdFigures.vdPolyface ret = new VectorDraw.Professional.vdFigures.vdPolyface();
                           ret.SetUnRegisterDocument(doc);
                           ret.setDocumentDefaults();
                           foreach (VectorDraw.Geometry.Vertex vert in pFace.vertices)
                               ret.VertexList.Add(vert.VertexPoint);
                           ret.FaceList = pFace.facelist;
                           ret.ClearVerticies();
                           doc.ActiveLayOut.Entities.AddItem(ret);
                       
                           //update the VectorDraw rendering scene to see the result polyface on the screen.
                           doc.Redraw(true);
                       }
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.Arc2BulgeChord(VectorDraw.Geometry.gPoint,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the bulge from a given arc.
            </summary>
            <param name="Center">The center of the arc.</param>
            <param name="Radius">The radius of the arc.</param>
            <param name="chord">The distance between start point and end point of the arc.</param>
            <param name="inangle">The included angle between start and end point.</param>
            <returns>A double value representing the calculated bulge.The returned bulge will always be positive.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.Arc2Bulge(VectorDraw.Geometry.gPoint,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the bulge from a given arc.
            </summary>
            <param name="Center">The center of the arc.</param>
            <param name="Radius">The radius of the arc.</param>
            <param name="Startangle">Start angle of the arc.</param>
            <param name="Endangle">End angle of the arc.</param>
            <returns>A double value representing the calculated bulge.The returned bulge will always be positive.</returns>
            <example>See how to use the Arc2Bulge to create a vdPolyline with bulge that assembles a vdArc :<code>
                    private void Arc2Bulge_Demo()
                    {
                        vdDocument doc = vdFramedControl1.BaseControl.ActiveDocument; doc.New();
                        vdArc arc = new vdArc(doc, new gPoint(3, 2), 4.0d, 0.5, 2.2); // this arc is not added to the document
                         
                        vdPolyline pl = new vdPolyline(doc);
                        pl.VertexList.Add(new gPoint(arc.getStartPoint()));
                        pl.VertexList.Add(new gPoint(arc.getEndPoint()));
                        pl.VertexList[0].Bulge = VectorDraw.Geometry.Globals.Arc2Bulge(arc.Center, arc.Radius, arc.StartAngle, arc.EndAngle);
                        doc.Model.Entities.AddItem(pl);
                    }
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.Bulge2Arc(VectorDraw.Geometry.Vertex,VectorDraw.Geometry.Vertex,VectorDraw.Geometry.gPoint@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Calculates an arc from two given vertexes.
            </summary>
            <param name="p1">First vertex with bulge.</param>
            <param name="p2">Second vertex with bulge.</param>
            <param name="Center">Center of the calculated arc.</param>
            <param name="Radius">Radius of the calculated arc.</param>
            <param name="Startangle">Start angle of the calculated arc.</param>
            <param name="Endangle">End angle of the calculated arc.</param>
            <returns>True if the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.PointInTriangle(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Double)">
            <summary>
            Checks if the given point is inside a triangle.
            </summary>
            <param name="pt">The point to be checked.</param>
            <param name="triPt1">First point of the triangle.</param>
            <param name="triPt2">Second point of the triangle.</param>
            <param name="triPt3">Third point of the triangle.</param>
            <param name="equality">A double value representing the equality(for example 0.000001).</param>
            <returns>True if the passed point is inside the triangle.</returns>
            <remarks>The points must be translated to xy plane as z value is ignored. </remarks>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.PointInTriangle3D(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Double,VectorDraw.Geometry.Vector,VectorDraw.Geometry.Matrix)">
            <summary>
            Checks if the given point is inside a triangle.The pont and the triangle must be in the same plane.
            </summary>
            <param name="pt">The point to be checked.</param>
            <param name="triPt1">First point of the triangle.</param>
            <param name="triPt2">Second point of the triangle.</param>
            <param name="triPt3">Third point of the triangle.</param>
            <param name="equality">A double value representing the equality(for example 0.000001).</param>
            <param name="V">The extrusion vector of the triangle.</param>
            <param name="Ecs">The Ecs Matrix of the triangle.</param>
            <returns>True if the passed point is inside the triangle.</returns>
            <seealso cref="M:VectorDraw.Geometry.Globals.DistancePointToPlane(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector,VectorDraw.Geometry.gPoint)"/>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.PointInTriangle(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Checks if the given point is inside a triangle using the <see cref="F:VectorDraw.Geometry.Globals.DefaultLinearEquality"/>.
            </summary>
            <param name="pt">The point to be checked.</param>
            <param name="triPt1">First point of the triangle.</param>
            <param name="triPt2">Second point of the triangle.</param>
            <param name="triPt3">Third point of the triangle.</param>
            <returns>True if the passed point is inside the triangle.</returns>
            <remarks>The points must be translated to xy plane as z value is ignored. </remarks>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.InterpolatePointInTriangle(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Double@)">
            <summary>
            Calculates the projection of the passed 2d point to a plane.
            </summary>
            <param name="pt">The point that it's projection is asked.</param>
            <param name="triPt1">First point of the plane.</param>
            <param name="triPt2">Second point of the plane.</param>
            <param name="triPt3">Third point of the plane.</param>
            <param name="Zvalue">A reference to the calculated z value on success.</param>
            <returns>True if the Zvalue was succesfully calculated or false if the passed triPt1,triPt2 and triPt3 are belong to the same line in 2d Co-ordinate system.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.InterpolatePointInTriangle(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the projection of the passed 2d point to a plane.
            </summary>
            <param name="pt">The point that it's projection is asked.</param>
            <param name="triPt1">First point of the plane.</param>
            <param name="triPt2">Second point of the plane.</param>
            <param name="triPt3">Third point of the plane.</param>
            <returns>The z value of the passed 2d point.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.ArcFrom3Points(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Calculates the arc that passes from the three given points.
            </summary>
            <param name="sp">Start point required.</param>
            <param name="ep">End point required.</param>
            <param name="mp">Middle point required.</param>
            <param name="cen">Returned center of the arc.</param>
            <param name="rad">Returned radius of the arc.</param>
            <param name="sa">Returned start angle of the arc.</param>
            <param name="ea">Returned end angle of the arc.</param>
            <returns>True if the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.GetAreaFrom3Pts(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the area of a triangle.
            </summary>
            <param name="p1">A gPoint representing the first point of the triangle.</param>
            <param name="p2">A gPoint representing the second point of the triangle.</param>
            <param name="p3">A gPoint representing the third point of the triangle.</param>
            <returns>The area of the triangle.</returns>
            <remarks>The points must be translated to xy plane as z value is ignored. </remarks>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.GetAreaFrom4Pts(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the area of a shape.
            </summary>
            <param name="p1">A gPoint representing the first point of the shape.</param>
            <param name="p2">A gPoint representing the second point of the shape.</param>
            <param name="p3">A gPoint representing the third point of the shape.</param>
            <param name="p4">A gPoint representing the third point of the shape.</param>
            <returns>The area of the shape.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.GetNormalOrientation(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector@)">
            <summary>
            Calculate the plane normal from thre points and returns the orientation of the triangle.
            </summary>
            <param name="p1">A point of a triangle in WorldCS.</param>
            <param name="p2">A point of a triangle in WorldCS.</param>
            <param name="p3">A point of a triangle in WorldCS.</param>
            <param name="normal">A reference to a Vector that will get the plane normal of the passed points.</param>
            <returns>-1 if the points are counter-clockwise,1 if points are clockwise, 0 if at least two points are same.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.AreEqual(System.Drawing.Point,System.Drawing.Point,System.Int32)">
            <summary>
            Checks if the two passed 2d Point objects are equal taking into consideration the equality value.
            </summary>
            <param name="val1">First Point object needed.</param>
            <param name="val2">Second Point object needed.</param>
            <param name="eq">A double value representing the equality(for example 0.000001).</param>
            <returns>True if the x,y values of the points are equal.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.AreEqualPoint3d(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Double)">
            <summary>
            Checks if the two <see cref="T:VectorDraw.Geometry.gPoint"/> objects are equal taking into consideration the  equality value.
            </summary>
            <param name="val1">First Point object needed.</param>
            <param name="val2">Second Point object needed.</param>
            <param name="equality">A double value representing the equality(for example 0.000001).</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.AreEqualPoint(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Checks if the two <see cref="T:VectorDraw.Geometry.gPoint"/> objects are equal taking into consideration the <see cref="F:VectorDraw.Geometry.Globals.DefaultPointEquality"/> equality value.
            </summary>
            <param name="val1">First Point object needed.</param>
            <param name="val2">Second Point object needed.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.AreEqualLength(System.Double,System.Double)">
            <summary>
            Checks if the two double length values are equal taking into consideration the <see cref="F:VectorDraw.Geometry.Globals.DefaultLinearEquality"/> equality value.
            </summary>
            <param name="len1">First double value needed.</param>
            <param name="len2">Second double value needed.</param>
            <returns>True if the values are equal.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.AreEqualScale(System.Double,System.Double)">
            <summary>
            Checks if the two double scale values are equal taking into consideration the <see cref="F:VectorDraw.Geometry.Globals.DefaultScaleEquality"/> equality value.
            </summary>
            <param name="scale1">First double value needed.</param>
            <param name="scale2">Second double value needed.</param>
            <returns>True if the values are equal.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.AreEqualAngle(System.Double,System.Double)">
            <summary>
            Checks if the two double angles are equal taking into consideration the <see cref="F:VectorDraw.Geometry.Globals.DefaultAngularEquality"/> equality value.
            </summary>
            <param name="ang1">First double value needed.</param>
            <param name="ang2">Second double value needed.</param>
            <returns>True if the values are equal.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.AreEqualAngle(System.Double,System.Double,System.Double)">
            <summary>
            Checks if the two double angles are equal taking into consideration the equality value.
            </summary>
            <param name="ang1">First double value needed.</param>
            <param name="ang2">Second double value needed.</param>
            <param name="equality">A double value representing the equality(for example 0.000001).</param>
            <returns>True if the values are equal.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.AreEqual(System.Double,System.Double,System.Double)">
            <summary>
            Checks if the two double values are equal taking into consideration the equality value.
            </summary>
            <param name="val1">First double value needed.</param>
            <param name="val2">Second double value needed.</param>
            <param name="eq">A double value representing the equality(for example 0.00001)</param>
            <returns>True if the two passed values are equal.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.DivRem(System.Double,System.Double)">
            <summary>
            Devides and returnes the remaining of the division of two double values.
            </summary>
            <param name="x">First double value required.</param>
            <param name="y">Second double value required.</param>
            <returns>An integer that represents the remaining value after the division of the two passed doubles.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.Cos(System.Double)">
            <summary>
            Calculates the Cos of the passed angle in radians.
            </summary>
            <param name="angleRadius">An angle in radians.</param>
            <returns>The Cos of the passed angle.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.Sin(System.Double)">
            <summary>
            Calculates the Sin of the passed angle in radians.
            </summary>
            <param name="angleRadius">An angle in radians.</param>
            <returns>The Sin of the passed angle.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.FixAngle(System.Double,System.Double)">
            <summary>
            Fixes the passed angle in radians to be between 0.0 and 2 * PI.
            </summary>
            <param name="inangle">A passed angle in radians to be fixed.</param>
            <param name="equality">A double value representing the equality(for example 0.000001) in radians.</param>
            <returns>The fixed angle in radians.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.FixAngle(System.Double)">
            <summary>
            Fixes the passed angle in radians to be between 0.0 and 2 * PI using the <see cref="F:VectorDraw.Geometry.Globals.DefaultAngularEquality"/>.
            </summary>
            <param name="inangle">A passed angle in radians to be fixed.</param>
            <returns>The fixed angle in radians.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.RadiansToDegrees(System.Double)">
            <summary>
            Converts the pasted radians angle in degrees.
            </summary>
            <param name="radians">A double value representing the angle in radians.</param>
            <returns>A double value representing the angle in degrees.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.DegreesToRadians(System.Double)">
            <summary>
            Converts the pasted degrees angle in radians.
            </summary>
            <param name="degrees">A double value representing the angle in degrees.</param>
            <returns>A double value representing the angle in degrees.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.GetAngle(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Get the angle between two gPoints in radians.
            </summary>
            <param name="p1">First gPoint needed.</param>
            <param name="p2">Second gPoint needed.</param>
            <returns>The angle in radians between two gPoints.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.getAngleDir(System.Double,System.Double)">
            <summary>
            Calculates the angle in radians of a point located at dx,dy from 0,0.
            </summary>
            <param name="dx">dx distance of the point.</param>
            <param name="dy">dy distance of the point.</param>
            <returns>A double value representing the angle in radians.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.isLeft(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Tests if a point is Left|On|Right of an infinite line.
            </summary>
            <param name="p1">first point of the line</param>
            <param name="p2">secont point of the line</param>
            <param name="pt">point to test</param>
            <returns>
            result > 0 for PT left of the line through P1 and P2
            result =0 for PT on the line
            0 > result for P2 right of the line
            </returns>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.Lathe(VectorDraw.Geometry.gPoints,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoints,VectorDraw.Geometry.Matrix,System.Double,System.Boolean,VectorDraw.Geometry.Vector,VectorDraw.Geometry.Vector)">
            <summary>
            Internally used for calculating 3dpathsections.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.Lathe(VectorDraw.Geometry.gPoints,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoints,VectorDraw.Geometry.Matrix,System.Double,VectorDraw.Geometry.Vector,VectorDraw.Geometry.Vector,System.Boolean,VectorDraw.Geometry.Matrix@,VectorDraw.Geometry.Matrix@)">
            <summary>
            Internally used for calculating 3dpathsections.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Globals.Generate3dPathSection(VectorDraw.Generics.vdArray{VectorDraw.Geometry.gPoints},VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoints,System.Double,System.Double,VectorDraw.Geometry.Vector,VectorDraw.Geometry.Vector,System.Boolean)">
            <summary>
            Internally used for calculating 3dpathsections.
            </summary>
            <param name="section2d">Array of closed 2d sections </param>
            <param name="sectionBasePoint2d">a 2d point relative to sections array that defines the origin of sections .This point will be run ove the path line</param>
            <param name="path">An array of points in real world Coordinate System</param>
            <param name="SectionAngle">Angle in radians that sections will be rotated around base point before they mapped on the path line.</param>
            <param name="SectionScale">The ending scale of the section object(the section object will start following the path with scale=1.0 and will end with scale=SectionScale).Set it to 1 for no scale.</param>
            <param name="startVector">The extrution vector of the plane of the start section.If it is null the vector of the start segment is used. </param>
            <param name="endVector">The extrution vector of the plane of the end section.If it is null the vector of the end segment is used.</param>
            <param name="TopBottomFaces">Defines if the start and end caps of the path will be filled on</param>
        </member>
        <member name="P:VectorDraw.Geometry.Globals.ThreadSafeStaticObject">
            <summary>
            Internaly used only.Returns a static object used for safe multi thread synchronization. 
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Globals.IntersectionViewMatrix">
            <summary>
            Get/Set a matrix that represent the World to View transformation used from <see cref="M:VectorDraw.Geometry.Globals.IntersectionLL3D(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)"/> when the passing points represent two lines that are not in the same Plane.
            </summary>
            <remarks>
            Default value is null.</remarks>
            <remarks>Set this property to Active WorldToView matrix in order the <see cref="M:VectorDraw.Geometry.Globals.IntersectionLL3D(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)"/> to return a valid point even if the  passing lines are not in the same plane.
            </remarks>
        </member>
        <member name="P:VectorDraw.Geometry.Globals.DefaultMinArcResolution">
            <summary>
            Get/Set default minimum number of segments that a curve will be divided. Value must equal or greater than 16. Default value is 16
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.GlobalsInterRop">
            <summary>
            Global functions used for interopability as COM.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.#ctor">
            <summary>
            Initializes an instance of this class.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.IntersectionLE2D(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Double,System.Double,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the intersection between an ellipse(with center 0,0 and angle 0) and a line.
            </summary>
            <param name="Line1">First point of the line.</param>
            <param name="Line2">Second point of the line.</param>
            <param name="MajorAxis">MajorAxis of the ellipse.</param>
            <param name="MinorAxis">MinorAxis of the ellipse.</param>
            <param name="retpt1">First return point if exist in Entity Coordinate System of the ellipse.</param>
            <param name="retpt2">Second return point if exist in Entity Coordinate System of the ellipse.</param>
            <returns>Returns 0 or 1 or 2 depending how many points found.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.PointOnEllipse(System.Double,System.Double,VectorDraw.Geometry.gPoint)">
            <summary>
            Checks if a passed point is on an ellipse with center 0,0 and angle 0.
            </summary>
            <param name="MajorAxis">MajorAxis of the ellipse.</param>
            <param name="MinorAxis">MinorAxis of the ellipse.</param>
            <param name="pt">A point in Entity Coordinate System of the ellipse.</param>
            <returns>True if the point is on the ellipse.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.PointOnEllipticArc(System.Double,System.Double,System.Double,System.Double,VectorDraw.Geometry.gPoint)">
            <summary>
            Checks if a passed point is on an elliptic arc with center 0,0 and angle 0.
            </summary>
            <param name="MajorAxis">MajorAxis of the ellipse.</param>
            <param name="MinorAxis">MinorAxis of the ellipse.</param>
            <param name="sa">Start angle of the elliptiuc arc.</param>
            <param name="ea">End angle of the elliptic arc.</param>
            <param name="pt">A point in Entity Coordinate System of the ellipse.</param>
            <returns>True if the point is on the elliptic arc.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.IntersectionLL3D(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the intersection point between two lines.
            </summary>
            <param name="p1">First point of the first line.</param>
            <param name="p2">Second point of the first line.</param>
            <param name="p3">First point of the second line.</param>
            <param name="p4">Second point of the second line.</param>
            <param name="retpt">Returned intersection point if exist.</param>
            <returns>0 or 1 depending how many intersection points found.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.IntersectionLL2D(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the intersection point between two lines that belong to the same plane(z values of the lines are equal).
            </summary>
            <param name="p1">First point of the first line.</param>
            <param name="p2">Second point of the first line.</param>
            <param name="p3">First point of the second line.</param>
            <param name="p4">Second point of the second line.</param>
            <param name="retpt">Returned intersection point if exist.</param>
            <returns>0 or 1 depending how many intersection points found.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.IntersectionCC2D(VectorDraw.Geometry.gPoint,System.Double,VectorDraw.Geometry.gPoint,System.Double,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the intersection between two circles that belong to the same plane(z values are equal).
            </summary>
            <param name="o1">Center of the first circle.</param>
            <param name="r1">Radius of the first circle.</param>
            <param name="o2">Center of the second circle.</param>
            <param name="r2">Radius of the second circle.</param>
            <param name="int1">First intersection point if exist.</param>
            <param name="int2">Second intersection point of exist.</param>
            <returns>0 or 1 or 2 depending how many points found.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.IntersectionLC2D(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Double,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the intersection between a line and a circle in the same plane(z values are equal).
            </summary>
            <param name="p1">First point of the line.</param>
            <param name="p2">Second point of the line.</param>
            <param name="cen">Center point of the circle.</param>
            <param name="rad">Radius of the circle.</param>
            <param name="int1">First returned intersection point if exist.</param>
            <param name="int2">Second returned intersection point if exist.</param>
            <returns>0 or 1 or 2 dependinf how many points found.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.PointOnArc(VectorDraw.Geometry.gPoint,System.Double,System.Double,System.Double,VectorDraw.Geometry.gPoint)">
            <summary>
            Checks if the passed point is on the arc.
            </summary>
            <param name="Center">Center of the arc.</param>
            <param name="Radius">Radius of the arc.</param>
            <param name="arcStartAngle">Start angle of the arc.</param>
            <param name="arcEndAngle">End angle of the arc.</param>
            <param name="pointToTest">The required point to be checked.</param>
            <returns>True if the point is on the arc.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.PointOnCircle(VectorDraw.Geometry.gPoint,System.Double,VectorDraw.Geometry.gPoint)">
            <summary>
            Checks if the passed point is on a circle.
            </summary>
            <param name="Center">Center point of the circle.</param>
            <param name="Radius">Radius of the circle.</param>
            <param name="pointToTest">The point to be checked.</param>
            <returns>True if the passed point is on the circle.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.PointOnLine(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Checks if the passed point is on a line located at the same plane(z values are equal).
            </summary>
            <param name="p1">First point of the line.</param>
            <param name="p2">Second point of the line.</param>
            <param name="pt">The point to be checked.</param>
            <returns>True if the point is on the line.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.PointOnLine3d(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Checks if the passed point is on a line.
            </summary>
            <param name="p1">First point of the line.</param>
            <param name="p2">Second point of the line.</param>
            <param name="pt">The point to be checked.</param>
            <returns>True if the point is on the line.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.distPointFromLine(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the distance of a point from a line.
            </summary>
            <param name="pt">The point required.</param>
            <param name="p1">First point of the line.</param>
            <param name="p2">Second point of the line.</param>
            <returns>The distance between the given point and the line.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.GetArcSamplePoints(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Calculates n sample points of an arc(with center 0,0).
            </summary>
            <param name="nSegments">An integer representing the count of the returned points.</param>
            <param name="rad">Radius of the arc.</param>
            <param name="sa">Start angle of the arc.</param>
            <param name="ea">End angle of the arc.</param>
            <returns>A collection of gPoints representing n points of the arc.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.GetEllipseSamplePoints(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates n sample points of an ellipse(with center 0,0).
            </summary>
            <param name="nSegments">An integer representing the count of the returned points.</param>
            <param name="MajorAxis">MajorAxis of the ellipse.</param>
            <param name="MinorAxis">MinorAxis of the ellipse.</param>
            <param name="sa">Start angle of the ellipse.</param>
            <param name="ea">End angle of the ellipse.</param>
            <returns>A collection of gPoints representing n points of the ellipse.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.GetQuadraticSPlineSamplePoints(System.Int32,VectorDraw.Geometry.gPoints,VectorDraw.Geometry.DoubleArray,VectorDraw.Geometry.DoubleArray,System.Boolean)">
            <summary>
            Tesselates a Quadratic spline into n segments using the DeBour Algorithm.
            </summary>
            <param name="nPerSegment">An integer representing the count of the returned points.</param>
            <param name="pControlPoints">Control points of the spline.</param>
            <param name="weights">Weights of the spline.</param>
            <param name="knots">Knots of the spline.</param>
            <param name="isclosed">A boolean value if the spline is closed or not.</param>
            <returns>A collection of n gPoints that belong to the spline.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.GetQuadraticBezierSPlineSamplePoints(System.Int32,VectorDraw.Geometry.gPoints,System.Boolean)">
            <summary>
            Tesselates a Quadratic Bezier spline into n segments.
            </summary>
            <param name="nPerSegment">An integer representing the count of the returned points.</param>
            <param name="pControlPoints">Control points of the spline.</param>
            <param name="isclosed">A boolean value if the spline is closed or not.</param>
            <returns>A collection of n gPoints that belong to the spline.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.GetFitQubicSPlineSamplePoints(System.Int32,VectorDraw.Geometry.gPoints,System.Boolean,VectorDraw.Geometry.Vector,VectorDraw.Geometry.Vector)">
            <summary>
            Tesselates a Fitting spline into n segments using the DeBoor's algorithm for a qubic spline.
            </summary>
            <param name="nPerSegment">An integer representing the count of the returned points.</param>
            <param name="pFittingPoints">Fitting points of the spline.</param>
            <param name="isclosed">A boolean value if the spline is closed or not.</param>
            <param name="stangent">Start tangent of the spline.</param>
            <param name="etangent">End tangent of the spline.</param>
            <returns>A collection of n gPoints that belong to the spline.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.GetQubicSPlineSamplePoints(System.Int32,VectorDraw.Geometry.gPoints,VectorDraw.Geometry.DoubleArray,VectorDraw.Geometry.DoubleArray,System.Boolean)">
            <summary>
            Tessalates a qubic spline using the DeBour Algorithm.
            </summary>
            <param name="nPerSegment">An integer representing the count of the returned points.</param>
            <param name="pControlPoints">Control points of the spline.</param>
            <param name="weights">Weights of the spline.</param>
            <param name="knots">Knots of the spline.</param>
            <param name="isclosed">A boolean value if the spline is closed or not.</param>
            <returns>A collection of n gPoints that belong to the spline.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.IncludedAngle(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the angle between p2-p1 and p2-p3.
            </summary>
            <param name="p1">First point needed.</param>
            <param name="p2">Second point needed.</param>
            <param name="p3">Third point needed.</param>
            <returns>The angle between these three point in radians.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.getEllipsePointOnAngle(System.Double,System.Double,System.Double)">
            <summary>
            Calculates a point on an ellipse with center 0.0,0.0,0.0 and the given parameters.
            </summary>
            <param name="angle">The angle where the point is located.</param>
            <param name="MajorAxis">MajorAxis of the ellipse.</param>
            <param name="MinorAxis">MinorAxis of the ellipse.</param>
            <returns>A gPoint located on the ellipse in Entity Coordinate System of the ellipse.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.getCircleCenFrom3Pts(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the center of the circle that passes from the three given points.
            </summary>
            <param name="p1">First point of the circle.</param>
            <param name="p2">Second point of the circle.</param>
            <param name="p3">Third point of the circle.</param>
            <returns>A gPoint representing the center of the circle that passes from the three given points.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.getArcBox(VectorDraw.Geometry.gPoint,System.Double,System.Double,System.Double)">
            <summary>
            Calculates a box that fully contains the arc.
            </summary>
            <param name="Center">The center of the arc.</param>
            <param name="Radius">The radius of the arc.</param>
            <param name="StartAngle">Start angle of the arc.</param>
            <param name="EndAngle">End angle of the arc.</param>
            <returns>A box that contains the arc.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.Intersection3DTrianglePlane(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint@,VectorDraw.Geometry.gPoint@)">
            <summary>
            Checks if a triangle intersects with a plane
            </summary>
            <param name="Tp1">Triangle's first point</param>
            <param name="Tp2">Triangle's second point</param>
            <param name="Tp3">Triangle's third point</param>
            <param name="PlaneNormal">A vector showing the plane's direction</param>
            <param name="PlanePoint">A point in the plane</param>
            <param name="p1">If triangle intersects plane, p1 is the first point of the intersection segment</param>
            <param name="p2">If triangle intersects plane, p2 is the second point of the intersection segment</param>
            <returns>0 = disjoint (no intersection) 
                     1 = intersection in the unique segment p1,p2 which is the more interesting case
                     2 = the triangle intersects only in the unique point p1=p2
                     3 = the triangle lies entirly on the plane, no intersetion is returned
            </returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.Intersection3DSegmentPlane(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint@)">
            <summary>
            Checks if a line segment intersects a plane
            </summary>
            <param name="LinePoint1">Line's first point</param>
            <param name="LinePoint2">Line's second point</param>
            <param name="PlaneNormal">A vector showing the plane's direction</param>
            <param name="PlanePoint">A point in the plane</param>
            <param name="I">If intersection is found I is the point of intersection</param>
            <returns>0 = disjoint (no intersection) 
                     1 = intersection in the unique point I 
                     2 = the segment lies in the plane
            </returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.DistancePointToPlane(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector,VectorDraw.Geometry.gPoint)">
            <summary>
            Caclulates the signed distance of an arbitary point to a plane
            </summary>
            <param name="point">The arbitary point</param>
            <param name="PlaneNormal">A vector showing the plane's direction</param>
            <param name="PlanePoint">A point in the plane</param>
            <returns>The signed distance from point to the plane 
                     returnValue > 0 if point on the same direction as the plane's normal
                     0 > retValue if point on the oposite direction from the plane's normal
            </returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.Arc2Bulge(VectorDraw.Geometry.gPoint,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the bulge from a given arc.
            </summary>
            <param name="Center">The center of the arc.</param>
            <param name="Radius">The radius of the arc.</param>
            <param name="Startangle">Start angle of the arc.</param>
            <param name="Endangle">End angle of the arc.</param>
            <returns>A double value representing the calculated bulge.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.Bulge2Arc(VectorDraw.Geometry.Vertex,VectorDraw.Geometry.Vertex,VectorDraw.Geometry.gPoint@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Calculates an arc from two given vertexes.
            </summary>
            <param name="p1">First vertex with bulge.</param>
            <param name="p2">Second vertex with bulge.</param>
            <param name="Center">Center of the calculated arc.</param>
            <param name="Radius">Radius of the calculated arc.</param>
            <param name="Startangle">Start angle of the calculated arc.</param>
            <param name="Endangle">End angle of the calculated arc.</param>
            <returns>True if the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.PointInTriangle(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Checks if the given point is inside a triangle.
            </summary>
            <param name="pt">The point to be checked.</param>
            <param name="triPt1">First point of the triangle.</param>
            <param name="triPt2">Second point of the triangle.</param>
            <param name="triPt3">Third point of the triangle.</param>
            <returns>True if the passed point is inside the triangle.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.ArcFrom3Points(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Calculates the arc that passes from the three given points.
            </summary>
            <param name="sp">Start point required.</param>
            <param name="ep">End point required.</param>
            <param name="mp">Middle point required.</param>
            <param name="cen">Returned center of the arc.</param>
            <param name="rad">Returned radius of the arc.</param>
            <param name="sa">Returned start angle of the arc.</param>
            <param name="ea">Returned end angle of the arc.</param>
            <returns>True if the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.GetAreaFrom3Pts(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the area of a triangle given by three gPoint objects.
            </summary>
            <param name="p1">First point of the triangle.</param>
            <param name="p2">Second point of the triangle.</param>
            <param name="p3">Third point of the triangle.</param>
            <returns>The area of the triangle.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.AreEqualAngle(System.Double,System.Double,System.Double)">
            <summary>
            Checks if the two passed angles are equal taking into consideration the equality value.
            </summary>
            <param name="ang1">First angle needed.</param>
            <param name="ang2">Second angle needed.</param>
            <param name="equality">A double value representing the equality(for example 0.000001).</param>
            <returns>True if the angles are equal.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.AreEqual(System.Double,System.Double,System.Double)">
            <summary>
            Checks if the two double values are equal taking into consideration the equality value.
            </summary>
            <param name="val1">First double value needed.</param>
            <param name="val2">Second double value needed.</param>
            <param name="eq">A double value representing the equality(for example 0.000001).</param>
            <returns>True if the values are equal.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.Cos(System.Double)">
            <summary>
            Calculates the Cos of the passed angle in radians.
            </summary>
            <param name="angleRadius">An angle in radians.</param>
            <returns>The Cos of the passed angle.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.Sin(System.Double)">
            <summary>
            Calculates the Sin of the passed angle in radians.
            </summary>
            <param name="angleRadius">An angle in radians.</param>
            <returns>The Sin of the passed angle.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.FixAngle(System.Double)">
            <summary>
            Fixes the passed angle in radians to be between 0.0 and 2 * PI.
            </summary>
            <param name="inangle">A passed angle in radians to be fixed.</param>
            <returns>The fixed angle in radians.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.RadiansToDegrees(System.Double)">
            <summary>
            Converts the given radians angle to degrees.
            </summary>
            <param name="radians">A double value representing an angle in radians.</param>
            <returns>The passes angle in degrees.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.DegreesToRadians(System.Double)">
            <summary>
            Converts the given degrees angle to radians.
            </summary>
            <param name="degrees">A double value representing an angle in degrees.</param>
            <returns>The passed angle in radians.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GlobalsInterRop.GetAngle(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Gets the angle between p1 and p2 points in radians.
            </summary>
            <param name="p1">First point needed.</param>
            <param name="p2">Second point needed.</param>
            <returns>Returns the angle between p1 and p2 in radians.</returns>
        </member>
        <member name="P:VectorDraw.Geometry.GlobalsInterRop.DefaultPixelEquality">
            <summary>
            Default minimun pixel size length.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.GlobalsInterRop.DefaultScaleEquality">
            <summary>
            Get/Set default equality used to compare scale properties.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.GlobalsInterRop.Default2DMatrixEquality">
            <summary>
            Get/Set default equality used to compare 3x3 Matrix properties.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.GlobalsInterRop.MaximunPixelSize">
            <summary>
            maximun pixel size length.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.GlobalsInterRop.Default3DMatrixEquality">
            <summary>
            Get/Set default equality used to compare 3x3 Matrix properties.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.GlobalsInterRop.DefaultPointOnPlaneEquality">
            <summary>
            Get/Set default equality used to test if a Point is on a Plane.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.GlobalsInterRop.DefaultAreaEquality">
            <summary>
            Get/Set default equality used to compare area of regions.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.GlobalsInterRop.DefaultAngularEquality">
            <summary>
            Get/Set default equality used to compare angle properties.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.GlobalsInterRop.DefaultMouseMoveEquality">
            <summary>
            Get/Set default equality used to compare two mouse positions in Drwing Units.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.GlobalsInterRop.DefaultLinearEquality">
            <summary>
            Get/Set default equality used to compare linear length properties.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.GlobalsInterRop.DefaultPointEquality">
            <summary>
            Get/Set default equality used to compare <see cref="T:VectorDraw.Geometry.gPoint"/> properties.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.GlobalsInterRop.DefaultVectorEquality">
            <summary>
            Get/Set default equality used to compare <see cref="T:VectorDraw.Geometry.Vector"/> properties.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.GlobalsInterRop.DefaultBulgeEquality">
            <summary>
            Get/Set default equality used to compare polyline bulge properties.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.GlobalsInterRop.VD_PI_OVER_180">
            <summary>
            Get a value equal to 1/180 * 3.14...
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.GlobalsInterRop.VD_270PI">
            <summary>
            A value equal to 3/2 * 3.14...
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.GlobalsInterRop.VD_TWOPI">
            <summary>
            A value equal to 2 * 3.14...
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.GlobalsInterRop.PI">
            <summary>
            A value equal to 3.14...
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.GlobalsInterRop.HALF_PI">
            <summary>
            A value equal to 1/2 * 3.14...
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.GlobalsInterRop.EPSILON">
            <summary>
            Represents the smallest positive System.Double greater than zero.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.GlobalsInterRop.IntersectionViewMatrix">
            <summary>
            Get/Set a matrix that represent the World to View transformation used from <see cref="M:VectorDraw.Geometry.GlobalsInterRop.IntersectionLL3D(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)"/> when the passing points represent two lines that are not in the same Plane.
            </summary>
            <remarks>
            Default value is null.</remarks>
            <remarks>Set this property to Active WorldToView matrix in order the <see cref="M:VectorDraw.Geometry.GlobalsInterRop.IntersectionLL3D(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)"/> to return a valid point even if the  passing lines are not in the same plane.
            </remarks>
        </member>
        <member name="T:VectorDraw.Geometry.Extras.IPolyPolySectionsArea">
            <summary>
            Provides all functionality for the PolyPolySectionsArea.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.Extras.PolyPolySectionsArea">
            <summary>
            An object used to calculate section boundary areas between an existing and a formed boundary 
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Extras.PolyPolySectionsArea.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Extras.PolyPolySectionsArea.GetSections(VectorDraw.Geometry.gPoints[]@)">
            <summary>
            Calculate an array of section boundaries depend of the object properties.
            </summary>
            <returns>An array of section boundaries.</returns>
        </member>
        <member name="P:VectorDraw.Geometry.Extras.PolyPolySectionsArea.ExistingPathPoints">
            <summary>
            Get/Set an array of points that defines the existing boundary
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Extras.PolyPolySectionsArea.FormPathPoints">
            <summary>
            Get/Set an array of points that defines the formed boundary
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Extras.PolyPolySectionsArea.AdditionalSectionPathPoints">
            <summary>
            Get/Set an array of points that defines an additional formed boundary
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Extras.PolyPolySectionsArea.StartXSection">
            <summary>
            Get/Set the additional Vertical left  formed section value.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Extras.PolyPolySectionsArea.EndXSection">
            <summary>
            Get/Set the additional Vertical right  formed section value.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Extras.PolyPolySectionsArea.StartYSection">
            <summary>
            Get/Set the additional Horizontal bottom  formed section value.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Extras.PolyPolySectionsArea.EndYSection">
            <summary>
            Get/Set the additional Horizontal top  formed section value.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Extras.PolyPolySectionsArea.SupportedSections">
            <summary>
            Get/Set the supported of the additional Horizontal and/or Vertical formed sections.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.Extras.PolyPolySectionsArea.SectionFlag">
            <summary>
            Defines the supported of additional Horizontal and Vertical formed Sections
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Extras.PolyPolySectionsArea.SectionFlag.None">
            <summary>
            No additional sections
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Extras.PolyPolySectionsArea.SectionFlag.StartY">
            <summary>
            A Horizontal bottom section is supported
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Extras.PolyPolySectionsArea.SectionFlag.EndY">
            <summary>
            A Horizontal top section is supported
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Extras.PolyPolySectionsArea.SectionFlag.StartX">
            <summary>
            A Vertical left section is supported
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Extras.PolyPolySectionsArea.SectionFlag.EndX">
            <summary>
            A Vertical right section is supported
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Extras.PolyPolySectionsArea.SectionFlag.All">
            <summary>
            An addional rectangle section is supported.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.OsnapMode">
            <summary>
            Available Object's snapping modes.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.OsnapMode.NONE">
            <summary>
            None osnap point will be shown.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.OsnapMode.END">
            <summary>
            End point osnap mode.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.OsnapMode.MID">
            <summary>
            Middle point osnap mode.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.OsnapMode.CEN">
            <summary>
            Center point osnap mode.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.OsnapMode.INS">
            <summary>
            Insertion point osnap mode.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.OsnapMode.PER">
            <summary>
            PERpendicular osnap mode.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.OsnapMode.NEA">
            <summary>
            Nearest osnap mode.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.OsnapMode.INTERS">
            <summary>
            Intersection osnap mode.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.OsnapMode.NODE">
            <summary>
            Node(point) osnap mode.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.OsnapMode.QUA">
            <summary>
            Quadrant osnap mode.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.OsnapMode.TANG">
            <summary>
            Tangent osnap mode.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.OsnapMode.APPARENTINT">
            <summary>
            Apparent intersection osnap mode.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.OsnapMode.EXTENSION">
            <summary>
            Extension of a line or arc object
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.OsnapMode.NEA_3D">
            <summary>
            3D Nearest point on a plane of a 3D object.The differences with the simple NEA Osnap is that this option is a fast calculation of the eye nearest point where the cursor is.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.OsnapMode.DISABLE">
            <summary>
            Disabled osnap mode.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.OsnapMode.ALL">
            <summary>
            All osnap modes active.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.OsnapPoint">
            <summary>
            Implements the OsnapPoint object.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.gPoint">
            <summary>
            Implements the gPoint object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.#ctor">
            <summary>
            Initializes a gPoint object (0.0,0.0,0.0). 
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.#ctor(System.Double)">
            <summary>
            Initializes a gPoint object (X,0.0,0.0).
            </summary>
            <param name="X">The x coordinate of the point.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a gPoint object (X,Y,0.0).
            </summary>
            <param name="X">The x coordinate of the point.</param>
            <param name="Y">The y coordinate of the point.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a gPoint object (X,Y,Z).
            </summary>
            <param name="X">The x coordinate of the point.</param>
            <param name="Y">The y coordinate of the point.</param>
            <param name="Z">The z coordinate of the point.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.#ctor(VectorDraw.Geometry.gPoint)">
            <summary>
            Initializes a gPoint object at the coordinates of the pt parameter.
            </summary>
            <param name="pt">A gPoint object from which the coordinates will be taken from.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.#ctor(VectorDraw.Geometry.gPoint,System.Double)">
            <summary>
            Initializes a gPoint object.
            </summary>
            <param name="pt">A gPoint object from which the coordinates will be taken from.</param>
            <param name="Z">Additional z coordinate of the point</param>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.FromString(System.String)">
            <summary>
            Sets the x,y,z values of the point from a given string.
            </summary>
            <param name="str">A string representing a point with the following syntax: z,y,z .</param>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.ToString(VectorDraw.Serialize.Serializer)">
            <summary>
            Gets a System.String that represents the coordinates of the gPoint Object using the format parameter for visualization.
            </summary>
            <param name="serializer">The Serializer object where the object is going to be saved.</param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.ToString">
            <summary>
            Gets a System.String that represents the coordinates of the gPoint Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.ToString(System.String)">
            <summary>
            Gets a System.String that represents the coordinates of the gPoint Object using the format parameter for visualization.
            </summary>
            <param name="format">A parameter used to specify the format the coordinates should be displayed.</param>
            <returns>A string representing the coordinates of the gPoint object.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.GetHashCode">
            <summary>
            Serves as a hash function for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.Equals(System.Object)">
            <summary>
            Checks if the parameter object is equal to this object.
            </summary>
            <param name="obj">An object to be checked if it is equal with this gPoint object.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.Equals(VectorDraw.Geometry.gPoint)">
            <summary>
            Checks if the parameter gPoint object is equal to this object.
            </summary>
            <param name="p">A gPoint object to be checked if the x,y,z values are the same with this object's values.</param>
            <returns>True if all x,y,z values are equal.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.op_Equality(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Implements the == operator for two gPoints.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.op_Inequality(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Implements the != operator for two gPoints.
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.Clone">
            <summary>
            Returns a new created gPoint object as clone to this one.
            </summary>
            <returns>A new created gPoint object that has all x,y,z values equal to this object.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.AreEqual(VectorDraw.Geometry.gPoint,System.Double)">
            <summary>
            Check if the passed gPoint has equal x,y,z values with this object.
            </summary>
            <param name="pt">A gPoint to be checked if it is equal to this object.</param>
            <param name="Equality">A double value representing the equality(for example 0.00001).</param>
            <returns>True if the x,y,z values are equal.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.AreEqual(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Checks if the passed gPoint is equal to this gPoint
            </summary>
            <param name="ptx">The x coordinate of the point to check.</param>
            <param name="pty">The y coordinate of the point to check.</param>
            <param name="ptz">The z coordinate of the point to check.</param>
            <param name="Equality">A double value that represents the equality to be used for the comparison.</param>
            <returns>True if the points are equal using the passed equality value.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.AreEqual(VectorDraw.Geometry.gPoint)">
            <summary>
            Check if the passed gPoint has equal x,y,z values with this object with default equality <see cref="F:VectorDraw.Geometry.Globals.VD_ZERO8"/>.
            </summary>
            <param name="pt">A gPoint to be checked if it is equal to this object.</param>
            <returns>True if the x,y,z values are equal.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.SetValue(System.Double,System.Double,System.Double)">
            <summary>
            Set the x,y,z values of this object using the passed values.
            </summary>
            <param name="Xvalue">A double value representing the x value of the point.</param>
            <param name="Yvalue">A double value representing the y value of the point.</param>
            <param name="Zvalue">A double value representing the z value of the point.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.CopyFrom(VectorDraw.Geometry.gPoint)">
            <summary>
            Copies the x,y,z values from the passed object to this gPoint object.
            </summary>
            <param name="p1">A gPoint object from which the x,y,z values are going to be copied from.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.op_Modulus(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            computes the remainder after dividing its first point x,y,z values by its second point x,y,z values
            </summary>
            <param name="p"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.op_Division(VectorDraw.Geometry.gPoint,System.Double)">
            <summary>
            Implements the / operator for two gPoints.
            </summary>
            <param name="p"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.op_Multiply(VectorDraw.Geometry.gPoint,System.Double)">
            <summary>
            Implements the * operator for two gPoints.
            </summary>
            <param name="p"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.op_Addition(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Implements the + operator for two gPoints.
            </summary>
            <param name="p"></param>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.op_Subtraction(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Implements the - operator for two gPoints.
            </summary>
            <param name="p"></param>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.op_Multiply(System.Double,VectorDraw.Geometry.gPoint)">
            <summary>
            Implements the * operator for a gPoint with a double value.
            </summary>
            <param name="value"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.SetOffsetFrom(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector,System.Double)">
            <summary>
            Sets the x,y,z values of this point to a gPoint located at a given distance and a given direction from the origin point.
            </summary>
            <param name="origin">The origin point.</param>
            <param name="vec">A Vector object representing the direction of the offset operation.</param>
            <param name="length">The distance to offset from the origin point.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.Direction(VectorDraw.Geometry.gPoint)">
            <summary>
            Get the direction between this and a given point.
            </summary>
            <param name="other">A gPoint parameter.</param>
            <returns>The direction between the given gPoint value and this gPoint.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.DistanceSquared(VectorDraw.Geometry.gPoint)">
            <summary>Returns the square of the distance between two gPoints.</summary>
            <param name="other">The other gPoint object.</param>
            <returns>The square of distance between the given gPoint and this one.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.Distance3D(VectorDraw.Geometry.gPoint)">
            <summary>
            Returns the distance between this gPoint and the parameter.
            </summary>
            <param name="other">A gPoint needed for the calculation of the distance.</param>
            <returns>The distance between the two points.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.Distance2D(VectorDraw.Geometry.gPoint)">
            <summary>
            Returns the distance between this gPoint and the parameter.The z is not taken into consideration.
            </summary>
            <param name="pt">A gPoint needed for the calculation of the distance.</param>
            <returns>The 2D distance between the two points.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.Polar(System.Double,System.Double)">
            <summary>
            Calculates and returns a gPoint at a given distance and angle from this point.
            </summary>
            <param name="ang">A double value representing the angle between the two points in radians.</param>
            <param name="dst">The distance between this point and the requested.</param>
            <returns>The gPoint found at the given angle and distance.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.GetAngle(VectorDraw.Geometry.gPoint)">
            <summary>
            Get the angle between the given point and this in radians.
            </summary>
            <param name="pt">The other gPoint needed.</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.Translate(VectorDraw.Geometry.gPoint,System.Double,System.Double,System.Double)">
            <summary>
            Calculates and returns a point translated using x,y,z distance from a given point.
            </summary>
            <param name="pt">A gPoint needed.</param>
            <param name="dx">The x distance needed.</param>
            <param name="dy">The y distance needed.</param>
            <param name="dz">The z distance needed.</param>
            <returns>The gPoint calculated from the translation of the given point.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.DistanceFromLine(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the distance between a given line and this point.
            </summary>
            <param name="p1">First point of the line.</param>
            <param name="p2">Second point of the line.</param>
            <returns>The distance between this point and the line.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.Polar(VectorDraw.Geometry.gPoint,System.Double,System.Double)">
            <summary>
            Calculates and returns a gpoint located at a given distance and angle from a given point.
            </summary>
            <param name="pt">A gPoint needed.</param>
            <param name="ang">The angle between the returned point and the pt.</param>
            <param name="dst">The distance between the returned point and pt.</param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.DistanceSquared(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculate the squared distance between two gPoints.
            </summary>
            <param name="fromThis">First gPoint needed.</param>
            <param name="toThis">Second gPoint needed</param>
            <returns>The squared distance between the two given gPoints.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.Distance3D(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the distance between two gPoints.
            </summary>
            <param name="fromThis">First gPoint needed.</param>
            <param name="toThis">Second gPoint needed.</param>
            <returns>The distance between the two given gPoints.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.Distance2D(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the 2D distance between two gPoints.
            </summary>
            <param name="fromThis">First gPoint needed.</param>
            <param name="toThis">Second gPoint needed.</param>
            <returns>The 2D distance between the two given gPoints.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.MidPoint(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the midpoint between two given gPoints.
            </summary>
            <param name="p1">First gPoint needed.</param>
            <param name="p2">Second gPoiunt needed.</param>
            <returns>A gPoint representing the middle point between the two given points.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the gPoint object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the gPoint object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Geometry.gPoint.Compare(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Compares two gPoint and returns a value indicating whether one is less than,
                equal to, or greater than the other depend of their distance from (0,0,0).
            </summary>
            <param name="x">The first gPoint to compare.</param>
            <param name="y">The second gPoint to compare.</param>
            <returns>
            Value Condition Less than zero distance of x from (0,0,0) is less than distance of y from (0,0,0).  Zero x equals y.  Greater than zero diatnce x is greater than distance y from (0,0,0).
            </returns>
        </member>
        <member name="P:VectorDraw.Geometry.gPoint.Point2d">
            <summary>
            returns a new 2d point with Z value = 0.0
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.gPoint.x">
            <summary>
            The x value of the point.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.gPoint.y">
            <summary>
            The y value of the point.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.gPoint.z">
            <summary>
            The z value of the point.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.gPoint.Item(System.Int32)">
            <summary>
             Get/Set the value at a specified index.
            </summary>
            <param name="index">The index of the object.</param>
            <returns>The value at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is different than 0 , 1, or 2.</exception>
        </member>
        <member name="M:VectorDraw.Geometry.OsnapPoint.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.OsnapPoint.#ctor(VectorDraw.Geometry.OsnapPoint)">
            <summary>
            Initializes the object with a given OsnapPoint object.
            </summary>
            <param name="other">Initialization OsnapPoint.</param>
        </member>
        <member name="M:VectorDraw.Geometry.OsnapPoint.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.Matrix,VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapPoint.PointCoordSystem)">
            <summary>
            Iitializes the object with the given parameters.
            </summary>
            <param name="pt">A gPoint representing the position of the OsnapPoint object.</param>
            <param name="mode">Osnap mode of the OsnapPoint.</param>
            <param name="object2view">A matrix used for calculations between object and view coordinate system.</param>
            <param name="object2World">A matrix used for calculations between object and world coordinate system.</param>
            <param name="ptcs">The given point's coordinate system.</param>
        </member>
        <member name="M:VectorDraw.Geometry.OsnapPoint.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.Matrix,VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapPoint.PointCoordSystem,VectorDraw.Render.IvdRenderViewProperties)">
            <summary>
            Iitializes the object with the given parameters.
            </summary>
            <param name="pt">A gPoint representing the position of the OsnapPoint object.</param>
            <param name="mode">Osnap mode of the OsnapPoint.</param>
            <param name="object2view">A matrix used for calculations between object and view coordinate system.</param>
            <param name="object2World">A matrix used for calculations between object and world coordinate system.</param>
            <param name="ptcs">The given point's coordinate system.</param>
            <param name="ViewProperties">Object that contains active world to view render properties.</param>
        </member>
        <member name="M:VectorDraw.Geometry.OsnapPoint.#ctor(VectorDraw.Geometry.gPoint,System.Double,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.Matrix,VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapPoint.PointCoordSystem,System.Object)">
            <summary>
            Initializes the OsnapPoint object with the given parameters.
            </summary>
            <param name="pt">A gPoint representing the position of the OsnapPoint object.</param>
            <param name="thickness">The thickness of the object.</param>
            <param name="mode">Osnap mode of the OsnapPoint.</param>
            <param name="object2view">A matrix used for calculations between object and view coordinate system.</param>
            <param name="object2World">A matrix used for calculations between object and world coordinate system.</param>
            <param name="ptcs">The given point's coordinate system.</param>
            <param name="objectsnap">The vdFigure object that the OsnapPoint refers to.</param>
        </member>
        <member name="M:VectorDraw.Geometry.OsnapPoint.#ctor(VectorDraw.Geometry.gPoint,System.Double,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.Matrix,VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapPoint.PointCoordSystem,System.Object,VectorDraw.Render.IvdRenderViewProperties)">
            <summary>
            Initializes the OsnapPoint object with the given parameters.
            </summary>
            <param name="pt">A gPoint representing the position of the OsnapPoint object.</param>
            <param name="thickness">The thickness of the object.</param>
            <param name="mode">Osnap mode of the OsnapPoint.</param>
            <param name="object2view">A matrix used for calculations between object and view coordinate system.</param>
            <param name="object2World">A matrix used for calculations between object and world coordinate system.</param>
            <param name="ptcs">The given point's coordinate system.</param>
            <param name="objectsnap">The vdFigure object that the OsnapPoint refers to.</param>
            <param name="ViewProperties">Object that contains active world to view render properties.</param>
        </member>
        <member name="M:VectorDraw.Geometry.OsnapPoint.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.Matrix,VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapPoint.PointCoordSystem,System.Object)">
            <summary>
            Initializes the OsnapPoint object with the given parameters.
            </summary>
            <param name="pt">A gPoint representing the position of the OsnapPoint object.</param>
            <param name="mode">Osnap mode of the OsnapPoint.</param>
            <param name="object2view">A matrix used for calculations between object and view coordinate system.</param>
            <param name="object2World">A matrix used for calculations between object and world coordinate system.</param>
            <param name="ptcs">The given point's coordinate system.</param>
            <param name="objectsnap">The vdFigure object that the OsnapPoint refers to.</param>
        </member>
        <member name="M:VectorDraw.Geometry.OsnapPoint.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.OsnapMode,VectorDraw.Geometry.Matrix,VectorDraw.Geometry.Matrix,VectorDraw.Geometry.OsnapPoint.PointCoordSystem,System.Object,VectorDraw.Render.IvdRenderViewProperties)">
            <summary>
            Initializes the OsnapPoint object with the given parameters.
            </summary>
            <param name="pt">A gPoint representing the position of the OsnapPoint object.</param>
            <param name="mode">Osnap mode of the OsnapPoint.</param>
            <param name="object2view">A matrix used for calculations between object and view coordinate system.</param>
            <param name="object2World">A matrix used for calculations between object and world coordinate system.</param>
            <param name="ptcs">The given point's coordinate system.</param>
            <param name="objectsnap">The vdFigure object that the OsnapPoint refers to.</param>
            <param name="ViewProperties">Object that contains active world to view render properties.</param>
        </member>
        <member name="M:VectorDraw.Geometry.OsnapPoint.GetPosition(VectorDraw.Geometry.OsnapPoint.PointCoordSystem)">
            <summary>
            Returns a new gPoint object relative to input Coordinate System
            </summary>
            <param name="ptcs">The coordinate system to transform this object position.</param>
            <returns>a new gPoint object relative to input Coordinate System</returns>
        </member>
        <member name="M:VectorDraw.Geometry.OsnapPoint.ToString">
            <summary>
            Gets a System.String that represents the OsnapMode value of the OsnapPoint Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.OsnapPoint.ToString(System.String)">
            <summary>
            Gets a System.String that represents the OsnapMode value of the OsnapPoint Object with a given format.
            </summary>
            <param name="format">The format to use to represent this value.</param>
            <returns>A string representing the OsnapPoint's snap mode.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.OsnapPoint.GetHashCode">
            <summary>
            Serves as a hash function for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.OsnapPoint.Equals(System.Object)">
            <summary>
            Checks if the passed object is an OsnapPoint object and if it is equal to this object.
            </summary>
            <param name="obj">An object to check.</param>
            <returns>True if the point,mode and ObjectSnap object are equal between these two objects.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.OsnapPoint.AreEqual(VectorDraw.Geometry.OsnapPoint,System.Double)">
            <summary>
            Check if the passed <see cref="T:VectorDraw.Geometry.OsnapPoint"/> has same <see cref="P:VectorDraw.Geometry.OsnapPoint.Mode"/> and equal x,y,z values with this object with passed equality.
            </summary>
            <param name="p">An <see cref="T:VectorDraw.Geometry.OsnapPoint"/> to be checked if it is equal to this object.</param>
            <param name="Equality">A double value representing the equality(for example 0.00001).</param>
            <returns>True if both objects have same <see cref="P:VectorDraw.Geometry.OsnapPoint.Mode"/> and the x,y,z values are equal.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.OsnapPoint.Equals(VectorDraw.Geometry.OsnapPoint)">
            <summary>
            Checks if the given OsnapPoint is equal to this point.
            </summary>
            <param name="p">The given OsnapPoint to check.</param>
            <returns>True if the point,mode and ObjectSnap are equal to this point.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.OsnapPoint.op_Equality(VectorDraw.Geometry.OsnapPoint,VectorDraw.Geometry.OsnapPoint)">
            <summary>
            Implements the == operator for two OsnapPoints.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.OsnapPoint.op_Inequality(VectorDraw.Geometry.OsnapPoint,VectorDraw.Geometry.OsnapPoint)">
            <summary>
            Emplements the != operator for two OsnapPoints.
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.OsnapPoint.Clone">
            <summary>
            Returns a clone of this object.
            </summary>
            <returns>A new created object as clone of this object.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.OsnapPoint.CopyFrom(VectorDraw.Geometry.OsnapPoint)">
            <summary>
            Copies the passed object's point,mode and mObjectSnap to this point.
            </summary>
            <param name="p1">A given OsnapPoint from which the values will be taken from.</param>
        </member>
        <member name="M:VectorDraw.Geometry.OsnapPoint.Transform(VectorDraw.Geometry.Matrix)">
            <summary>
            Tranforms the OsnapPoint with the given matrix.
            </summary>
            <param name="mat">A Matrix for the transformation.</param>
        </member>
        <member name="P:VectorDraw.Geometry.OsnapPoint.Object2view">
            <summary>
            Matrix used to transform ObjectSnap to Current View.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.OsnapPoint.Object2World">
            <summary>
             Matrix used to transform from ObjectSnap to World Coordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.OsnapPoint.View2Object">
            <summary>
            Matrix used to transform this object position to ObjectSnap Coordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.OsnapPoint.View2World">
            <summary>
            Matrix used to transform this object position to World Coordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.OsnapPoint.ObjectSnap">
            <summary>
            Get the object(vdFigure) that the OsnapPoint refers to.
            </summary>
            <remarks>For example if the OsnapPoint is CEN and is the center of a circle then this object will be the circle.</remarks>
        </member>
        <member name="P:VectorDraw.Geometry.OsnapPoint.ReferenceObjectSnap">
            <summary>
            Get/Set an extra object that reference this snap and can be used to calculate the final snap position.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.OsnapPoint.Mode">
            <summary>
            Get/Set the osnap mode of the OsnapPoint.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.OsnapPoint.PointCoordSystem">
            <summary>
            Represents the Coordinate System of the Osnap Point.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.OsnapPoint.PointCoordSystem.World">
            <summary>
            World Coordinate System.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.OsnapPoint.PointCoordSystem.ECS">
            <summary>
            Entity Coordinate System.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.OsnapPoint.PointCoordSystem.View">
            <summary>
            View Coordinate System.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.OsnapPoints">
            <summary>
            Implements a collection of OsnapPoint objects.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.OsnapPoints.DefaultMaximumOsnaps">
            <summary>
            Get/Set the default maximum number of osnaps included in the collection when this collection is used inside user actions that waiting a point from the user.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.OsnapPoints.mMaximumItems">
            <summary>
            Get/Set the maximum items that can be added in OsnapPoints collection.Default value is 0 for no checking.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.OsnapPoints.#ctor">
            <summary>
             Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.OsnapPoints.#ctor(VectorDraw.Geometry.gPoint)">
            <summary>
             Initializes the object.
            </summary>
            <param name="origin">The origin point in View CS that represents the current mouse position</param>
        </member>
        <member name="M:VectorDraw.Geometry.OsnapPoints.#ctor(VectorDraw.Geometry.gPoint,System.Int32,System.Double,System.Double)">
            <summary>
             Initializes the object.
            </summary>
            <param name="origin">The origin point in View CS that represents the current mouse position</param>
            <param name="maximumItems"> maximum number of items that can be added.</param>
            <param name="pickSize">The pick size in drawing units</param>
            <param name="pixelSize">The size in Drawing Units of one(1) window pixel.</param>
        </member>
        <member name="M:VectorDraw.Geometry.OsnapPoints.Transform(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all OsnapPoints of the collection with the given matrix.
            </summary>
            <param name="mat">A Matrix object used for the transformation.</param>
        </member>
        <member name="M:VectorDraw.Geometry.OsnapPoints.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.OsnapPoints.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.OsnapPoints.AddItem(VectorDraw.Geometry.OsnapPoint)">
            <summary>
            Adds an object to the collection.
            </summary>
            <remarks>If MaximumItems are biger than 0 and the count is equal to MaximumItems the first item in collection, which is the oldest, removed from the list .</remarks>
            <param name="value">An object to be added to the collection.</param>
            <returns>True if the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.OsnapPoints.ToString">
            <summary>
            Gets a System.String that represents the count of the vdOsnapPoints collection Object.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.OsnapPoints.RenderingObject">
            <summary>
            Get/Set the RenderSelect object used to manage the osnaps.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.OsnapPoints.IsAllOsnapsFind">
            <summary>
            Internally used property and returns if the collection contains all the OsnapPoints that can be drawn.Returns false if a windows message stopped the snap procedure.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.OsnapPoints.Origin">
            <summary>
            Get/Set the origin point in View CS that represents the current mouse position
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.OsnapPoints.Location">
            <summary>
            Get/Set a System.Drawing.Point object representing the position of the mouse and for which the snap procedure checks for valid osnaps.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.OsnapPoints.Item(System.Int32)">
            <summary>
            Get/Set the object at a specified index of the collection.
            </summary>
            <param name="index">The index of the object.</param>
            <returns>The object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Geometry.OsnapPoints.Count">
            <summary>
            Get the number of items in the collection.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.OsnapPoints.OsnapCrossPointsAddenum">
            <summary>
            Represents an enum value that represents if the extra cross help OsnapPoints will be added.
            </summary>
            <remarks>
            For example if the center value is present , then when the Center Osnap is light on and the cursor passes from a vdCircle object then a small circle will appear to the center of the circle. 
            This small cross will help the user to select the center of the circle when he moves the cursor close to that point. In the other case 
            the only way to get the center Osnap point will be to have the cursor over the vdCircle object.
            </remarks>
        </member>
        <member name="F:VectorDraw.Geometry.OsnapPoints.OsnapCrossPointsAddenum.NONE">
            <summary>
            Default value is used.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.OsnapPoints.OsnapCrossPointsAddenum.CENTER">
            <summary>
            The center Osnap cross point is added.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.OsnapPoints.OsnapCrossPointsAddenum.PERPEDICULAR">
            <summary>
            The perpedicular Osnap cross point is added.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.OsnapPoints.OsnapCrossPointsAddenum.INSERT">
            <summary>
            The insert Osnap cross point is added.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.OsnapPoints.OsnapCrossPointsAddenum.INTERSECTION">
            <summary>
            The intersection Osnap cross point is added.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.OsnapPoints.OsnapCrossPointsAddenum.DEFAULT_ALL">
            <summary>
            Default value contains all the above value and all help osnap points are being added.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.Offset.OffsetStatic">
            <summary>
            Implements offset geometry methods.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Offset.OffsetStatic.Offset(VectorDraw.Geometry.Vertexes,System.Double)">
            <summary>
            Calculates the offset polylines of an polyline object.
            </summary>
            <param name="verts">The collection of vertexes of the base polyline.</param>
            <param name="offset">The distance to offset.</param>
            <returns>A collection of objects as the result of the offset commited.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Offset.OffsetStatic.Offset(VectorDraw.Geometry.Vertexes,VectorDraw.Geometry.Vertexes,System.Double)">
            <summary>
            Calculates the offset polylines of an polyline object.
            </summary>
            <param name="verts">The collection of vertexes of the base polyline.</param>
            <param name="lineSegments">The collection of vertexes of the base polyline analizing arc segments to small lines.</param>
            <param name="offset">The distance to offset.</param>
            <returns>A collection of objects as the result of the offset commited.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Offset.OffsetStatic.getPolyWidth(VectorDraw.Geometry.Vertexes,System.Boolean,System.Double,VectorDraw.Geometry.DoubleArray,System.Int32,System.Double,VectorDraw.Generics.vdArray{System.Int32}@)">
            <summary>
            Calculate the filled area for each segment produced by the widths offset on each vertex.
            </summary>
            <param name="_verts">Polyline vertex list.</param>
            <param name="isClosed">If true the last vertex is connected with the first one.</param>
            <param name="constantWidth">Width that will be used in case that the segment has negative width value</param>
            <param name="widths">An array of width start , end offset widths for each segment</param>
            <param name="curveResolution">A value between 0 - 20000 that, according to passed pixelSize, defines the size of line segment that an arc will be divided.</param>
            <param name="pixelSize">The size of one pixel in drawing units on the active rendering View area.</param>
            <param name="SegmentsFlag">Out an array of flag foreach item in return region collection. If Flag is 0 the the region is a single polyline else it is a closed filled region.</param>
            <returns>An array of regions that draws each segment.</returns>
        </member>
        <member name="T:VectorDraw.Geometry.ByteArray">
            <summary>
            Represents an array of bytes.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.ByteArray.CharToInt(System.Char)">
            <summary>
            Convert a Hexademical character value to its integer value.
            </summary>
            <param name="chr">The character to be converted.</param>
            <returns>An integer representing the character.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.ByteArray.#ctor(System.Byte[])">
            <summary>
             Initializes the collection with a given byte array.
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="M:VectorDraw.Geometry.ByteArray.#ctor">
            <summary>
            Initializes the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.ByteArray.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes the collection with a given string and encoding.
            </summary>
            <param name="str">The string from which the characters will be taken from.</param>
            <param name="encoding">The encoding to use to get the characters from the string.</param>
        </member>
        <member name="M:VectorDraw.Geometry.ByteArray.ToString">
            <summary>
            Gets a System.String that represents the count of the ByteArray Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.ByteArray.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.ByteArray.AddItem(System.Byte)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
            <param name="value">An object to be added to the collection.</param>
            <returns>True if the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.ByteArray.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.ByteArray.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.ByteArray.RemoveAt(System.Int32)">
            <summary>
            Removes an object from a specified index of the collection.
            </summary>
            <param name="index">The index of the object to be removed.</param>
        </member>
        <member name="M:VectorDraw.Geometry.ByteArray.RemoveLast">
            <summary>
            Removes the last object of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.ByteArray.AddRange(VectorDraw.Geometry.ByteArray)">
            <summary>
            Adds the objects of one list to the end of this list.
            </summary>
            <param name="c">A vdArray collection to be added to this list.</param>
        </member>
        <member name="M:VectorDraw.Geometry.ByteArray.ReadInt64(System.Int32)">
            <summary>
            Read 8 bytes starting from a given position of the collection and return a ulong object.
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.ByteArray.ReadInt32(System.Int32)">
            <summary>
            Read 4 bytes starting from a given position of the collection and return a uint object.
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.ByteArray.ReadInt16(System.Int32)">
            <summary>
            Read 2 bytes starting from a given position of the collection and return a ushort object.
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.ByteArray.ToByteArray">
            <summary>
            Returns a byte[] array filled with the collection's objects.
            </summary>
            <returns>A byte[] array object.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.ByteArray.ToEncodedString(System.Text.Encoding)">
            <summary>
            Returns a string filled with the collection's object's characters.
            </summary>
            <returns>A string object.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.ByteArray.ToBinaryReader">
            <summary>
            Returns a BinaryReader object with the collection's objects.
            </summary>
            <returns>A binaryReader object having the collection's objects.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.ByteArray.Clone">
            <summary>
            Creates a new ByteArray object having this collection's objects.
            </summary>
            <returns>A copy of this list.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.ByteArray.AddHexString(System.String)">
            <summary>
            Adds a converted hexademical string to the end of the collection.
            </summary>
            <param name="str">A string that represents a hex number.All characters are converted and then added to the collection.</param>
        </member>
        <member name="M:VectorDraw.Geometry.ByteArray.ToHexString">
            <summary>
            Returns a string that represents all bytes of the collection to a hex number.
            </summary>
            <returns>A hex string representation of the collection;s items.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.ByteArray.ToHexString(System.Int32,System.Int32)">
            <summary>
            Returns a string that represents all bytes of the elements in a range of the ellements starting from a given index, to a hex number.
            </summary>
            <param name="index">The starting index of the operation.</param>
            <param name="count">The number of items to be used.</param>
            <returns>A string that represents all bytes of the elements in a range of the ellements starting from a given index, to a hex number.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when index or count are invalid.</exception>
        </member>
        <member name="M:VectorDraw.Geometry.ByteArray.SetValue(System.Int32,System.Object)">
            <summary>
            Set the value to the specified index.
            </summary>
            <param name="Index">The index of the collection.</param>
            <param name="item">A byte value to be set to the specified index.</param>
        </member>
        <member name="M:VectorDraw.Geometry.ByteArray.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the ByteArray object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Geometry.ByteArray.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the ByteArray object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="P:VectorDraw.Geometry.ByteArray.Item(System.Int32)">
            <summary>
            Get/Set the object at a specified index of the collection.
            </summary>
            <param name="index">The index of the object.</param>
            <returns>The object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Geometry.ByteArray.Count">
            <summary>
            Get the number of items in the collection.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.IUnits">
            <summary>
            This is the interface for the objects that support Linear and Angular units..
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.IUnits.lunits">
            <summary>
            Linear Units.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.IUnits.aunits">
            <summary>
            Angular Units.
            </summary>
        </member>
        <member name="M:vdgpcgeo.Clip.intersection(vdgpcgeo.Poly,vdgpcgeo.Poly,System.Type)">
            Creates a new instance of Clip 
        </member>
        <member name="M:vdgpcgeo.Clip.intersection(vdgpcgeo.Poly,vdgpcgeo.Poly)">
             Return the intersection of <code>p1</code> and <code>p2</code> where the
             return type is of <code>PolyDefault</code>. 
            
             @param p1 One of the polygons to performt he intersection with
             @param p2 One of the polygons to performt he intersection with
        </member>
        <member name="M:vdgpcgeo.Clip.union(vdgpcgeo.Poly,vdgpcgeo.Poly)">
             Return the union of <code>p1</code> and <code>p2</code> where the
             return type is of <code>PolyDefault</code>. 
            
             @param p1 One of the polygons to performt he union with
             @param p2 One of the polygons to performt he union with
        </member>
        <member name="M:vdgpcgeo.Clip.xor(vdgpcgeo.Poly,vdgpcgeo.Poly)">
             Return the xor of <code>p1</code> and <code>p2</code> where the
             return type is of <code>PolyDefault</code>. 
            
             @param p1 One of the polygons to performt he xor with
             @param p2 One of the polygons to performt he xor with
        </member>
        <member name="M:vdgpcgeo.Clip.createNewPoly(System.Type)">
            Create a new <code>Poly</code> type object using <code>polyClass</code>.
        </member>
        <member name="M:vdgpcgeo.Clip.clip(vdgpcgeo.Clip.OperationType,vdgpcgeo.Poly,vdgpcgeo.Poly,System.Type)">
            <code>clip()</code> is the main method of the clipper algorithm.
            This is where the conversion from really begins.
        </member>
        <member name="T:vdgpcgeo.Clip.VertexType">
            Edge intersection classes
        </member>
        <member name="T:vdgpcgeo.Clip.HState">
            Horizontal edge states            
        </member>
        <member name="T:vdgpcgeo.Clip.BundleState">
            Edge bundle state                 
        </member>
        <member name="T:vdgpcgeo.Clip.VertexNode">
            Internal vertex list datatype
        </member>
        <member name="T:vdgpcgeo.Clip.PolygonNode">
            Internal contour / tristrip type
        </member>
        <member name="T:vdgpcgeo.Clip.LmtNode">
            Local minima table
        </member>
        <member name="T:vdgpcgeo.Clip.ScanBeamTree">
            Scanbeam tree 
        </member>
        <member name="T:vdgpcgeo.Clip.ScanBeamTreeEntries">
            
        </member>
        <member name="T:vdgpcgeo.Clip.ItNode">
            Intersection table
        </member>
        <member name="T:vdgpcgeo.Clip.StNode">
            Sorted edge table
        </member>
        <member name="T:VectorDraw.Geometry.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.DoubleArray">
            <summary>
            Implements a collection of Doubles.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleArray.ToString">
            <summary>
            Gets a System.String that represents the count of the DoubleArray Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleArray.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the object and adds the passed items at the end of this collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleArray.#ctor(VectorDraw.Geometry.DoubleArray)">
            <summary>
            Initializes a new instance of the object  and adds the passed items at the end of this collection..
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleArray.#ctor">
            <summary>
            Initializes the DoubleArray object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleArray.#ctor(System.Int32)">
            <summary>
            Initializes the DoubleArray object with a given capacity.
            </summary>
            <param name="capacity">An integer representing the preallocated memory size of the collection.</param>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleArray.RemoveLast">
            <summary>
            Removes the last object of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleArray.Add(System.Double)">
            <summary>
            Adds a double to the end of the collection.
            </summary>
            <param name="value">A double value to be added to the collection.</param>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleArray.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleArray.ChangeOrder(System.Double,System.Boolean)">
            <summary>
            Changes the position of a double object to the front or the end of the collection.
            </summary>
            <param name="Object">The double object.</param>
            <param name="ToBack">If true moves the object to the beginning of the collection.</param>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleArray.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleArray.EnsureCapacity(System.Int32)">
            <summary>
            Changes the capacity of the collection to the given value if the existing capacity is less than this value..
            </summary>
            <param name="min">A value representing the new capacity of the collection.</param>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleArray.Resize(System.Int32,System.Boolean,System.Double)">
            <summary>
            change the size of array.
            </summary>
            <param name="size">New size of collection</param>
            <param name="initialize">If it is true all items in the collection are initialized to their default value.</param>
            <param name="defaultValue">The default value set to new added elements is initialize is true</param>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleArray.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleArray.InsertAt(System.Int32,System.Double)">
            <summary>
            Insert an object at a specified index.
            </summary>
            <param name="index">The index where the object will be inserted.</param>
            <param name="Object">The object to be inserted.</param>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleArray.RemoveAt(System.Int32)">
            <summary>
            Removes an object from a specified index of the collection.
            </summary>
            <param name="index">The index of the object to be removed.</param>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleArray.RemoveItem(System.Double)">
            <summary>
            Removes a specified object from the list.
            </summary>
            <param name="Object">The object to be removed from the collection..</param>
            <returns>True if the object was removed and false if the object was not found.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleArray.Reverse">
            <summary>
            Changes the order of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleArray.AddRange(VectorDraw.Geometry.DoubleArray)">
            <summary>
            Adds the objects of one list to the end of this list.
            </summary>
            <param name="c">A vdArray collection to be added to this list.</param>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleArray.Clone">
            <summary>
            Makes a copy of the collection.
            </summary>
            <returns>A new created DoubleArray collection with all the objects of this collection copied.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleArray.getMinimunThanValue(System.Double)">
            <summary>
            Returns the  nearest-minimun value to the testvalue.
            </summary>
            <param name="testvalue">A value to be test.</param>
            <returns>Returns the  nearest-minimun value to the testvalue. </returns>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleArray.shortAscending">
            <summary>
            Shorts the collection's object with ascending order. 
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleArray.SetValue(System.Int32,System.Object)">
            <summary>
            Sets the passed value to the specified index of the collection.
            </summary>
            <param name="Index">A zero based index.</param>
            <param name="item">The value to set to the specified index.</param>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleArray.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the DoubleArray object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Geometry.DoubleArray.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the DoubleArray object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="P:VectorDraw.Geometry.DoubleArray.ArrayItems">
            <summary>
            Get the items of the collection in a returned array.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.DoubleArray.Count">
            <summary>
            Get the item's count of the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.DoubleArray.Item(System.Int32)">
            <summary>
            Get/Set the object at a specified index of the collection.
            </summary>
            <param name="index">The index of the object.</param>
            <returns>The object at the specified index.</returns>
        </member>
        <member name="M:vdgpcgeo.Poly.clear">
            Remove all of the points.  Creates an empty polygon.
        </member>
        <member name="M:vdgpcgeo.Poly.add(System.Double,System.Double)">
            Add a point to the first inner polygon.
        </member>
        <member name="M:vdgpcgeo.Poly.add(VectorDraw.Geometry.gPoint)">
            Add a point to the first inner polygon.
        </member>
        <member name="M:vdgpcgeo.Poly.add(vdgpcgeo.Poly)">
            Add an inner polygon to this polygon - assumes that adding polygon does not
            have any inner polygons.
        </member>
        <member name="M:vdgpcgeo.Poly.isEmpty">
            Return true if the polygon is empty
        </member>
        <member name="M:vdgpcgeo.Poly.getBounds">
            Returns the bounding rectangle of this polygon.
        </member>
        <member name="M:vdgpcgeo.Poly.getInnerPoly(System.Int32)">
            Returns the polygon at this index.
        </member>
        <member name="M:vdgpcgeo.Poly.getNumInnerPoly">
            Returns the number of inner polygons - inner polygons are assumed to return one here.
        </member>
        <member name="M:vdgpcgeo.Poly.getNumPoints">
            Return the number points of the first inner polygon
        </member>
        <member name="M:vdgpcgeo.Poly.getX(System.Int32)">
            Return the X value of the point at the index in the first inner polygon
        </member>
        <member name="M:vdgpcgeo.Poly.getY(System.Int32)">
            Return the Y value of the point at the index in the first inner polygon
        </member>
        <member name="M:vdgpcgeo.Poly.isHole">
             Return true if this polygon is a hole.  Holes are assumed to be inner polygons of
             a more complex polygon.
            
             @throws IllegalStateException if called on a complex polygon.
        </member>
        <member name="M:vdgpcgeo.Poly.setIsHole(System.Boolean)">
             Set whether or not this polygon is a hole.  Cannot be called on a complex polygon.
            
             @throws IllegalStateException if called on a complex polygon.
        </member>
        <member name="M:vdgpcgeo.Poly.isContributing(System.Int32)">
            Return true if the given inner polygon is contributing to the set operation.
            This method should NOT be used outside the Clip algorithm.
        </member>
        <member name="M:vdgpcgeo.Poly.setContributing(System.Int32,System.Boolean)">
            Set whether or not this inner polygon is constributing to the set operation.
            This method should NOT be used outside the Clip algorithm.
        </member>
        <member name="M:vdgpcgeo.Poly.intersection(vdgpcgeo.Poly)">
            Return a Poly that is the intersection of this polygon with the given polygon.
            The returned polygon could be complex.
        </member>
        <member name="M:vdgpcgeo.Poly.union(vdgpcgeo.Poly)">
            Return a Poly that is the union of this polygon with the given polygon.
            The returned polygon could be complex.
        </member>
        <member name="M:vdgpcgeo.Poly.xor(vdgpcgeo.Poly)">
            Return a Poly that is the exclusive-or of this polygon with the given polygon.
            The returned polygon could be complex.
        </member>
        <member name="M:vdgpcgeo.Poly.getArea">
            Return the area of the polygon in square units.
        </member>
        <member name="T:VectorDraw.Geometry.BoxTypeConverter">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.BoxTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.BoxTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.BoxTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.BoxTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Geometry.Box">
            <summary>
            Implements the Box object.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Box.EmptyBox">
            <summary>
            Represents a <see cref="T:VectorDraw.Geometry.Box"/> that is <see cref="F:VectorDraw.Geometry.Box.BoxType.Empty"/>.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Box.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Box.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Initializes the object with two points.
            </summary>
            <param name="_min">Lower left point of the box.</param>
            <param name="_max">Upper right point of the box.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Box.#ctor(VectorDraw.Geometry.Box)">
            <summary>
            Initializes the object with a given Box object.
            </summary>
            <param name="other">Another Box object.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Box.CopyFrom(VectorDraw.Geometry.Box)">
            <summary>
            Initializes the object with a given Box object.
            </summary>
            <param name="other">Another Box object.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Box.Empty">
            <summary>
            Set this box as empty.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Box.TogPoints">
            <summary>
            Returns a new <see cref="T:VectorDraw.Geometry.gPoints"/> contains the four corners of this 2D Box object. 
            Returns null in case of <see cref="P:VectorDraw.Geometry.Box.IsEmpty"/> or <see cref="P:VectorDraw.Geometry.Box.IsInfinity"/> are true.
            </summary>
            <remarks>This function ignores Z coordinate and the four points returned are defined by Left/Right in X coordinate and Top/Bottom in Y coordinate.</remarks>
        </member>
        <member name="M:VectorDraw.Geometry.Box.AddPoints(VectorDraw.Geometry.gPoints)">
            <summary>
            Adds the points of the passed gPoints collection to the box in order the box to contain all gPoints.
            </summary>
            <param name="pts">A collection of gPoints.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Box.AddPoint(VectorDraw.Geometry.gPoint)">
            <summary>
            Adds a gPoint to the box.
            </summary>
            <param name="pt">A gPoint object to be added to the box.</param>
            <remarks>If the box is empty then min and max point of the box will be equal to the passed point.If the box already contains min and max then this point changes these two points in order be contained from the box.</remarks>
        </member>
        <member name="M:VectorDraw.Geometry.Box.AddPoint(System.Double,System.Double,System.Double)">
            <summary>
            Adds a gPoint to the box.
            </summary>
            <param name="x">x coordinate of a Point to be added to the box.</param>
            <param name="y">y coordinate of a Point to be added to the box.</param>
            <param name="z">z coordinate of a Point to be added to the box.</param>
            <remarks>If the box is empty then min and max point of the box will be equal to the passed point.</remarks>
            <remarks>If the box already contains min and max then this point changes these two points in order be contained from the box.
            </remarks>
        </member>
        <member name="M:VectorDraw.Geometry.Box.AddBox(VectorDraw.Geometry.Box)">
            <summary>
            Adds the passed box to this box.
            </summary>
            <param name="box">Another box object.</param>
            <remarks>The min,max points of this box will be recalculated in order to contain the given box object.</remarks>
        </member>
        <member name="M:VectorDraw.Geometry.Box.ExpandBy(System.Double)">
            <summary>
            Adds the passed thickness to the box.
            </summary>
            <param name="thickness">The thickness value to be added to the z values of the min and max points of the box.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Box.AddWidth(System.Double)">
            <summary>
            Expands the box by adding two times the passed value to it's width.
            </summary>
            <param name="width">A double value indicating how much will the box expand.The min and max points of the box will change their x,y values by width.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Box.BoxInBox(VectorDraw.Geometry.Box)">
            <summary>
            Checks if a box is inside the Box.
            </summary>
            <param name="box">A <see cref="T:VectorDraw.Geometry.Box"/> object.</param>
            <returns>True if the parameter box is inside the Box.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Box.PointInBox3D(VectorDraw.Geometry.gPoint)">
            <summary>
            Checks if a point is inside a Box.
            </summary>
            <param name="pt">The point in World Coordinate System(WCS).</param>
            <returns>True if the point is inside the box.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Box.CheckLineBox(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Checks if a line intersects with a box.
            </summary>
            <param name="L1">First point of line</param>
            <param name="L2">Second point of line</param>
            <returns>returns true if line (L1, L2) intersects with the box</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Box.PointInBox(VectorDraw.Geometry.gPoint)">
            <summary>
            Checks if a point is inside a Box.
            </summary>
            <param name="pt">The point in World Coordinate System(WCS).</param>
            <returns>True if the point is inside the box.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Box.GetTransformRectangle(VectorDraw.Geometry.Matrix)">
            <summary>
            Tranforms the Box into a Rectangle object with screen pixels coordinates.
            </summary>
            <param name="xform">The Matrix used for the tranformation.</param>
            <returns>Returns a Rectangle object representing the location of the Box on the screen.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Box.GetPoints">
            <summary>
            Get the points of this box.
            </summary>
            <returns>A collection of points of this Box.</returns>
            <remarks><para>Returns empty array in case of <see cref="P:VectorDraw.Geometry.Box.IsEmpty"/> or <see cref="P:VectorDraw.Geometry.Box.IsInfinity"/> are true.</para>
            <para>If <seealso cref="P:VectorDraw.Geometry.Box.Thickness">Thickness</seealso> is zero then four points are returned instead of eight points/&gt;</para>
            </remarks>
        </member>
        <member name="M:VectorDraw.Geometry.Box.TransformBy(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms the box with the given Matrix.
            </summary>
            <param name="xform">A Matrix object required for the transformation.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Box.Offset(System.Double,System.Double,System.Double)">
            <summary>
            Adds to both min and max points of the box the passed values.
            </summary>
            <param name="x">x value to be added.</param>
            <param name="y">y value to be added.</param>
            <param name="z">z value to be added.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Box.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the Box object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Geometry.Box.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the Box object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Geometry.Box.FromString(System.String)">
            <summary>
            Parses a ToString() string value and fills the boxes points with their values.
            </summary>
            <param name="str">A string value with the ToString format.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Box.ToString(System.String)">
            <summary>
            Gets a System.String that represents the min and the max of the Box Object using the format parameter for visualization.
            </summary>
            <param name="format">A parameter used to specify the format the coordinates should be displayed.</param>
            <returns>A string representing the min and the max of the Box Object.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Box.ToString">
            <summary>
            Gets a System.String that represents the min and the max of the Box Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Box.ToString(VectorDraw.Serialize.Serializer)">
            <summary>
            Gets a System.String that represents the min and the max of the Box Object.
            </summary>
            <param name="serializer">the Serializer object where the object is going to be saved.</param>
            <returns></returns>
        </member>
        <member name="P:VectorDraw.Geometry.Box.IsCalculated">
            <summary>
             Get/Set a boolean value representing if the box has been calculated independent if it is empty.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Box.AlignToView">
            <summary>
            A boolean value that defines if the plane of the object is relative to the current view.
            </summary>
            <remarks>Default value is False.</remarks>
        </member>
        <member name="P:VectorDraw.Geometry.Box.IsNaN">
            <summary>
            Returns a boolean value indicating whether any of the x,y,z values of the box points 
            evaluates to a value that is not a number (System.Double.NaN).
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Box.UpperLeft">
            <summary>
            Get the upper left point of the box in minimum z value.
            </summary>
            <remarks>Note that a newlly created point is returned.</remarks>
        </member>
        <member name="P:VectorDraw.Geometry.Box.LowerRight">
            <summary>
            Get the lower right point of the box in minimum z value.
            </summary>
            <remarks>Note that a newlly created point is returned.</remarks>
        </member>
        <member name="P:VectorDraw.Geometry.Box.Min">
            <summary>
            Get the lower left point of the box.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Box.Max">
            <summary>
            Get the upper right point of the box.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Box.Width">
            <summary>
            Get the width of the box object.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Box.Height">
            <summary>
            Get the height of the box.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Box.Left">
            <summary>
            Get the minimum x value of the box. Returns the x value of the lower left point of the box.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Box.Right">
            <summary>
            Get the maximum x of the box.Returns the x value of the upper right point of the box.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Box.Top">
            <summary>
            Get the maximum y value of the box.Returns the y value of the upper right point of the box.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Box.Bottom">
            <summary>
            Get the minimum y value of the box.Returns the y value of the lower left point of the box.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Box.ZMin">
            <summary>
            Get the minimum z value of the box.Returns the z value of the lower left point of the box.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Box.ZMax">
            <summary>
            Get the maximum z value of the box. Returns the z value of the upper right point of the box.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Box.Thickness">
            <summary>
            Get the thickness of the box.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Box.MidPoint">
            <summary>
            Get the center of the box.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Box.IsNormal">
            <summary>
            A Box is Normal when it contains more than one point.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Box.IsInfinity">
            <summary>
            The box has not extends(infinitive).
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Box.IsEmpty">
            <summary>
            Get/Set a boolean value representing if the box is empty. An empty box has height and width 0.0.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.QuadraticSegment">
            A cubic Bezier curve may be viewed as: 
        </member>
        <member name="T:VectorDraw.Geometry.Offset.OffsetLines">
            <summary>
            Implements offset geometry methods.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Offset.OffsetLines.PointOnLine(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Double)">
            <summary>
            2d check if point is between end points of line
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="pt"></param>
            <param name="equality"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.Offset.OffsetLines.IntersectionLL2D(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the intersection point between two lines that belong to the same plane(z values of the lines are equal).
            </summary>
            <param name="p1">First point of the first line.</param>
            <param name="p2">Second point of the first line.</param>
            <param name="p3">First point of the second line.</param>
            <param name="p4">Second point of the second line.</param>
            <param name="retpt">Returned intersection point if exist.</param>
            <returns>0 or 1 depending how many intersection points found.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Offset.OffsetLines.getOffsetLines(VectorDraw.Geometry.gPoints,System.Double)">
            <summary>
            Calculates the offset polylines of an polyline object with out bulges.
            </summary>
            <param name="verts">The collection of vertexes of the base polyline.Bulges are ignored.</param>
            <param name="offset">The distance to offset.</param>
            <returns>A collection of objects as the result of the offset commited.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Offset.OffsetLines.test(System.String,System.Object)">
            <summary>
            Internaly used for test purposes
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.GPS">
            <summary>
            A static class that export methods that manage Global Positioning System (GPS) Geographical coordinates transformations
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.GPS.GPS_POSITION">
            <summary>
            An object that contains Geographical coordinates values for Latitude and Longitude.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.GPS.GPS_POSITION.#ctor">
            <summary>
            Create a new object with default properties
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.GPS.GPS_POSITION.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new object from the passed latitude and longitude values in decimal degrees
            </summary>
            <param name="latitude">in decimal degrees</param>
            <param name="longitude">in decimal degrees</param>
        </member>
        <member name="M:VectorDraw.Geometry.GPS.GPS_POSITION.#ctor(System.String)">
            <summary>
            Creates an object from a string in the form 'latitude,longitude' passed  in decimal degrees
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.GPS.GPS_POSITION.ToString(System.String)">
            <summary>
            Gets a System.String that represents the <see cref="P:VectorDraw.Geometry.GPS.GPS_POSITION.Latitude"/> and <see cref="P:VectorDraw.Geometry.GPS.GPS_POSITION.Longitude"/> using the format parameter for visualization.
            </summary>
            <param name="format">A parameter used to specify the format the coordinates should be displayed.</param>
            <returns>A string representing the the <see cref="P:VectorDraw.Geometry.GPS.GPS_POSITION.Latitude"/> and <see cref="P:VectorDraw.Geometry.GPS.GPS_POSITION.Longitude"/> of the object.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GPS.GPS_POSITION.ToString">
            <summary>
            Gets a System.String that represents  the <see cref="P:VectorDraw.Geometry.GPS.GPS_POSITION.Latitude"/> and <see cref="P:VectorDraw.Geometry.GPS.GPS_POSITION.Longitude"/> using 8 decimal precision.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.GPS.GPS_POSITION.FromString(System.String)">
            <summary>
            Sets the property values of the object from a given string.
            </summary>
            <param name="str">A string representing the object.</param>
        </member>
        <member name="M:VectorDraw.Geometry.GPS.GPS_POSITION.ToString(VectorDraw.Serialize.Serializer)">
            <summary>
            Sets the object's properties using a ToString string, according to the Serializer precision
            </summary>
            <param name="serializer">the Serializer object where the object is going to be saved.</param>
            <returns></returns>
        </member>
        <member name="P:VectorDraw.Geometry.GPS.GPS_POSITION.Latitude">
            <summary>
            Returns Latitude in decimal degrees and in range between -90 to 90 degrees.Negative values are in the South relative to the Equator and positive are on the North
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.GPS.GPS_POSITION.Longitude">
            <summary>
            Returns Longitude in decimal degrees and in range between -180 to 180 degrees.Negative values are in the West relative to the Greenwich meridian and positive are on the East
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.GPS.GPS_MAP">
            <summary>
            A class that hold properties used for conversion between  Global Positioning System (GPS) Geographical coordinates and World CS Drawing Units
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.GPS.GPS_MAP.#ctor">
            <summary>
            create a new <see cref="T:VectorDraw.Geometry.GPS.GPS_MAP"/> object type with default properties.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.GPS.GPS_MAP.#ctor(System.String,VectorDraw.Geometry.GPS.GPS_POSITION,VectorDraw.Geometry.GPS.GPS_POSITION,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Create a new <see cref="T:VectorDraw.Geometry.GPS.GPS_MAP"/> that will be used from a drawing to make conversion between  Global Positioning System (GPS) Geographical coordinates and Drawing Units
            </summary>
            <param name="ellipsoid">A string that represents a Well-known Projected Coordinate Systems as is description in 'https://developers.arcgis.com/javascript/3/jshelp/pcs.html' </param>
            <param name="g1">Position 1 with  Latitude and Longitude in decimal degrees usually near to lower left of the map</param>
            <param name="g2">Position 2 with  Latitude and Longitude in decimal degrees  usually near to upper right of the map</param>
            <param name="p1">X,Y coordinate in World Coordinate system of the drawing exactly over the passed g1 position</param>
            <param name="p2">X,Y coordinate in World Coordinate system of the drawing exactly over the passed g2 position</param>
        </member>
        <member name="M:VectorDraw.Geometry.GPS.GPS_MAP.Init(System.String,VectorDraw.Geometry.GPS.GPS_POSITION,VectorDraw.Geometry.GPS.GPS_POSITION,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Initialize this object with new properties that will be used from a drawing to make conversion between  Global Positioning System (GPS) Geographical coordinates and Drawing Units
            </summary>
            <param name="ellipsoid">A string that represents a Well-known Projected Coordinate Systems as is description in 'https://developers.arcgis.com/javascript/3/jshelp/pcs.html' </param>
            <param name="g1">Position 1 with  Latitude and Longitude in decimal degrees usually near to lower left of the map</param>
            <param name="g2">Position 2 with  Latitude and Longitude in decimal degrees  usually near to upper right of the map</param>
            <param name="p1">X,Y coordinate in World Coordinate system of the drawing exactly over the passed g1 position</param>
            <param name="p2">X,Y coordinate in World Coordinate system of the drawing exactly over the passed g2 position</param>
        </member>
        <member name="M:VectorDraw.Geometry.GPS.GPS_MAP.Clone(System.Boolean)">
            <summary>
            Returns a clone of this object 
            </summary>
            <param name="ellipsoid">Set it to true in order WGS84 ellipsoid to be used for conversions , and false in case the Spherical mathematics to be used for conversions</param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.GPS.GPS_MAP.GPS_AtPoint(VectorDraw.Geometry.gPoint)">
            <summary>
            Returns a <see cref="T:VectorDraw.Geometry.GPS.GPS_POSITION"/> from the passed Drawing World Coordinate units.
            </summary>
            <param name="pt">In Drawing World Coordinate System.</param>
        </member>
        <member name="M:VectorDraw.Geometry.GPS.GPS_MAP.PointAt_GPS(VectorDraw.Geometry.GPS.GPS_POSITION)">
            <summary>
            Returns a <see cref="T:VectorDraw.Geometry.gPoint"/> in Drawing World Coordinate System from the passed <see cref="T:VectorDraw.Geometry.GPS.GPS_POSITION"/>  (Latitude and Longitude)
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.GPS.GPS_MAP.GetPolar(VectorDraw.Geometry.GPS.GPS_POSITION,VectorDraw.Geometry.GPS.GPS_POSITION)">
            <summary>
            Calculate the Distance in meters and Azimuth in decimal degrees in clockwise from north direction, from the 2 passed <see cref="T:VectorDraw.Geometry.GPS.GPS_POSITION"/> objects
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.GPS.GPS_MAP.CreateMatrixTransformation(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.GPS.GPS_POSITION,VectorDraw.Geometry.GPS.GPS_POSITION)">
            <summary>
            Used to map an image on the drawing compatible with this Global Positioning System (GPS) Geographical coordinates
            </summary>
            <param name="p1">Position 1 in Drawing World Coordinate System usually near to lower left of the image</param>
            <param name="p2">Position 2 in Drawing World Coordinate System usually near to upper right of the image</param>
            <param name="gp1">the Latitude and Longitude in decimal degrees of Position 1</param>
            <param name="gp2">the Latitude and Longitude in decimal degrees of Position 2</param>
            <returns>The <see cref="T:VectorDraw.Geometry.Matrix"/> that image must be transformed in order to be compatible with this Global Positioning System (GPS) Geographical coordinates</returns>
        </member>
        <member name="M:VectorDraw.Geometry.GPS.GPS_MAP.FromString(System.String)">
            <summary>
            Sets the property values of the object from a given string.
            </summary>
            <param name="str">A string representing the object.</param>
        </member>
        <member name="M:VectorDraw.Geometry.GPS.GPS_MAP.ToString">
            <summary>
            Gets a System.String that represents the properties of this Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.GPS.GPS_MAP.ToString(VectorDraw.Serialize.Serializer)">
            <summary>
            Sets the object's properties using a ToString string, according to the Serializer precision
            </summary>
            <param name="serializer">the Serializer object where the object is going to be saved.</param>
            <returns></returns>
        </member>
        <member name="P:VectorDraw.Geometry.GPS.GPS_MAP.NorthEastToWorld">
            <summary>
            Returns the matrix that used to tranform a point from Global world Northing Easting to Drawing World Coordinate System.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.GPS.GPS_MAP.ProjectionString">
            <summary>
            Returns the Well-known Projected Coordinate Systems string passed in the object constructor and usually used in pdf export.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.GPS.Receiver">
            <summary>
            Represents a serial port resource used to receive the GPS data
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.GPS.Receiver.Start(System.String,System.Int32)">
            <summary>
            Opens this port and starts data receiving
            </summary>
            <param name="portname">A valid port name that gps receiver is connected to.</param>
            <param name="timeinterval">Defines the interval time in milliseconds that the data will be read from the port</param>
        </member>
        <member name="M:VectorDraw.Geometry.GPS.Receiver.Stop">
            <summary>
            Closes this port that previously open with <see cref="M:VectorDraw.Geometry.GPS.Receiver.Start(System.String,System.Int32)"/>
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.GPS.Receiver.ToString">
            <summary>
            Gets a System.String that represents the object properties.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.GPS.Receiver.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or
                resetting unmanaged resources.If this port is started, stops and close the port
            </summary>
        </member>
        <member name="E:VectorDraw.Geometry.GPS.Receiver.OnPositionChanged">
            <summary>
            Fired when the <see cref="P:VectorDraw.Geometry.GPS.Receiver.Position"/> changed
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.GPS.Receiver.IsOpen">
            <summary>
            Returns true if this port is open ready to read data <seealso cref="M:VectorDraw.Geometry.GPS.Receiver.Start(System.String,System.Int32)"/>
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.GPS.Receiver.ValidFields">
            <summary>
            Returns the <see cref="T:VectorDraw.Geometry.GPS.Receiver.GPS_VALIDFIELDS"/> that was read since the <see cref="M:VectorDraw.Geometry.GPS.Receiver.Start(System.String,System.Int32)"/> method is called
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.GPS.Receiver.IsDataReceived">
            <summary>
            Returns true if valid GPS data was received at least once.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.GPS.Receiver.UTCTime">
            <summary>
            Returns the last time was received from the data in the Coordinated Universal Time Zone
            </summary>
            <remarks>The <see cref="P:VectorDraw.Geometry.GPS.Receiver.ValidFields"/> must contains the <see cref="F:VectorDraw.Geometry.GPS.Receiver.GPS_VALIDFIELDS.GPS_VALID_UTC_TIME"/> in order this property to be valid.</remarks>
        </member>
        <member name="P:VectorDraw.Geometry.GPS.Receiver.Position">
            <summary>
            Returns the last GPS position was received from the port data
            </summary>
            <remarks>The <see cref="P:VectorDraw.Geometry.GPS.Receiver.ValidFields"/> must contains the <see cref="F:VectorDraw.Geometry.GPS.Receiver.GPS_VALIDFIELDS.GPS_VALID_POSITION"/> in order this property to be valid.</remarks>
        </member>
        <member name="P:VectorDraw.Geometry.GPS.Receiver.Speed">
            <summary>
            Returns the last speed in knots was received from the port data
            </summary>
            <remarks>The <see cref="P:VectorDraw.Geometry.GPS.Receiver.ValidFields"/> must contains the <see cref="F:VectorDraw.Geometry.GPS.Receiver.GPS_VALIDFIELDS.GPS_VALID_SPEED"/> in order this property to be valid.</remarks>
        </member>
        <member name="P:VectorDraw.Geometry.GPS.Receiver.Heading">
            <summary>
            Returns the last Heading in decimal degrees that was received from the port data
            </summary>
            <remarks>The <see cref="P:VectorDraw.Geometry.GPS.Receiver.ValidFields"/> must contains the <see cref="F:VectorDraw.Geometry.GPS.Receiver.GPS_VALIDFIELDS.GPS_VALID_HEADING"/> in order this property to be valid.</remarks>
        </member>
        <member name="T:VectorDraw.Geometry.GPS.Receiver.PositionChangedDelegate">
            <summary>
             Represents the method that will handle the <see cref="E:VectorDraw.Geometry.GPS.Receiver.OnPositionChanged"/> event
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.GPS.Receiver.GPS_VALIDFIELDS">
            <summary>
            Defines the valid data type read by this port
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.GPS.Receiver.GPS_VALIDFIELDS.GPS_VALID_NONE">
            <summary>
            No valid data was read.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.GPS.Receiver.GPS_VALIDFIELDS.GPS_VALID_UTC_TIME">
            <summary>
            A valid time in UTC was read
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.GPS.Receiver.GPS_VALIDFIELDS.GPS_VALID_POSITION">
            <summary>
            A valid position (Latitude,Longitude) was read.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.GPS.Receiver.GPS_VALIDFIELDS.GPS_VALID_SPEED">
            <summary>
            A valid speed was read.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.GPS.Receiver.GPS_VALIDFIELDS.GPS_VALID_HEADING">
            <summary>
            A valid heading was read.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.Quaternion">
            <summary>
            Implements a Quaternion object used in geometrical calculations.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Quaternion.Identity">
            <summary>
            A unit quaternion values equal to 0,0,0,1.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Quaternion.ToString">
            <summary>
            Gets a System.String that represents the x,y,z,w values of the Quaternion Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Quaternion.IsUnitQuaternion">
            <summary>
            Checks if this object is equal to the Identity quaternion(0,0,0,1).
            </summary>
            <returns>True of this object is equal to the unit quaternion.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Quaternion.AreEqual(VectorDraw.Geometry.Quaternion,VectorDraw.Geometry.Quaternion,System.Double)">
            <summary>
            Checks if the two passed objects are equal(have equal ale their values) taking into consideration the equality value.
            </summary>
            <param name="q1">First quaternion object needed.</param>
            <param name="q2">Second quaternion object needed.</param>
            <param name="equality">A double value representing the equality(for example 0.000001).</param>
            <returns>True if the object's values are equal.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Quaternion.Multiply(VectorDraw.Geometry.Quaternion,VectorDraw.Geometry.Quaternion)">
            <summary>
            Multiplies the two passed quaternions.
            </summary>
            <param name="q1">First quaternion object needed.</param>
            <param name="q2">Second quaternion object needed.</param>
            <returns>A quaternion object as a result of the multiplication of the two passed quaternions.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Quaternion.CopyFrom(VectorDraw.Geometry.Quaternion)">
            <summary>
            Copies the x,y,z,w values from the passed object to this object.
            </summary>
            <param name="q">A quaternion object from which the values will be taken.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Quaternion.#ctor(VectorDraw.Geometry.Quaternion)">
            <summary>
            Initializes the object with the passed object's values.
            </summary>
            <param name="q">Another quaternion object from which the values will be taken.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Quaternion.#ctor(VectorDraw.Geometry.Vector,VectorDraw.Geometry.Vector)">
            <summary>
            Initialize the object as the diff between two axis
            </summary>
            <param name="pvFrom">Reference Axis</param>
            <param name="pvTo">Axis that moves to</param>
        </member>
        <member name="M:VectorDraw.Geometry.Quaternion.#ctor(VectorDraw.Geometry.Vector,System.Double)">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="v">A Vector object representing the dierection of the quaternion.</param>
            <param name="angle">A double value representing the angle of the quaternion.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Quaternion.mult(VectorDraw.Geometry.Quaternion)">
            <summary>
            Multiplies this quaternion with  passed parameter.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Quaternion.InitializeFrom(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initialize a new object from passed parameters
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Quaternion.InitializeFrom(VectorDraw.Geometry.Vector,System.Double)">
            <summary>
            Initialize a new object from passed parameters
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Quaternion.InitializeFrom(VectorDraw.Geometry.Matrix)">
            <summary>
            Initialize a new object from passed parameters
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Quaternion.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes the object with the passed parameters.
            </summary>
            <param name="_x">X value of the quaternion.</param>
            <param name="_y">Y value of the quaternion.</param>
            <param name="_z">Z value of the quaternion.</param>
            <param name="_w">W value of the quaternion.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Quaternion.#ctor">
            <summary>
            Initializes a 0,0,0,1 unit quaternion.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Quaternion.Invert">
            <summary>
            Inverts the quaternion object( multiply x,y,z values with -1).
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Quaternion.getAxisAngle(VectorDraw.Geometry.Matrix,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Calculates the x,y,z and the angle values from a given Matrix object.
            </summary>
            <param name="m">A Matrix object required.</param>
            <param name="angle">A reference double value where the angle is going to be returned.</param>
            <param name="x">A reference double value where the x value is going to be returned.</param>
            <param name="y">A reference double value where the y value is going to be returned.</param>
            <param name="z">A reference double value where the z value is going to be returned.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Quaternion.getRotations">
            assumes q1 is a normalised quaternion 
        </member>
        <member name="M:VectorDraw.Geometry.Quaternion.#ctor(VectorDraw.Geometry.Matrix)">
            <summary>
            Initializes the quaternion object with the passed matrix object.
            </summary>
            <param name="mat">A Matrix object required.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Quaternion.Magnitude">
            <summary>
            Calculates the Magnitude of the quaternion(x²+y²+z²+w²).
            </summary>
            <returns>A double value representing the magnitude of the quaternion.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Quaternion.Normalize">
            <summary>
            Normalizes the quaternion so it's length is equal to 1.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Quaternion.getAxis_Angle(VectorDraw.Geometry.Vector@)">
            <summary>
            Get the axis angleof this quaternion.
            </summary>
            <param name="v">A reference Vector object where is going to be returned the calculated Vector.</param>
            <returns>A double value representing the calculated angle in radians.</returns>
        </member>
        <member name="P:VectorDraw.Geometry.Quaternion.x">
            <summary>
            x value of the quaternion
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Quaternion.y">
            <summary>
            y value of the quaternion
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Quaternion.z">
            <summary>
            z value of the quaternion
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Quaternion.w">
            <summary>
            w value of the quaternion
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.MatrixProperties">
            <summary>
            Implements the MatrixProperties object which calculates geometrical properties for a Matrix object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.MatrixProperties.#ctor(VectorDraw.Geometry.Matrix)">
            <summary>
            Initializes the object with the passed parameter.
            </summary>
            <param name="mat">A Matrix object from which the properties will be copied.</param>
        </member>
        <member name="M:VectorDraw.Geometry.MatrixProperties.GetScaleXY">
            <summary>
            If x and y scale are equal then returns this value else returns scale 1.0.
            </summary>
            <returns>1.0 or a value that is equal to x,y scale values.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.MatrixProperties.isMirrorAngles">
            <summary>
            Returns true if the angle defined from X axis to to Y axis of the selected matrix is in clock-wise direction
            </summary>
            <returns>True if the angle defined from X axis to to Y axis of the selected matrix is in clock-wise direction.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.MatrixProperties.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.MatrixProperties.getRotationsRadians(VectorDraw.Geometry.Matrix,System.Double@,System.Double@,System.Double@)">
            <summary>
            Calculates the rotations from a given matrix.
            </summary>
            <param name="matrix">The Matrix object needed.</param>
            <param name="xrot">A reference double object where the x rotation is going to be returned in radians.</param>
            <param name="yrot">A reference double object where the y rotation is going to be returned in radians.</param>
            <param name="zrot">A reference double object where the z rotation is going to be returned in radians.</param>
            <returns>True if the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.MatrixProperties.getRotations(VectorDraw.Geometry.Matrix,System.Double@,System.Double@,System.Double@)">
            <summary>
            Returns the rotations of the x,y and z axis in degrees from a given Matrix.
            </summary>
            <param name="matrix">The Matrix object required.</param>
            <param name="xrot">A reference double object where the x rotation is going to be returned in degrees.</param>
            <param name="yrot">A reference double object where the y rotation is going to be returned in degrees.</param>
            <param name="zrot">A reference double object where the z rotation is going to be returned in degrees.</param>
            <returns>True if the operation was succesfull.</returns>
        </member>
        <member name="P:VectorDraw.Geometry.MatrixProperties.Zdir">
            <summary>
            Get a Vector which is perpedicular to the Matrix x,y plane(z axis).
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.MatrixProperties.Offset">
            <summary>
            Get the origin of the Matrix.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.MatrixProperties.Zangle">
            <summary>
            Get the angle in the x,y plane in radians in clockwise direction.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.MatrixProperties.Scales">
            <summary>
            Get the x,y,z scales of the matrix.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.MatrixProperties.ShearX">
            <summary>
            The horizontal shear factor.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.MatrixProperties.ShearY">
            <summary>
            The Vertical shear factor.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.Matrix">
            <summary>
            Implements the MAtrix object used in geometrical calculations.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.#ctor(VectorDraw.Geometry.Quaternion)">
            <summary>
            Initializes the Matrix object from the passed quaternion.
            </summary>
            <param name="q">The required quaternion object.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.#ctor">
            <summary>
            Initializes the Matrix object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.#ctor(VectorDraw.Geometry.Matrix)">
            <summary>
            Initializes the Matrix object from the given object.
            </summary>
            <param name="m">Another Matrix object required.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.op_Multiply(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.Matrix)">
            <summary>
            Implements the * operator for two Matrix objects.
            </summary>
            <param name="m1"></param>
            <param name="m2"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.GetWorldToViewProperties(VectorDraw.Geometry.Vector@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Returns the View Direction and the Angles that define this Matrix.
            </summary>
            <param name="direction">A Vector defines the camera point offset from the target point.</param>
            <param name="azimouth">Watching angle on XY plane relative to X axis in radians in clockwise direction.</param>
            <param name="tilt">Vertical watching angle relative to XY plane in radians.</param>
            <param name="twist">Rotation of the created matrix from azimouth and tilt , about Z in radians in clockwise direction.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.SetLookAt(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Double)">
            <summary>
            Defines a viewing transformation
            </summary>
            <param name="eyePosition">A point that represent the position of the camera.</param>
            <param name="TagetPoint">A point that represent the target point.This will be the center of scene.</param>
            <param name="twistAngle">An angle in radians that represent the rotation of the scene around the direction that defined from eyePosition to  TagetPoint in clockwise direction.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.SetToViewDirection(VectorDraw.Geometry.Vector,System.Double)">
            <summary>
            Modify this Matrix using the view direction vector.
            </summary>
            <param name="Direction">A Vector defines the camera point offset from the target point.</param>
            <param name="twist">Rotation of the created matrix from Direction , about Z in radians in clockwise direction.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.SetToViewAngles(System.Double,System.Double,System.Double)">
            <summary>
            Modify this Matrix using azimouth, tilt  and twist angles that specify the view direction relative to World Coordinate System.
            </summary>
            <param name="azimouth">Watching angle on XY plane relative to X axis in radians in clockwise direction.</param>
            <param name="tilt">Vertical watching angle relative to XY plane in radians.</param>
            <param name="twist">Rotation of the created matrix from azimouth and tilt , about Z in radians in clockwise direction.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.Clone">
            <summary>
            Create a new Matrix object as clone of this one.
            </summary>
            <returns>A new created Matrix object as clone to this one.</returns>
        </member>
        <member name="F:VectorDraw.Geometry.Matrix.Identity">
            <summary>
            Initializes and returns a new Matrix object(with the main diagonal values 1.0 and the rest 0.0).
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.CopyFrom(VectorDraw.Geometry.Matrix)">
            <summary>
            Copies all items from the passed Matrix object to this.
            </summary>
            <param name="m">A Matrix object from which the items will be copied.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.OneUnitDY">
            <summary>
            Get the y scale value of the matrix.
            </summary>
            <returns>The y scale value of the matrix.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.As2dMatrix">
            <summary>
            Converts the Matrix into a double array representation.
            </summary>
            <returns>A 2D double array containing the Matrixe's information.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.GetSystemMatrix">
            <summary>
            Converts this Matrix into a 2d System.Drawing.Drawing2D.Matrix object.
            </summary>
            <returns>A 2d System.Drawing.Drawing2D.Matrix object that represents this matrix.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.IdentityMatrix">
            <summary>
            Initializes this Matrix object as identity(A matrix with the main diagonal items equal to 1 and the rest 0).
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.GetInvertion">
            <summary>
            Get the invertion of this Matrix object.
            </summary>
            <returns>Creates and returns the invertion of this Matrix object.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.Shear(System.Double,System.Double)">
            <summary>
            Applies the passed Shear x and Shear y values to this Matrix.
            </summary>
            <param name="Sx">Shear x factor.</param>
            <param name="Sy">Shear y factor.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.ScaleMatrix(System.Double,System.Double,System.Double)">
            <summary>
            Applies the passed x,y,z scale values to this Matrix.
            </summary>
            <param name="a">X scale factor of the Matrix.</param>
            <param name="b">Y scale factor of the Matrix.</param>
            <param name="c">Z scale factor of the Matrix.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.RotateAboutAxis(VectorDraw.Geometry.Vector,System.Double)">
            <summary>
            Rotate the Matrix by the passed angle in radians around a Vector direction.
            </summary>
            <param name="axis">A Vector that will be the axis of rotation. </param>
            <param name="rotation">A double value representing the angle in radians.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.RotateXMatrix(System.Double)">
            <summary>
            Rotate the Matrix by the passed angle in radians at the x direction.
            </summary>
            <param name="rads">A double value representing the angle in radians.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.RotateYMatrix(System.Double)">
            <summary>
            Rotate the Matrix by the passed angle in radians at the y direction.
            </summary>
            <param name="rads">A double value representing the angle in radians.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.RotateZMatrix(System.Double)">
            <summary>
            Rotate the Matrix by the passed angle in radians at the z direction.
            </summary>
            <param name="rads">A double value representing the angle in radians.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.TranslateMatrix(VectorDraw.Geometry.gPoint)">
            <summary>
            Translates the Matrix with the passed gPoint.
            </summary>
            <param name="pt">A gPoint object to translate the Matrix with.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.TranslateMatrix(System.Double,System.Double,System.Double)">
            <summary>
            Translates the Matrix using the dx,dy and dz passed values.
            </summary>
            <param name="dx">Distance at the x direction.</param>
            <param name="dy">Distance at the y direction.</param>
            <param name="dz">Distance at the z direction.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.TransformPt(VectorDraw.Geometry.gPoint,System.Double,VectorDraw.Geometry.gPoint)">
            <summary>
            Tranforms the passed point with this Matrix and returns the result to the v reference point. 
            </summary>
            <param name="pt">The point to be tranformed.</param>
            <param name="thickness">The thickness to apply.</param>
            <param name="v">A reference gPoint object where the calculated point is going to be returned.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.TransformPt2d(VectorDraw.Geometry.gPoint,System.Double,VectorDraw.Geometry.gPoint)">
            <summary>
            Tranforms the passed point with this Matrix and returns the result to the v reference point. 
            </summary>
            <param name="pt">The point to be tranformed.</param>
            <param name="thickness">The thickness to apply.</param>
            <param name="v">A reference gPoint object where the calculated point is going to be returned.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.TransformRefPt(VectorDraw.Geometry.gPoint@)">
            <summary>
            Tranforms the passed reference point with this Matrix. 
            </summary>
            <param name="pt">The point to be tranformed.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.TransformPt(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Tranforms the passed point with this Matrix and returns the result to the v reference point. 
            </summary>
            <param name="pt">The point to be tranformed.</param>
            <param name="v">A reference gPoint object where the calculated point is going to be returned.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.TransformPt2d(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Tranforms the passed point with this Matrix and returns the result to the v reference point. 
            </summary>
            <param name="pt">The point to be tranformed.</param>
            <param name="v">A reference gPoint object where the calculated point is going to be returned.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.Transform(VectorDraw.Geometry.Vertexes)">
            <summary>
            Transforms all Vertexes of the passed collection with this Matrix.
            </summary>
            <param name="pts">A collection of Vertexes to be transformed.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.Transform(VectorDraw.Geometry.Vertexes,System.Boolean)">
            <summary>
            Transforms all Vertexes of the passed collection with this Matrix.
            </summary>
            <param name="pts">A collection of Vertexes to be transformed.</param>
            <param name="CheckMirror">Set it to true in order to check is the matrix is mirroring so the bulges will change their sign after transformation. </param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.Transform(System.Drawing.PointF[])">
            <summary>
            Transforms all points of the passed array with this Matrix.
            </summary>
            <param name="pts">An array of points to be transformed.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.Transform(VectorDraw.Geometry.Vertex)">
            <summary>
            Tranforms the passed Vertex with the Matrix.
            </summary>
            <param name="pt">A Vertex object to be transformed.</param>
            <returns>A new created Vertex object.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.Transform(System.Double,System.Double,System.Double)">
            <summary>
            Creates a point from the x,y,z parameters and transforms it with this Matrix.
            </summary>
            <param name="x">x value of the point.</param>
            <param name="y">y value of the point.</param>
            <param name="z">z value of the point.</param>
            <returns>A new transformed gPoint.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.Transform(VectorDraw.Geometry.gPoint)">
            <summary>
            Transforms the passed point with this matrix.
            </summary>
            <param name="pt">A gPoint object to be transformed.</param>
            <returns>A new transformed gPoint object.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.TestOffsetSide(VectorDraw.Geometry.gPoint)">
            <summary>
            Get the offset side of a passed point relative to this plane.
            </summary>
            <param name="pt"></param>
            <returns>The offset side of a passed point relative to this plane.</returns>
            <remarks>Returns 0.0 if the point lies on the plane.Values are positive for one side and negative for the other side.</remarks>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.Transform2GDIPoint(VectorDraw.Geometry.gPoint)">
            <summary>
            Tranforms the passed gPoint to screen pixels coordinates.
            </summary>
            <param name="pt">A gPoint object to be tranformed.</param>
            <returns>Returns a Point object representing the passed point's location on the screen.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.projectTransform(System.Double,System.Double,System.Double)">
            <summary>
            Creates a point from the x,y,z parameters and transforms it with this Matrix.
            Use projectTransform instead of Transform if this Matrix might be perspective.
            </summary>
            <param name="x">x value of the point.</param>
            <param name="y">y value of the point.</param>
            <param name="z">z value of the point.</param>
            <returns>A new transformed gPoint.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.projectTransform_ref(System.Double,System.Double,System.Double,VectorDraw.Geometry.gPoint@)">
            <summary>
            Creates a point from the x,y,z parameters and transforms it with this Matrix.
            </summary>
            <param name="x">x value of the point.</param>
            <param name="y">y value of the point.</param>
            <param name="z">z value of the point.</param>
            <param name="ret">The transformed gPoint.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.projectTransform(VectorDraw.Geometry.gPoint)">
            <summary>
            Transforms the passed point with this matrix.
            Use projectTransform instead of Transform if this Matrix might be perspective.
            </summary>
            <param name="pt">A gPoint object to be transformed.</param>
            <returns>A new transformed gPoint object.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.gPoints2GDIPOINTArray(VectorDraw.Geometry.gPoints)">
            <summary>
            Transforms the passed gPoint collection to screen pixels coordinates points collection.
            </summary>
            <param name="pts">A collection of gPoints to be transformed.</param>
            <returns>An array of VectorDraw.Geometry.POINT objects transformed to screen pixels coordinates.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.gPoints2POINTArrayFloat(VectorDraw.Geometry.gPoints)">
            <summary>
            Transforms the passed gPoint collection to screen pixels coordinates points collection.
            </summary>
            <param name="pts">A collection of gPoints to be transformed.</param>
            <returns>An array of System.Drawing.PointF objects transformed to screen pixels coordinates.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.gPoints2POINTArray(VectorDraw.Geometry.gPoints)">
            <summary>
            Transforms the passed gPoint collection to screen pixels coordinates points collection.
            </summary>
            <param name="pts">A collection of gPoints to be transformed.</param>
            <returns>An array of System.Drawing.Point objects transformed to screen pixels coordinates.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.gPoints2POINTArrayTrig(VectorDraw.Geometry.gPoints)">
            <summary>
            Converts The passed collection of gPoints into an array of Points used when drawing solid polygon as TriangleStrip.
            </summary>
            <param name="pts">A collection of gpoints.</param>
            <returns>A collection of Points to be used to draw a TriangleStrip solid polygon.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.gPoints2POINTArrayTrigFloat(VectorDraw.Geometry.gPoints)">
            <summary>
            Converts The passed collection of gPoints into an array of Points used when drawing solid polygon as TriangleStrip.
            </summary>
            <param name="pts">A collection of gpoints.</param>
            <returns>A collection of Points to be used to draw a TriangleStrip solid polygon.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.Transform(VectorDraw.Geometry.gPoints,System.Boolean)">
            <summary>
            Transforms the passed points with the Matrix.
            </summary>
            <param name="pts">A collection of points to be transformed.</param>
            <param name="isTrigleStrip">A boolean value representing if the given points belong to a trigle strip.</param>
            <returns>A collection of points transformed with the Matrix.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.projectTransform(VectorDraw.Geometry.gPoints,System.Boolean)">
            <summary>
            Transforms the passed points with the Matrix.
            Use projectTransform instead of Transform if this Matrix might be perspective.
            </summary>
            <param name="pts">A collection of points to be transformed.</param>
            <param name="isTrigleStrip">A boolean value representing if the given points belong to a trigle strip.</param>
            <returns>A collection of points transformed with the Matrix.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.gPoints2GDIPOINTArrayTrig(VectorDraw.Geometry.gPoints)">
            <summary>
            Converts The passed collection of gPoints into an array of POINT objects used when drawing solid polygon as TriangleStrip.
            </summary>
            <param name="pts">A collection of gpoints.</param>
            <returns>A collection of POINT objects to be used to draw a TriangleStrip solid polygon.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.Transform(VectorDraw.Geometry.gPoints)">
            <summary>
            Transforms all gPoint objects of the passed collection with this Matrix.
            </summary>
            <param name="pts">A collection of gPoints to be transformed.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.projectTransform(VectorDraw.Geometry.gPoints)">
            <summary>
            Transforms all gPoint objects of the passed collection with this Matrix.
            Use projectTransform instead of Transform if this Matrix might be perspective.
            </summary>
            <param name="pts">A collection of gPoints to be transformed.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.TransformVector(VectorDraw.Geometry.Vector,System.Boolean)">
            <summary>
            Transforms the passed Vector object with this Matrix.
            </summary>
            <param name="v">A Vector object to be transformed.</param>
            <param name="normalize">Set it to true in order to result Vector to be Normalized in to a Unit length Vector.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.TransformVector(VectorDraw.Geometry.Vector)">
            <summary>
            Transforms the passed Vector object with this Matrix.
            </summary>
            <param name="v">A Vector object to be transformed.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.SetFrom(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector,VectorDraw.Geometry.Vector)">
            <summary>
            Calculate this Matrix with a given origin and x,y direction.
            </summary>
            <param name="origin">The origin point to use.</param>
            <param name="xdir">x direction of the Matrix.</param>
            <param name="ydir">y direction of the Matrix.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.ApplyWCS2ECS(VectorDraw.Geometry.Vector)">
            <summary>
            Multiplies the current Matrix with the invertion of the ApplyECS2WCS Matrix.
            </summary>
            <param name="zAxis">The Vector that is perpedicular to the matrix.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.ApplyECS2WCS(VectorDraw.Geometry.Vector,VectorDraw.Geometry.Vector)">
            <summary>
            Calculates the matrix in order to be perpedicular to the passed _zAxis vector and the x direction of the matrix is equal to the passed _xAxis vector..
            </summary>
            <param name="_zAxis">The Vector that is perpedicular to the matrix.</param>
            <param name="_xAxis">The x direction required.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.ApplyECS2WCS(VectorDraw.Geometry.Vector)">
            <summary>
            Calculates the matrix in order to be perpedicular to the passed vector.
            </summary>
            <param name="_zAxis">The Vector that is perpedicular to the matrix.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.GetHashCode">
            <summary>
            Serves as a hash function for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.Equals(System.Object)">
            <summary>
            Checks if the passed object is equal to this object.
            </summary>
            <param name="obj">A Matrix object to check.</param>
            <returns>True if the passed object is equal to this object.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.Equals(VectorDraw.Geometry.Matrix)">
            <summary>
            Checks if the passed Matrix object is equal to this object.
            </summary>
            <param name="p">A Matrix object to check.</param>
            <returns>True if the passed object is equal to this object.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.op_Equality(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.Matrix)">
            <summary>
            Implements the == operator for two Matrix objects.
            </summary>
            <param name="a">First Matrix object required.</param>
            <param name="b">Second Matrix object required.</param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.op_Inequality(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.Matrix)">
            <summary>
            Implements the != operator for two Matrix objects.
            </summary>
            <param name="obj1">First Matrix object required.</param>
            <param name="obj2">Second Matrix object required.</param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.IsEqualMatrix(VectorDraw.Geometry.Matrix,System.Double)">
            <summary>
            Check if the passed object's items are equal to this object's items taking into consideration the equality value.
            </summary>
            <param name="m">A Matrix object to be checked if is equal to this object.</param>
            <param name="equality">A double value representing the equality(for example 0.0000001).</param>
            <returns>True if the two object's items are equal.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.IsUnitMatrix">
            <summary>
            Checks if this MAtrix is equal to the Identity Matrix(the main diagonal items are equal to 1 and the rest 0).
            </summary>
            <returns>True if this MAtrix object is equal to the Identity object.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.Determinant">
            <summary>
            Calculates the determinant of the Matrix.
            </summary>
            <returns>A double value representing the determinant of the Matrix.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.Invert">
            <summary>
            Invert this Matrix.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.Multiply(VectorDraw.Geometry.Matrix)">
            <summary>
            Multiplies this Matrix with the passed Matrix parameter.
            </summary>
            <param name="m2">Another Matrix object needed.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.ToString">
            <summary>
            Gets a System.String that represents 16 values of the Matrix Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.ToString(System.String)">
            <summary>
            Gets a System.String that represents 16 values of the Matrix Object using the passed format.
            </summary>
            <param name="format">A format string to use in order to show the double values of the items of the Matrix.</param>
            <returns>A string that represents 16 values of the Matrix Object.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.ToString(VectorDraw.Serialize.Serializer)">
            <summary>
            Sets the object's properties using a ToString string, according to the Serializer precision
            </summary>
            <param name="serializer">the Serializer object where the object is going to be saved.</param>
            <returns>A ToString representation of the Matrix.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.FromString(System.String)">
            <summary>
            Fills the Matrix with a passed string using the ToString format.
            </summary>
            <param name="str">A string that uses the ToString format of the Matrix.</param>
            <exception cref="T:System.Exception">If the passed string does not represent 16 doubles separated by comma.</exception>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the Matrix object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the Matrix object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="P:VectorDraw.Geometry.Matrix.A00">
            <summary>
            The 0,0 item of the matrix.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Matrix.A01">
            <summary>
            The 0,1 item of the matrix.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Matrix.A02">
            <summary>
            The 0,2 item of the matrix.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Matrix.A03">
            <summary>
            The 0,3 item of the matrix.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Matrix.A10">
            <summary>
            The 1,0 item of the matrix.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Matrix.A11">
            <summary>
            The 1,1 item of the matrix.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Matrix.A12">
            <summary>
            The 1,2 item of the matrix.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Matrix.A13">
            <summary>
            The 1,3 item of the matrix.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Matrix.A20">
            <summary>
            The 2,0 item of the matrix.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Matrix.A21">
            <summary>
            The 2,1 item of the matrix.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Matrix.A22">
            <summary>
            The 2,2 item of the matrix.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Matrix.A23">
            <summary>
            The 2,3 item of the matrix.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Matrix.A30">
            <summary>
            The 3,0 item of the matrix.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Matrix.A31">
            <summary>
            The 3,1 item of the matrix.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Matrix.A32">
            <summary>
            The 3,2 item of the matrix.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Matrix.A33">
            <summary>
            The 3,3 item of the matrix.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Matrix.Properties">
            <summary>
            Get/Set the properties of the Matrix.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Matrix.Xdir">
            <summary>
            Get/Set the direction of the x Vector of the matrix.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Matrix.Ydir">
            <summary>
            Get/Set the direction of the y Vector of the matrix.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Matrix.Zdir">
            <summary>
            /// Get/Set the direction of the z Vector of the matrix.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Matrix.Offset">
            <summary>
            Get/Set the offset point of the matrix.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Matrix.ZExtrusion">
            <summary>
            Get the length of the vector perpedicular to the matrix.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.vdmatrix.op_Multiply(VectorDraw.Geometry.Matrix.vdmatrix,VectorDraw.Geometry.Matrix.vdmatrix)">
            <summary>
            Implements the * operator for two vdmatrix.
            </summary>
            <returns>A new vdmatrix object.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.vdmatrix.Determinant">
            <summary>
            Calculates the determinant of the vdmatrix.
            </summary>
            <returns>A double value representing the determinant of the vdmatrix.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Matrix.vdmatrix.Invert">
            <summary>
            Invert this vdmatrix.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.EllipsisGeom.get_quads(System.Double[]@,System.Int32,System.Double[]@,System.Double[]@)">
            <summary>
            Returns 0 for no error.Else return > 0
            Top level routine to manage the determination of all roots of the given
            polynomial 'a', returning the quadratic factors (and possibly one linear
            factor) in 'x'.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.EllipsisGeom.getTangentDirection(VectorDraw.Geometry.gPoint,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="atPoint">A point on ellipse</param>
            <param name="MajorLength"></param>
            <param name="MinorLength"></param>
            <returns>Tangent vector throw the input point</returns>
        </member>
        <member name="M:VectorDraw.Geometry.EllipsisGeom.getPerpendicularPoints(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            returns a list of maximun 4 points perpendicular from input point to ellipse.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.BSpline">
            <summary>
            Internal class for calculating BSplines.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.BSpline.#ctor(VectorDraw.Geometry.gPoints,System.Int32,System.Boolean,System.Int32,VectorDraw.Geometry.DoubleArray,VectorDraw.Geometry.DoubleArray)">
            <summary>
            In initializes a new BSpline with the given parameters.
            </summary>
            <param name="controlpoints"></param>
            <param name="nperSegment"></param>
            <param name="closed"></param>
            <param name="degree"></param>
            <param name="weights"></param>
            <param name="knots"></param>
        </member>
        <member name="M:VectorDraw.Geometry.BSpline.#ctor(VectorDraw.Geometry.gPoints,System.Int32,System.Boolean,System.Int32)">
            <summary>
            In initializes a new BSpline with the given parameters.
            </summary>
            <param name="controlpoints"></param>
            <param name="nperSegment"></param>
            <param name="closed"></param>
            <param name="degree"></param>
        </member>
        <member name="M:VectorDraw.Geometry.BSpline.ArcLengthParameterization(VectorDraw.Geometry.gPoints,System.Int32)">
            <summary>
            Arc-Length Parameterization
            </summary>
            <param name="cpoints">The control or fitting points that define the Bspline</param>
            <param name="degree">The degree of the bSpline</param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.BSpline.NormalParameterization(VectorDraw.Geometry.gPoints,System.Boolean,System.Int32)">
            <summary>
            Normal Parameterization
            </summary>
            <param name="cpoints">The control or fitting points that define the Bspline</param>
            <param name="closed"></param>
            <param name="degree">The degree of the bSpline</param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.BSpline.GetSamplePoints">
            <summary>
            Tessalates the Bspline and returns the points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.BSpline.Evaluate(System.Double,System.Int32,System.Int32)">
            <summary>
            Evaluate a BSpline point using Cox's DeBour Algorithm
            </summary>
            <param name="u">The parameter value to be evaluated at</param>
            <param name="i">The index of the first knot lower than u </param>
            <param name="segid">From 0 to nPerSegment</param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.BSpline.GetInterpolatedCubicBSpline(VectorDraw.Geometry.gPoints,System.Boolean,System.Int32,VectorDraw.Geometry.Vector,VectorDraw.Geometry.Vector,VectorDraw.Geometry.Vector@,VectorDraw.Geometry.Vector@)">
            <summary>
            Calculates an interopolated cubic BSpline.
            </summary>
            <param name="FittingPoints"></param>
            <param name="closed"></param>
            <param name="resolution"></param>
            <param name="StartTangent"></param>
            <param name="EndTangent"></param>
            <param name="resultStartTangent"></param>
            <param name="resultEndTangent"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.BSpline.CalculateFittingBSpline(VectorDraw.Geometry.gPoints,VectorDraw.Geometry.Vector,VectorDraw.Geometry.Vector,System.Int32,System.Boolean)">
            <summary>
            Calculates an interpolated fitting BSpline 
            given the fitting points, start tangent and end tangent
            null tangends causes natural end condition.
            </summary>
            <param name="fittingPoints"></param>
            <param name="StartTangent"></param>
            <param name="EndTangent"></param>
            <param name="resolution"></param>
            <param name="closed"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.BSpline.T(System.Int32,System.Double[])">
            <summary>
            Encaptulates the offset function of a matrix
            Olny for EvaluateBasis function
            </summary>
            <param name="k">Index</param>
            <param name="t">The matrix to aply the offset</param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.BSpline.EvaluateBasis(System.Int32,System.Double,VectorDraw.Geometry.DoubleArray)">
            <summary>
            Evaluates the Bspline basis functions with deBoor's algorithm
            </summary>
            <param name="nS">Index of left knot closest to rAt</param>
            <param name="rAt">The parameter value to be evaluated at</param>
            <param name="knots">The Knots of the Spline.</param>
            <returns>A double array representing the BSpline basis.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.BSpline.LUAnalysis(System.Double[],System.Double[],System.Double[],System.Double[]@,System.Double[]@)">
            <summary>
            Performs LU analisys in a 3 diagonal array.
            </summary>
            <param name="alpha">IN:The full lower diagonal of the array</param>
            <param name="beta">IN:The main diagonal of the array</param>
            <param name="gamma">IN:The full upper diagonal of the array</param>
            <param name="low">OUT: The low coefficients</param>
            <param name="up">OUT: The up coeefficients</param>
        </member>
        <member name="M:VectorDraw.Geometry.BSpline.SolveLUSystem(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[]@)">
            <summary>
            Solves a system of LUx=d type.
            </summary>
            <param name="low">IN: The low coefficients from LU analysis</param>
            <param name="up">IN: The up coefficients from LU analysis</param>
            <param name="gamma">IN: The upper diagonal</param>
            <param name="D">IN:</param>
            <param name="X">OUT: Results</param>
        </member>
        <member name="P:VectorDraw.Geometry.BSpline.Degree">
            <summary>
            Returns the Degree of spline.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.BSpline.Knots">
            <summary>
            Returns the Knots of the Bspline.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.BSpline.FittingPoints">
            <summary>
            Returns the fitting points of the BSpline or null if not is fitting.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.BSpline.ControlPoints">
            <summary>
            Returns the control point of the BSpline.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.BSpline.Weights">
            <summary>
            Returns the weights of the BSpline.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.Apollonius">
            <summary>
            This class is used to perform calculations in regard to the Apollonius problem.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Apollonius.CCC(VectorDraw.Geometry.Apollonius.ApolloniusCircle,VectorDraw.Geometry.Apollonius.ApolloniusCircle,VectorDraw.Geometry.Apollonius.ApolloniusCircle)">
            <summary>
            Calculates the circles tangent to three circles specified.
            </summary>
            <param name="c1">First circle.</param>
            <param name="c2">Second circle.</param>
            <param name="c3">Third circle.</param>
            <returns>A vdArray object containing the tangent circles.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Apollonius.LLL(VectorDraw.Geometry.Apollonius.ApolloniusLine,VectorDraw.Geometry.Apollonius.ApolloniusLine,VectorDraw.Geometry.Apollonius.ApolloniusLine)">
            <summary>
            Calculates the circles tangent to three lines specified.
            </summary>
            <param name="l1">First line.</param>
            <param name="l2">Second line.</param>
            <param name="l3">Third line.</param>
            <returns>A vdArray object containing the tangent circles.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Apollonius.LLC(VectorDraw.Geometry.Apollonius.ApolloniusLine,VectorDraw.Geometry.Apollonius.ApolloniusLine,VectorDraw.Geometry.Apollonius.ApolloniusCircle)">
            <summary>
            Calculates the circles tangent to the specified lines and circle.
            </summary>
            <param name="l1">First line.</param>
            <param name="l2">Second line.</param>
            <param name="c">Third line.</param>
            <returns>A vdArray object containing the tangent circles.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Apollonius.PPL(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Apollonius.ApolloniusLine)">
            <summary>
            Calculates the circles tangent to the specified points and line.
            </summary>
            <param name="C">First point.</param>
            <param name="D">Second point.</param>
            <param name="AB">Third point.</param>
            <returns>A vdArray object containing the tangent circles.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Apollonius.PPP(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the circles tangent to three specified points.
            </summary>
            <param name="A">First point.</param>
            <param name="B">Second point.</param>
            <param name="C">Third point.</param>
            <returns>A vdArray object containing the tangent circles.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Apollonius.LCC(VectorDraw.Geometry.Apollonius.ApolloniusLine,VectorDraw.Geometry.Apollonius.ApolloniusCircle,VectorDraw.Geometry.Apollonius.ApolloniusCircle)">
            <summary>
            Calculates the circles tangent to the specified circles and line.
            </summary>
            <param name="l">The line.</param>
            <param name="c1">First circle.</param>
            <param name="c2">Second circle.</param>
            <returns>A vdArray object containing the tangent circles.</returns>
        </member>
        <member name="T:VectorDraw.Geometry.Apollonius.ApolloniusCircle">
            <summary>
            This class is used to return the results of the Apollonius calculations
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Apollonius.ApolloniusCircle.#ctor(VectorDraw.Geometry.gPoint,System.Double)">
            <summary>
            Creates a new apollonius circle using the circle's center and radius.
            </summary>
            <param name="center"></param>
            <param name="Radius"></param>
        </member>
        <member name="M:VectorDraw.Geometry.Apollonius.ApolloniusCircle.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Creates a new apollonius circle using the circle's center and a second point on its periphery.
            </summary>
            <param name="center">The circles center.</param>
            <param name="radPoint">Any point on the circle's periphery.</param>
        </member>
        <member name="P:VectorDraw.Geometry.Apollonius.ApolloniusCircle.Center">
            <summary>
            Gets and sets the circle's center.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Apollonius.ApolloniusCircle.Radius">
            <summary>
            Gets and sets the circle's radius.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.Apollonius.ApolloniusLine">
            <summary>
            This class is used to define simple lines without using vdLine for memory conservation.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Apollonius.ApolloniusLine.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Creates a new apollonius line.
            </summary>
            <param name="startPoint">The line's startpoint.</param>
            <param name="endPoint">The line's endpoint.</param>
        </member>
        <member name="P:VectorDraw.Geometry.Apollonius.ApolloniusLine.StartPoint">
            <summary>
            Get, set the line's startpoint.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Apollonius.ApolloniusLine.EndPoint">
            <summary>
            Get, set the line's endpoint.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Apollonius.ApolloniusLine.MidPoint">
            <summary>
            Get, set the line's middle point.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.Delaunay">
            <summary>
            Triangulates the given points using the Delaunay triangulation algorithm.
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="M:VectorDraw.Geometry.Delaunay.InCircle(System.Double,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Checks if a point lies incide a circle defined by three points. NOTE: A point on the edge is inside the circle
            </summary>
            <param name="eps">Equality used to compare if two points are coincident.</param>
            <param name="pt">point to check</param>
            <param name="cp1">circle's first point</param>
            <param name="cp2">circle's second point</param>
            <param name="cp3">circle's third point</param>
            <returns>True if pt lies inside circle defined by pt1, pt2 and pt3, false othrwise</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Delaunay.Triangulate(VectorDraw.Geometry.gPoints,System.UInt16)">
            <summary>
            Triangulates the given points using Delaunay algorithm. 
            </summary>
            <param name="points">Input sample points to triangulate , they must all belong to the same plane.</param>
            <param name="precision">The decimal precision for the passed points.</param>
            <returns>A <see cref="T:VectorDraw.Geometry.gTriangles"/> collection.</returns>
            <example>
            Example of excluding regions from a triangulation 
            <code>
                            //create an array of points that represent a mountain
                            gPoints pts = new gPoints();
                            
                            //add points from a 16 segments divided circle with radius 10 and elevation 50
                            pts += Globals.GetArcSamplePoints(16, 10, 0.0, Globals.VD_TWOPI, 50);
                            //add points from a 32 segments divided circle with radius 20 and elevation 40
                            pts += Globals.GetArcSamplePoints(32, 20, 0.0, Globals.VD_TWOPI,40);
                            //add points from a 48 segments divided circle with radius 30 and elevation 30
                            pts += Globals.GetArcSamplePoints(48, 30, 0.0, Globals.VD_TWOPI,30);
                            //add points from a 64 segments divided circle with radius 40 and elevation 20
                            pts += Globals.GetArcSamplePoints(64, 40, 0.0, Globals.VD_TWOPI,20);
                            //add points from a 78 segments divided circle with radius 50 and elevation 10
                            pts += Globals.GetArcSamplePoints(78, 50, 0.0, Globals.VD_TWOPI,10);
                            //add a point at the top of the mountain.
                            pts += new gPoint(0, 0, 60);
            
                            //create an array of points that defines a region that will not contains triangles inside
                            gPoints SliceRegionInside = new gPoints(new gPoint[] { new gPoint(-18, 3), new gPoint(-18, 18), new gPoint(-3, 18), new gPoint(-3, 3), new gPoint(-18, 3) });
                            //create an array of points that defines a region that will not contains triangles outside it.
                            gPoints SliceRegionOutside = new gPoints(new gPoint[] { new gPoint(-35, -35), new gPoint(-35, 35), new gPoint(35, 35), new gPoint(35, -35), new gPoint(-35, -35) });
            
                            //add all the regions into a collection
                            vdArray&lt;gPoints&gt; SliceRegions = new vdArray&lt;gPoints&gt;(new gPoints[] { SliceRegionInside, SliceRegionOutside });
            
                            ushort percision = 8;
                            //calculate the result triangles using decimal precision 8 for passed points.
                            gTriangles newtriangles = Delaunay.Triangulate(pts, percision);
                            //calculate all intersection points between SliceRegions and triangles.
                            //Z values of intersections are projected on triangles collection.
                            gPoints intPts = newtriangles.GetSliceRegionPoints(SliceRegions, percision);
                            //re-calculate the triangles using the basic input points and the calculated intersections.
                            newtriangles = Delaunay.Triangulate(pts + intPts, percision);
                            
                            //remove the triangles according to region usage.
                            gTriangles RemovedInsideTriangles = newtriangles.RemoveInsideTriangles(SliceRegionInside);
                            gTriangles RemovedOutsideTriangles = newtriangles.RemoveOutsideTriangles(SliceRegionOutside);
            
                            //create a new ground sourface with the calculating triangles.
                            vdGroundSurface gf = new vdGroundSurface();
                            gf.SetUnRegisterDocument(doc);
                            gf.setDocumentDefaults();
                            gf.Points = pts;
                            gf.SelectUserTriangles(newtriangles);
                            gf.DispMode = vdGroundSurface.DisplayMode.Triangle;
                            doc.Model.Entities.AddItem(gf);
            
                            doc.CommandAction.Zoom("e", null, null);
            
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Geometry.Delaunay.TriangulateToFaceList(VectorDraw.Geometry.gPoints,System.UInt16,VectorDraw.Professional.Utilities.ProgressMeter)">
            <summary>
            Triangulates the given points using Delaunay algorithm. Returns an array of integer where each item represents a zero based index of a point in the inpoints collection.
            Also each three items in the return array represent a triangle.
            </summary>
            <param name="inpoints">Input sample points to triangulate</param>
            <param name="precision">The decimal precision for the passed points.</param>
            <param name="progress">Represents an object to handle the progress meter </param>
            <returns>An array of integer where each item represents a zero based index of a point in the inpoints collection and each three items represent a triangle.</returns>
        </member>
        <member name="T:VectorDraw.Geometry.Vertexes">
            <summary>
            This is a collection of Vertex objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.ToString">
            <summary>
            Gets a System.String that represents the count of the Vertexes collection Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.#ctor">
            <summary>
            Initializes a new collection of vertexes.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.#ctor(System.Int32)">
            <summary>
            Initializes the collection with the given capacity.
            </summary>
            <param name="capacity">An integer representing the preallocated memory size of the collection.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.#ctor(VectorDraw.Geometry.Vertexes)">
            <summary>
            Initializes the collection with a given Vertexes collection.
            </summary>
            <param name="rs">A Vertexes collection from where the vertex objects will be copied from.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.#ctor(VectorDraw.Geometry.gPoints)">
            <summary>
            Initializes the collection from a given gPoints collection.
            </summary>
            <param name="pts">A gPoints collection from where the points will be copied from.The bulge value will be set to 0.0 for all objects.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.#ctor(VectorDraw.Geometry.Vertex[])">
            <summary>
            Initializes a new instance of the object and adds the passed items at the end of this collection.
            </summary>
            <param name="items">An array of <see cref="T:VectorDraw.Geometry.Vertex"/> objects.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.GetNormal">
            <summary>
            Returns the first valid normal consisted from three contiguous points
            </summary>
            <returns>The first valid normal consisted from three contiguous points, or null for no valid normal in case all points are on a single line. </returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.Join(VectorDraw.Geometry.Vertexes,VectorDraw.Geometry.Vertexes)">
            <summary>
            Join two Vertexes if their start or end vertex is equal.
            </summary>
            <param name="verts1"></param>
            <param name="verts2"></param>
            <returns>A new Vertexes object contains both on success or null if the Vertexes have not common start or end points.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.GetTransformCopy(VectorDraw.Geometry.Matrix)">
            <summary>
            Returns a copy of this colletion with all of Vertex Items transform by input Matrix
            </summary>
            <param name="m">A <see cref="T:VectorDraw.Geometry.Matrix"/> used to transform the Vertexes</param>
            <returns>A copy of this colletion with all of Vertex Items transform by input Matrix</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.GetSamplePoints(System.Int32,System.Double)">
            <summary>
            Returns a list of points from the start to the end point of the curve defined by this collection of Vertexes.
            </summary>
            <param name="curveResolution">Used to divide arc segments.Valid values (1 to 20000)</param>
            <param name="pixelSize">Used to divide arc segments.Valid values possitive decimal ( >=0)</param>
            <returns>A collection of points by dividing the arc segments using the passed curveResolution and pixelSize parameters.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.HasBulges">
            <summary>
            Checkes if any of the vertexes of the collection has bulge value not equal to 0.0.
            </summary>
            <returns>True if at least one vertex has bulge value not equal to 0.0.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.Add(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a new Vertex to the end of the collection.
            </summary>
            <param name="x">x parameter of the vertex's point.</param>
            <param name="y">y parameter of the vertex's point.</param>
            <param name="z">z parameter of the vertex's point.</param>
            <param name="bulge">A bulge double value for the vertex.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.Add(VectorDraw.Geometry.Vertex)">
            <summary>
            Adds the passed Vertex object to the end of the collection.
            </summary>
            <param name="value">A Vertex object to be added to the collection.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.Add(VectorDraw.Geometry.gPoint)">
            <summary>
            Adds a Vertex object with point given from the passed parameter and bulge 0.0.
            </summary>
            <param name="value">A gPoint object from which the point will be copied from.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.ChangeOrder(VectorDraw.Geometry.Vertex,System.Boolean)">
            <summary>
            Places an existing object of the collection to the beginning or the end of the list.
            </summary>
            <param name="Object">The object to be placed.</param>
            <param name="ToBack">If this value is true then the object will be placed to the end of the list else it will be placed to the beginning.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.EnsureCapacity(System.Int32)">
            <summary>
            Changes the capacity of the collection to the given value if the existing capacity is less than this value.
            </summary>
            <param name="min">A value representing the new capacity of the collection.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.InsertAt(System.Int32,VectorDraw.Geometry.Vertex)">
            <summary>
            Insert an object at a specified index.
            </summary>
            <param name="index">The index where the object will be inserted.</param>
            <param name="Object">The object to be inserted.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.RemoveAt(System.Int32)">
            <summary>
            Removes an object from a specified index of the collection.
            </summary>
            <param name="index">The index of the object to be removed.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.RemoveItem(VectorDraw.Geometry.Vertex)">
            <summary>
            Removes a specified object from the list.
            </summary>
            <param name="Object">The object to be removed from the collection..</param>
            <returns>True if the object was removed and false if the object was not found.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.GetReverse">
            <summary>
            Returns a new Vertexes object with items in the reverse order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.Reverse">
            <summary>
            Changes the order of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.Clone">
            <summary>
            Returns a new created collection as clone to this one.
            </summary>
            <returns>Returns a new created collection as clone to this one.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.AddRange(VectorDraw.Geometry.Vertexes)">
            <summary>
            Adds the objects of one list to the end of this list.
            </summary>
            <param name="c">A Vertexes collection to be added to this list.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.AddRange(VectorDraw.Geometry.gPoints)">
            <summary>
            Adds the objects of one list to the end of this list.
            </summary>
            <param name="c">A gPoints collection to be added to this list.The bulge will be 0.0.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.FindVertexPoint(VectorDraw.Geometry.gPoint)">
            <summary>
            Searches the collection for a Vertex that has equal point with the given gPoint.
            </summary>
            <param name="pt">A gPoint to search the collection.</param>
            <returns>The index of the found Vertex or -1 of none found.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.makeClosed">
            <summary>
            Adds to the collection the first point to the end in order to close it.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.IsClosed(System.Double)">
            <summary>
            Check if The First and last Point are equal taking into consideration the Equality value.
            </summary>
            <param name="Equality">A double value representing the equality(for example 0.00001)</param>
            <returns>True if the first and last points are equal(x,y,z values only).</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.IsClosed">
            <summary>
            Check if The First and last Point are equal taking into consideration the default <see cref="F:VectorDraw.Geometry.Globals.DefaultPointEquality"/> value.
            </summary>
            <returns>True if the first and last points are equal(x,y,z values only).</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.Is2D(System.Double)">
            <summary>
            Checks if all points have the same z value.
            </summary>
            <param name="equality">A double value representing the equality(for example 0.00001).</param>
            <returns>True all points have the same z value.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.Is2D(System.Double,VectorDraw.Geometry.Vector)">
            <summary>
            Checks if all points are belong into the same plane parallel to the plane that is perpendicular to the passed planeNormal
            </summary>
            <param name="equality">A double value representing the equality(for example 0.00001).</param>
            <param name="planeNormal">A normal that defines a perpendicular plane.</param>
            <returns>True all points have the same z value.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.RemoveInLinePoints">
            <summary>
            Removes points that are inline from this Vertexes collection.
            </summary>
            <returns>The number of points removed.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.SelfIntersect">
            <summary>
            Checks if there is at least one segment that self-intersect with an other segment.
            </summary>
            <returns>False if there are not self-intersection segments.</returns>
             <example>Since the method is 2D(XY plane) the correct way to use this method is the below.<code>
                     gPoints points = new gPoints();
                     points.Add(new gPoint(0,0,0));
                     points.Add(new gPoint(0,5, 0));
                     points.Add(new gPoint(0, 5, 5));
                     points.Add(new gPoint(0, 3, -5));
                     points.Add(new gPoint(0, 0, 0));
                     Vertexes verts = new Vertexes(points);
                     //Create a poly for testing
                     vdPolyline poly = new vdPolyline(doc, verts);
                     doc.ActiveLayOut.Entities.AddItem(poly);
                     bool res1 = verts.SelfIntersect(); //wrong result
            
                     //Solution to the problem , we must transform the points so they are in xy plane , you should use this code always since if the points are already in the xy plane they will not change.
                            
                     //Calculate Extrusion of the points from the first 3 points. The Extrusion is the Vector perpedicular to the plane of the points.
                     Vector Extrusion = new Vector ();
                     Vector.CalculateNormal3P(points[0], points[1], points[2], out Extrusion);
                     //Create a matrix from this extrusion
                     Matrix matt = new Matrix();
                     matt.ApplyWCS2ECS(Extrusion);
                     //Create a copy of the points so we do not mess the original points
                     Vertexes copy = new Vertexes(points);
                     matt.Transform(copy);
                     //Now the copy points arte in the xy plane
                     //So now you can take your result!!!!
                     bool res2 = copy.SelfIntersect();
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.SelfIntersect(VectorDraw.Geometry.gPoints@)">
            <summary>
            Checks if there are segments that self-intersect with an other segment.
            </summary>
            <param name="pts">The intersection points collection.</param>
            <returns>The number of self intersections detected.</returns>
            <remarks>The method should only be used with 2D polylines.</remarks>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.RemoveEqualPoints">
            <summary>
            Removes Continue Equal Points
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.Last">
            <summary>
            Returns the last item of the collection.
            </summary>
            <returns>A reference to the Last item in the list</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.GetBox">
            <summary>
            Get a Box object that contains all points of the collection.
            </summary>
            <returns>A Box object that contains all points of the Vertexes collection.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.Length">
            <summary>
            Get the length of the line that consists of the collection's points.
            </summary>
            <returns>The length of the collection's points.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.Area">
            <summary>
            Get the area of the plane that consists from the points of the collection.
            The area is calculated correctly only when the Vertexes do not contain Bulge values.
            </summary>
            <returns>The area that consists of the collection's points.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the Vertexes object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Geometry.Vertexes.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the Vertexes object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="P:VectorDraw.Geometry.Vertexes.Count">
            <summary>
            Get the number of items in the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Vertexes.Item(System.Int32)">
            <summary>
            Get/Set the object at a specified index of the collection.
            </summary>
            <param name="index">The index of the object.</param>
            <returns>The object at the specified index.</returns>
        </member>
        <member name="T:VectorDraw.Geometry.GpcWrapper.ClippingOperation">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.GpcWrapper.ClippingOperation.Difference">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.GpcWrapper.ClippingOperation.Intersection">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.GpcWrapper.ClippingOperation.XOr">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.GpcWrapper.ClippingOperation.Union">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.GpcWrapper.ClippingPolyFace">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.GpcWrapper.ClippingPolyFace.#ctor">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.GpcWrapper.ClippingPolyFace.GetTransformCopy(VectorDraw.Geometry.Matrix)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.GpcWrapper.ClippingPolyFace.Merge(VectorDraw.Geometry.gTriangles,System.Boolean)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.GpcWrapper.ClippingPolyFace.Merge(VectorDraw.Geometry.GpcWrapper.ClippingPolyFace,System.Boolean)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.GpcWrapper.ClippingPolyFace.ClearVerticies(VectorDraw.Generics.vdArray{VectorDraw.Geometry.gPoints})">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.GpcWrapper.ClippingPolyFace.vertices">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.GpcWrapper.ClippingPolyFace.facelist">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.GpcWrapper.ClippingVertex.ToString">
            <summary>
            Gets a System.String that represents the X,Y coordinates of the ClippingVertex Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.GpcWrapper.ClippingVertexList.ToString">
            <summary>
            Gets a System.String that represents the coordinates of the vertexes of the ClippingVertexList Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.GpcWrapper.ClippingPolygon.ToString">
            <summary>
            Gets a System.String that represents the coordinates of the Contours of the ClippingPolygon Object.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.VertexTypeConverter">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.VertexTypeConverter.getLunits(VectorDraw.Geometry.LUnits)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.VertexTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.VertexTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.VertexTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.VertexTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Geometry.Vertex">
            <summary>
            Represents a vertex object which is a gPoint that can have a bulge mostly used in vdPolyline object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Vertex.#ctor(VectorDraw.Geometry.gPoint,System.Double)">
            <summary>
            Initializes the vertex with a given point and bulge.
            </summary>
            <param name="vertexpoint">A gPoint object representing the point of the vertex.</param>
            <param name="bulge">A bulge double value for the vertex.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vertex.#ctor(VectorDraw.Geometry.Vertex)">
            <summary>
            Initializes the vertex with a given vertex object.
            </summary>
            <param name="vertex">A vertex object.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vertex.#ctor(VectorDraw.Geometry.gPoint)">
            <summary>
            Initializes the vertex with a given point.The bulge of the vertex is set to 0.0.
            </summary>
            <param name="vertexpoint">A gPoint object representing the point of the vertex.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vertex.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes the vertex with given the x,y,z values of the point and also the bulge.
            </summary>
            <param name="x">x parameter of the vertex's point.</param>
            <param name="y">y parameter of the vertex's point.</param>
            <param name="z">z parameter of the vertex's point.</param>
            <param name="bulge">A bulge double value for the vertex.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vertex.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes the vertex with given the x,y,z parameters of it's point.The bulge's value is set to 0.0.
            </summary>
            <param name="x">x parameter of the vertex's point.</param>
            <param name="y">y parameter of the vertex's point.</param>
            <param name="z">z parameter of the vertex's point.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vertex.#ctor">
            <summary>
            Initializes the vertex object.Bulge is set to 0.0 and the point is 0.0,0.0,0.0.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Vertex.AsgPoint">
            <summary>
            Get a gPoint representing the vertexe's point value.
            </summary>
            <returns>A new created gPoint equal to the vertexe's point value.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vertex.FromString(System.String)">
            <summary>
            Fill the vertex from a given string representation.
            </summary>
            <param name="str">A string representing a vertex that has the following syntax : x , y , z , bulge.The string can have 1 up to 4 items depending the user's choice.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vertex.ToString(System.String)">
            <summary>
            Returns a System.String object that represents the coordinates of the Vertex Object and the bulge value using the format parameter for visualization.
            </summary>
            <param name="format">A parameter used to specify the format the coordinates should be displayed.</param>
            <returns>A string representing the coordinatesand the bulge of the Vertex object.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vertex.Clone">
            <summary>
            Returns a new created object as a copy of this vertex.
            </summary>
            <returns>A new created object as a clone of this object.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vertex.GetHashCode">
            <summary>
            Serves as a hash function for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vertex.Equals(System.Object)">
            <summary>
            Checks if the parameter object is equal to this object.
            </summary>
            <param name="obj">An object to be checked if it is equal with this object.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vertex.Equals(VectorDraw.Geometry.Vertex)">
            <summary>
            Checks if the parameter Vertex object is equal to this object.
            </summary>
            <param name="p">A Vertex object to be checked if it is equal with this object.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vertex.op_Equality(VectorDraw.Geometry.Vertex,VectorDraw.Geometry.Vertex)">
            <summary>
            Implements the == operator for two Vertex objects.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vertex.op_Inequality(VectorDraw.Geometry.Vertex,VectorDraw.Geometry.Vertex)">
            <summary>
            Implements the != operator for two Vertex objects.
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vertex.AreEqual(VectorDraw.Geometry.Vertex,System.Double)">
            <summary>
            Checks if the point and the bulge of the given Vertex object are equal to this object's properties taken into consideration the equality value.
            </summary>
            <param name="pt">A Vertex object to be checked.</param>
            <param name="Equality">A double value representing the equality factor(for example 0.00001).</param>
            <returns>True if all x,y,z,bulge values of the objects are equal.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vertex.AreEqual(VectorDraw.Geometry.Vertex)">
            <summary>
            Checks if the point and the bulge of the given Vertex object are equal to this object's properties taken into consideration the default equality value <see cref="F:VectorDraw.Geometry.Globals.VD_ZERO8"/>.
            </summary>
            <param name="pt">A Vertex object to be checked.</param>
            <returns>True if all x,y,z,bulge values of the objects are equal.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vertex.SetValue(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the given values to the Vertex object.
            </summary>
            <param name="Xvalue">The x value of the Vertex.</param>
            <param name="Yvalue">The y value of the Vertex.</param>
            <param name="Zvalue">The z value of the Vertex.</param>
            <param name="bulge">The bulge value of the Vertex.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vertex.CopyFrom(VectorDraw.Geometry.Vertex)">
            <summary>
            Copies the x,y,z,bulge values from a given Vertex object to this object.
            </summary>
            <param name="p1">The Vertex object from where the values are going to be taken from.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vertex.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the Vertex object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Geometry.Vertex.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the Vertex object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="P:VectorDraw.Geometry.Vertex.Bulge">
            <summary>
            Get/Set the bulge value of the vertex.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Vertex.VertexPoint">
            <summary>
            Get the point of the vertex as gPoint object.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.SimplePolygonSegment">
            <summary>
            This object is used mainly in GetPolygonsAreas method of the vdPolyline object. This method returns an array
            of these objects and its purpose is to calculate small areas that consist the area of the polyline.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.SimplePolygonSegment.#ctor(VectorDraw.Geometry.SimplePolygonSegment.GeometryType,VectorDraw.Geometry.gPoints,System.Boolean,VectorDraw.Geometry.Matrix)">
            <summary>
            Constractor of the object.
            </summary>
            <param name="type">The type of the area os the segment , see <see cref="T:VectorDraw.Geometry.SimplePolygonSegment.GeometryType"/> </param>
            <param name="pts">The points that consist the segment</param>
            <param name="isSubtructed">A boolean value that represents if the area of the segment is substracted or added to the whole area.</param>
            <param name="ecsMatrix">ecs Matrix of the segment.</param>
        </member>
        <member name="M:VectorDraw.Geometry.SimplePolygonSegment.ToString(VectorDraw.Geometry.LUnits)">
            <summary>
            A String that represents the area of the segment using the passed Lunits.
            </summary>
            <param name="lengthUnits">The Linear units to be used for the string representation.</param>
            <returns>A String that represents the area of the segment using the passed Lunits.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.SimplePolygonSegment.ToString">
            <summary>
            A string that represents the area of the segment.
            </summary>
            <returns>A string that represents the area of the segment in decimal units.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.SimplePolygonSegment.ToPolylineVertexes">
            <summary>
            Get the Vertexes of the segment.
            </summary>
            <returns>A Vertexes collection that contains the points of the polyline as polyline vertexes.</returns>
        </member>
        <member name="P:VectorDraw.Geometry.SimplePolygonSegment.ShapeLines">
            <summary>
            These are the Dimension lines of each segment.Get them after calling the Calculate method. For each SegmentType there are different ShapeLines provided:
            Rectangle ,Parallelogram , Triangle : First ShapeLine is base and second ShapeLine is the height of the rectangle/Parallelogram/Triangle.
            Trapezium : First ShapeLine is big base , second ShapeLine is small base and the third is the Height of the Trapezium
            Chord : The first ShapeLine is from the center of the chord to the startpoint and the second ShapeLine is from the center of the chord to the endpoint.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.SimplePolygonSegment.IsSubtructed">
            <summary>
            A value that is added when the object is created and defines if the area of this segment is to be added or substracted from the whole area.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.SimplePolygonSegment.IsValid">
            <summary>
            A boolean value that checks if the segment is valid and contains any area to be returned.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.SimplePolygonSegment.EcsMatrix">
            <summary>
            The ecs Matrix of the segment added when the object is created.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.SimplePolygonSegment.SegmentType">
            <summary>
            The type of the segment.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.SimplePolygonSegment.Area">
            <summary>
            Returns the area of the segment (positive value).
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.SimplePolygonSegment.Points">
            <summary>
            Returns the points of the segment.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.SimplePolygonSegment.GeometryType">
            <summary>
            The type of the segment.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.SimplePolygonSegment.GeometryType.Triangle">
            <summary>
            Triangle segment , it's area is calculated by the (1/2 * base * height)
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.SimplePolygonSegment.GeometryType.Parallelogram">
            <summary>
            Parallelogram segment , it's area is calculated by the (base * height)
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.SimplePolygonSegment.GeometryType.Rectangle">
            <summary>
            Rectangle segment , it's area is calculated by the (base * height)
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.SimplePolygonSegment.GeometryType.Trapezium">
            <summary>
            Trapezium segment , its area is calculated by the ((SmallBase + BigBase) * Height / 2.0)
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.SimplePolygonSegment.GeometryType.Chord">
            <summary>
            Chord segment (contains arc segment) , it's area is calculated by the (r*r)(θ - sinθ)/2.0
            </summary>
        </member>
        <member name="F:vdgpcgeo.PolySimple.m_List">
            The list of Point2D objects in the polygon.
        </member>
        <member name="F:vdgpcgeo.PolySimple.m_Contributes">
            Flag used by the Clip algorithm 
        </member>
        <member name="M:vdgpcgeo.PolySimple.#ctor">
            Creates a new instance of PolySimple 
        </member>
        <member name="M:vdgpcgeo.PolySimple.toString">
            Return a string briefly describing the polygon.
        </member>
        <member name="M:vdgpcgeo.PolySimple.clear">
            Remove all of the points.  Creates an empty polygon.
        </member>
        <member name="M:vdgpcgeo.PolySimple.add(System.Double,System.Double)">
            Add a point to the first inner polygon.
        </member>
        <member name="M:vdgpcgeo.PolySimple.add(VectorDraw.Geometry.gPoint)">
            Add a point to the first inner polygon.
        </member>
        <member name="M:vdgpcgeo.PolySimple.add(vdgpcgeo.Poly)">
            Throws IllegalStateexception if called
        </member>
        <member name="M:vdgpcgeo.PolySimple.isEmpty">
            Return true if the polygon is empty
        </member>
        <member name="M:vdgpcgeo.PolySimple.getBounds">
            Returns the bounding rectangle of this polygon.
        </member>
        <member name="M:vdgpcgeo.PolySimple.getInnerPoly(System.Int32)">
            Returns <code>this</code> if <code>polyIndex = 0</code>, else it throws
            IllegalStateException.
        </member>
        <member name="M:vdgpcgeo.PolySimple.getNumInnerPoly">
            Always returns 1.
        </member>
        <member name="M:vdgpcgeo.PolySimple.getNumPoints">
            Return the number points of the first inner polygon
        </member>
        <member name="M:vdgpcgeo.PolySimple.getX(System.Int32)">
            Return the X value of the point at the index in the first inner polygon
        </member>
        <member name="M:vdgpcgeo.PolySimple.getY(System.Int32)">
            Return the Y value of the point at the index in the first inner polygon
        </member>
        <member name="M:vdgpcgeo.PolySimple.isHole">
            Always returns false since PolySimples cannot be holes.
        </member>
        <member name="M:vdgpcgeo.PolySimple.setIsHole(System.Boolean)">
            Throws IllegalStateException if called.
        </member>
        <member name="M:vdgpcgeo.PolySimple.isContributing(System.Int32)">
             Return true if the given inner polygon is contributing to the set operation.
             This method should NOT be used outside the Clip algorithm.
            
             @throws IllegalStateException if <code>polyIndex != 0</code>
        </member>
        <member name="M:vdgpcgeo.PolySimple.setContributing(System.Int32,System.Boolean)">
             Set whether or not this inner polygon is constributing to the set operation.
             This method should NOT be used outside the Clip algorithm.
            
             @throws IllegalStateException if <code>polyIndex != 0</code>
        </member>
        <member name="M:vdgpcgeo.PolySimple.intersection(vdgpcgeo.Poly)">
             Return a Poly that is the intersection of this polygon with the given polygon.
             The returned polygon is simple.
            
             @return The returned Poly is of type PolySimple
        </member>
        <member name="M:vdgpcgeo.PolySimple.union(vdgpcgeo.Poly)">
             Return a Poly that is the union of this polygon with the given polygon.
             The returned polygon is simple.
            
             @return The returned Poly is of type PolySimple
        </member>
        <member name="M:vdgpcgeo.PolySimple.xor(vdgpcgeo.Poly)">
             Return a Poly that is the exclusive-or of this polygon with the given polygon.
             The returned polygon is simple.
            
             @return The returned Poly is of type PolySimple
        </member>
        <member name="T:VectorDraw.Render.Region">
            <summary>
            Make sure that the points are closed and dont't have Equal Points(use RemoveEqualPoints).
            </summary>
        </member>
        <member name="M:VectorDraw.Render.Region.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.Region.#ctor(VectorDraw.Geometry.gPoints)">
            <summary>
            Create a new region reference to points
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:VectorDraw.Render.Region.#ctor(VectorDraw.Render.Region)">
            <summary>
            Create a new region  as clone of the source object
            </summary>
        </member>
        <member name="M:VectorDraw.Render.Region.#ctor(VectorDraw.Geometry.Box)">
            <summary>
            Create new region 
            A new point list is selected created from the box boundary
            </summary>
            <param name="box"></param>
        </member>
        <member name="M:VectorDraw.Render.Region.TransformBy(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms the object with the given Matrix.
            </summary>
            <param name="xform">A Matrix object required for the transformation.</param>
        </member>
        <member name="M:VectorDraw.Render.Region.IntersectWith(VectorDraw.Render.Region)">
            <summary>
            Calculates all the intersection points between this and passed region that are all belong on both regions.
            </summary>
            <returns>A collection of intersections that belong to both regions.</returns>
        </member>
        <member name="M:VectorDraw.Render.Region.IsPointInside(VectorDraw.Geometry.gPoint)">
            <summary>
            Check if a point is inside the region
            Note: Method assumes that gPoint pt and Region points are 2D points(ignore z value) and the pt and region points must be in the same coordinate system.
            </summary>
            <param name="pt">The point to check</param>
            <returns>True if point is inside</returns>
        </member>
        <member name="M:VectorDraw.Render.Region.IsRegionInside(VectorDraw.Render.Region)">
            <summary>
            test if a Region is inside this region
            </summary>
            <param name="rgn"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Render.Region.IsBoxInside(VectorDraw.Geometry.Box)">
            <summary>
            2D test if a 2d box is inside the region
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Render.Region.IsPointsInside(VectorDraw.Geometry.gPoints)">
            <summary>
            2D test if the all 2d points are inside the region
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Render.Region.IsLineInside(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Checks if both passed points are inside the Region.z Value is ignored.
            </summary>
            <param name="p1">First point of the line to check.</param>
            <param name="p2">Second point of the line.</param>
            <returns>True if both passed points are inside the Region.z Value is ignored.</returns>
        </member>
        <member name="M:VectorDraw.Render.Region.IsLineIntersect(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Checks if any of the Region's lines intersect with the passed line.
            </summary>
            <param name="p1">First point of the line.</param>
            <param name="p2">Second point of the line.</param>
            <returns>True if any of the Region's lines intersect with the passed line.</returns>
        </member>
        <member name="M:VectorDraw.Render.Region.IsPointsIntersect(VectorDraw.Geometry.gPoints)">
            <summary>
            Checks if any of the passed lines intersects with any of the Region's lines.
            </summary>
            <param name="points">A collection of points consisting lines.</param>
            <returns>True if any of the passed lines intersects with any of the Region's lines.</returns>
        </member>
        <member name="M:VectorDraw.Render.Region.getClosestPointTo(VectorDraw.Geometry.gPoint,System.Boolean)">
            <summary>
            Get The closest point belonging to the Region.
            </summary>
            <param name="givenPoint"></param>
            <param name="use2dMethod">If true find the nearest point ingoring the z value of input point parameters.</param>
            <returns>Returns a point in belonging to the curve or null if region contains less than 2 points.</returns>
        </member>
        <member name="M:VectorDraw.Render.Region.GetBox">
            <summary>
            Calculate a Box object that fits all points of the region.
            </summary>
            <returns>A Box object that contains all points of the region.</returns>
        </member>
        <member name="M:VectorDraw.Render.Region.MakeClockWise">
            <summary>
            Reverse the region points if the area is smaller than 0.0
            </summary>
        </member>
        <member name="M:VectorDraw.Render.Region.MakeCounterClockWise">
            <summary>
            Reverse the region points if the area is biger than 0.0
            </summary>
        </member>
        <member name="P:VectorDraw.Render.Region.Points">
            <summary>
            Returns the points that the region consist of.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.Region.IsClosed">
            <summary>
            Check if The First and last Point are equal
            </summary>
            <returns>Returns true if The First and last Point are equal</returns>
        </member>
        <member name="T:VectorDraw.Render.Region.SegmentPoint">
            <summary>
            An object that defines a gPoint and a zero based segment id where the point is on.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.Region.SegmentPoint.#ctor(VectorDraw.Geometry.gPoint,System.Int32)">
            <summary>
             Initializes the object.
            </summary>
            <param name="pt">A gPoint that is on a line segment.</param>
            <param name="segmentId">A zero based segment id where the point is on.</param>
        </member>
        <member name="P:VectorDraw.Render.Region.SegmentPoint.Point">
            <summary>
            Returns the gPoint field of the object.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.Region.SegmentPoint.SegmentId">
            <summary>
            Returns a zero based segment id where the point is on.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Offset.OffsetArcs.getOffsetArcs(VectorDraw.Geometry.Vertexes,System.Double)">
            <summary>
            Calculates the offset polylines of an polyline object.
            </summary>
            <param name="_verts">The collection of vertexes of the base polyline.</param>
            <param name="offset">The distance to offset.</param>
            <returns>A collection of <see cref="T:VectorDraw.Geometry.Vertex"/> as the result of the offset commited.</returns>
        </member>
        <member name="T:VectorDraw.Geometry.linesegments">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.linesegments.#ctor">
            <summary>
            Initializes the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.linesegments.#ctor(VectorDraw.Geometry.gPoints)">
            <summary>
            Initializes the collection with the passed points creating pts.count-1 line segments.
            </summary>
            <param name="pts"></param>
        </member>
        <member name="M:VectorDraw.Geometry.linesegments.AddUnique(VectorDraw.Geometry.linesegment,System.Double)">
            <summary>
            Add a linesegment to the end of the collection only if collection does not contains a linesegment equals to the input linesegment.
            </summary>
            <param name="seg">The object to add.</param>
            <param name="equality">A double value representing the equality used to compare 2 items.</param>
        </member>
        <member name="M:VectorDraw.Geometry.linesegments.contains(VectorDraw.Geometry.linesegment,System.Double)">
            <summary>
            Checks if an item exists in the collection.
            </summary>
            <param name="seg">The item to check if exists in the collection.</param>
            <param name="equality">A double value representing the equality used to compare 2 items.</param>
            <returns>The index where the input object is or -1 if the object is not in the list.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.linesegments.getJoinCurves(System.Double)">
            <summary>
            Returns all possible closed regions that consist from items in this collections
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.linesegments.getFaceSectionLineSegment(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Double)">
            <summary>
            Returns a linesegment that defines the section between a closed face and the world plane. Points are already transformed with the planes matrix.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.linesegments.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms all items inthe collection with the specific Matrix mat.
            </summary>
            <param name="mat">The Matrix with which the transformation will be done.</param>
        </member>
        <member name="M:VectorDraw.Geometry.linesegments.RemoveAt(System.Int32)">
            <summary>
            Removes an object from a specified index of the collection.
            </summary>
            <param name="index">The index of the object to be removed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the index is less than 0 or bigger or equal to <see cref="P:VectorDraw.Geometry.linesegments.Count"/> property. </exception>
        </member>
        <member name="M:VectorDraw.Geometry.linesegments.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.linesegments.AddItem(VectorDraw.Geometry.linesegment)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
            <param name="value">An object to be added to the collection.</param>
            <returns>True if the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.linesegments.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.linesegments.AddRange(VectorDraw.Geometry.linesegments,System.Boolean,System.Double)">
            <summary>
            Adds the objects of one collection to the end of this collection.
            </summary>
            <param name="c">A linesegments collection to be added to this collection.</param>
            <param name="unique">If it is true add a linesegment to the end of the collection only if collection does not contains a linesegment equals to the input linesegmen</param>
            <param name="uniqueEquality">A double value representing the equality used to compare 2 items.</param>
        </member>
        <member name="M:VectorDraw.Geometry.linesegments.TransformBy(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms the object with the given Matrix.
            </summary>
            <param name="Matrix">A Matrix object required for the transformation.</param>
        </member>
        <member name="P:VectorDraw.Geometry.linesegments.ArrayItems">
            <summary>
            Get the items of the collection in a returned array.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.linesegments.Count">
            <summary>
            Get the number of items in the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.linesegments.Item(System.Int32)">
            <summary>
            Get the object at a specified index of the collection.
            </summary>
            <param name="index">The index of the object.</param>
            <returns>The object at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the index is less than 0 or bigger or equal to <see cref="P:VectorDraw.Geometry.linesegments.Count"/> property.</exception>
        </member>
        <member name="T:VectorDraw.Geometry.linesegment">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.linesegment.customObj">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.linesegment.mp1">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.linesegment.mp2">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.linesegment.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.linesegment.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,System.Object)">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.linesegment.ToString">
            <summary>
            Gets a System.String that represents the coordinates of the linesegment Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.linesegment.AreEqual(VectorDraw.Geometry.linesegment,System.Double)">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.linesegment.Transformby(VectorDraw.Geometry.Matrix)">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.linesegment.GetTransoformCopy(VectorDraw.Geometry.Matrix)">
            <summary>
            Returns a copy of this object transorm by input Matrix.
            </summary>
            <param name="mat">Matrix that start and end points will be tranformed.</param>
            <returns>A new linesegment object tranformed by the input matrix.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.linesegment.Reverse">
            <summary>
            Reverse the StartPoint and EndPoint.StartPoint becomes EndPoint and EndPoint becames StartPoint
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.linesegment.Clone">
            <summary>
            Returns a new created linesegment object as clone to this one.
            </summary>
            <returns>A new created linesegment object.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.linesegment.clip(VectorDraw.Geometry.Box)">
            <summary>
             Clip this line segment inside the object boundary.
            </summary>
            <param name="clipbox">clip rectangle</param>
            <returns>True if the segment is clip somehow and change the start and endpoint of this segment.False if it is completely outside the clip box.</returns>
        </member>
        <member name="P:VectorDraw.Geometry.linesegment.length">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.linesegment.Angle">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.linesegment.StartPoint">
            <summary>
            Get the Start point of line segment
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.linesegment.EndPoint">
            <summary>
            Get the End point of line segment
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.linesegment.ECSMatrix">
            <summary>
            Gets the matrix which is used to transform the points to the World Coordinate System (WCS).
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.PolygonClipper">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.PolygonClipper.getCountours(System.Object,VectorDraw.Generics.vdArray{VectorDraw.Geometry.gPoints})">
            <summary>
            Internally used only.
            </summary>
            <example> For a code sample see <see cref="M:VectorDraw.Geometry.Globals.ConvertToMesh(VectorDraw.Generics.vdArray{VectorDraw.Geometry.gPoints},System.Double,System.Boolean,System.Boolean)"/> method.</example>
        </member>
        <member name="M:VectorDraw.Geometry.PolygonClipper.getCountoursPolyface(VectorDraw.Generics.vdArray{VectorDraw.Geometry.gPoints},VectorDraw.Generics.vdArray{VectorDraw.Geometry.GpcWrapper.ClippingOperation})">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.PolygonClipper.getCountoursTriangles(System.Object,VectorDraw.Generics.vdArray{VectorDraw.Geometry.gPoints})">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.PolygonClipper.getCountoursPolygonObject(VectorDraw.Generics.vdArray{VectorDraw.Geometry.gPoints},VectorDraw.Generics.vdArray{VectorDraw.Geometry.GpcWrapper.ClippingOperation})">
            <summary>
            Internally used only.
            </summary>
            <example>For a code sample see <see cref="M:VectorDraw.Geometry.Globals.ConvertToMesh(VectorDraw.Generics.vdArray{VectorDraw.Geometry.gPoints},System.Double,System.Boolean,System.Boolean)"/> method.</example>
        </member>
        <member name="M:VectorDraw.Geometry.PolygonClipper.getCountoursPolygon(VectorDraw.Generics.vdArray{VectorDraw.Geometry.gPoints},VectorDraw.Generics.vdArray{VectorDraw.Geometry.GpcWrapper.ClippingOperation})">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.PolygonClipper.TriStripToCountourPoints(VectorDraw.Geometry.gPoints)">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.ClipRegion">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.ClipRegion.Push(VectorDraw.Geometry.Matrix,VectorDraw.Geometry.gPoints,VectorDraw.Geometry.GpcWrapper.ClippingOperation)">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.ClipRegion.Pop">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.ClipRegion.GetGdiPlusRegion(VectorDraw.Geometry.Matrix)">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.ClipRegion.GetGdiPlusRegion(VectorDraw.Geometry.Matrix,System.Double)">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.ClipRegion.GetPolygons">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.ClipRegion.Empty">
            <summary>
            Internally used only.
            </summary>
        </member>
        <member name="T:VectorDraw.Render.ClipLineObj">
            <summary>
            Provides all functionality for clipping lines inside a rectangle.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.ClipLineObj.ToBox">
            <summary>
            Converts the clipping rectangle to a Box object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Render.ClipLineObj.Contains(VectorDraw.Geometry.gPoint)">
            <summary>
            Checks if the given point is inside the rectangle.
            </summary>
            <param name="pt">A gPoint object to be checked.</param>
            <returns>True if the point is inside the clipping rectangle.</returns>
        </member>
        <member name="M:VectorDraw.Render.ClipLineObj.Contains(VectorDraw.Geometry.Box)">
            <summary>
            Determines if the passed rectangular Box is entirely contained within this rectangular region.
            </summary>
            <param name="rect">The rectangular Box to test. </param>
            <returns>This method returns true if the passed rectangular Box is entirely contained within this rectangular region, otherwise false.</returns>
        </member>
        <member name="M:VectorDraw.Render.ClipLineObj.IntersectsWith(VectorDraw.Geometry.Box)">
            <summary>
            Determines if this rectangle intersects with passed rectangle Box
            </summary>
            <param name="rect">The rectangle Box to test.</param>
            <returns>This method returns true if there is any intersection.</returns>
        </member>
        <member name="M:VectorDraw.Render.ClipLineObj.IsPlineClipping(VectorDraw.Geometry.gPoints)">
            <summary>
            Test if at least a line segment of passed polyline is clipped inside this clip rectangle boundaries.
            </summary>
            <param name="pts">An array of points that consist the polyline</param>
            <returns>True if at least a line segment of passed polyline is clipped inside this clip rectangle boundaries.</returns>
        </member>
        <member name="M:VectorDraw.Render.ClipLineObj.TestLineClipping(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Test if a line segment is clipped inside this clip rectangle boundaries.
            </summary>
            <param name="p1">Start point of line to be tested.</param>
            <param name="p2">End point of line to be tested.</param>
            <returns>
             0 == Completely inside the rectangle
             1 == Completely off the screen
             2 == Clip somehow
            </returns>
        </member>
        <member name="M:VectorDraw.Render.ClipLineObj.#ctor">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Render.ClipLineObj.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes the object with the given parameters.
            </summary>
            <param name="xmin"></param>
            <param name="xmax"></param>
            <param name="ymin"></param>
            <param name="ymax"></param>
        </member>
        <member name="M:VectorDraw.Render.ClipLineObj.#ctor(VectorDraw.Geometry.Box)">
            <summary>
            Initializes the object minimun and maximun bounds from the passed Box object.
            </summary>
            <param name="box"></param>
        </member>
        <member name="M:VectorDraw.Render.ClipLineObj.clipLine(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint@,VectorDraw.Geometry.gPoint@)">
            <summary>
            Clip the line inside the object boundary.
            </summary>
            <param name="p1">Start point of line to be cliped.</param>
            <param name="p2">End point of line to be cliped.</param>
            <param name="p1out">New cliped start point.</param>
            <param name="p2out">>New cliped end point.</param>
            <returns>
             0 == Completely inside the rectangle
             1 == Completely off the screen
             2 == Clip somehow
            </returns>
        </member>
        <member name="M:VectorDraw.Render.ClipLineObj.clipLineI(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Clip the line inside the object boundary.
            </summary>
            <param name="_xmin"> Lower left x of the clip rectangle.</param>
            <param name="_ymin"> Lower left y of the clip rectangle.</param>
            <param name="_xmax"> Upper right x of the clip rectangle.</param>
            <param name="_ymax"> Upper right y of the clip rectangle.</param>
            <param name="_x1">X coordinate of start point of line.</param>
            <param name="_y1">Y coordinate of start point of line.</param>
            <param name="_x2">X coordinate of end point of line.</param>
            <param name="_y2">Y coordinate of end point of line.</param>
            <param name="x1">Reference to Clipped x coordinate of start point. </param>
            <param name="y1">Reference to Clipped y coordinate of start point.</param>
            <param name="x2">Reference to Clipped x coordinate of end point.</param>
            <param name="y2">Reference to Clipped y coordinate of end point.</param>
            <returns>
             0 == Completely inside the rectangle
             1 == Completely off the screen
             2 == Clip somehow
            </returns>
        </member>
        <member name="M:VectorDraw.Render.ClipLineObj.clipLineD(System.Double,System.Double,System.Double,System.Double,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint@,VectorDraw.Geometry.gPoint@)">
            <summary>
            Clip the line inside the object boundary.
            </summary>
            <param name="_xmin"> Lower left x of the clip rectangle.</param>
            <param name="_ymin"> Lower left y of the clip rectangle.</param>
            <param name="_xmax"> Upper right x of the clip rectangle.</param>
            <param name="_ymax"> Upper right y of the clip rectangle.</param>
            <param name="p1">Start point of line.</param>
            <param name="p2">End point of line.</param>
            <param name="p1out">Reference to Clipped of start point. </param>
            <param name="p2out">Reference to Clipped of end point.</param>
            <returns>
             0 == Completely inside the rectangle
             1 == Completely off the screen
             2 == Clip somehow
            </returns>
        </member>
        <member name="P:VectorDraw.Render.ClipLineObj.Xmin">
            <summary>
            Lower left x of the rectangle.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.ClipLineObj.Xmax">
            <summary>
            Upper right x of the rectangle.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.ClipLineObj.Ymin">
            <summary>
            Lower left y of the rectangle.
            </summary>
        </member>
        <member name="P:VectorDraw.Render.ClipLineObj.Ymax">
            <summary>
            Upper right y of the rectangle.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.Fillet">
            <summary>
            Class used to calculate Fillet of geometrical curves.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Fillet.isLeft(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Tests if a point is Left|On|Right of an infinite line.
            </summary>
            <param name="p1">first point of the line</param>
            <param name="p2">secont point of the line</param>
            <param name="pt">point to test</param>
            <returns>
            result > 0 for PT left of the line through P1 and P2
            result =0 for PT on the line
            0 > result for P2 right of the line
            </returns>
        </member>
        <member name="M:VectorDraw.Geometry.Fillet.FilletLineArc(System.Double,VectorDraw.Geometry.gPoint@,VectorDraw.Geometry.gPoint@,VectorDraw.Geometry.gPoint,System.Double,System.Double@,System.Double@,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Calculates the fillet between a line and an arc.
            </summary>
            <param name="filletRad">The fillet radius to be used in the command.Can be 0.</param>
            <param name="lP1">Start point of the line.</param>
            <param name="lP2">End point of the line.</param>
            <param name="aCenter">Center of the arc.</param>
            <param name="aRad">Arc radius.</param>
            <param name="aSagle">Start angle of the arc in radians.</param>
            <param name="aEangle">End angle of the arc in radians.</param>
            <param name="ptOnLine">A point on the line to control the filleting position.</param>
            <param name="ptOnArc">A point on the arc to control the filleting position.</param>
            <param name="newCenter">Returns the center of the created arc that fillets the two segments if the operation was succesfull and the radius is greater than 0.</param>
            <param name="newRadius">Returns the radius of the created arc that fillets the two segments if the operation was succesfull and the radius is greater than 0.</param>
            <param name="newStartAngle">Returns the start angle in radians of the created arc that fillets the two segments if the operation was succesfull and the radius is greater than 0.</param>
            <param name="newEndAngle">Returns the end angle in radians. of the created arc that fillets the two segments if the operation was succesfull and the radius is greater than 0.</param>
            <returns>true if the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Fillet.FilletArcArc(System.Double,VectorDraw.Geometry.gPoint,System.Double,System.Double@,System.Double@,VectorDraw.Geometry.gPoint,System.Double,System.Double@,System.Double@,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Calculates the fillet between two arcs.
            </summary>
            <param name="filletRad">The fillet radius to be used in the command.Can be 0.</param>
            <param name="Arc1Center">The center of the first arc.</param>
            <param name="Arc1Radius">The radius of the first arc.</param>
            <param name="Arc1Sa">Start angle of the first arc.</param>
            <param name="Arc1Ea">End angle of the first arc.</param>
            <param name="Arc2Center">Center point of the second arc.</param>
            <param name="Arc2Radius">Radius of the second arc.</param>
            <param name="Arc2Sa">Start angle of the second arc.</param>
            <param name="Arc2Ea">End angle of the second arc.</param>
            <param name="ptOnArc1">A point on the first arc that controls the filleting position.</param>
            <param name="ptOnArc2">A point on the second arc that controls the filleting position.</param>
            <param name="newCenter">The center of the genereted fillet arc.</param>
            <param name="newRadius">The radius of the genereted fillet arc.</param>
            <param name="newSa">Start angle of the generated fillet arc.</param>
            <param name="newEa">End angle of the generated fillet arc.</param>
            <returns>True if the operation w2as succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Fillet.FilletLineLine(System.Double,VectorDraw.Geometry.gPoint@,VectorDraw.Geometry.gPoint@,VectorDraw.Geometry.gPoint@,VectorDraw.Geometry.gPoint@,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Calculates the fillet between two 2d lines.
            </summary>
            <param name="filletRad">The fillet radius to be used in the command.Can be 0.</param>
            <param name="Line1P1">Start point of the first line.</param>
            <param name="Line1P2">End point of the first line.</param>
            <param name="Line2P1">Start point of the second line.</param>
            <param name="Line2P2">End point of the second line.</param>
            <param name="ptOnLine1">A point on the first line that controls the filleting operation.</param>
            <param name="ptOnLine2">A point on the second line that controls the filleting operation.</param>
            <param name="newCenter">The center of the generated fillet arc.</param>
            <param name="newRadius">The radius of the generated fillet arc.</param>
            <param name="newSa">The start angle of the generated fillet arc.</param>
            <param name="newEa">The end angle of the generated fillet arc.</param>
            <returns></returns>
        </member>
        <member name="F:vdgpcgeo.PolyDefault.m_IsHole">
            Only applies to the first poly and can only be used with a poly that contains one poly
        </member>
        <member name="M:vdgpcgeo.PolyDefault.#ctor">
            Creates a new instance of PolyDefault 
        </member>
        <member name="M:vdgpcgeo.PolyDefault.equals(System.Object)">
            Return true if the given object is equal to this one.
        </member>
        <member name="M:vdgpcgeo.PolyDefault.hashCode">
             Return the hashCode of the object.
            
             @return an integer value that is the same for two objects
             whenever their internal representation is the same (equals() is true)
            
        </member>
        <member name="M:vdgpcgeo.PolyDefault.toString">
            
        </member>
        <member name="M:vdgpcgeo.PolyDefault.clear">
            Remove all of the points.  Creates an empty polygon.
        </member>
        <member name="M:vdgpcgeo.PolyDefault.add(vdgpcgeo.Poly)">
             Add an inner polygon to this polygon - assumes that adding polygon does not
             have any inner polygons.
            
             @throws IllegalStateException if the number of inner polygons is greater than
             zero and this polygon was designated a hole.  This would break the assumption
             that only simple polygons can be holes.
        </member>
        <member name="M:vdgpcgeo.PolyDefault.isEmpty">
            Return true if the polygon is empty
        </member>
        <member name="M:vdgpcgeo.PolyDefault.getBounds">
            Returns the bounding rectangle of this polygon.
            <strong>WARNING</strong> Not supported on complex polygons.
        </member>
        <member name="M:vdgpcgeo.PolyDefault.getInnerPoly(System.Int32)">
            Returns the polygon at this index.
        </member>
        <member name="M:vdgpcgeo.PolyDefault.getNumInnerPoly">
            Returns the number of inner polygons - inner polygons are assumed to return one here.
        </member>
        <member name="M:vdgpcgeo.PolyDefault.getNumPoints">
            Return the number points of the first inner polygon
        </member>
        <member name="M:vdgpcgeo.PolyDefault.getX(System.Int32)">
            Return the X value of the point at the index in the first inner polygon
        </member>
        <member name="M:vdgpcgeo.PolyDefault.getY(System.Int32)">
            Return the Y value of the point at the index in the first inner polygon
        </member>
        <member name="M:vdgpcgeo.PolyDefault.isHole">
             Return true if this polygon is a hole.  Holes are assumed to be inner polygons of
             a more complex polygon.
            
             @throws Exception if called on a complex polygon.
        </member>
        <member name="M:vdgpcgeo.PolyDefault.setIsHole(System.Boolean)">
             Set whether or not this polygon is a hole.  Cannot be called on a complex polygon.
            
             @throws IllegalStateException if called on a complex polygon.
        </member>
        <member name="M:vdgpcgeo.PolyDefault.isContributing(System.Int32)">
            Return true if the given inner polygon is contributing to the set operation.
            This method should NOT be used outside the Clip algorithm.
        </member>
        <member name="M:vdgpcgeo.PolyDefault.setContributing(System.Int32,System.Boolean)">
             Set whether or not this inner polygon is constributing to the set operation.
             This method should NOT be used outside the Clip algorithm.
            
             @throws IllegalStateException if called on a complex polygon
        </member>
        <member name="M:vdgpcgeo.PolyDefault.intersection(vdgpcgeo.Poly)">
             Return a Poly that is the intersection of this polygon with the given polygon.
             The returned polygon could be complex.
            
             @return the returned Poly will be an instance of PolyDefault.
        </member>
        <member name="M:vdgpcgeo.PolyDefault.union(vdgpcgeo.Poly)">
             Return a Poly that is the union of this polygon with the given polygon.
             The returned polygon could be complex.
            
             @return the returned Poly will be an instance of PolyDefault.
        </member>
        <member name="M:vdgpcgeo.PolyDefault.xor(vdgpcgeo.Poly)">
             Return a Poly that is the exclusive-or of this polygon with the given polygon.
             The returned polygon could be complex.
            
             @return the returned Poly will be an instance of PolyDefault.
        </member>
        <member name="M:vdgpcgeo.PolyDefault.getArea">
            Return the area of the polygon in square units.
        </member>
        <member name="T:VectorDraw.Geometry.POINT">
            <summary>
            Represents a simple 2Dimension Point object with x,y values.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.POINT.X">
            <summary>
            The x value of the point's coordinates.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.POINT.Y">
            <summary>
            The y value of the point's coordinates.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.POINT.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <c>POINT</c> structure.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.POINT.op_Implicit(VectorDraw.Geometry.POINT)~System.Drawing.Point">
            <summary>Implicitly casts a <c>POINT</c> to a <see cref="T:System.Drawing.Point"/>.</summary>
            <param name="p">The <c>POINT</c> instance to cast to a <c>Point</c> instance.</param>
            <returns>The casted <c>Point</c> structure.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.POINT.op_Implicit(System.Drawing.Point)~VectorDraw.Geometry.POINT">
            <summary>Implicitly casts a <see cref="T:System.Drawing.Point"/> to a <c>POINT</c>.</summary>
            <param name="p">The <c>Point</c> instance to cast to a <c>POINT</c> instance.</param>
            <returns>The casted <c>POINT</c> structure.</returns>
        </member>
        <member name="T:VectorDraw.Geometry.gTriangles">
            <summary>
            An array of <see cref="T:VectorDraw.Geometry.gTriangle"/> objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangles.AddItem(VectorDraw.Geometry.gTriangle)">
            <summary>
            Adds a gTriangle object to the collection.
            </summary>
            <param name="value">The gTriangle object to be added to the collection.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangles.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangles.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangles.AddRange(VectorDraw.Geometry.gTriangles)">
            <summary>
            Adds the objects of one collection to the end of this collection.
            </summary>
            <param name="c">A gTriangles collection to be added to this collection.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangles.Clone">
            <summary>
            Create a new gTriangles collection having a copy of all items of this collection.
            </summary>
            <returns>A new created gTriangles collection.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangles.TransformBy(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms the object with the given Matrix.
            </summary>
            <param name="xform">A Matrix object required for the transformation.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangles.slice(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector)">
            <summary>
            Create a new gTriangles collection in order to be sliced using a plane from the passed parameters.
            </summary>
            <param name="origin">A point needed to determine the slice plane.</param>
            <param name="direction">A Vector that is perpendicular to the plane and specifies the direction of the visible portion of the gTriangles.</param>
            <returns>A new gTriangles collection with all of its items that are laid on the positive direction of the selected slice plane.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangles.Volume(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector)">
            <summary>
            Calculate the volume of the collection sliced portion, using a plane from the passed parameters.
            </summary>
            <param name="origin">A point needed to determine the slice plane.</param>
            <param name="direction">A Vector that is perpendicular to the plane and specifies the direction of the visible portion of the gTriangles.</param>
            <returns>The volume of the sliced collection portion.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangles.Area">
            <summary>
            Returns the sum of area of​all triangles in the list
            </summary>
            <returns>The sum of area of​all triangles in the list</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangles.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangles.InsertAt(System.Int32,VectorDraw.Geometry.gTriangle)">
            <summary>
            Insert an object at a specified index.
            </summary>
            <param name="index">The index where the object will be inserted.</param>
            <param name="Object">The object to be inserted.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangles.RemoveAt(System.Int32)">
            <summary>
            Removes an object from a specified index of the collection.
            </summary>
            <param name="index">The index of the object to be removed.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangles.RemoveItem(VectorDraw.Geometry.gTriangle)">
            <summary>
            Removes a specified object from the list.
            </summary>
            <param name="Object">The object to be removed from the collection.</param>
            <returns>True if the object was removed and false if the object was not found.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangles.RemoveLast">
            <summary>
            Removes the last object of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangles.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the gPoints object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangles.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the gPoints object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangles.ToString">
            <summary>
            Gets a System.String that represents the count of the gPoints Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangles.IntersectWith(VectorDraw.Geometry.gPoints,VectorDraw.Geometry.gPoints@)">
            <summary>
            Calculate the intesection points between a polyline defined by a collection of points and each triangle item of this collection.
            </summary>
            <param name="region"> collection of points that defines a region.</param>
            <param name="intPts">A collection of points that will be filled with intersection points.</param>
            <returns>True if at least one intersection exist.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangles.RemoveZeroAreaTriangles">
            <summary>
            Remove all triangles in the collection that their <see cref="M:VectorDraw.Geometry.gTriangle.Area"/> is equal to 0.0
            </summary>
            <returns>The number of items that removed from the collection.</returns>
            <remarks><see cref="F:VectorDraw.Geometry.Globals.DefaultAreaEquality"/> is used to compare area values.</remarks>
            <example>
            It gets the triangles of a vdPolyface that their area is different from zero.
            <code>
                            gPoints verts = new gPoints();
                            verts.Add(new gPoint(0, 0, 0));
                            verts.Add(new gPoint(1, 0, 0));
                            verts.Add(new gPoint(1, 1, 0));
                            verts.Add(new gPoint(0, 1, 0));
                            verts.Add(new gPoint(1, 0, 0));
                            verts.Add(new gPoint(1, 2, 0));
                            verts.Add(new gPoint(2, 2, 0));
                            verts.Add(new gPoint(2, 2, 0));
                            Int32Array fl = new Int32Array();
                            fl.AddItem(1); fl.AddItem(2); fl.AddItem(3); fl.AddItem(4); fl.AddItem(-1);
                            fl.AddItem(5); fl.AddItem(6); fl.AddItem(7); fl.AddItem(8); fl.AddItem(-1);
                            vdPolyface polyf = new vdPolyface(doc, verts, fl);
                            doc.Model.Entities.AddItem(polyf);
                            polyf.Update();
                            polyf.Invalidate();
                            gTriangles gtr = polyf.GetTriangles();
                            int ret = gtr.RemoveZeroAreaTriangles();
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangles.RemoveZeroAreaTriangles(System.Double)">
            <summary>
            Remove all triangles in the collection that their <see cref="M:VectorDraw.Geometry.gTriangle.Area"/> is equal to 0.0
            </summary>
            <param name="equality">Equality used to compare the triangle area.</param>
            <returns>The number of items that removed from the collection.</returns>
            <example>
            It gets the triangles of a vdPolyface that their area is different from zero.
            <code>
                            gPoints verts = new gPoints();
                            verts.Add(new gPoint(0, 0, 0));
                            verts.Add(new gPoint(1, 0, 0));
                            verts.Add(new gPoint(1, 1, 0));
                            verts.Add(new gPoint(0, 1, 0));
                            verts.Add(new gPoint(1, 0, 0));
                            verts.Add(new gPoint(1, 2, 0));
                            verts.Add(new gPoint(2, 2, 0));
                            verts.Add(new gPoint(2, 2, 0));
                            Int32Array fl = new Int32Array();
                            fl.AddItem(1); fl.AddItem(2); fl.AddItem(3); fl.AddItem(4); fl.AddItem(-1);
                            fl.AddItem(5); fl.AddItem(6); fl.AddItem(7); fl.AddItem(8); fl.AddItem(-1);
                            vdPolyface polyf = new vdPolyface(doc, verts, fl);
                            doc.Model.Entities.AddItem(polyf);
                            polyf.Update();
                            polyf.Invalidate();
                            gTriangles gtr = polyf.GetTriangles();
                            int ret = gtr.RemoveZeroAreaTriangles(0.0001);
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangles.RemoveInsideTriangles(VectorDraw.Geometry.gPoints)">
            <summary>
            Removes all triangles that are completely inside region.
            </summary>
            <param name="region">A collection of <see cref="T:VectorDraw.Geometry.gPoints"/> that defines a closed region.</param>
            <returns>
            A collection with triangles that was removed from this collection object
            or null if the passed region is null.
            </returns>
            <example> <see cref="M:VectorDraw.Geometry.Delaunay.Triangulate(VectorDraw.Geometry.gPoints,System.UInt16)"/> </example>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangles.RemoveOutsideTriangles(VectorDraw.Geometry.gPoints)">
            <summary>
            Removes all triangles that are completely outside a region.
            </summary>
            <param name="region">A collection of <see cref="T:VectorDraw.Geometry.gPoints"/> that defines a closed region.</param>
            <returns>
            A collection with triangles that was removed from this collection object
            or null if the passed region is null.
            </returns>
            <example> <see cref="M:VectorDraw.Geometry.Delaunay.Triangulate(VectorDraw.Geometry.gPoints,System.UInt16)"/> </example>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangles.IsInsideInterpolation(VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the input point Z value by Interpolation with the first triangle where the point is inside.
            </summary>
            <param name="pt">A reference gPoint which Z value will be calculated.</param>
            <returns>True if the point is inside a triangle of the collection. </returns>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangles.GetSliceRegionPoints(VectorDraw.Generics.vdArray{VectorDraw.Geometry.gPoints},System.UInt16)">
            <summary>
            Returns a collection of all points in SliceRegions, all intersection points between regions and all intersection between region segments and this Triangle collection.
            </summary>
            <param name="SliceRegions">A collection of regions.</param>
            <param name="precision">The decimal precision for the passed points.</param>
            <returns>a collection of all points that belongs on SliceRegions projected on triangles of this collection.</returns>
            <remarks>Use this method to add new points for <see cref="M:VectorDraw.Geometry.Delaunay.Triangulate(VectorDraw.Geometry.gPoints,System.UInt16)"/> method </remarks>
            <example> <see cref="M:VectorDraw.Geometry.Delaunay.Triangulate(VectorDraw.Geometry.gPoints,System.UInt16)"/> </example>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangles.IntersectWithPlane(VectorDraw.Geometry.Vector,VectorDraw.Geometry.gPoint,System.Double)">
            <summary>
            Calculate the section of the triangles with a plane
            </summary>
            <param name="PlaneNormal">A vector showing the plane's direction</param>
            <param name="PlanePoint">A point in the plane</param>
            <param name="Equality">Equality to be used i order to define if two points are equal.</param>
            <returns>Returns collection of perigrams that represent the section of triangles with input plane. </returns>
        </member>
        <member name="P:VectorDraw.Geometry.gTriangles.Item(System.Int32)">
            <summary>
            Get/Set the object at a specified index of the collection.
            </summary>
            <param name="index">The index of the object.</param>
            <returns>The object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Geometry.gTriangles.Count">
            <summary>
            Get the number of items in the collection.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.gTriangle">
            <summary>
            This object is used in the vdGroundSurface object.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.gTriangle.mp1">
            <summary>
            First point of the triangle.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.gTriangle.mp2">
            <summary>
            Second point of the triangle.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.gTriangle.mp3">
            <summary>
            Third point of the triangle.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangle.#ctor">
            <summary>
            Initiaslizes the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangle.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Initializes the grTriangle object with three points.
            </summary>
            <param name="p1">First point of the triangle.</param>
            <param name="p2">Second point of the triangle.</param>
            <param name="p3">Third point of the triangle.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangle.IntersectWith(VectorDraw.Geometry.gPoints,VectorDraw.Geometry.gPoints@)">
            <summary>
            Calculate the intesection points between a polyline defined by a collection of points and each segment of this triangle object.
            </summary>
            <param name="region"> collection of points that defines a region.</param>
            <param name="intPts">A collection of points that will be filled with intersection points.</param>
            <returns>True if at least one intersection exist.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangle.IsInsideRegion(VectorDraw.Geometry.gPoints)">
            <summary>
             Check in 2d, if this triangle is completely inside a region defined by an array of points.
            </summary>
            <param name="region">A region as a <see cref="T:VectorDraw.Geometry.gPoints"/> collection</param>
            <returns>True if all of the three points of triangle are inside the region.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangle.TransformBy(VectorDraw.Geometry.Matrix)">
            <summary>
            Transforms the object with the given Matrix.
            </summary>
            <param name="xform">A Matrix object required for the transformation.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangle.Clone">
            <summary>
            Returns a new created gTriangle object as clone to this one.
            </summary>
            <returns>A new created gTriangle object that has all P1,P2,P3 values equal to this object.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangle.GetPlane(VectorDraw.Geometry.Vector@,VectorDraw.Geometry.gPoint@)">
            <summary>
            Calculates the plane geometry of the triagle.
            </summary>
            <param name="PlaneNormal">A vector showing the plane's direction</param>
            <param name="PlanePoint">A point in the plane</param>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangle.IntersectWithPlane(VectorDraw.Geometry.Vector,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint@,VectorDraw.Geometry.gPoint@)">
            <summary>
            Checks if a triangle intersects with a plane
            </summary>
            <param name="PlaneNormal">A vector showing the plane's direction</param>
            <param name="PlanePoint">A point in the plane</param>
            <param name="p1">If triangle intersects plane, p1 is the first point of the intersection segment</param>
            <param name="p2">If triangle intersects plane, p2 is the second point of the intersection segment</param>
            <returns>0 = disjoint (no intersection) 
                     1 = intersection in the unique segment p1,p2 which is the more interesting case
                     2 = the triangle intersects only in the unique point p1=p2
                     3 = the triangle lies entirly on the plane, no intersetion is returned
            </returns>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangle.IntersectWithVector(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector,VectorDraw.Geometry.gPoint@)">
            <summary>
            Checks if a vector line intersects a plane
            </summary>
            <param name="origin">The origin point of vector line</param>
            <param name="normal">The direction of vector line</param>
            <param name="pint">If intersection is found I is the point of intersection</param>
            <returns>0 = disjoint (no intersection) 
                     1 = intersection in the unique point I 
                     2 = the segment lies in the plane
            </returns>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangle.GetInterpolationPoint(VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the projection of the passed 2d point to a plane by changing its Z value.
            </summary>
            <param name="pt">The point that it's projection is asked.</param>
            <returns>True if the Z value was succesfully calculated or false if the <see cref="T:VectorDraw.Geometry.gTriangle"/> consist from three points that belongs to the same line in 2d Co-ordinate system.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangle.InterpolatePoint(VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the projection of the passed 2d point to a plane.
            </summary>
            <param name="pt">The point that it's projection is asked.</param>
            <returns>The z value of the passed 2d point.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangle.IsPointInThis(VectorDraw.Geometry.gPoint)">
            <summary>
            Checks if the given point is inside the triangle.
            </summary>
            <param name="pt">The point to be checked.</param>
            <returns>True if the passed point is inside the triangle.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangle.Area">
            <summary>
            Calculates the area that the <see cref="P:VectorDraw.Geometry.gTriangle.P1"/> , <see cref="P:VectorDraw.Geometry.gTriangle.P2"/> and <see cref="P:VectorDraw.Geometry.gTriangle.P3"/> points enclose.
            </summary>
            <returns>A double value representing the closed area of the triangle.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangle.CenterPoint">
            <summary>
            Returns the intersection median point.
            </summary>
            <returns>The intersection median point.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangle.InsidePoint">
            <summary>
            Returns a point that is inside the triangle close to P1 point.
            </summary>
            <returns>A point that is inside the triangle close to P1 point.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangle.FromString(System.String)">
            <summary>
            Sets the P1,P2,P3 values of the object from a given string.
            </summary>
            <param name="str">A string representing 3 points with the following syntax: P1;P2;P3 .</param>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangle.ToString(VectorDraw.Serialize.Serializer)">
            <summary>
            Gets a System.String that represents the properties of Object using the format parameter for visualization.
            </summary>
            <param name="serializer">The Serializer object where the object is going to be saved.</param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangle.ToString">
            <summary>
            Gets a System.String that represents the coordinates of the gTriangle Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gTriangle.ToString(System.String)">
            <summary>
            Gets a System.String that represents the coordinates of the gTriangle Object using the format parameter for visualization.
            </summary>
            <param name="format">A parameter used to specify the format the coordinates should be displayed.</param>
            <returns>A string representing the coordinates of the gTriangle object.</returns>
        </member>
        <member name="P:VectorDraw.Geometry.gTriangle.P1">
            <summary>
            Get the first point of the triangle.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.gTriangle.P2">
            <summary>
            Get the second point of the triangle.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.gTriangle.P3">
            <summary>
            Get the third point of the triangle.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.gPointTypeConverter">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gPointTypeConverter.getLunits(VectorDraw.Geometry.LUnits)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gPointTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPointTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPointTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPointTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Geometry.gPoints">
            <summary>
            This is a collection of gPoint objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.Create(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Create and returns a new gPoints collection from passing 3 points.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.Create(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Create and returns a new gPoints collection from passing 4 points.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.#ctor(System.Drawing.Point[])">
            <summary>
            Create and returns a new gPoints collection from an array of <see cref="T:System.Drawing.Point"/>.
            Z values are all set to zero (0).
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.#ctor(VectorDraw.Geometry.gPoint[])">
            <summary>
            Initializes a new instance of the object and adds the passed items at the end of this collection.
            </summary>
            <param name="items">An array of <see cref="T:VectorDraw.Geometry.gPoint"/> objects.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.#ctor">
            <summary>
            Initializes the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.#ctor(System.Int32)">
            <summary>
            Initializes the collection with a given capacity.
            </summary>
            <param name="capacity">An integer representing the preallocated memory size of the collection.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.TestOffsetSide(VectorDraw.Geometry.gPoint)">
            <summary>
            Returns -1.0 if the point is on the left side accordingly to the polyline direction and 1.0 if it is on the right side.
            </summary>
            <param name="pt">The point with which the test will be commited in the same Coordinate System as the gPoints in this collection.</param>
            <returns>-1.0 if the point is on the left side accordingly to the polyline direction and 1.0 if it is on the right side.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.Resize(System.Int32,System.Boolean)">
            <summary>
            change the size of array.
            </summary>
            <param name="size">New size of collection</param>
            <param name="initialize">If it is true all items in the collection are initialized to their default value.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Applies the passed x,y,z scale values to each point in collection.
            </summary>
            <param name="x">X scale factor of the Matrix.</param>
            <param name="y">Y scale factor of the Matrix.</param>
            <param name="z">Z scale factor of the Matrix.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.Translate(System.Double,System.Double,System.Double)">
            <summary>
            Translates each gPoint in the collection using the dx,dy and dz passed values.
            </summary>
            <param name="dx">Distance at the x direction.</param>
            <param name="dy">Distance at the y direction.</param>
            <param name="dz">Distance at the z direction.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.GetOutlineBoundary">
             <summary>
            Returns an array of points that consist the outline boundary set (known as Convex Hull)containing all points of this collection.
             </summary>
             <returns>An array of points that consist the outline boundary set containing all points of this collection. </returns>
             <example>
             This Class can be used like this
             <code>
                            //Find the outline boundary containing all grip points of selected entities
                            //Prompt the user to select some entities.
                            bool suc = doc.CommandAction.CmdSelect(null);
                            if (!suc) return;
                            //get the selection with selected entities 
                            vdSelection set = doc.Selections.FindName("VDRAW_PREVIOUS_SELSET");
                            //A collection to hold all the grip points of selected entities
                            gPoints all_gpipoints = new gPoints();
                            //fill the collection with grip points of each entity
                            foreach (vdFigure fig in set)
                            {
                                 all_gpipoints.AddRange(fig.GetGripPoints());
                            }
                            //Find the outline boundary  containing all grip points of selected entities, as an array of gPoints
                            gPoints boundpoints = all_gpipoints.GetOutlineBoundary();
            
                            //create a new polyline that contains all points of the boundary in order to view the result in drawing area.
                            vdPolyline pline = new vdPolyline();
                            pline.SetUnRegisterDocument(doc);
                            pline.setDocumentDefaults();
                            pline.VertexList = new Vertexes(boundpoints);
                            doc.Model.Entities.AddItem(pline);
                            doc.Redraw(true);
            </code>
            </example>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.RemoveInLinePoints">
            <summary>
            Removes points that are inline from this gPoints collection.
            </summary>
            <returns>The number of points removed.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.GetPlane">
            <summary>
            Calculate the plane Matrix where the points are belongs to.
            </summary>
            <returns>The plane Matrix where the points are belongs to.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.FindEdge(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Finds if an edge exists in the collection.
            </summary>
            <param name="p1">First point of the edge.</param>
            <param name="p2">Second point of the edge.</param>
            <returns>True if the edge is inside the collection.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.FindItem(VectorDraw.Geometry.gPoint,System.Double)">
            <summary>
            Find a given gPoint object in  the collection.
            </summary>
            <param name="item">The object to search for.</param>
            <param name="Equality">A double value representing the equality(for example 0.00001).</param>
            <returns>The index where the object was found or -1 if not found.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.FindItem(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Find a given gPoint object in  the collection.
            </summary>
            <param name="x">The x parameter of the point to be found.</param>
            <param name="y">The y parameter of the point to be found.</param>
            <param name="z">The z parameter of the point to be found.</param>
            <param name="Equality">The equality to be used for the comparison.</param>
            <returns>The index in the collection of the first occurance found.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.ToString">
            <summary>
            Gets a System.String that represents the count of the gPoints Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.AddUnique(VectorDraw.Geometry.gPoint,System.Double)">
            <summary>
            Add a gPoint to the end of the collection only if collection does not contains a point equals to the input point.
            </summary>
            <param name="value">The object to add.</param>
            <param name="equality">A double value representing the equality used to compare 2 items.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.Add(VectorDraw.Geometry.gPoint)">
            <summary>
            Add a gPoint to the end of the collection.
            </summary>
            <param name="value">The object to add.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.Add(System.Double,System.Double,System.Double)">
            <summary>
            Add a gPoint to the end of the collection.
            </summary>
            <param name="x">The x coordinate of the point.</param>
            <param name="y">The y coordinate of the point.</param>
            <param name="z">The z coordinate of the point.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.ChangeOrder(VectorDraw.Geometry.gPoint,System.Boolean)">
            <summary>
            Places an existing object of the collection to the beginning or the end of the list.
            </summary>
            <param name="Object">The object to be placed.</param>
            <param name="ToBack">If this value is true then the object will be placed to the end of the list else it will be placed to the beginning.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.EnsureCapacity(System.Int32)">
            <summary>
            Changes the capacity of the collection to the given value if the existing capacity is less than this value.
            </summary>
            <param name="min">A value representing the new capacity of the collection.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.InsertAt(System.Int32,VectorDraw.Geometry.gPoint)">
            <summary>
            Insert an object at a specified index.
            </summary>
            <param name="index">The index where the object will be inserted.</param>
            <param name="Object">The object to be inserted.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.RemoveAt(System.Int32)">
            <summary>
            Removes an object from a specified index of the collection.
            </summary>
            <param name="index">The index of the object to be removed.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.RemoveItem(VectorDraw.Geometry.gPoint)">
            <summary>
            Removes a specified object from the list.
            </summary>
            <param name="Object">The object to be removed from the collection..</param>
            <returns>True if the object was removed and false if the object was not found.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.Reverse">
            <summary>
            Changes the order of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.RemoveLast">
            <summary>
            Removes the last object of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.AddRange(VectorDraw.Geometry.Box)">
            <summary>
            Adds the gPoints of the Box to the collection.
            </summary>
            <param name="box2d">A Box object.5 items will be added to the collection.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.AddRangeUnique(VectorDraw.Geometry.gPoints,System.Double)">
            <summary>
            Adds the objects of one collection to the end of this collection.
            Only points that are existing with same values are added.
            </summary>
            <param name="pts">A gPoints collection to be added to this collection.</param>
            <param name="equality">A double value representing the equality used to compare 2 items.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.AddRange(VectorDraw.Geometry.gPoints)">
            <summary>
            Adds the objects of one collection to the end of this collection.
            </summary>
            <param name="c">A gPoints collection to be added to this collection.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.Clone">
            <summary>
            Create a new gPoints collection having a copy of all items of this collection.
            </summary>
            <returns>A new created gPoints collection.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.makeClosed">
            <summary>
            Adds a point in tail of collection equal with the first point
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.Is2D(System.Double)">
            <summary>
            Checks if all points have the same z value.
            </summary>
            <param name="equality">A double value representing the equality(for example 0.00001).</param>
            <returns>True all points have the same z value.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.Is2D(System.Double,VectorDraw.Geometry.Vector)">
            <summary>
            Checks if all points are belong into the same plane parallel to the plane that is perpendicular to the passed planeNormal
            </summary>
            <param name="equality">A double value representing the equality(for example 0.00001).</param>
            <param name="planeNormal">A normal that defines a perpendicular plane.</param>
            <returns>True all points have the same z value.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.IsClosed(System.Double)">
            <summary>
            Check if The First and last Point are equal taking into consideration the Equality value.
            </summary>
            <param name="Equality">A double value representing the equality(for example 0.00001)</param>
            <returns>Returns true if The First and last Point are equal</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.IsClosed">
            <summary>
            Check if The First and last Point are equal taking into consideration the default <see cref="F:VectorDraw.Geometry.Globals.DefaultPointEquality"/> value.
            </summary>
            <returns>Returns true if The First and last Point are equal</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.GetTransformCopy(VectorDraw.Geometry.Matrix)">
            <summary>
            Returns a copy of this colletion with all of gPoint Items transform by input Matrix
            </summary>
            <param name="m">A <see cref="T:VectorDraw.Geometry.Matrix"/> used to transform the points</param>
            <returns>A copy of this colletion with all of gPoint Items transform by input Matrix</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.RemoveEqualPoints2d(System.Double)">
            <summary>
            Removes Points that have the same x and y values as the next point in the collection.
            </summary>
            <param name="equality">A double value representing the equality(for example 0.00001).</param>
            <remarks>if <see cref="P:VectorDraw.Geometry.gPoints.MethodApplyFlag"/> is <see cref="F:VectorDraw.Geometry.gPoints.MethodApplyFlags.DisableRemoveEqualPoints"/> this method does nothing.</remarks>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.RemoveEqualPoints(System.Double)">
            <summary>
            Removes Points that are the same as the next point in the collection.
            </summary>
            <param name="equality">A double value representing the equality(for example 0.00001).</param>
            <remarks>if <see cref="P:VectorDraw.Geometry.gPoints.MethodApplyFlag"/> is <see cref="F:VectorDraw.Geometry.gPoints.MethodApplyFlags.DisableRemoveEqualPoints"/> this method does nothing.</remarks>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.RemoveEqualPoints">
            <summary>
            Removes Points that are the same as the next point in the collection.
            </summary>
            <remarks>if <see cref="P:VectorDraw.Geometry.gPoints.MethodApplyFlag"/> is <see cref="F:VectorDraw.Geometry.gPoints.MethodApplyFlags.DisableRemoveEqualPoints"/> this method does nothing.</remarks>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.Last">
            <summary>
            Get the last object of the collection.
            </summary>
            <returns>A reference to the Last item in the collection.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.IsPointInside(VectorDraw.Geometry.gPoint)">
            <summary>
            Check if a point is inside a region defined by this collection
            Note: Method assumes that gPoints are 2D points(ignore z value) and in the same coordinate system as pt
            </summary>
            <param name="pt">A <see cref="T:VectorDraw.Geometry.gPoint"/> as 2D point (ignores Z)</param>
            <returns>True if the passed point is inside the region/</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.GetBox">
            <summary>
            Calculate a Box object that fits all points of the collection.
            </summary>
            <returns>A Box object that contains all points of the collection.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.IsClockWise">
            <summary>
            Returns true if the area of the points is > 0.0
            </summary>
            <returns>True if the area of the points is > 0.0</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.Centroid">
            <summary>
            Find a polygon's centroid (center of mass)
            </summary>
            <returns>A point value representing the centroid of the collection's points.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.ToClipPolygons">
            <summary>
            Calculate the clipping polygons of the area of these Points.
            </summary>
            <returns>A vdArray of gPoints that are the polygons that this gPoints consist of.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.Area">
            <summary>
            Calculates the area that the 2d points of the collection enclose.
            </summary>
            <returns>A double value representing the closed area of the collection's points.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.Area(System.Boolean)">
            <summary>
            Calculates the area that the 2d points of the collection enclose.
            </summary>
            <param name="isTrigleStrip">True if points in this collection are in opengl triangle_strip order logic.</param>
            <returns>A double value representing the closed area of the collection's points.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.Area3D(VectorDraw.Geometry.Vector)">
            <summary>
            Calculates the area that the 3d points of the collection enclose.
            </summary>
            <param name="N">The Vector that is perpedicular to the plane of the point collection(extrusion vector).</param>
            <returns>A double value representing the closed area of the collection's points.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.Length">
            <summary>
            Calculates the length of the line that the points of the collection make.
            </summary>
            <returns>The length that represents the collection's points.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.GetAllHorizodalLinePoints(System.Double)">
            <summary>
            Returns all points intersect a region from this points with a horizontal line throw on dy co-ordiante.
            </summary>
            <returns>all points intersect a region from this points with a horizontal line throw on dy co-ordiante.</returns>
            <remarks>The return points are filtering by remomoving equal points and sorted from minimun x to maximun x values.</remarks>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.GetHorizodalLinePoints(VectorDraw.Geometry.gPoints,System.Double)">
            <summary>
            Internally sorting points.
            </summary>
            <param name="points"></param>
            <param name="dy"></param>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.shortAscendingX(System.Double)">
            <summary>
            Sorts the item of the collection ascending by the x value of the points.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.shortAscendingY(System.Double)">
            <summary>
            Sorts the item of the collection ascending by the y value of the points.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.shortAscendingZ(System.Double)">
            <summary>
            Sorts the item of the collection ascending by the y value of the points.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.shortAscendingY">
            <summary>
            Sorts the item of the collection ascending by the y value of the points.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.shortAscendingX">
            <summary>
            Sorts the item of the collection ascending by the x value of the points.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.shortAscendingZ">
            <summary>
            Sorts the item of the collection ascending by the y value of the points.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.shortByCircleCenter(VectorDraw.Geometry.gPoint,System.Double)">
            <summary>
            Sorts the items of the collection depending the angle from a given center point.
            </summary>
            <param name="Center">A gPoint representing the center point.</param>
            <param name="StartAngle">An double value representing the starting angle in radius for the first point in sorting list</param>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.shortByCircleCenter(VectorDraw.Geometry.gPoint)">
            <summary>
            Sorts the items of the collection depending the angle from a given center point.
            </summary>
            <param name="Center">A gPoint representing the center point.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.shortByPointOrigin(VectorDraw.Geometry.gPoint)">
            <summary>
            Sorts the points of the collection by the distance from a given origin point.
            </summary>
            <param name="Origin">A gPoint representing the origin point.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.FindClosest(VectorDraw.Geometry.gPoint,System.Boolean)">
            <summary>
            Returns a reference of the closest point to the passed pt that belongs to the collection.
            </summary>
            <param name="pt">A gPoint used to get the distance from each point in the collection .</param>
            <param name="use2dComparing">Set it to true in order to compare using 2d distances ignoring the z values.</param>
            <returns>A reference of the closest point to the passed pt that belongs to the collection.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.shortByPointOrigin2dCompareZ(VectorDraw.Geometry.gPoint)">
            <summary>
            Sorts the points of the collection by the 2d distance from a given origin point.In case of two points have the same distance their Z values are compare.
            </summary>
            <param name="Origin">A gPoint representing the origin point.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.shortByPointOrigin2d(VectorDraw.Geometry.gPoint)">
            <summary>
            Sorts the points of the collection by the 2d distance from a given origin point.
            </summary>
            <param name="Origin">A gPoint representing the origin point.</param>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.Sort(System.Collections.Generic.IComparer{VectorDraw.Geometry.gPoint})">
            <summary>
             Sorts the elements in a range of elements in an entire collection using the specified
                <see cref="T:System.Collections.Generic.IComparer`1"/> generic interface.
            </summary>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/> generic interface implementation
                to use when comparing elements, or null to use the <see cref="T:System.IComparable`1"/>
                generic interface implementation of each element.
            </param>
            <exception cref="T:System.ArgumentException">
            The implementation of comparer caused an error during the sort. 
            For example, comparer might not return 0 when comparing an item with itself.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            comparer is null, and one or more elements in array does not implement the <see cref="T:System.IComparable`1"/>  generic interface
            </exception>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.Measure(System.Double)">
            <summary>
            Divides the curve into segments with length equal to the passed parameter.
            </summary>
            <param name="length">The length of each segment.</param>
            <returns>A collection of gPoints that represent each divided segment with equal length.The points returned are centered to the curve.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.Divide(System.Int32)">
            <summary>
            Divides the curve into NumSegments segments.
            </summary>
            <param name="NumSegments">The number of segments to divide the curve into.</param>
            <returns>A collection of gPoints on the curve that devide the curve into NumSegments segments.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.getPointAtDist3d(System.Double)">
            <summary>
            Returns a gPoint at as given distance from the first point of the collection
            </summary>
            <param name="dist">A double value representing  the distance.</param>
            <returns>Returns a gPoint that is located at a given distance from the beggining of the polyline that the collection's points draw.Returns null if the distance is bigger than the length of the polyline.</returns>
            <remarks >The dist must be less that the length of the collection's points.</remarks>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.getPointAtDist2d(System.Double)">
            <summary>
            Returns a gPoint at as given distance from the first point of the collection.All points have the same elevation(z value).
            </summary>
            <param name="dist">A double value representing  the distance.</param>
            <returns>Returns a gPoint that is located at a given distance from the beggining of the polyline that the collection's points draw.Returns null if the distance is bigger than the length of the polyline.</returns>
            <remarks >Note that the points must have the same elevation(z value).The dist must be less that the length of the collection's points.</remarks>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.getDistAtPoint2d(VectorDraw.Geometry.gPoint)">
            <summary>
            Get the distance from the first point of the collection to the given gPoint.Note all points must have the same elevation(z value).
            </summary>
            <param name="pt">A gPoint object.</param>
            <returns>The distance between the given point and the first point of the collection.Returns -1.0 if the passed point is invalid(not on the line). The distance returned is the length along the line between the first pont of the collection and the given point.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.op_Addition(VectorDraw.Geometry.gPoints,VectorDraw.Geometry.gPoint)">
            <summary>
            Adds the passed collection items into a new one.
            </summary>
            <param name="pts"></param>
            <param name="pt"></param>
            <returns>A new collection that contains all items of passed parameters.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.op_Addition(VectorDraw.Geometry.gPoints,VectorDraw.Geometry.gPoints)">
            <summary>
            Adds the passed collection items into a new one.
            </summary>
            <param name="pts1"></param>
            <param name="pts2"></param>
            <returns>A new collection that contains all items of passed parameters.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.IntersectWith(VectorDraw.Geometry.gPoints,VectorDraw.Geometry.gPoints@)">
            <summary>
            Calculate the intesection points between two regions.
            </summary>
            <param name="region"> collection of points that defines a region.</param>
            <param name="intPts">A collection of points that will be filled with intersection points.</param>
            <returns>True if at least one intersection exist.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.IntersectWith(VectorDraw.Geometry.gPoints,VectorDraw.Geometry.gPoints@,System.Int32)">
            <summary>
            Calculate the intesection points between two regions.
            </summary>
            <param name="region"> collection of points that defines a region.</param>
            <param name="intPts">A collection of points that will be filled with intersection points.</param>
            <param name="extend">0=OnBoth , 1=ExtendThis , 2=ExtendArg , 3=ExtendBoth</param>
            <returns>True if at least one intersection exist.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.IntersectWith(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoints@)">
            <summary>
            Calculate the intesection points between a polyline defined by this collection of points and a line segment
            </summary>
            <param name="p1">First point of line segment.</param>
            <param name="p2">Second point of line segment.</param>
            <param name="intPts">A collection of points that will be filled with intersection points.</param>
            <returns>True if at least one intersection exist.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.IntersectWith(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoints@,System.Int32)">
            <summary>
            Calculate the intesection points between a polyline defined by this collection of points and a line segment
            </summary>
            <param name="p1">First point of line segment.</param>
            <param name="p2">Second point of line segment.</param>
            <param name="intPts">A collection of points that will be filled with intersection points.</param>
            <param name="extend">0=OnBoth , 1=ExtendThis , 2=ExtendArg , 3=ExtendBoth</param>
            <returns>True if at least one intersection exist.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.PointOnThis3d(VectorDraw.Geometry.gPoint)">
            <summary>
            Checks if a given point is on the line that the collection's point draw.
            </summary>
            <param name="pt">The given points.</param>
            <returns>True if the point belongs to the line that the collection's point draw.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.PointOnThis2d(VectorDraw.Geometry.gPoint)">
            <summary>
            Checks if a given point is on the line that the collection's point draw.
            </summary>
            <param name="pt">The given points.</param>
            <returns>True if the point belongs to the line that the collection's point draw.Note that all points must have the same elevation(z value).</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.GetSmoothNormals(System.Double)">
            <summary>
            Returns an array of <see cref="T:VectorDraw.Geometry.Vector"/> with size equal to this <see cref="P:VectorDraw.Geometry.gPoints.Count"/> property.
            Each Vector represents the normal for each vertex used when rendering a surface of this points with thickness. 
            </summary>
            <param name="angle">Get/Set the angle in degrees between 0 and 90 used to calculate normals for each vertex in each vertical face when rendering a region with thickness.</param>
            <returns>An array of <see cref="T:VectorDraw.Geometry.Vector"/> with size equal to this <see cref="P:VectorDraw.Geometry.gPoints.Count"/> property.</returns>
            <remarks>
            if angle is 0 then the normals are not smoothing and are perpendicular to the face that they belongs</remarks>
            <remarks>if angle is 90 then the normal of each vertex is calculating as the average value between previous and next vertical face normals.</remarks>
            <remarks>if angle is between 0 and 90 and other than 0 and 90 degrees then the normal of each vertex is calculating as the average value with the neighboring plane faces that defines angle less or equal with input angle.
            </remarks>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.gPointsFromTriangleStrip(VectorDraw.Geometry.gPoints)">
            <summary>
            Internally used for drawing solid polygon when is TriangleStrip in render select.
            </summary>
            <param name="pts"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.GetNormal">
            <summary>
            Returns the first valid normal consisted from three contiguous points
            </summary>
            <returns>The first valid normal consisted from three contiguous points</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.SetZAtPoint2d(VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates and changes the z parameter of the passed point so this point is projected to this perigram.
            </summary>
            <param name="pt">A point to be tested.</param>
            <returns>True if the given 2d point(x,y) is projected on this perigram.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.Triangulate(VectorDraw.Geometry.Vector,VectorDraw.Geometry.gPoints.Triangulation)">
            <summary>
            Makes triagles from the collection's points.
            </summary>
            <param name="normal">A Vector object that represents the plane that the triagles will have.Set it to null for 2d calculations.</param>
            <param name="TriangleAddedMethod">A method delegate that will be called for each calculated triangle.</param>
            <returns>The count of calculated triagles.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.TriangulateIndex(VectorDraw.Geometry.Vector)">
            <summary>
            Makes triangles from the collection's points.
            </summary>
            <param name="normal">A Vector object that represents the plane that the triagles will have.Set it to null for 2d calculations.</param>
            <returns>An array of zero based indexes that every 3 represents a triangle.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.Triangulate(VectorDraw.Geometry.Vector)">
            <summary>
            Makes triagles from the collection's points.
            </summary>
            <param name="normal">A Vector object that represents the plane that the triagles will have.Set it to null for 2d calculations.</param>
            <returns>The calculated triagles.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.TrigleStripToPolygon(VectorDraw.Geometry.gPoints)">
            <summary>
            Internally used. Convert the input collection that contains points in opengl triangle_strip order logic, to polygon logic.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the gPoints object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Geometry.gPoints.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the gPoints object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="P:VectorDraw.Geometry.gPoints.SegmentPoints">
            <summary>
            
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.gPoints.Count">
            <summary>
            Get the number of elements of the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.gPoints.Item(System.Int32)">
            <summary>
            Get/Set the object at a specified index of the collection.
            </summary>
            <param name="index">The index of the object.</param>
            <returns>The object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Geometry.gPoints.MethodApplyFlag">
            <summary>
            Defines how the methods of this object will be applied.
            Default value is <see cref="F:VectorDraw.Geometry.gPoints.MethodApplyFlags.None"/>
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.gPoints.MethodApplyFlags">
            <summary>
            Defines how the methods of this object will be applied.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.gPoints.MethodApplyFlags.None">
            <summary>
            All methods are work normally.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.gPoints.MethodApplyFlags.DisableRemoveEqualPoints">
            <summary>
            <see cref="M:VectorDraw.Geometry.gPoints.RemoveEqualPoints(System.Double)"/> and <see cref="M:VectorDraw.Geometry.gPoints.RemoveEqualPoints2d(System.Double)"/> are not apllied.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.gPoints.Triangulation">
            <summary>
            Represents the method that will handle a calculated triangle from <see cref="M:VectorDraw.Geometry.gPoints.Triangulate(VectorDraw.Geometry.Vector,VectorDraw.Geometry.gPoints.Triangulation)"/> method.
            </summary>
            <param name="p1">First point of calculated triangle.</param>
            <param name="p2">Second point of calculated triangle.</param>
            <param name="p3">Third point of calculated triangle.</param>
        </member>
        <member name="T:VectorDraw.Geometry.TrianglesRegions">
            <summary>
            A static class object used to calculate all the regions of a gTrianges collection each one contains all triangles belongs to the same plane.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.TrianglesRegions.getPlaneRegions(VectorDraw.Geometry.gTriangles,System.Double,VectorDraw.Professional.Utilities.ProgressMeter)">
            <summary>
            Internally used only.Use vdPolyface.ToPolylines  instead.
            Calculate all the regions of a gTrianges collection each one contains all triangles belongs to the same plane.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.TrianglesRegions.PlaneRegions">
            <summary>
            This is a collection of gPoints objects that belongs to the same plane.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.TrianglesRegions.PlaneRegions.#ctor">
            <summary>
            Initializes a new instance of the object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.TrianglesRegions.PlaneRegions.#ctor(VectorDraw.Generics.vdArray{VectorDraw.Geometry.gPoints},VectorDraw.Geometry.Vector)">
            <summary>
            Initializes a new instance of the object and adds the passed items to this collection.
            </summary>
            <param name="regions">A collection of regions that belongs to the same plane.</param>
            <param name="planeNormal">a Vector perpendicular to the plane that the passed regions belongs to.</param>
        </member>
        <member name="M:VectorDraw.Geometry.TrianglesRegions.PlaneRegions.AddItem(VectorDraw.Geometry.gPoints)">
            <summary>
            Adds an region of gPoints to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.TrianglesRegions.PlaneRegions.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.TrianglesRegions.PlaneRegions.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.TrianglesRegions.PlaneRegions.PlaneNormal">
            <summary>
            a Vector perpendicular to the plane that the items of the collection belongs to.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.TrianglesRegions.PlaneRegions.Item(System.Int32)">
            <summary>
            Get/Set the object at a specified index of the collection.
            </summary>
            <param name="index">The index of the object.</param>
            <returns>The object at the specified index.</returns>
        </member>
        <member name="P:VectorDraw.Geometry.TrianglesRegions.PlaneRegions.Count">
            <summary>
            Get the number of elements of the collection.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.VectorTypeConverter">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.VectorTypeConverter.getLunits(VectorDraw.Geometry.LUnits)">
            <summary>
            Internally used.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.VectorTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.VectorTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.VectorTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.VectorTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Internally used.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:VectorDraw.Geometry.Vector">
            <summary>
            Implements the Vector object.
            </summary>
        </member>
        <member name="F:VectorDraw.Geometry.Vector.v001">
            <summary>
            Initializes the object with a 0.0,0.0,1.0 vector.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.#ctor(System.Double)">
            <summary>
            Initializes the Vector object with a given direction angle starting from 0.0,0.0,0.0 point.
            </summary>
            <param name="directioAngle">A double representing the direction in radians.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.#ctor(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Initializes the Vector object with an origin and a target point.
            </summary>
            <param name="origin">The origin point.</param>
            <param name="target">The target point.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.#ctor(VectorDraw.Geometry.gPoint)">
            <summary>
            Initializes the Vector with a given gPoint.
            </summary>
            <param name="pt">A gPoint object from where the x,y,z values will be taken from.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes the object with the passed x,y,z values.
            </summary>
            <param name="x">x value of the object.</param>
            <param name="y">y value of the object.</param>
            <param name="z">z value of the object.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.#ctor(VectorDraw.Geometry.Vector)">
            <summary>
            Initializes the object with a passed Vector object.
            </summary>
            <param name="a">A vector object from which the x,y,z parameters will be taken from</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.#ctor">
            <summary>
            Initializes a 0.0,0.0,1.0 Vector object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.op_Division(VectorDraw.Geometry.Vector,System.Double)">
            <summary>
            Implements the / operator for a vector and a double value.
            </summary>
            <param name="p"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.op_Multiply(VectorDraw.Geometry.Vector,System.Double)">
            <summary>
            Implements the * operator between a Vector object and a double value.
            </summary>
            <param name="a"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.op_Addition(VectorDraw.Geometry.Vector,VectorDraw.Geometry.Vector)">
            <summary>
            Implements the + operator between two Vector objects.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.op_Subtraction(VectorDraw.Geometry.Vector,VectorDraw.Geometry.Vector)">
            <summary>
            Implements the - operator for two Vector objects.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.Cross(VectorDraw.Geometry.Vector)">
            <summary>
             Changes this Vector regarding the crossing operation with another Vector.
            </summary>
            <param name="other">A Vector object required for the operation.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.GreaterThan(VectorDraw.Geometry.Vector)">
            <summary>
            Checks the x,y,z values of this object if they are greater from another object's values.
            </summary>
            <param name="other">A Vector object to compare with this Vector.</param>
            <returns>True if any of the x,y,z values is greater that this Vector's values.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.lessThan(VectorDraw.Geometry.Vector)">
            <summary>
            Checks the x,y,z values of this object if they are less than another object's values.
            </summary>
            <param name="other">A Vector object to compare with this Vector.</param>
            <returns>True if any of the x,y,z values is less than this Vector's values.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.Equals(VectorDraw.Geometry.Vector)">
            <summary>
            Returns true if this vector has equal value to another vector.
            </summary>
            <param name="other">A Vector object to be checked if it is equal to this.</param>
            <returns>True if x,y,z values are equal.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.Equals(VectorDraw.Geometry.Vector,System.Double)">
            <summary>
            Returns true if this vector has equal value to another vector taken into consideration also the equality value.
            </summary>
            <param name="other">A vector object required.</param>
            <param name="equality">A double value representing the equality(for example 0.00001).</param>
            <returns>True if x,y,z values are equal.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.Equals(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Checks the x,y,z values of the Vector object to be equality equal with the passed parameters.
            </summary>
            <param name="x1">x value to be checked.</param>
            <param name="y1">y value to be checked.</param>
            <param name="z1">z value to be checked.</param>
            <param name="equality">A double value representing the equality(for example 0.00001).</param>
            <returns>True if all x,y,z values are equal to the passed parameters.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.Angle2DDirection">
            <summary>
            Returns the angle of the Vector in radians.
            </summary>
            <returns>Returns the angle of the Vector in radians.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.Dot(VectorDraw.Geometry.Vector)">
            <summary>
            Calculates the sum of the squared values(x,y,z) of two Vectors.
            </summary>
            <param name="other">A vector object required.</param>
            <returns>A double value representing the sum of the squared values(x,y,z) of two Vectors.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.SquaredLenght">
            <summary>
            Calculates the sum of the squared values(x,y,z) of this Vector.
            </summary>
            <returns>Returns a double value representing the sum of the squared values(x,y,z) of this Vector.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.isUnitLength">
            <summary>
            Checks if this Vector is unit length.
            </summary>
            <returns>True if this vector is unit length.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.Normalize">
            <summary>
            Convert this Vector to one unit length.
            </summary>
            <returns>False is the <see cref="P:VectorDraw.Geometry.Vector.Length"/> of this object is equal to zero(0.0) </returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.CrossProduct(VectorDraw.Geometry.Vector,VectorDraw.Geometry.Vector)">
            <summary>
            Calculates and returns a Vector produced by crossing two other Vectors.
            </summary>
            <param name="v1">First Vector used.</param>
            <param name="v2">Second Vector used.</param>
            <returns>A Vector as a crossing result from the passed two vectors.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.OverlapVertex(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Returns the one(1) base index of overlap vertex for a face that consists from four(4) points.
            </summary>
            <param name="p1">The first point of face.</param>
            <param name="p2">The second point of face.</param>
            <param name="p3">The third point of face.</param>
            <param name="p4">The fourth point of face.</param>
            <returns>The one(1) base index of overlap vertex for a face or 0 if no overlapping points.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.NormalVector(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the normal vector of a plane consisting of four given points.
            </summary>
            <param name="p1">First point of the plane.</param>
            <param name="p2">Second point of the plane.</param>
            <param name="p3">Third point of the plane.</param>
            <param name="p4">Fourth point of the plane.</param>
            <returns>The normal Vector of a plane.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.NormalVector(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector@)">
            <summary>
            Calculates the normal Vector of a plane consisted by three points.
            </summary>
            <param name="p1">First point of the plane.</param>
            <param name="p2">Second point of the plane.</param>
            <param name="p3">Third point of the plane.</param>
            <param name="ret">Reference to the calculated normal Vector.</param>
            <returns>True if the normal Vector succesfully calculated.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.NormalVector(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector@)">
            <summary>
            Calculates the normal Vector of a plane consisted by four points.
            </summary>
            <param name="p1">First point of the plane.</param>
            <param name="p2">Second point of the plane.</param>
            <param name="p3">Third point of the plane.</param>
            <param name="p4">Fourth point of the plane</param>
            <param name="ret">Reference to the calculated normal Vector.</param>
            <returns>True if the normal Vector succesfully calculated.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.NormalVector4(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculate four Vectors for each plane that create three of the four given points.
            </summary>
            <param name="p1">First point of the plane.</param>
            <param name="p2">Second point of the plane.</param>
            <param name="p3">Third point of the plane.</param>
            <param name="p4">Fourth point of the plane.</param>
            <returns>Returns an array of four Vectors.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.CalculateNormal3P(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.Vector@)">
            <summary>
            Calculates the Vector of a plane consisted of three given points.
            </summary>
            <param name="p1">First point of the plane.</param>
            <param name="p2">Second point of the plane.</param>
            <param name="p3">Third point of the plane.</param>
            <param name="v">The returned Vector.</param>
            <returns>True if the operation was succesfull.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.NormalVector(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the normal Vector of a plane consisted by three points.
            </summary>
            <param name="p1">First point of the plane.</param>
            <param name="p2">Second point of the plane.</param>
            <param name="p3">Third point of the plane.</param>
            <returns>The normal vector of a plane.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.CalculateFrom2Points(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculate this Vector from two given points.
            </summary>
            <param name="p1">First point needed.</param>
            <param name="p2">Second point needed.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.CalculateFrom3Points(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculate a Vector from three given points, whitch is the bisector of the p->p2 and p2->p3 vectors.
            </summary>
            <param name="p1">First point needed.</param>
            <param name="p2">Second point needed.</param>
            <param name="p3">Third point needed.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.CalculateExtrution(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates the Vector of a plane consisted of three given points.
            </summary>
            <param name="p1">First point needed.</param>
            <param name="p2">Second point needed.</param>
            <param name="p3">Third point needed.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.CreateExtrusion(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculates a Vector from two given points.
            </summary>
            <param name="p1">First point needed.</param>
            <param name="p2">Second point needed.</param>
            <returns>A Vector calculated from the given points.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.CreateExtrusion(VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint,VectorDraw.Geometry.gPoint)">
            <summary>
            Calculate a Vector from three given points, whitch is the bisector of the p->p2 and p2->p3 vectors.
            </summary>
            <param name="p1">First point needed.</param>
            <param name="p2">Second point needed.</param>
            <param name="p3">Third point needed.</param>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.Is001">
            <summary>
            Checks if this Vector is equal to a 0.0,0.0,1.0 Vector.
            </summary>
            <returns>True if this object is a 0.0,0.0,1.0 Vector object.</returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vector.Clone">
            <summary>
            Returns a new created Vector object as clone to this one.
            </summary>
            <returns>Returns a new created Vector object as clone to this one.</returns>
        </member>
        <member name="P:VectorDraw.Geometry.Vector.Length">
            <summary>
            The length of the Vector.
            </summary>
        </member>
        <member name="T:VectorDraw.Geometry.Vectors">
            <summary>
            This is a collection of Vector objects.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Vectors.#ctor">
            <summary>
            Initializes the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Vectors.#ctor(System.Int32)">
            <summary>
            Initializes the collection with a given capacity.
            </summary>
            <param name="capacity">An integer representing the preallocated memory size of the collection.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vectors.#ctor(VectorDraw.Geometry.Vector[])">
            <summary>
            Initializes a new instance of the object and adds the passed items at the end of this collection.
            </summary>
            <param name="items">An array of <see cref="T:VectorDraw.Geometry.Vector"/> objects.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vectors.Add(VectorDraw.Geometry.Vector)">
            <summary>
            Add a gPoint to the end of the collection.
            </summary>
            <param name="value">The object to add.</param>
        </member>
        <member name="M:VectorDraw.Geometry.Vectors.Add(System.Object)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Vectors.RemoveAll">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Vectors.GetEnumerator">
            <summary>
            Implements the "foreach" expression for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VectorDraw.Geometry.Vectors.ToString">
            <summary>
            Gets a System.String that represents the count of the Vectors Object.
            </summary>
        </member>
        <member name="M:VectorDraw.Geometry.Vectors.Serialize(VectorDraw.Serialize.Serializer)">
            <summary>
            This Function is called when saving the object to vdml format.
            </summary>
            <param name="serializer">The Serializer object.</param>
            <seealso cref="T:VectorDraw.Serialize.Serializer"/>
        </member>
        <member name="M:VectorDraw.Geometry.Vectors.DeSerialize(VectorDraw.Serialize.DeSerializer,System.String,System.Object)">
            <summary>
            This Function is called foreach field name of the object when opening in vdml format.
            </summary>
            <param name="deserializer">The DeSerializer object.</param>
            <param name="fieldname">The name of the property of the object.</param>
            <param name="value">the value of the property.</param>
            <returns>Returns False if the fieldname does not correspond to a property of the object.</returns>
            <seealso cref="T:VectorDraw.Serialize.DeSerializer"/>
        </member>
        <member name="P:VectorDraw.Geometry.Vectors.Count">
            <summary>
            Get the number of elements of the collection.
            </summary>
        </member>
        <member name="P:VectorDraw.Geometry.Vectors.Item(System.Int32)">
            <summary>
            Get/Set the object at a specified index of the collection.
            </summary>
            <param name="index">The index of the object.</param>
            <returns>The object at the specified index.</returns>
        </member>
    </members>
</doc>
